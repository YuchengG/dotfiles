This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: The register command,  Next: The upload command,  Up: Distutils commands

17.6.2.1 The `register' command
...............................

The distutils command `register' is used to submit your distribution’s
meta-data to an index server. It is invoked as follows:

    python setup.py register

Distutils will respond with the following prompt:

    running register
    We need to know who you are, so please choose either:
        1. use your existing login,
        2. register as a new user,
        3. have the server generate a new password for you (and email it to you), or
        4. quit
    Your selection [default 1]:

Note: if your username and password are saved locally, you will not see
this menu.  Also, refer to *Note The .pypirc file: 31ec. for how to
store your credentials in a `.pypirc' file.

If you have not registered with PyPI, then you will need to do so now.
You should choose option 2, and enter your details as required. Soon
after submitting your details, you will receive an email which will be
used to confirm your registration.

Once you are registered, you may choose option 1 from the menu. You
will be prompted for your PyPI username and password, and `register'
will then submit your meta-data to the index.

See *Note Additional command options: 31ee. for options to the
`register' command.


File: python.info,  Node: The upload command,  Next: Additional command options,  Prev: The register command,  Up: Distutils commands

17.6.2.2 The `upload' command
.............................

New in version 2.5.

The distutils command `upload' pushes the distribution files to PyPI.

The command is invoked immediately after building one or more
distribution files.  For example, the command

    python setup.py sdist bdist_wininst upload

will cause the source distribution and the Windows installer to be
uploaded to PyPI.  Note that these will be uploaded even if they are
built using an earlier invocation of `setup.py', but that only
distributions named on the command line for the invocation including
the `upload' command are uploaded.

If a `register' command was previously called in the same command, and
if the password was entered in the prompt, `upload' will reuse the
entered password.  This is useful if you do not want to store a
password in clear text in a `.pypirc' file.

You can use the `--sign' option to tell `upload' to sign each uploaded
file using GPG (GNU Privacy Guard).  The  `gpg' program must be
available for execution on the system `PATH'.  You can also specify
which key to use for signing using the `--identity=name' option.

See *Note Additional command options: 31ee. for additional options to
the `upload' command.


File: python.info,  Node: Additional command options,  Next: The pypirc file,  Prev: The upload command,  Up: Distutils commands

17.6.2.3 Additional command options
...................................

This section describes options common to both the `register' and
`upload' commands.

The `--repository' or `-r' option lets you specify a PyPI server
different from the default.  For example:

    python setup.py sdist bdist_wininst upload -r https://example.com/pypi

For convenience, a name can be used in place of the URL when the
`.pypirc' file is configured to do so.  For example:

    python setup.py register -r other

See *Note The .pypirc file: 31ec. for more information on defining
alternate servers.

The `--show-response' option displays the full response text from the
PyPI server, which is useful when debugging problems with registering
and uploading.


File: python.info,  Node: The pypirc file,  Prev: Additional command options,  Up: Distutils commands

17.6.2.4 The `.pypirc' file
...........................

The `register' and `upload' commands both check for the existence of a
`.pypirc' file at the location `$HOME/.pypirc'.  If this file exists,
the command uses the username, password, and repository URL configured
in the file.  The format of a `.pypirc' file is as follows:

    [distutils]
    index-servers =
        pypi

    [pypi]
    repository: <repository-url>
    username: <username>
    password: <password>

The `distutils' section defines an `index-servers' variable that lists
the name of all sections describing a repository.

Each section describing a repository defines three variables:

   -
    `repository', that defines the url of the PyPI server. Defaults to
          `https://www.python.org/pypi'.

   - `username', which is the registered username on the PyPI server.

   -
    `password', that will be used to authenticate. If omitted the user
          will be prompt to type it when needed.

If you want to define another server a new section can be created and
listed in the `index-servers' variable:

    [distutils]
    index-servers =
        pypi
        other

    [pypi]
    repository: <repository-url>
    username: <username>
    password: <password>

    [other]
    repository: https://example.com/pypi
    username: <username>
    password: <password>

This allows the `register' and `upload' commands to be called with the
`--repository' option as described in *Note Additional command options:
31ee.

Specifically, you might want to add the PyPI Test Repository(1) to your
`.pypirc' to facilitate testing before doing your first upload to
`PyPI' itself.

---------- Footnotes ----------

(1) https://wiki.python.org/moin/TestPyPI


File: python.info,  Node: PyPI package display,  Prev: Distutils commands,  Up: The Python Package Index PyPI

17.6.3 PyPI package display
---------------------------

The `long_description' field plays a special role at PyPI. It is used by
the server to display a home page for the registered package.

If you use the reStructuredText(1) syntax for this field, PyPI will
parse it and display an HTML output for the package home page.

The `long_description' field can be attached to a text file located in
the package:

    from distutils.core import setup

    with open('README.txt') as file:
        long_description = file.read()

    setup(name='Distutils',
          long_description=long_description)

In that case, `README.txt' is a regular reStructuredText text file
located in the root of the package besides `setup.py'.

To prevent registering broken reStructuredText content, you can use the
`rst2html' program that is provided by the `docutils' package and check
the `long_description' from the command line:

    $ python setup.py --long-description | rst2html.py > output.html

`docutils' will display a warning if there’s something wrong with your
syntax.  Because PyPI applies additional checks (e.g. by passing
`--no-raw' to `rst2html.py' in the command above), being able to run
the command above without warnings does not guarantee that PyPI will
convert the content successfully.

---------- Footnotes ----------

(1) http://docutils.sourceforge.net/rst.html


File: python.info,  Node: Examples<24>,  Next: Extending Distutils,  Prev: The Python Package Index PyPI,  Up: Distributing Python Modules Legacy version

17.7 Examples
=============

This chapter provides a number of basic examples to help get started
with distutils.  Additional information about using distutils can be
found in the Distutils Cookbook.

See also
........

Distutils Cookbook(1)
     Collection of recipes showing how to achieve more control over
     distutils.

* Menu:

* Pure Python distribution (by module): Pure Python distribution by module.
* Pure Python distribution (by package): Pure Python distribution by package.
* Single extension module::

---------- Footnotes ----------

(1) https://wiki.python.org/moin/Distutils/Cookbook


File: python.info,  Node: Pure Python distribution by module,  Next: Pure Python distribution by package,  Up: Examples<24>

17.7.1 Pure Python distribution (by module)
-------------------------------------------

If you’re just distributing a couple of modules, especially if they
don’t live in a particular package, you can specify them individually
using the `py_modules' option in the setup script.

In the simplest case, you’ll have two files to worry about: a setup
script and the single module you’re distributing, `foo.py' in this
example:

    <root>/
            setup.py
            foo.py

(In all diagrams in this section, `<root>' will refer to the
distribution root directory.)  A minimal setup script to describe this
situation would be:

    from distutils.core import setup
    setup(name='foo',
          version='1.0',
          py_modules=['foo'],
          )

Note that the name of the distribution is specified independently with
the `name' option, and there’s no rule that says it has to be the
same as the name of the sole module in the distribution (although
that’s probably a good convention to follow).  However, the
distribution name is used to generate filenames, so you should stick to
letters, digits, underscores, and hyphens.

Since `py_modules' is a list, you can of course specify multiple
modules, eg. if you’re distributing modules `foo' and `bar', your
setup might look like this:

    <root>/
            setup.py
            foo.py
            bar.py

and the setup script might be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          py_modules=['foo', 'bar'],
          )

You can put module source files into another directory, but if you have
enough modules to do that, it’s probably easier to specify modules by
package rather than listing them individually.


File: python.info,  Node: Pure Python distribution by package,  Next: Single extension module,  Prev: Pure Python distribution by module,  Up: Examples<24>

17.7.2 Pure Python distribution (by package)
--------------------------------------------

If you have more than a couple of modules to distribute, especially if
they are in multiple packages, it’s probably easier to specify whole
packages rather than individual modules.  This works even if your
modules are not in a package; you can just tell the Distutils to
process modules from the root package, and that works the same as any
other package (except that you don’t have to have an `__init__.py'
file).

The setup script from the last example could also be written as

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          packages=[''],
          )

(The empty string stands for the root package.)

If those two files are moved into a subdirectory, but remain in the root
package, e.g.:

    <root>/
            setup.py
            src/      foo.py
                      bar.py

then you would still specify the root package, but you have to tell the
Distutils where source files in the root package live:

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          package_dir={'': 'src'},
          packages=[''],
          )

More typically, though, you will want to distribute multiple modules in
the same package (or in sub-packages).  For example, if the `foo'  and
`bar' modules belong in package `foobar', one way to layout your source
tree is

    <root>/
            setup.py
            foobar/
                     __init__.py
                     foo.py
                     bar.py

This is in fact the default layout expected by the Distutils, and the
one that requires the least work to describe in your setup script:

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          packages=['foobar'],
          )

If you want to put modules in directories not named for their package,
then you need to use the `package_dir' option again.  For example, if
the `src' directory holds modules in the `foobar' package:

    <root>/
            setup.py
            src/
                     __init__.py
                     foo.py
                     bar.py

an appropriate setup script would be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          package_dir={'foobar': 'src'},
          packages=['foobar'],
          )

Or, you might put modules from your main package right in the
distribution root:

    <root>/
            setup.py
            __init__.py
            foo.py
            bar.py

in which case your setup script would be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          package_dir={'foobar': ''},
          packages=['foobar'],
          )

(The empty string also stands for the current directory.)

If you have sub-packages, they must be explicitly listed in `packages',
but any entries in `package_dir' automatically extend to sub-packages.
(In other words, the Distutils does `not' scan your source tree, trying
to figure out which directories correspond to Python packages by
looking for `__init__.py' files.)  Thus, if the default layout grows a
sub-package:

    <root>/
            setup.py
            foobar/
                     __init__.py
                     foo.py
                     bar.py
                     subfoo/
                               __init__.py
                               blah.py

then the corresponding setup script would be

    from distutils.core import setup
    setup(name='foobar',
          version='1.0',
          packages=['foobar', 'foobar.subfoo'],
          )


File: python.info,  Node: Single extension module,  Prev: Pure Python distribution by package,  Up: Examples<24>

17.7.3 Single extension module
------------------------------

Extension modules are specified using the `ext_modules' option.
`package_dir' has no effect on where extension source files are found;
it only affects the source for pure Python modules.  The simplest
case, a single extension module in a single C source file, is:

    <root>/
            setup.py
            foo.c

If the `foo' extension belongs in the root package, the setup script for
this could be

    from distutils.core import setup
    from distutils.extension import Extension
    setup(name='foobar',
          version='1.0',
          ext_modules=[Extension('foo', ['foo.c'])],
          )

If the extension actually belongs in a package, say `foopkg', then

With exactly the same source tree layout, this extension can be put in
the `foopkg' package simply by changing the name of the extension:

    from distutils.core import setup
    from distutils.extension import Extension
    setup(name='foobar',
          version='1.0',
          ext_modules=[Extension('foopkg.foo', ['foo.c'])],
          )


File: python.info,  Node: Extending Distutils,  Next: Command Reference,  Prev: Examples<24>,  Up: Distributing Python Modules Legacy version

17.8 Extending Distutils
========================

Distutils can be extended in various ways.  Most extensions take the
form of new commands or replacements for existing commands.  New
commands may be written to support new types of platform-specific
packaging, for example, while replacements for existing commands may be
made to modify details of how the command operates on a package.

Most extensions of the distutils are made within `setup.py' scripts that
want to modify existing commands; many simply add a few file extensions
that should be copied into packages in addition to `.py' files as a
convenience.

Most distutils command implementations are subclasses of the *Note
distutils.cmd.Command: 31ff. class.  New commands may directly inherit
from `Command', while replacements often derive from `Command'
indirectly, directly subclassing the command they are replacing.
Commands are required to derive from `Command'.

* Menu:

* Integrating new commands::
* Adding new distribution types::


File: python.info,  Node: Integrating new commands,  Next: Adding new distribution types,  Up: Extending Distutils

17.8.1 Integrating new commands
-------------------------------

There are different ways to integrate new command implementations into
distutils.  The most difficult is to lobby for the inclusion of the new
features in distutils itself, and wait for (and require) a version of
Python that provides that support.  This is really hard for many
reasons.

The most common, and possibly the most reasonable for most needs, is to
include the new implementations with your `setup.py' script, and cause
the *Note distutils.core.setup(): 31b7. function use them:

    from distutils.command.build_py import build_py as _build_py
    from distutils.core import setup

    class build_py(_build_py):
        """Specialized Python source builder."""

        # implement whatever needs to be different...

    setup(cmdclass={'build_py': build_py},
          ...)

This approach is most valuable if the new implementations must be used
to use a particular package, as everyone interested in the package will
need to have the new command implementation.

Beginning with Python 2.4, a third option is available, intended to
allow new commands to be added which can support existing `setup.py'
scripts without requiring modifications to the Python installation.
This is expected to allow third-party extensions to provide support for
additional packaging systems, but the commands can be used for anything
distutils commands can be used for.  A new configuration option,
`command_packages' (command-line option `--command-packages'), can be
used to specify additional packages to be searched for modules
implementing commands.  Like all distutils options, this can be
specified on the command line or in a configuration file.  This option
can only be set in the `[global]' section of a configuration file, or
before any commands on the command line.  If set in a configuration
file, it can be overridden from the command line; setting it to an
empty string on the command line causes the default to be used.  This
should never be set in a configuration file provided with a package.

This new option can be used to add any number of packages to the list of
packages searched for command implementations; multiple package names
should be separated by commas.  When not specified, the search is only
performed in the *Note distutils.command: 8a. package.  When `setup.py'
is run with the option `--command-packages distcmds,buildcmds',
however, the packages *Note distutils.command: 8a, `distcmds', and
`buildcmds' will be searched in that order.  New commands are expected
to be implemented in modules of the same name as the command by classes
sharing the same name.  Given the example command line option above,
the command `bdist_openpkg' could be implemented by the class
`distcmds.bdist_openpkg.bdist_openpkg' or
`buildcmds.bdist_openpkg.bdist_openpkg'.


File: python.info,  Node: Adding new distribution types,  Prev: Integrating new commands,  Up: Extending Distutils

17.8.2 Adding new distribution types
------------------------------------

Commands that create distributions (files in the `dist/' directory) need
to add `(command, filename)' pairs to `self.distribution.dist_files' so
that `upload' can upload it to PyPI.  The `filename' in the pair
contains no path information, only the name of the file itself.  In
dry-run mode, pairs should still be added to represent what would have
been created.


File: python.info,  Node: Command Reference,  Next: API Reference,  Prev: Extending Distutils,  Up: Distributing Python Modules Legacy version

17.9 Command Reference
======================

* Menu:

* Installing modules; the install command family: Installing modules the install command family.


File: python.info,  Node: Installing modules the install command family,  Up: Command Reference

17.9.1 Installing modules: the `install' command family
-------------------------------------------------------

The install command ensures that the build commands have been run and
then runs the subcommands `install_lib', `install_data' and
`install_scripts'.

* Menu:

* install_data::
* install_scripts::


File: python.info,  Node: install_data,  Next: install_scripts,  Up: Installing modules the install command family

17.9.1.1 `install_data'
.......................

This command installs all data files provided with the distribution.


File: python.info,  Node: install_scripts,  Prev: install_data,  Up: Installing modules the install command family

17.9.1.2 `install_scripts'
..........................

This command installs all (Python) scripts in the distribution.


File: python.info,  Node: API Reference,  Prev: Command Reference,  Up: Distributing Python Modules Legacy version

17.10 API Reference
===================

* Menu:

* distutils.core — Core Distutils functionality: distutils core — Core Distutils functionality.
* distutils.ccompiler — CCompiler base class: distutils ccompiler — CCompiler base class.
* distutils.unixccompiler — Unix C Compiler: distutils unixccompiler — Unix C Compiler.
* distutils.msvccompiler — Microsoft Compiler: distutils msvccompiler — Microsoft Compiler.
* distutils.bcppcompiler — Borland Compiler: distutils bcppcompiler — Borland Compiler.
* distutils.cygwincompiler — Cygwin Compiler: distutils cygwincompiler — Cygwin Compiler.
* distutils.emxccompiler — OS/2 EMX Compiler: distutils emxccompiler — OS/2 EMX Compiler.
* distutils.archive_util — Archiving utilities: distutils archive_util — Archiving utilities.
* distutils.dep_util — Dependency checking: distutils dep_util — Dependency checking.
* distutils.dir_util — Directory tree operations: distutils dir_util — Directory tree operations.
* distutils.file_util — Single file operations: distutils file_util — Single file operations.
* distutils.util — Miscellaneous other utility functions: distutils util — Miscellaneous other utility functions.
* distutils.dist — The Distribution class: distutils dist — The Distribution class.
* distutils.extension — The Extension class: distutils extension — The Extension class.
* distutils.debug — Distutils debug mode: distutils debug — Distutils debug mode.
* distutils.errors — Distutils exceptions: distutils errors — Distutils exceptions.
* distutils.fancy_getopt — Wrapper around the standard getopt module: distutils fancy_getopt — Wrapper around the standard getopt module.
* distutils.filelist — The FileList class: distutils filelist — The FileList class.
* distutils.log — Simple PEP 282-style logging: distutils log — Simple PEP 282-style logging.
* distutils.spawn — Spawn a sub-process: distutils spawn — Spawn a sub-process.
* distutils.sysconfig — System configuration information: distutils sysconfig — System configuration information.
* distutils.text_file — The TextFile class: distutils text_file — The TextFile class.
* distutils.version — Version number classes: distutils version — Version number classes.
* distutils.cmd — Abstract base class for Distutils commands: distutils cmd — Abstract base class for Distutils commands.
* Creating a new Distutils command::
* distutils.command — Individual Distutils commands: distutils command — Individual Distutils commands.
* distutils.command.bdist — Build a binary installer: distutils command bdist — Build a binary installer.
* distutils.command.bdist_packager — Abstract base class for packagers: distutils command bdist_packager — Abstract base class for packagers.
* distutils.command.bdist_dumb — Build a “dumb” installer: distutils command bdist_dumb — Build a “dumb” installer.
* distutils.command.bdist_msi — Build a Microsoft Installer binary package: distutils command bdist_msi — Build a Microsoft Installer binary package.
* distutils.command.bdist_rpm — Build a binary distribution as a Redhat RPM and SRPM: distutils command bdist_rpm — Build a binary distribution as a Redhat RPM and SRPM.
* distutils.command.bdist_wininst — Build a Windows installer: distutils command bdist_wininst — Build a Windows installer.
* distutils.command.sdist — Build a source distribution: distutils command sdist — Build a source distribution.
* distutils.command.build — Build all files of a package: distutils command build — Build all files of a package.
* distutils.command.build_clib — Build any C libraries in a package: distutils command build_clib — Build any C libraries in a package.
* distutils.command.build_ext — Build any extensions in a package: distutils command build_ext — Build any extensions in a package.
* distutils.command.build_py — Build the .py/.pyc files of a package: distutils command build_py — Build the py/ pyc files of a package.
* distutils.command.build_scripts — Build the scripts of a package: distutils command build_scripts — Build the scripts of a package.
* distutils.command.clean — Clean a package build area: distutils command clean — Clean a package build area.
* distutils.command.config — Perform package configuration: distutils command config — Perform package configuration.
* distutils.command.install — Install a package: distutils command install — Install a package.
* distutils.command.install_data — Install data files from a package: distutils command install_data — Install data files from a package.
* distutils.command.install_headers — Install C/C++ header files from a package: distutils command install_headers — Install C/C++ header files from a package.
* distutils.command.install_lib — Install library files from a package: distutils command install_lib — Install library files from a package.
* distutils.command.install_scripts — Install script files from a package: distutils command install_scripts — Install script files from a package.
* distutils.command.register — Register a module with the Python Package Index: distutils command register — Register a module with the Python Package Index.
* distutils.command.check — Check the meta-data of a package: distutils command check — Check the meta-data of a package.


File: python.info,  Node: distutils core — Core Distutils functionality,  Next: distutils ccompiler — CCompiler base class,  Up: API Reference

17.10.1 `distutils.core' — Core Distutils functionality
---------------------------------------------------------

The *Note distutils.core: a0. module is the only module that needs to
be installed to use the Distutils. It provides the *Note setup(): 31b7.
(which is called from the setup script). Indirectly provides the
`distutils.dist.Distribution' and *Note distutils.cmd.Command: 31ff.
class.

 -- Function: distutils.core.setup (arguments)
     The basic do-everything function that does most everything you
     could ever ask for from a Distutils method.

     The setup function takes a large number of arguments. These are
     laid out in the following table.

     argument name            value                                type
     -------------------------------------------------------------------------------------------------------------------------------- 
     `name'                   The name of the package              a string
     `version'                The version number of the package;   a string
                              see *Note distutils.version: b3.     
     `description'            A single line describing the package a string
     `long_description'       Longer description of the package    a string
     `author'                 The name of the package author       a string
     `author_email'           The email address of the package     a string
                              author                               
     `maintainer'             The name of the current maintainer,  a string
                              if different from the author. Note   
                              that if the maintainer is provided,  
                              distutils will use it as the author  
                              in `PKG-INFO'                        
     `maintainer_email'       The email address of the current     a string
                              maintainer, if different from the    
                              author                               
     `url'                    A URL for the package (homepage)     a string
     `download_url'           A URL to download the package        a string
     `packages'               A list of Python packages that       a list of strings
                              distutils will manipulate            
     `py_modules'             A list of Python modules that        a list of strings
                              distutils will manipulate            
     `scripts'                A list of standalone script files    a list of strings
                              to be built and installed            
     `ext_modules'            A list of Python extensions to be    a list of instances of *Note distutils.core.Extension: 31b0.
                              built                                
     `classifiers'            A list of categories for the package a list of strings; valid classifiers are listed on PyPI(1).
     `distclass'              the *Note Distribution: 320f.        a subclass of *Note distutils.core.Distribution: 320f.
                              class to use                         
     `script_name'            The name of the setup.py script -    a string
                              defaults to `sys.argv[0]'            
     `script_args'            Arguments to supply to the setup     a list of strings
                              script                               
     `options'                default options for the setup script a dictionary
     `license'                The license for the package          a string
     `keywords'               Descriptive meta-data, see PEP       a list of strings or a comma-separated string
                              314(2)                               
     `platforms'                                                   a list of strings or a comma-separated string
     `cmdclass'               A mapping of command names to *Note  a dictionary
                              Command: 3210. subclasses            
     `data_files'             A list of data files to install      a list
     `package_dir'            A mapping of package to directory    a dictionary
                              names                                


 -- Function: distutils.core.run_setup (script_name[, script_args=None,
          stop_after='run'])
     Run a setup script in a somewhat controlled environment, and
     return  the `distutils.dist.Distribution' instance that drives
     things.   This is useful if you need to find out the distribution
     meta-data  (passed as keyword args from `script' to *Note setup():
     31b7.), or  the contents of the config files or command-line.

     `script_name' is a file that will be run with *Note execfile():
     44f. `sys.argv[0]' will be replaced with `script' for the duration
     of the call.  `script_args' is a list of strings; if supplied,
     `sys.argv[1:]' will be replaced by `script_args' for the duration
     of the call.

     `stop_after' tells *Note setup(): 31b7. when to stop processing;
     possible  values:

     value               description
     ---------------------------------------------------------------------- 
     `init'              Stop after the *Note Distribution: 320f.
                         instance has been created  and populated with
                         the keyword arguments to *Note setup(): 31b7.
     `config'            Stop after config files have been parsed (and
                         their data stored in the *Note Distribution:
                         320f. instance)
     `commandline'       Stop after the command-line (`sys.argv[1:]' or
                         `script_args') have been parsed (and the data
                         stored in the *Note Distribution: 320f.
                         instance.)
     `run'               Stop after all commands have been run (the same
                         as  if *Note setup(): 31b7. had been called in
                         the usual way). This is the default value.


In addition, the *Note distutils.core: a0. module exposed a number of
classes that live elsewhere.

   * `Extension' from *Note distutils.extension: a8.

   * *Note Command: 31ff. from *Note distutils.cmd: 89.

   * `Distribution' from *Note distutils.dist: a5.

A short description of each of these follows, but see the relevant
module for the full reference.

 -- Class: distutils.core.Extension
     The Extension class describes a single C or C++ extension module
     in a setup script. It accepts the following keyword arguments in
     its constructor

     argument name                value                                type
     -------------------------------------------------------------------------------------------------- 
     `name'                       the full name of the extension,      a string
                                  including any packages — ie.       
                                  `not' a filename or pathname, but    
                                  Python dotted name                   
     `sources'                    list of source filenames, relative   a list of strings
                                  to the distribution root (where the  
                                  setup script lives), in Unix form    
                                  (slash- separated) for portability.  
                                  Source files may be C, C++, SWIG     
                                  (.i), platform-specific resource     
                                  files, or whatever else is           
                                  recognized by the `build_ext'        
                                  command as source for a Python       
                                  extension.                           
     `include_dirs'               list of directories to search for    a list of strings
                                  C/C++ header files (in Unix form     
                                  for portability)                     
     `define_macros'              list of macros to define; each       a list of tuples
                                  macro is defined using a 2-tuple     
                                  `(name, value)', where `value' is    
                                  either the string to define it to    
                                  or `None' to define it without a     
                                  particular value (equivalent of      
                                  `#define FOO' in source or `-DFOO'   
                                  on Unix C compiler command line)     
     `undef_macros'               list of macros to undefine           a list of strings
                                  explicitly                           
     `library_dirs'               list of directories to search for    a list of strings
                                  C/C++ libraries at link time         
     `libraries'                  list of library names (not           a list of strings
                                  filenames or paths) to link against  
     `runtime_library_dirs'       list of directories to search for    a list of strings
                                  C/C++ libraries at run time (for     
                                  shared extensions, this is when the  
                                  extension is loaded)                 
     `extra_objects'              list of extra files to link with     a list of strings
                                  (eg. object files not implied by     
                                  ‘sources’, static library that   
                                  must be explicitly specified, binary 
                                  resource files, etc.)                
     `extra_compile_args'         any extra platform- and              a list of strings
                                  compiler-specific information to     
                                  use when compiling the source files  
                                  in ‘sources’. For platforms and  
                                  compilers where a command line       
                                  makes sense, this is typically a     
                                  list of command-line arguments, but  
                                  for other platforms it could be      
                                  anything.                            
     `extra_link_args'            any extra platform- and              a list of strings
                                  compiler-specific information to     
                                  use when linking object files        
                                  together to create the extension     
                                  (or to create a new static Python    
                                  interpreter).  Similar               
                                  interpretation as for                
                                  ‘extra_compile_args’.            
     `export_symbols'             list of symbols to be exported from  a list of strings
                                  a shared extension. Not used on all  
                                  platforms, and not generally         
                                  necessary for Python extensions,     
                                  which typically export exactly one   
                                  symbol: `init' + extension_name.     
     `depends'                    list of files that the extension     a list of strings
                                  depends on                           
     `language'                   extension language (i.e.  `'c'',     a string
                                  `'c++'', `'objc''). Will be detected 
                                  from the source extensions if not    
                                  provided.                            


 -- Class: distutils.core.Distribution
     A *Note Distribution: 320f. describes how to build, install and
     package up a Python software package.

     See the *Note setup(): 31b7. function for a list of keyword
     arguments accepted  by the Distribution constructor. *Note
     setup(): 31b7. creates a Distribution instance.

 -- Class: distutils.core.Command
     A *Note Command: 3210. class (or rather, an instance of one of its
     subclasses) implement a single distutils command.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi?:action=list_classifiers

(2) https://www.python.org/dev/peps/pep-0314


File: python.info,  Node: distutils ccompiler — CCompiler base class,  Next: distutils unixccompiler — Unix C Compiler,  Prev: distutils core — Core Distutils functionality,  Up: API Reference

17.10.2 `distutils.ccompiler' — CCompiler base class
------------------------------------------------------

This module provides the abstract base class for the *Note CCompiler:
3213.  classes.  A *Note CCompiler: 3213. instance can be used for all
the compile  and link steps needed to build a single project. Methods
are provided to  set options for the compiler — macro definitions,
include directories,  link path, libraries and the like.

This module provides the following functions.

 -- Function: distutils.ccompiler.gen_lib_options (compiler,
          library_dirs, runtime_library_dirs, libraries)
     Generate linker options for searching library directories and
     linking with specific libraries.  `libraries' and `library_dirs'
     are, respectively, lists of library names (not filenames!) and
     search directories.  Returns a list of command-line options
     suitable for use with some compiler (depending on the two format
     strings passed in).

 -- Function: distutils.ccompiler.gen_preprocess_options (macros,
          include_dirs)
     Generate C pre-processor options (`-D', `-U', `-I') as used by at
     least two types of compilers: the typical Unix compiler and Visual
     C++. `macros' is the usual thing, a list of 1- or 2-tuples, where
     `(name,)' means undefine (`-U') macro `name', and `(name, value)'
     means define (`-D') macro `name' to `value'.  `include_dirs' is
     just a list of directory names to be added to the header file
     search path (`-I').  Returns a list of command-line options
     suitable for either Unix compilers or Visual C++.

 -- Function: distutils.ccompiler.get_default_compiler (osname,
          platform)
     Determine the default compiler to use for the given platform.

     `osname' should be one of the standard Python OS names (i.e. the
     ones returned by `os.name') and `platform' the common value
     returned by `sys.platform' for the platform in question.

     The default values are `os.name' and `sys.platform' in case the
     parameters are not given.

 -- Function: distutils.ccompiler.new_compiler (plat=None,
          compiler=None, verbose=0, dry_run=0, force=0)
     Factory function to generate an instance of some CCompiler
     subclass for the supplied platform/compiler combination. `plat'
     defaults to `os.name' (eg.  `'posix'', `'nt''), and `compiler'
     defaults to the default compiler for that platform. Currently only
     `'posix'' and `'nt'' are supported, and the default compilers are
     “traditional Unix interface” (`UnixCCompiler' class) and
     Visual C++ (`MSVCCompiler' class).  Note that it’s perfectly
     possible to ask for a Unix compiler object under Windows, and a
     Microsoft compiler object under Unix—if you supply a value for
     `compiler', `plat' is ignored.


 -- Function: distutils.ccompiler.show_compilers ()
     Print list of available compilers (used by the `--help-compiler'
     options to `build', `build_ext', `build_clib').

 -- Class: distutils.ccompiler.CCompiler ([verbose=0, dry_run=0,
          force=0])
     The abstract base class *Note CCompiler: 3213. defines the
     interface that  must be implemented by real compiler classes.  The
     class also has  some utility methods used by several compiler
     classes.

     The basic idea behind a compiler abstraction class is that each
     instance can be used for all the compile/link steps in building a
     single project.  Thus, attributes common to all of those compile
     and link steps — include directories, macros to define,
     libraries to link against, etc. — are attributes of the compiler
     instance.  To allow for variability in how individual files are
     treated, most of those attributes may be varied on a
     per-compilation or per-link basis.

     The constructor for each subclass creates an instance of the
     Compiler object.  Flags are `verbose' (show verbose output),
     `dry_run' (don’t actually execute the steps) and `force'
     (rebuild everything, regardless of dependencies). All of these
     flags default to `0' (off). Note that you probably don’t want to
     instantiate *Note CCompiler: 3213. or one of its subclasses
     directly - use the `distutils.CCompiler.new_compiler()' factory
     function instead.

     The following methods allow you to manually alter compiler options
     for  the instance of the Compiler class.

      -- Method: add_include_dir (dir)
          Add `dir' to the list of directories that will be searched
          for header files.  The compiler is instructed to search
          directories in the order in which they are supplied by
          successive calls to *Note add_include_dir(): 3219.

      -- Method: set_include_dirs (dirs)
          Set the list of directories that will be searched to `dirs'
          (a list of strings).  Overrides any preceding calls to *Note
          add_include_dir(): 3219.; subsequent calls to *Note
          add_include_dir(): 3219. add to the list passed to *Note
          set_include_dirs(): 321a.  This does not affect any list of
          standard include directories that the compiler may search by
          default.

      -- Method: add_library (libname)
          Add `libname' to the list of libraries that will be included
          in all links driven by this compiler object.  Note that
          `libname' should *not* be the name of a file containing a
          library, but the name of the library itself: the actual
          filename will be inferred by the linker, the compiler, or the
          compiler class (depending on the platform).

          The linker will be instructed to link against libraries in
          the order they were supplied to *Note add_library(): 321b.
          and/or *Note set_libraries(): 321c.  It is perfectly valid to
          duplicate library names; the linker will be instructed to
          link against libraries as many times as they are mentioned.

      -- Method: set_libraries (libnames)
          Set the list of libraries to be included in all links driven
          by this compiler object to `libnames' (a list of strings).
          This does not affect any standard system libraries that the
          linker may include by default.

      -- Method: add_library_dir (dir)
          Add `dir' to the list of directories that will be searched
          for libraries specified to *Note add_library(): 321b. and
          *Note set_libraries(): 321c.  The linker will be instructed
          to search for libraries in the order they are supplied to
          *Note add_library_dir(): 321d. and/or *Note
          set_library_dirs(): 321e.

      -- Method: set_library_dirs (dirs)
          Set the list of library search directories to `dirs' (a list
          of strings).  This does not affect any standard library
          search path that the linker may search by default.

      -- Method: add_runtime_library_dir (dir)
          Add `dir' to the list of directories that will be searched
          for shared libraries at runtime.

      -- Method: set_runtime_library_dirs (dirs)
          Set the list of directories to search for shared libraries at
          runtime to `dirs' (a list of strings).  This does not affect
          any standard search path that the runtime linker may search
          by default.

      -- Method: define_macro (name[, value=None])
          Define a preprocessor macro for all compilations driven by
          this compiler object.  The optional parameter `value' should
          be a string; if it is not supplied, then the macro will be
          defined without an explicit value and the exact outcome
          depends on the compiler used.


      -- Method: undefine_macro (name)
          Undefine a preprocessor macro for all compilations driven by
          this compiler object.  If the same macro is defined by *Note
          define_macro(): 3221. and undefined by *Note
          undefine_macro(): 3222. the last call takes precedence
          (including multiple redefinitions or undefinitions).  If the
          macro is redefined/undefined on a per-compilation basis (ie.
          in the call to *Note compile(): 1fb.), then that takes
          precedence.

      -- Method: add_link_object (object)
          Add `object' to the list of object files (or analogues, such
          as explicitly named library files or the output of
          “resource compilers”) to be included in every link driven
          by this compiler object.

      -- Method: set_link_objects (objects)
          Set the list of object files (or analogues) to be included in
          every link to `objects'.  This does not affect any standard
          object files that the linker may include by default (such as
          system libraries).

     The following methods implement methods for autodetection of
     compiler  options, providing some functionality similar to GNU
     `autoconf'.

      -- Method: detect_language (sources)
          Detect the language of a given file, or list of files. Uses
          the  instance attributes `language_map' (a dictionary), and
          `language_order' (a list) to do the job.

      -- Method: find_library_file (dirs, lib[, debug=0])
          Search the specified list of directories for a static or
          shared library file `lib' and return the full path to that
          file.  If `debug' is true, look for a debugging version (if
          that makes sense on the current platform).  Return `None' if
          `lib' wasn’t found in any of the specified directories.

      -- Method: has_function (funcname[, includes=None,
               include_dirs=None, libraries=None, library_dirs=None])
          Return a boolean indicating whether `funcname' is supported
          on the current platform.  The optional arguments can be used
          to augment the compilation environment by providing
          additional include files and paths and libraries and paths.

      -- Method: library_dir_option (dir)
          Return the compiler option to add `dir' to the list of
          directories searched for libraries.

      -- Method: library_option (lib)
          Return the compiler option to add `lib' to the list of
          libraries linked into the shared library or executable.

      -- Method: runtime_library_dir_option (dir)
          Return the compiler option to add `dir' to the list of
          directories searched for runtime libraries.

      -- Method: set_executables (**args)
          Define the executables (and options for them) that will be
          run to perform the various stages of compilation.  The exact
          set of executables that may be specified here depends on the
          compiler class (via the ‘executables’ class attribute),
          but most will have:

          attribute          description
          ------------------------------------------------------------------ 
          `compiler'         the C/C++ compiler
          `linker_so'        linker used to create shared objects and
                             libraries
          `linker_exe'       linker used to create binary executables
          `archiver'         static library creator

          On platforms with a command-line (Unix, DOS/Windows), each of
          these is a string that will be split into executable name and
          (optional) list of arguments.  (Splitting the string is done
          similarly to how Unix shells operate: words are delimited by
          spaces, but quotes and backslashes can override this.  See
          *Note distutils.util.split_quoted(): 322c.)

     The following methods invoke stages in the build process.

      -- Method: compile (sources[, output_dir=None, macros=None,
               include_dirs=None, debug=0, extra_preargs=None,
               extra_postargs=None, depends=None])
          Compile one or more source files. Generates object files
          (e.g.  transforms a `.c' file to a `.o' file.)

          `sources' must be a list of filenames, most likely C/C++
          files, but in reality anything that can be handled by a
          particular compiler and compiler class (eg.  `MSVCCompiler'
          can handle resource files in `sources').  Return a list of
          object filenames, one per source filename in `sources'.
          Depending on the implementation, not all source files will
          necessarily be compiled, but all corresponding object
          filenames will be returned.

          If `output_dir' is given, object files will be put under it,
          while retaining their original path component.  That is,
          `foo/bar.c' normally compiles to `foo/bar.o' (for a Unix
          implementation); if `output_dir' is `build', then it would
          compile to `build/foo/bar.o'.

          `macros', if given, must be a list of macro definitions.  A
          macro definition is either a `(name, value)' 2-tuple or a
          `(name,)' 1-tuple. The former defines a macro; if the value
          is `None', the macro is defined without an explicit value.
          The 1-tuple case undefines a macro.  Later
          definitions/redefinitions/undefinitions take precedence.

          `include_dirs', if given, must be a list of strings, the
          directories to add to the default include file search path
          for this compilation only.

          `debug' is a boolean; if true, the compiler will be
          instructed to output debug symbols in (or alongside) the
          object file(s).

          `extra_preargs' and `extra_postargs' are
          implementation-dependent. On platforms that have the notion
          of a command-line (e.g. Unix, DOS/Windows), they are most
          likely lists of strings: extra command-line arguments to
          prepend/append to the compiler command line.  On other
          platforms, consult the implementation class documentation.
          In any event, they are intended as an escape hatch for those
          occasions when the abstract compiler framework doesn’t cut
          the mustard.

          `depends', if given, is a list of filenames that all targets
          depend on.  If a source file is older than any file in
          depends, then the source file will be recompiled.  This
          supports dependency tracking, but only at a coarse
          granularity.

          Raises `CompileError' on failure.

      -- Method: create_static_lib (objects, output_libname[,
               output_dir=None, debug=0, target_lang=None])
          Link a bunch of stuff together to create a static library
          file. The “bunch of stuff” consists of the list of object
          files supplied as `objects', the extra object files supplied
          to *Note add_link_object(): 3223. and/or *Note
          set_link_objects(): 3224, the libraries supplied to *Note
          add_library(): 321b. and/or *Note set_libraries(): 321c, and
          the libraries supplied as `libraries' (if any).

          `output_libname' should be a library name, not a filename;
          the filename will be inferred from the library name.
          `output_dir' is the directory where the library file will be
          put.

          `debug' is a boolean; if true, debugging information will be
          included in the library (note that on most platforms, it is
          the compile step where this matters: the `debug' flag is
          included here just for consistency).

          `target_lang' is the target language for which the given
          objects are being compiled. This allows specific linkage time
          treatment of certain languages.

          Raises `LibError' on failure.

      -- Method: link (target_desc, objects, output_filename[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None,
               build_temp=None, target_lang=None])
          Link a bunch of stuff together to create an executable or
          shared library file.

          The “bunch of stuff” consists of the list of object files
          supplied as `objects'.  `output_filename' should be a
          filename.  If `output_dir' is supplied, `output_filename' is
          relative to it (i.e. `output_filename' can provide directory
          components if needed).

          `libraries' is a list of libraries to link against.  These
          are library names, not filenames, since they’re translated
          into filenames in a platform-specific way (eg. `foo' becomes
          `libfoo.a' on Unix and `foo.lib' on DOS/Windows).  However,
          they can include a directory component, which means the
          linker will look in that specific directory rather than
          searching all the normal locations.

          `library_dirs', if supplied, should be a list of directories
          to search for libraries that were specified as bare library
          names (ie. no directory component).  These are on top of the
          system default and those supplied to *Note add_library_dir():
          321d. and/or *Note set_library_dirs(): 321e.
          `runtime_library_dirs' is a list of directories that will be
          embedded into the shared library and used to search for other
          shared libraries that *it* depends on at run-time.  (This may
          only be relevant on Unix.)

          `export_symbols' is a list of symbols that the shared library
          will export.  (This appears to be relevant only on Windows.)

          `debug' is as for *Note compile(): 1fb. and *Note
          create_static_lib(): 322e,  with the slight distinction that
          it actually matters on most platforms (as opposed to *Note
          create_static_lib(): 322e, which includes a `debug' flag
          mostly for form’s sake).

          `extra_preargs' and `extra_postargs' are as for *Note
          compile(): 1fb.  (except of course that they supply
          command-line arguments for the particular linker being used).

          `target_lang' is the target language for which the given
          objects are being compiled. This allows specific linkage time
          treatment of certain languages.

          Raises `LinkError' on failure.

      -- Method: link_executable (objects, output_progname[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, debug=0, extra_preargs=None,
               extra_postargs=None, target_lang=None])
          Link an executable.  `output_progname' is the name of the
          file executable, while `objects' are a list of object
          filenames to link in. Other arguments  are as for the *Note
          link(): 322f. method.

      -- Method: link_shared_lib (objects, output_libname[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None,
               build_temp=None, target_lang=None])
          Link a shared library. `output_libname' is the name of the
          output  library, while `objects' is a list of object
          filenames to link in.  Other arguments are as for the *Note
          link(): 322f. method.

      -- Method: link_shared_object (objects, output_filename[,
               output_dir=None, libraries=None, library_dirs=None,
               runtime_library_dirs=None, export_symbols=None, debug=0,
               extra_preargs=None, extra_postargs=None,
               build_temp=None, target_lang=None])
          Link a shared object. `output_filename' is the name of the
          shared object that will be created, while `objects' is a list
          of object filenames  to link in.  Other arguments are as for
          the *Note link(): 322f. method.

      -- Method: preprocess (source[, output_file=None, macros=None,
               include_dirs=None, extra_preargs=None,
               extra_postargs=None])
          Preprocess a single C/C++ source file, named in `source'.
          Output will be written to file named `output_file', or
          `stdout' if `output_file' not supplied.  `macros' is a list
          of macro definitions as for *Note compile(): 1fb, which will
          augment the macros set with *Note define_macro(): 3221. and
          *Note undefine_macro(): 3222.  `include_dirs' is a list of
          directory names that will be added to the  default list, in
          the same way as *Note add_include_dir(): 3219.

          Raises `PreprocessError' on failure.

     The following utility methods are defined by the *Note CCompiler:
     3213. class, for use by the various concrete subclasses.

      -- Method: executable_filename (basename[, strip_dir=0,
               output_dir=''])
          Returns the filename of the executable for the given
          `basename'.  Typically for non-Windows platforms this is the
          same as the basename,  while Windows will get a `.exe' added.

      -- Method: library_filename (libname[, lib_type='static',
               strip_dir=0, output_dir=''])
          Returns the filename for the given library name on the
          current platform. On Unix a library with `lib_type' of
          `'static'' will typically  be of the form `liblibname.a',
          while a `lib_type' of `'dynamic''  will be of the form
          `liblibname.so'.

      -- Method: object_filenames (source_filenames[, strip_dir=0,
               output_dir=''])
          Returns the name of the object files for the given source
          files.  `source_filenames' should be a list of filenames.

      -- Method: shared_object_filename (basename[, strip_dir=0,
               output_dir=''])
          Returns the name of a shared object file for the given file
          name `basename'.

      -- Method: execute (func, args[, msg=None, level=1])
          Invokes *Note distutils.util.execute(): 3239. This method
          invokes a  Python function `func' with the given arguments
          `args', after  logging and taking into account the `dry_run'
          flag.

      -- Method: spawn (cmd)
          Invokes `distutils.util.spawn()'. This invokes an external
          process to run the given command.

      -- Method: mkpath (name[, mode=511])
          Invokes *Note distutils.dir_util.mkpath(): 323c. This creates
          a directory  and any missing ancestor directories.

      -- Method: move_file (src, dst)
          Invokes *Note distutils.file_util.move_file(): 323e. Renames
          `src' to  `dst'.

      -- Method: announce (msg[, level=1])
          Write a message using `distutils.log.debug()'.

      -- Method: warn (msg)
          Write a warning message `msg' to standard error.

      -- Method: debug_print (msg)
          If the `debug' flag is set on this *Note CCompiler: 3213.
          instance, print  `msg' to standard output, otherwise do
          nothing.


File: python.info,  Node: distutils unixccompiler — Unix C Compiler,  Next: distutils msvccompiler — Microsoft Compiler,  Prev: distutils ccompiler — CCompiler base class,  Up: API Reference

17.10.3 `distutils.unixccompiler' — Unix C Compiler
-----------------------------------------------------

This module provides the `UnixCCompiler' class, a subclass of
`CCompiler' that handles the typical Unix-style command-line  C
compiler:

   * macros defined with `-Dname[=value]'

   * macros undefined with `-Uname'

   * include search directories specified with `-Idir'

   * libraries specified with `-llib'

   * library search directories specified with `-Ldir'

   * compile handled by `cc' (or similar) executable with `-c' option:
     compiles `.c' to `.o'

   * link static library handled by `ar' command (possibly with
     `ranlib')

   * link shared library handled by `cc' `-shared'


File: python.info,  Node: distutils msvccompiler — Microsoft Compiler,  Next: distutils bcppcompiler — Borland Compiler,  Prev: distutils unixccompiler — Unix C Compiler,  Up: API Reference

17.10.4 `distutils.msvccompiler' — Microsoft Compiler
-------------------------------------------------------

This module provides `MSVCCompiler', an implementation of the abstract
`CCompiler' class for Microsoft Visual Studio. Typically, extension
modules need to be compiled with the same compiler that was used to
compile Python. For Python 2.3 and earlier, the compiler was Visual
Studio 6. For Python 2.4 and 2.5, the compiler is Visual Studio .NET
2003. The AMD64 and Itanium binaries are created using the Platform SDK.

`MSVCCompiler' will normally choose the right compiler, linker etc. on
its own. To override this choice, the environment variables
`DISTUTILS_USE_SDK' and `MSSdk' must be both set. `MSSdk' indicates
that the current environment has been setup by the SDK’s `SetEnv.Cmd'
script, or that the environment variables had been registered when the
SDK was installed; `DISTUTILS_USE_SDK' indicates that the distutils
user has made an explicit choice to override the compiler selection by
`MSVCCompiler'.


File: python.info,  Node: distutils bcppcompiler — Borland Compiler,  Next: distutils cygwincompiler — Cygwin Compiler,  Prev: distutils msvccompiler — Microsoft Compiler,  Up: API Reference

17.10.5 `distutils.bcppcompiler' — Borland Compiler
-----------------------------------------------------

This module provides `BorlandCCompiler', a subclass of the abstract
`CCompiler' class for the Borland C++ compiler.


File: python.info,  Node: distutils cygwincompiler — Cygwin Compiler,  Next: distutils emxccompiler — OS/2 EMX Compiler,  Prev: distutils bcppcompiler — Borland Compiler,  Up: API Reference

17.10.6 `distutils.cygwincompiler' — Cygwin Compiler
------------------------------------------------------

This module provides the `CygwinCCompiler' class, a subclass of
`UnixCCompiler' that handles the Cygwin port of the GNU C compiler to
Windows.  It also contains the Mingw32CCompiler class which handles the
mingw32 port of GCC (same as cygwin in no-cygwin mode).


File: python.info,  Node: distutils emxccompiler — OS/2 EMX Compiler,  Next: distutils archive_util — Archiving utilities,  Prev: distutils cygwincompiler — Cygwin Compiler,  Up: API Reference

17.10.7 `distutils.emxccompiler' — OS/2 EMX Compiler
------------------------------------------------------

This module provides the EMXCCompiler class, a subclass of
`UnixCCompiler' that handles the EMX port of the GNU C compiler to OS/2.


File: python.info,  Node: distutils archive_util — Archiving utilities,  Next: distutils dep_util — Dependency checking,  Prev: distutils emxccompiler — OS/2 EMX Compiler,  Up: API Reference

17.10.8 `distutils.archive_util' —  Archiving utilities
---------------------------------------------------------

This module provides a few functions for creating archive files, such as
tarballs or zipfiles.

 -- Function: distutils.archive_util.make_archive (base_name, format[,
          root_dir=None, base_dir=None, verbose=0, dry_run=0])
     Create an archive file (eg. `zip' or `tar').  `base_name'  is the
     name of the file to create, minus any format-specific extension;
     `format' is the archive format: one of `zip', `tar',  `ztar', or
     `gztar'. `root_dir' is a directory that will be the root directory
     of the archive; ie. we typically `chdir' into `root_dir' before
     creating the archive.  `base_dir' is the directory where we start
     archiving from; ie. `base_dir' will be the common prefix of all
     files and directories in the archive.  `root_dir' and `base_dir'
     both default to the current directory.  Returns the name of the
     archive file.

 -- Function: distutils.archive_util.make_tarball (base_name,
          base_dir[, compress='gzip', verbose=0, dry_run=0])
     ‘Create an (optional compressed) archive as a tar file from all
     files in and under `base_dir'. `compress' must be `'gzip'' (the
     default),  `'compress'', `'bzip2'', or `None'.  Both `tar' and the
     compression utility named by `compress' must be on the  default
     program search path, so this is probably Unix-specific.  The
     output tar file will be named `base_dir.tar', possibly plus the
     appropriate compression extension (`.gz', `.bz2' or `.Z').  Return
     the output filename.

 -- Function: distutils.archive_util.make_zipfile (base_name,
          base_dir[, verbose=0, dry_run=0])
     Create a zip file from all files in and under `base_dir'.  The
     output zip file will be named `base_name' + `.zip'.  Uses either
     the  *Note zipfile: 1ab. Python module (if available) or the
     InfoZIP `zip'  utility (if installed and found on the default
     search path).  If neither  tool is available, raises
     `DistutilsExecError'.   Returns the name of the output zip file.


File: python.info,  Node: distutils dep_util — Dependency checking,  Next: distutils dir_util — Directory tree operations,  Prev: distutils archive_util — Archiving utilities,  Up: API Reference

17.10.9 `distutils.dep_util' — Dependency checking
----------------------------------------------------

This module provides functions for performing simple, timestamp-based
dependency of files and groups of files; also, functions based entirely
on such timestamp dependency analysis.

 -- Function: distutils.dep_util.newer (source, target)
     Return true if `source' exists and is more recently modified than
     `target', or if `source' exists and `target' doesn’t. Return
     false if both exist and `target' is the same age or newer  than
     `source'. Raise `DistutilsFileError' if `source' does not exist.

 -- Function: distutils.dep_util.newer_pairwise (sources, targets)
     Walk two filename lists in parallel, testing if each source is
     newer than its corresponding target.  Return a pair of lists
     (`sources', `targets') where source is newer than target,
     according to the semantics of *Note newer(): 324c.


 -- Function: distutils.dep_util.newer_group (sources, target[,
          missing='error'])
     Return true if `target' is out-of-date with respect to any file
     listed in `sources'  In other words, if `target' exists and is
     newer than every file in `sources', return false; otherwise return
     true. `missing' controls what we do when a source file is missing;
     the default (`'error'') is to blow up with an *Note OSError: 231.
     from  inside *Note os.stat(): 3de.; if it is `'ignore'', we
     silently drop any missing source files; if it is `'newer'', any
     missing source files make us assume that `target' is out-of-date
     (this is handy in “dry-run” mode: it’ll make you pretend to
     carry out commands that wouldn’t work because inputs are
     missing, but that doesn’t matter because you’re not actually
     going to run the commands).


File: python.info,  Node: distutils dir_util — Directory tree operations,  Next: distutils file_util — Single file operations,  Prev: distutils dep_util — Dependency checking,  Up: API Reference

17.10.10 `distutils.dir_util' — Directory tree operations
-----------------------------------------------------------

This module provides functions for operating on directories and trees of
directories.

 -- Function: distutils.dir_util.mkpath (name[, mode=0777, verbose=0,
          dry_run=0])
     Create a directory and any missing ancestor directories.  If the
     directory already exists (or if `name' is the empty string, which
     means the current directory, which of course exists), then do
     nothing.  Raise `DistutilsFileError' if unable to create some
     directory along the way (eg.  some sub-path exists, but is a file
     rather than a directory).  If `verbose' is true, print a one-line
     summary of each mkdir to stdout.  Return the list of directories
     actually created.

 -- Function: distutils.dir_util.create_tree (base_dir, files[,
          mode=0777, verbose=0, dry_run=0])
     Create all the empty directories under `base_dir' needed to put
     `files' there.  `base_dir' is just the name of a directory which
     doesn’t necessarily exist yet; `files' is a list of filenames to
     be interpreted relative to `base_dir'.  `base_dir' + the directory
     portion of every file in `files' will be created if it doesn’t
     already exist.  `mode', `verbose' and `dry_run' flags  are as for
     *Note mkpath(): 323c.

 -- Function: distutils.dir_util.copy_tree (src, dst[, preserve_mode=1,
          preserve_times=1, preserve_symlinks=0, update=0, verbose=0,
          dry_run=0])
     Copy an entire directory tree `src' to a new location `dst'.  Both
     `src' and `dst' must be directory names.  If `src' is not a
     directory, raise `DistutilsFileError'.  If `dst' does  not exist,
     it is created with *Note mkpath(): 323c.  The end result of the
     copy is that every file in `src' is copied to `dst', and
     directories under `src' are recursively copied to `dst'.  Return
     the list of files that were copied or might have been copied,
     using their output name. The return value is unaffected by
     `update' or `dry_run': it is simply the list of all files under
     `src', with the names changed to be under `dst'.

     `preserve_mode' and `preserve_times' are the same as for *Note
     distutils.file_util.copy_file(): 3252.; note that they only apply
     to regular files, not to directories.  If `preserve_symlinks' is
     true, symlinks will be copied as symlinks (on platforms that
     support them!); otherwise (the default), the destination of the
     symlink will be copied.  `update' and `verbose' are the same as
     for `copy_file()'.

     Files in `src' that begin with `.nfs' are skipped (more
     information on these files is available in answer D2 of the NFS
     FAQ page(1).

     Changed in version 2.7.4: NFS files are ignored.


 -- Function: distutils.dir_util.remove_tree (directory[, verbose=0,
          dry_run=0])
     Recursively remove `directory' and all files and directories
     underneath it. Any errors are ignored (apart from being reported
     to `sys.stdout' if `verbose' is true).

---------- Footnotes ----------

(1) http://nfs.sourceforge.net/#section_d


File: python.info,  Node: distutils file_util — Single file operations,  Next: distutils util — Miscellaneous other utility functions,  Prev: distutils dir_util — Directory tree operations,  Up: API Reference

17.10.11 `distutils.file_util' — Single file operations
---------------------------------------------------------

This module contains some utility functions for operating on individual
files.

 -- Function: distutils.file_util.copy_file (src, dst[,
          preserve_mode=1, preserve_times=1, update=0, link=None,
          verbose=0, dry_run=0])
     Copy file `src' to `dst'. If `dst' is a directory, then `src' is
     copied there with the same name; otherwise, it must be a filename.
     (If the file exists, it will be ruthlessly clobbered.) If
     `preserve_mode' is true (the default), the file’s mode (type and
     permission bits, or whatever is analogous on the current platform)
     is copied. If `preserve_times' is true (the default), the
     last-modified and last-access times are copied as well. If
     `update' is true, `src' will only be copied if `dst' does not
     exist, or if `dst' does exist but is older than `src'.

     `link' allows you to make hard links (using *Note os.link():
     117a.) or symbolic links (using *Note os.symlink(): 118a.) instead
     of copying: set it to `'hard'' or `'sym''; if it is `None' (the
     default), files are copied. Don’t set `link' on systems that
     don’t support it: *Note copy_file(): 3252. doesn’t check if
     hard or symbolic linking is available.  It uses
     `_copy_file_contents()' to copy file contents.

     Return a tuple `(dest_name, copied)': `dest_name' is the actual
     name of the output file, and `copied' is true if the file was
     copied  (or would have been copied, if `dry_run' true).


 -- Function: distutils.file_util.move_file (src, dst[, verbose,
          dry_run])
     Move file `src' to `dst'. If `dst' is a directory, the file will
     be moved into it with the same name; otherwise, `src' is just
     renamed to `dst'.  Returns the new full name of the file.

          Warning: Handles cross-device moves on Unix using *Note
          copy_file(): 3252.  What about other systems?

 -- Function: distutils.file_util.write_file (filename, contents)
     Create a file called `filename' and write `contents' (a sequence
     of strings without line terminators) to it.


File: python.info,  Node: distutils util — Miscellaneous other utility functions,  Next: distutils dist — The Distribution class,  Prev: distutils file_util — Single file operations,  Up: API Reference

17.10.12 `distutils.util' — Miscellaneous other utility functions
-------------------------------------------------------------------

This module contains other assorted bits and pieces that don’t fit
into  any other utility module.

 -- Function: distutils.util.get_platform ()
     Return a string that identifies the current platform.  This is
     used mainly to distinguish platform-specific build directories and
     platform-specific built distributions.  Typically includes the OS
     name and version and the architecture (as supplied by
     ‘os.uname()’), although the exact information included depends
     on the OS; eg. for IRIX the architecture isn’t particularly
     important (IRIX only runs on SGI hardware), but for Linux the
     kernel version isn’t particularly important.

     Examples of returned values:

        * `linux-i586'

        * `linux-alpha'

        * `solaris-2.6-sun4u'

        * `irix-5.3'

        * `irix64-6.2'

     For non-POSIX platforms, currently just returns `sys.platform'.

     For Mac OS X systems the OS version reflects the minimal version
     on which binaries will run (that is, the value of
     `MACOSX_DEPLOYMENT_TARGET' during the build of Python), not the OS
     version of the current system.

     For universal binary builds on Mac OS X the architecture value
     reflects the universal binary status instead of the architecture
     of the current processor. For 32-bit universal binaries the
     architecture is `fat', for 64-bit universal binaries the
     architecture is `fat64', and for 4-way universal binaries the
     architecture is `universal'. Starting from Python 2.7 and Python
     3.2 the architecture `fat3' is used for a 3-way universal build
     (ppc, i386, x86_64) and `intel' is used for a universal build with
     the i386 and x86_64 architectures

     Examples of returned values on Mac OS X:

        * `macosx-10.3-ppc'

        * `macosx-10.3-fat'

        * `macosx-10.5-universal'

        * `macosx-10.6-intel'

 -- Function: distutils.util.convert_path (pathname)
     Return ‘pathname’ as a name that will work on the native
     filesystem, i.e. split it on ‘/’ and put it back together
     again using the current directory separator.  Needed because
     filenames in the setup script are always supplied in Unix style,
     and have to be converted to the local convention before we can
     actually use them in the filesystem.  Raises *Note ValueError:
     236. on non-Unix-ish systems if `pathname' either  starts or ends
     with a slash.

 -- Function: distutils.util.change_root (new_root, pathname)
     Return `pathname' with `new_root' prepended.  If `pathname' is
     relative, this is equivalent to `os.path.join(new_root,pathname)'
     Otherwise, it requires making `pathname' relative and then joining
     the two, which is tricky on DOS/Windows.

 -- Function: distutils.util.check_environ ()
     Ensure that ‘os.environ’ has all the environment variables we
     guarantee that users can use in config files, command-line
     options, etc.  Currently this includes:

        * `HOME' - user’s home directory (Unix only)

        * `PLAT' - description of the current platform, including
          hardware and OS (see *Note get_platform(): 3257.)

 -- Function: distutils.util.subst_vars (s, local_vars)
     Perform shell/Perl-style variable substitution on `s'.  Every
     occurrence of `$' followed by a name is considered a variable, and
     variable is substituted by the value found in the `local_vars'
     dictionary, or in `os.environ' if it’s not in `local_vars'.
     `os.environ' is first checked/augmented to guarantee that it
     contains certain values: see *Note check_environ(): 325a.  Raise
     *Note ValueError: 236.  for any variables not found in either
     `local_vars' or `os.environ'.

     Note that this is not a fully-fledged string interpolation
     function. A valid `$variable' can consist only of upper and lower
     case letters, numbers and an underscore. No { } or ( ) style
     quoting is available.

 -- Function: distutils.util.split_quoted (s)
     Split a string up according to Unix shell-like rules for quotes
     and backslashes.  In short: words are delimited by spaces, as long
     as those spaces are not escaped by a backslash, or inside a quoted
     string. Single and double quotes are equivalent, and the quote
     characters can be backslash-escaped.  The backslash is stripped
     from any two-character escape sequence, leaving only the escaped
     character.  The quote characters are stripped from any quoted
     string.  Returns a list of words.


 -- Function: distutils.util.execute (func, args[, msg=None, verbose=0,
          dry_run=0])
     Perform some action that affects the outside world (for instance,
     writing to the filesystem).  Such actions are special because they
     are disabled by the `dry_run' flag.  This method takes  care of
     all that bureaucracy for you; all you have to do is supply the
     function to call and an argument tuple for it (to embody the
     “external action” being performed), and an optional message to
     print.

 -- Function: distutils.util.strtobool (val)
     Convert a string representation of truth to true (1) or false (0).

     True values are `y', `yes', `t', `true', `on'  and `1'; false
     values are `n', `no', `f', `false',  `off' and `0'.  Raises *Note
     ValueError: 236. if `val'  is anything else.

 -- Function: distutils.util.byte_compile (py_files[, optimize=0,
          force=0, prefix=None, base_dir=None, verbose=1, dry_run=0,
          direct=None])
     Byte-compile a collection of Python source files to either `.pyc'
     or `.pyo' files in the same directory.  `py_files' is a list of
     files to compile; any files that don’t end in `.py' are silently
     skipped.  `optimize' must be one of the following:

        * `0' - don’t optimize (generate `.pyc')

        * `1' - normal optimization (like `python -O')

        * `2' - extra optimization (like `python -OO')

     If `force' is true, all files are recompiled regardless of
     timestamps.

     The source filename encoded in each *Note bytecode: 59e. file
     defaults to the filenames listed in `py_files'; you can modify
     these with `prefix' and `basedir'.  `prefix' is a string that will
     be stripped off of each source filename, and `base_dir' is a
     directory name that will be prepended (after `prefix' is
     stripped).  You can supply either or both (or neither) of `prefix'
     and `base_dir', as you wish.

     If `dry_run' is true, doesn’t actually do anything that would
     affect the filesystem.

     Byte-compilation is either done directly in this interpreter
     process with the standard *Note py_compile: 13e. module, or
     indirectly by writing a temporary script and executing it.
     Normally, you should let *Note byte_compile(): 325d. figure out to
     use direct compilation or not (see the source for details).  The
     `direct' flag is used by the script generated in indirect mode;
     unless you know what you’re doing, leave it set to `None'.

 -- Function: distutils.util.rfc822_escape (header)
     Return a version of `header' escaped for inclusion in an RFC
     822(1) header, by ensuring there are 8 spaces space after each
     newline. Note that it does no other modification of the string.


---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: distutils dist — The Distribution class,  Next: distutils extension — The Extension class,  Prev: distutils util — Miscellaneous other utility functions,  Up: API Reference

17.10.13 `distutils.dist' — The Distribution class
----------------------------------------------------

This module provides the *Note Distribution: 320f. class, which
represents the module distribution being built/installed/distributed.


File: python.info,  Node: distutils extension — The Extension class,  Next: distutils debug — Distutils debug mode,  Prev: distutils dist — The Distribution class,  Up: API Reference

17.10.14 `distutils.extension' — The Extension class
------------------------------------------------------

This module provides the `Extension' class, used to describe C/C++
extension modules in setup scripts.


File: python.info,  Node: distutils debug — Distutils debug mode,  Next: distutils errors — Distutils exceptions,  Prev: distutils extension — The Extension class,  Up: API Reference

17.10.15 `distutils.debug' — Distutils debug mode
---------------------------------------------------

This module provides the DEBUG flag.


File: python.info,  Node: distutils errors — Distutils exceptions,  Next: distutils fancy_getopt — Wrapper around the standard getopt module,  Prev: distutils debug — Distutils debug mode,  Up: API Reference

17.10.16 `distutils.errors' — Distutils exceptions
----------------------------------------------------

Provides exceptions used by the Distutils modules.  Note that Distutils
modules may raise standard exceptions; in particular, SystemExit is
usually raised for errors that are obviously the end-user’s fault
(eg. bad command-line arguments).

This module is safe to use in `from ... import *' mode; it only exports
symbols whose names start with `Distutils' and end with `Error'.


File: python.info,  Node: distutils fancy_getopt — Wrapper around the standard getopt module,  Next: distutils filelist — The FileList class,  Prev: distutils errors — Distutils exceptions,  Up: API Reference

17.10.17 `distutils.fancy_getopt' — Wrapper around the standard getopt module
-------------------------------------------------------------------------------

This module provides a wrapper around the standard *Note getopt: df.
module that provides the following additional features:

   * short and long options are tied together

   * options have help strings, so *Note fancy_getopt(): 3264. could
     potentially  create a complete usage summary

   * options set attributes of a passed-in object

   * boolean options can have “negative aliases” — eg. if
     `--quiet' is the “negative alias” of `--verbose', then
     `--quiet' on the command line sets `verbose' to false.

 -- Function: distutils.fancy_getopt.fancy_getopt (options,
          negative_opt, object, args)
     Wrapper function. `options' is a list of `(long_option,
     short_option, help_string)' 3-tuples as described in the
     constructor for *Note FancyGetopt: 3265. `negative_opt' should be
     a dictionary mapping option names to option names, both the key
     and value should be in the `options' list.  `object' is an object
     which will be used to store values (see the *Note getopt(): df.
     method of the *Note FancyGetopt: 3265. class). `args' is the
     argument list. Will use `sys.argv[1:]' if you  pass `None' as
     `args'.

 -- Function: distutils.fancy_getopt.wrap_text (text, width)
     Wraps `text' to less than `width' wide.

 -- Class: distutils.fancy_getopt.FancyGetopt ([option_table=None])
     The option_table is a list of 3-tuples: `(long_option,
     short_option, help_string)'

     If an option takes an argument, its `long_option' should have
     `'='' appended; `short_option' should just be a single character,
     no `':'' in any case.  `short_option' should be `None' if a
     `long_option'  doesn’t have a corresponding `short_option'. All
     option tuples must have long options.

The *Note FancyGetopt: 3265. class provides the following methods:

 -- Method: FancyGetopt.getopt ([args=None, object=None])
     Parse command-line options in args. Store as attributes on
     `object'.

     If `args' is `None' or not supplied, uses `sys.argv[1:]'.  If
     `object' is `None' or not supplied, creates a new `OptionDummy'
     instance, stores option values there, and returns a tuple `(args,
     object)'.  If `object' is supplied, it is modified in place and
     *Note getopt(): df. just returns `args'; in both cases, the
     returned `args' is a modified copy of the passed-in `args' list,
     which is left untouched.


 -- Method: FancyGetopt.get_option_order ()
     Returns the list of `(option, value)' tuples processed by the
     previous run of *Note getopt(): df.  Raises *Note RuntimeError:
     3b3. if *Note getopt(): df. hasn’t been called yet.

 -- Method: FancyGetopt.generate_help ([header=None])
     Generate help text (a list of strings, one per suggested line of
     output) from the option table for this *Note FancyGetopt: 3265.
     object.

     If supplied, prints the supplied `header' at the top of the help.


File: python.info,  Node: distutils filelist — The FileList class,  Next: distutils log — Simple PEP 282-style logging,  Prev: distutils fancy_getopt — Wrapper around the standard getopt module,  Up: API Reference

17.10.18 `distutils.filelist' — The FileList class
----------------------------------------------------

This module provides the `FileList' class, used for poking about the
filesystem and building lists of files.


File: python.info,  Node: distutils log — Simple PEP 282-style logging,  Next: distutils spawn — Spawn a sub-process,  Prev: distutils filelist — The FileList class,  Up: API Reference

17.10.19 `distutils.log' — Simple PEP 282-style logging
---------------------------------------------------------


File: python.info,  Node: distutils spawn — Spawn a sub-process,  Next: distutils sysconfig — System configuration information,  Prev: distutils log — Simple PEP 282-style logging,  Up: API Reference

17.10.20 `distutils.spawn' — Spawn a sub-process
--------------------------------------------------

This module provides the `spawn()' function, a front-end to  various
platform-specific functions for launching another program in a
sub-process.  Also provides `find_executable()' to search the path for
a given executable name.


File: python.info,  Node: distutils sysconfig — System configuration information,  Next: distutils text_file — The TextFile class,  Prev: distutils spawn — Spawn a sub-process,  Up: API Reference

17.10.21 `distutils.sysconfig' — System configuration information
-------------------------------------------------------------------

The *Note distutils.sysconfig: af. module provides access to Python’s
low-level configuration information.  The specific configuration
variables available depend heavily on the platform and configuration.
The specific variables depend on the build process for the specific
version of Python being run; the variables are those found in the
`Makefile' and configuration header that are installed with Python on
Unix systems.  The configuration header is called `pyconfig.h' for
Python versions starting with 2.2, and `config.h' for earlier versions
of Python.

Some additional functions are provided which perform some useful
manipulations for other parts of the *Note distutils: 85. package.

 -- Data: distutils.sysconfig.PREFIX
     The result of `os.path.normpath(sys.prefix)'.

 -- Data: distutils.sysconfig.EXEC_PREFIX
     The result of `os.path.normpath(sys.exec_prefix)'.

 -- Function: distutils.sysconfig.get_config_var (name)
     Return the value of a single variable.  This is equivalent to
     `get_config_vars().get(name)'.

 -- Function: distutils.sysconfig.get_config_vars (...)
     Return a set of variable definitions.  If there are no arguments,
     this returns a dictionary mapping names of configuration variables
     to values.  If arguments are provided, they should be strings, and
     the return value will be a sequence giving the associated values.
     If a given name does not have a corresponding value, `None' will
     be included for that variable.

 -- Function: distutils.sysconfig.get_config_h_filename ()
     Return the full path name of the configuration header.  For Unix,
     this will be the header generated by the `configure' script; for
     other platforms the header will have been supplied directly by the
     Python source distribution.  The file is a platform-specific text
     file.

 -- Function: distutils.sysconfig.get_makefile_filename ()
     Return the full path name of the `Makefile' used to build Python.
     For Unix, this will be a file generated by the `configure' script;
     the meaning for other platforms will vary.  The file is a
     platform-specific text file, if it exists. This function is only
     useful on POSIX platforms.

 -- Function: distutils.sysconfig.get_python_inc ([plat_specific[,
          prefix]])
     Return the directory for either the general or platform-dependent
     C include files.  If `plat_specific' is true, the
     platform-dependent include directory is returned; if false or
     omitted, the platform-independent directory is returned.  If
     `prefix' is given, it is used as either the prefix instead of
     *Note PREFIX: 326e, or as the exec-prefix instead of *Note
     EXEC_PREFIX: 326f. if `plat_specific' is true.

 -- Function: distutils.sysconfig.get_python_lib ([plat_specific[,
          standard_lib[, prefix]]])
     Return the directory for either the general or platform-dependent
     library installation.  If `plat_specific' is true, the
     platform-dependent include directory is returned; if false or
     omitted, the platform-independent directory is returned.  If
     `prefix' is given, it is used as either the prefix instead of
     *Note PREFIX: 326e, or as the exec-prefix instead of *Note
     EXEC_PREFIX: 326f. if `plat_specific' is true.  If `standard_lib'
     is true, the directory for the standard library is returned rather
     than the directory for the installation of third-party extensions.

The following function is only intended for use within the *Note
distutils: 85.  package.

 -- Function: distutils.sysconfig.customize_compiler (compiler)
     Do any platform-specific customization of a *Note
     distutils.ccompiler.CCompiler: 3213. instance.

     This function is only needed on Unix at this time, but should be
     called consistently to support forward-compatibility.  It inserts
     the information that varies across Unix flavors and is stored in
     Python’s `Makefile'.  This information includes the selected
     compiler, compiler and linker options, and the extension used by
     the linker for shared objects.

This function is even more special-purpose, and should only be used from
Python’s own build procedures.

 -- Function: distutils.sysconfig.set_python_build ()
     Inform the *Note distutils.sysconfig: af. module that it is being
     used as part of the build process for Python.  This changes a lot
     of relative locations for files, allowing them to be located in
     the build area rather than in an installed Python.


File: python.info,  Node: distutils text_file — The TextFile class,  Next: distutils version — Version number classes,  Prev: distutils sysconfig — System configuration information,  Up: API Reference

17.10.22 `distutils.text_file' — The TextFile class
-----------------------------------------------------

This module provides the *Note TextFile: 3279. class, which gives an
interface  to text files that (optionally) takes care of stripping
comments, ignoring  blank lines, and joining lines with backslashes.

 -- Class: distutils.text_file.TextFile ([filename=None, file=None,
          **options])
     This class provides a file-like object that takes care of all  the
     things you commonly want to do when processing a text file  that
     has some line-by-line syntax: strip comments (as long as `#'  is
     your comment character), skip blank lines, join adjacent lines by
     escaping the newline (ie. backslash at end of line), strip leading
     and/or trailing whitespace.  All of these are optional and
     independently controllable.

     The class provides a *Note warn(): 327a. method so you can
     generate  warning messages that report physical line number, even
     if the  logical line in question spans multiple physical lines.
     Also  provides *Note unreadline(): 327b. for implementing
     line-at-a-time lookahead.

     *Note TextFile: 3279. instances are create with either `filename',
     `file', or both.  *Note RuntimeError: 3b3. is raised if both are
     `None'. `filename' should be a string, and `file' a file object
     (or something that provides *Note readline(): 145.  and *Note
     close(): 327c.  methods).  It is recommended that you supply at
     least `filename',  so that *Note TextFile: 3279. can include it in
     warning messages.  If `file' is not supplied, *Note TextFile:
     3279. creates its own using the *Note open(): 2d9. built-in
     function.

     The options are all boolean, and affect the values returned by
     *Note readline(): 145.

     option name            description                          default
     -------------------------------------------------------------------------- 
     `strip_comments'       strip from `'#'' to end-of- line,    true
                            as well as any whitespace leading    
                            up to the `'#''—unless it is       
                            escaped by a backslash               
     `lstrip_ws'            strip leading whitespace from each   false
                            line before returning it             
     `rstrip_ws'            strip trailing whitespace            true
                            (including line terminator!)  from   
                            each line before returning it.       
     `skip_blanks'          skip lines that are empty *after*    true
                            stripping comments and whitespace.   
                            (If both lstrip_ws and rstrip_ws are 
                            false, then some lines may consist   
                            of solely whitespace: these will     
                            *not* be skipped, even if            
                            `skip_blanks' is true.)              
     `join_lines'           if a backslash is the last           false
                            non-newline character on a line      
                            after stripping comments and         
                            whitespace, join the following line  
                            to it to form one logical line; if N 
                            consecutive lines end with a         
                            backslash, then N+1 physical lines   
                            will be joined to form one logical   
                            line.                                
     `collapse_join'        strip leading whitespace from lines  false
                            that are joined to their             
                            predecessor; only matters if         
                            `(join_lines and not lstrip_ws)'     

     Note that since `rstrip_ws' can strip the trailing newline, the
     semantics of *Note readline(): 145. must differ from those of the
     built-in file object’s *Note readline(): 145. method!  In
     particular, *Note readline(): 145.  returns `None' for
     end-of-file: an empty string might just be a  blank line (or an
     all-whitespace line), if `rstrip_ws' is true  but `skip_blanks' is
     not.

      -- Method: open (filename)
          Open a new file `filename'.  This overrides any `file' or
          `filename' constructor arguments.

      -- Method: close ()
          Close the current file and forget everything we know about it
          (including the filename and the current line number).

      -- Method: warn (msg[, line=None])
          Print (to stderr) a warning message tied to the current
          logical line in the current file.  If the current logical
          line in the file spans multiple physical lines, the warning
          refers to the whole range, such as `"lines 3-5"'.  If `line'
          is supplied,  it overrides the current line number; it may be
          a list or tuple  to indicate a range of physical lines, or an
          integer for a  single physical line.

      -- Method: readline ()
          Read and return a single logical line from the current file
          (or from an internal buffer if lines have previously been
          “unread” with *Note unreadline(): 327b.).  If the
          `join_lines' option  is true, this may involve reading
          multiple physical lines concatenated into a single string.
          Updates the current line number,  so calling *Note warn():
          327a. after *Note readline(): 145. emits a warning  about the
          physical line(s) just read.  Returns `None' on end-of-file,
          since the empty string can occur if `rstrip_ws' is true but
          `strip_blanks' is not.

      -- Method: readlines ()
          Read and return the list of all logical lines remaining in
          the current file.  This updates the current line number to
          the last line of the file.

      -- Method: unreadline (line)
          Push `line' (a string) onto an internal buffer that will be
          checked by future *Note readline(): 145. calls.  Handy for
          implementing a parser with line-at-a-time lookahead. Note
          that lines that are “unread” with *Note unreadline():
          327b. are not subsequently re-cleansed (whitespace  stripped,
          or whatever) when read with *Note readline(): 145. If
          multiple calls are made to *Note unreadline(): 327b. before a
          call to *Note readline(): 145, the lines will be returned
          most in most recent first order.


File: python.info,  Node: distutils version — Version number classes,  Next: distutils cmd — Abstract base class for Distutils commands,  Prev: distutils text_file — The TextFile class,  Up: API Reference

17.10.23 `distutils.version' — Version number classes
-------------------------------------------------------


File: python.info,  Node: distutils cmd — Abstract base class for Distutils commands,  Next: Creating a new Distutils command,  Prev: distutils version — Version number classes,  Up: API Reference

17.10.24 `distutils.cmd' — Abstract base class for Distutils commands
-----------------------------------------------------------------------

This module supplies the abstract base class *Note Command: 31ff.

 -- Class: distutils.cmd.Command (dist)
     Abstract base class for defining command classes, the “worker
     bees” of the Distutils.  A useful analogy for command classes is
     to think of them as subroutines with local variables called
     `options'.  The options are declared in *Note
     initialize_options(): 3282. and defined (given their final values)
     in *Note finalize_options(): 3283, both of which must be defined
     by every command class.  The distinction between the two is
     necessary because option values might come from the outside world
     (command line, config file, …), and any options dependent on
     other options must be computed after these outside influences have
     been processed — hence *Note finalize_options(): 3283.  The body
     of the subroutine, where it does all its work based on the values
     of its options, is the *Note run(): 3284. method, which must also
     be implemented by every command class.

     The class constructor takes a single argument `dist', a *Note
     Distribution: 320f. instance.


File: python.info,  Node: Creating a new Distutils command,  Next: distutils command — Individual Distutils commands,  Prev: distutils cmd — Abstract base class for Distutils commands,  Up: API Reference

17.10.25 Creating a new Distutils command
-----------------------------------------

This section outlines the steps to create a new Distutils command.

A new command lives in a module in the *Note distutils.command: 8a.
package. There is a sample template in that directory called
`command_template'.  Copy this file to a new module with the same name
as the new command you’re implementing.  This module should implement
a class with the same name as the module (and the command).  So, for
instance, to create the command `peel_banana' (so that users can run
`setup.py peel_banana'), you’d copy `command_template' to
`distutils/command/peel_banana.py', then edit it so that it’s
implementing the class `peel_banana', a subclass of *Note
distutils.cmd.Command: 31ff.

Subclasses of *Note Command: 31ff. must define the following methods.

 -- Method: Command.initialize_options ()
     Set default values for all the options that this command supports.
     Note that these defaults may be overridden by other commands, by
     the setup script, by config files, or by the command-line.  Thus,
     this is not the place to code dependencies between options;
     generally, *Note initialize_options(): 3282.  implementations are
     just a bunch of `self.foo = None' assignments.

 -- Method: Command.finalize_options ()
     Set final values for all the options that this command supports.
     This is always called as late as possible, ie.  after any option
     assignments from the command-line or from other commands have been
     done.  Thus, this is the place to code option dependencies: if
     `foo' depends on `bar', then it is safe to set `foo' from `bar' as
     long as `foo' still has the same value it was assigned in *Note
     initialize_options(): 3282.

 -- Method: Command.run ()
     A command’s raison d’etre: carry out the action it exists to
     perform, controlled by the options initialized in *Note
     initialize_options(): 3282, customized by other commands, the
     setup script, the command-line, and config files, and finalized in
     *Note finalize_options(): 3283.  All terminal output and
     filesystem interaction should be done by *Note run(): 3284.

 -- Attribute: Command.sub_commands
     `sub_commands' formalizes the notion of a “family” of commands,
     e.g. `install' as the parent with sub-commands `install_lib',
     `install_headers', etc.  The parent of a family of commands defines
     `sub_commands' as a class attribute; it’s a list of 2-tuples
     `(command_name, predicate)', with `command_name' a string and
     `predicate' a function, a string or `None'.  `predicate' is a
     method of the parent command that determines whether the
     corresponding command is applicable in the current situation.
     (E.g. `install_headers' is only applicable if we have any C header
     files to install.)  If `predicate' is `None', that command is
     always applicable.

     `sub_commands' is usually defined at the `end' of a class, because
     predicates can be methods of the class, so they must already have
     been defined.  The canonical example is the `install' command.


File: python.info,  Node: distutils command — Individual Distutils commands,  Next: distutils command bdist — Build a binary installer,  Prev: Creating a new Distutils command,  Up: API Reference

17.10.26 `distutils.command' — Individual Distutils commands
--------------------------------------------------------------


File: python.info,  Node: distutils command bdist — Build a binary installer,  Next: distutils command bdist_packager — Abstract base class for packagers,  Prev: distutils command — Individual Distutils commands,  Up: API Reference

17.10.27 `distutils.command.bdist' — Build a binary installer
---------------------------------------------------------------


File: python.info,  Node: distutils command bdist_packager — Abstract base class for packagers,  Next: distutils command bdist_dumb — Build a “dumb” installer,  Prev: distutils command bdist — Build a binary installer,  Up: API Reference

17.10.28 `distutils.command.bdist_packager' — Abstract base class for packagers
---------------------------------------------------------------------------------


File: python.info,  Node: distutils command bdist_dumb — Build a “dumb” installer,  Next: distutils command bdist_msi — Build a Microsoft Installer binary package,  Prev: distutils command bdist_packager — Abstract base class for packagers,  Up: API Reference

17.10.29 `distutils.command.bdist_dumb' — Build a “dumb” installer
------------------------------------------------------------------------


File: python.info,  Node: distutils command bdist_msi — Build a Microsoft Installer binary package,  Next: distutils command bdist_rpm — Build a binary distribution as a Redhat RPM and SRPM,  Prev: distutils command bdist_dumb — Build a “dumb” installer,  Up: API Reference

17.10.30 `distutils.command.bdist_msi' — Build a Microsoft Installer binary package
-------------------------------------------------------------------------------------

 -- Class: distutils.command.bdist_msi.bdist_msi
     Builds a Windows Installer(1) (.msi) binary package.

     In most cases, the `bdist_msi' installer is a better choice than
     the `bdist_wininst' installer, because it provides better support
     for Win64 platforms, allows administrators to perform
     non-interactive installations, and allows installation through
     group policies.

---------- Footnotes ----------

(1) https://msdn.microsoft.com/en-us/library/cc185688(VS.85).aspx


File: python.info,  Node: distutils command bdist_rpm — Build a binary distribution as a Redhat RPM and SRPM,  Next: distutils command bdist_wininst — Build a Windows installer,  Prev: distutils command bdist_msi — Build a Microsoft Installer binary package,  Up: API Reference

17.10.31 `distutils.command.bdist_rpm' — Build a binary distribution as a Redhat RPM and SRPM
-----------------------------------------------------------------------------------------------


File: python.info,  Node: distutils command bdist_wininst — Build a Windows installer,  Next: distutils command sdist — Build a source distribution,  Prev: distutils command bdist_rpm — Build a binary distribution as a Redhat RPM and SRPM,  Up: API Reference

17.10.32 `distutils.command.bdist_wininst' — Build a Windows installer
------------------------------------------------------------------------


File: python.info,  Node: distutils command sdist — Build a source distribution,  Next: distutils command build — Build all files of a package,  Prev: distutils command bdist_wininst — Build a Windows installer,  Up: API Reference

17.10.33 `distutils.command.sdist' — Build a source distribution
------------------------------------------------------------------


File: python.info,  Node: distutils command build — Build all files of a package,  Next: distutils command build_clib — Build any C libraries in a package,  Prev: distutils command sdist — Build a source distribution,  Up: API Reference

17.10.34 `distutils.command.build' — Build all files of a package
-------------------------------------------------------------------


File: python.info,  Node: distutils command build_clib — Build any C libraries in a package,  Next: distutils command build_ext — Build any extensions in a package,  Prev: distutils command build — Build all files of a package,  Up: API Reference

17.10.35 `distutils.command.build_clib' — Build any C libraries in a package
------------------------------------------------------------------------------


File: python.info,  Node: distutils command build_ext — Build any extensions in a package,  Next: distutils command build_py — Build the py/ pyc files of a package,  Prev: distutils command build_clib — Build any C libraries in a package,  Up: API Reference

17.10.36 `distutils.command.build_ext' — Build any extensions in a package
----------------------------------------------------------------------------


File: python.info,  Node: distutils command build_py — Build the py/ pyc files of a package,  Next: distutils command build_scripts — Build the scripts of a package,  Prev: distutils command build_ext — Build any extensions in a package,  Up: API Reference

17.10.37 `distutils.command.build_py' — Build the .py/.pyc files of a package
-------------------------------------------------------------------------------


File: python.info,  Node: distutils command build_scripts — Build the scripts of a package,  Next: distutils command clean — Clean a package build area,  Prev: distutils command build_py — Build the py/ pyc files of a package,  Up: API Reference

17.10.38 `distutils.command.build_scripts' — Build the scripts of a package
-----------------------------------------------------------------------------


File: python.info,  Node: distutils command clean — Clean a package build area,  Next: distutils command config — Perform package configuration,  Prev: distutils command build_scripts — Build the scripts of a package,  Up: API Reference

17.10.39 `distutils.command.clean' — Clean a package build area
-----------------------------------------------------------------

This command removes the temporary files created by `build' and its
subcommands, like intermediary compiled object files.  With the `--all'
option, the complete build directory will be removed.

Extension modules built *Note in place: 31c7.  will not be cleaned, as
they are not in the build directory.


File: python.info,  Node: distutils command config — Perform package configuration,  Next: distutils command install — Install a package,  Prev: distutils command clean — Clean a package build area,  Up: API Reference

17.10.40 `distutils.command.config' — Perform package configuration
---------------------------------------------------------------------


File: python.info,  Node: distutils command install — Install a package,  Next: distutils command install_data — Install data files from a package,  Prev: distutils command config — Perform package configuration,  Up: API Reference

17.10.41 `distutils.command.install' — Install a package
----------------------------------------------------------


File: python.info,  Node: distutils command install_data — Install data files from a package,  Next: distutils command install_headers — Install C/C++ header files from a package,  Prev: distutils command install — Install a package,  Up: API Reference

17.10.42 `distutils.command.install_data' — Install data files from a package
-------------------------------------------------------------------------------


File: python.info,  Node: distutils command install_headers — Install C/C++ header files from a package,  Next: distutils command install_lib — Install library files from a package,  Prev: distutils command install_data — Install data files from a package,  Up: API Reference

17.10.43 `distutils.command.install_headers' — Install C/C++ header files from a package
------------------------------------------------------------------------------------------


File: python.info,  Node: distutils command install_lib — Install library files from a package,  Next: distutils command install_scripts — Install script files from a package,  Prev: distutils command install_headers — Install C/C++ header files from a package,  Up: API Reference

17.10.44 `distutils.command.install_lib' — Install library files from a package
---------------------------------------------------------------------------------


File: python.info,  Node: distutils command install_scripts — Install script files from a package,  Next: distutils command register — Register a module with the Python Package Index,  Prev: distutils command install_lib — Install library files from a package,  Up: API Reference

17.10.45 `distutils.command.install_scripts' — Install script files from a package
------------------------------------------------------------------------------------


File: python.info,  Node: distutils command register — Register a module with the Python Package Index,  Next: distutils command check — Check the meta-data of a package,  Prev: distutils command install_scripts — Install script files from a package,  Up: API Reference

17.10.46 `distutils.command.register' — Register a module with the Python Package Index
-----------------------------------------------------------------------------------------

The `register' command registers the package with the Python Package
Index.  This is described in more detail in PEP 301(1).

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0301


File: python.info,  Node: distutils command check — Check the meta-data of a package,  Prev: distutils command register — Register a module with the Python Package Index,  Up: API Reference

17.10.47 `distutils.command.check' — Check the meta-data of a package
-----------------------------------------------------------------------

The `check' command performs some tests on the meta-data of a package.
For example, it verifies that all required meta-data are provided as
the arguments passed to the `setup()' function.


File: python.info,  Node: Installing Python Modules Legacy version,  Next: Python Module Index,  Prev: Distributing Python Modules Legacy version,  Up: Top

18 Installing Python Modules (Legacy version)
*********************************************

Author: Greg Ward

See also
........

*Note Installing Python Modules: 2ee.
     The up to date module installation documentations

This document describes the Python Distribution Utilities
(“Distutils”) from the end-user’s point-of-view, describing how
to extend the capabilities of a standard Python installation by
building and installing third-party Python modules and extensions.

     Note: This guide only covers the basic tools for building and
     distributing extensions that are provided as part of this version
     of Python. Third party tools offer easier to use and more secure
     alternatives. Refer to the quick recommendations section(1) in the
     Python Packaging User Guide for more information.

* Menu:

* Introduction: Introduction<14>.
* Standard Build and Install::
* Alternate Installation::
* Custom Installation::
* Distutils Configuration Files::
* Building Extensions; Tips and Tricks: Building Extensions Tips and Tricks.

---------- Footnotes ----------

(1) https://packaging.python.org/en/latest/current/


File: python.info,  Node: Introduction<14>,  Next: Standard Build and Install,  Up: Installing Python Modules Legacy version

18.1 Introduction
=================

Although Python’s extensive standard library covers many programming
needs, there often comes a time when you need to add some new
functionality to your Python installation in the form of third-party
modules.  This might be necessary to support your own programming, or
to support an application that you want to use and that happens to be
written in Python.

In the past, there has been little support for adding third-party
modules to an existing Python installation.  With the introduction of
the Python Distribution Utilities (Distutils for short) in Python 2.0,
this changed.

This document is aimed primarily at the people who need to install
third-party Python modules: end-users and system administrators who
just need to get some Python application running, and existing Python
programmers who want to add some new goodies to their toolbox.  You
don’t need to know Python to read this document; there will be some
brief forays into using Python’s interactive mode to explore your
installation, but that’s it.  If you’re looking for information on
how to distribute your own Python modules so that others may use them,
see the *Note Distributing Python Modules (Legacy version): 2f1.
manual.  *Note Debugging the setup script: 31c3. may also be of
interest.

* Menu:

* Best case; trivial installation: Best case trivial installation.
* The new standard; Distutils: The new standard Distutils.


File: python.info,  Node: Best case trivial installation,  Next: The new standard Distutils,  Up: Introduction<14>

18.1.1 Best case: trivial installation
--------------------------------------

In the best case, someone will have prepared a special version of the
module distribution you want to install that is targeted specifically
at your platform and is installed just like any other software on your
platform.  For example, the module developer might make an executable
installer available for Windows users, an RPM package for users of
RPM-based Linux systems (Red Hat, SuSE, Mandrake, and many others), a
Debian package for users of Debian-based Linux systems, and so forth.

In that case, you would download the installer appropriate to your
platform and do the obvious thing with it: run it if it’s an
executable installer, `rpm --install' it if it’s an RPM, etc.  You
don’t need to run Python or a setup script, you don’t need to
compile anything—you might not even need to read any instructions
(although it’s always a good idea to do so anyway).

Of course, things will not always be that easy.  You might be
interested in a module distribution that doesn’t have an easy-to-use
installer for your platform.  In that case, you’ll have to start with
the source distribution released by the module’s author/maintainer.
Installing from a source distribution is not too hard, as long as the
modules are packaged in the standard way.  The bulk of this document is
about building and installing modules from standard source
distributions.


File: python.info,  Node: The new standard Distutils,  Prev: Best case trivial installation,  Up: Introduction<14>

18.1.2 The new standard: Distutils
----------------------------------

If you download a module source distribution, you can tell pretty
quickly if it was packaged and distributed in the standard way, i.e.
using the Distutils.  First, the distribution’s name and version
number will be featured prominently in the name of the downloaded
archive, e.g. `foo-1.0.tar.gz' or `widget-0.9.7.zip'.  Next, the
archive will unpack into a similarly-named directory: `foo-1.0' or
`widget-0.9.7'.  Additionally, the distribution will contain a setup
script `setup.py', and a file named `README.txt' or possibly just
`README', which should explain that building and installing the module
distribution is a simple matter of running one command from a terminal:

    python setup.py install

For Windows, this command should be run from a command prompt window
(Start ‣ Accessories):

    setup.py install

If all these things are true, then you already know how to build and
install the modules you’ve just downloaded:  Run the command above.
Unless you need to install things in a non-standard way or customize
the build process, you don’t really need this manual.  Or rather, the
above command is everything you need to get out of this manual.


File: python.info,  Node: Standard Build and Install,  Next: Alternate Installation,  Prev: Introduction<14>,  Up: Installing Python Modules Legacy version

18.2 Standard Build and Install
===============================

As described in section *Note The new standard; Distutils: 32a5,
building and installing a module distribution using the Distutils is
usually one simple command to run from a terminal:

    python setup.py install

* Menu:

* Platform variations::
* Splitting the job up::
* How building works::
* How installation works::


File: python.info,  Node: Platform variations,  Next: Splitting the job up,  Up: Standard Build and Install

18.2.1 Platform variations
--------------------------

You should always run the setup command from the distribution root
directory, i.e. the top-level subdirectory that the module source
distribution unpacks into.  For example, if you’ve just downloaded a
module source distribution `foo-1.0.tar.gz' onto a Unix system, the
normal thing to do is:

    gunzip -c foo-1.0.tar.gz | tar xf -    # unpacks into directory foo-1.0
    cd foo-1.0
    python setup.py install

On Windows, you’d probably download `foo-1.0.zip'.  If you downloaded
the archive file to `C:\Temp', then it would unpack into
`C:\Temp\foo-1.0'; you can use either an archive manipulator with a
graphical user interface (such as WinZip) or a command-line tool (such
as `unzip' or `pkunzip') to unpack the archive.  Then, open a command
prompt window and run:

    cd c:\Temp\foo-1.0
    python setup.py install


File: python.info,  Node: Splitting the job up,  Next: How building works,  Prev: Platform variations,  Up: Standard Build and Install

18.2.2 Splitting the job up
---------------------------

Running `setup.py install' builds and installs all modules in one run.
If you prefer to work incrementally—especially useful if you want to
customize the build process, or if things are going wrong—you can use
the setup script to do one thing at a time.  This is particularly
helpful when the build and install will be done by different
users—for example, you might want to build a module distribution and
hand it off to a system administrator for installation (or do it
yourself, with super-user privileges).

For example, you can build everything in one step, and then install
everything in a second step, by invoking the setup script twice:

    python setup.py build
    python setup.py install

If you do this, you will notice that running the `install' command
first runs the `build' command, which—in this case—quickly notices
that it has nothing to do, since everything in the `build' directory is
up-to-date.

You may not need this ability to break things down often if all you do
is install modules downloaded off the ‘net, but it’s very handy for
more advanced tasks.  If you get into distributing your own Python
modules and extensions, you’ll run lots of individual Distutils
commands on their own.


File: python.info,  Node: How building works,  Next: How installation works,  Prev: Splitting the job up,  Up: Standard Build and Install

18.2.3 How building works
-------------------------

As implied above, the `build' command is responsible for putting the
files to install into a `build directory'.  By default, this is `build'
under the distribution root; if you’re excessively concerned with
speed, or want to keep the source tree pristine, you can change the
build directory with the `--build-base' option. For example:

    python setup.py build --build-base=/path/to/pybuild/foo-1.0

(Or you could do this permanently with a directive in your system or
personal Distutils configuration file; see section *Note Distutils
Configuration Files: 32ae.)  Normally, this isn’t necessary.

The default layout for the build tree is as follows:

    --- build/ --- lib/
    or
    --- build/ --- lib.<plat>/
                   temp.<plat>/

where `<plat>' expands to a brief description of the current OS/hardware
platform and Python version.  The first form, with just a `lib'
directory, is used for “pure module distributions”—that is,
module distributions that include only pure Python modules.  If a
module distribution contains any extensions (modules written in C/C++),
then the second form, with two `<plat>' directories, is used.  In that
case, the `temp.`plat'' directory holds temporary files generated by
the compile/link process that don’t actually get installed.  In
either case, the `lib' (or `lib.`plat'') directory contains all Python
modules (pure Python and extensions) that will be installed.

In the future, more directories will be added to handle Python scripts,
documentation, binary executables, and whatever else is needed to
handle the job of installing Python modules and applications.


File: python.info,  Node: How installation works,  Prev: How building works,  Up: Standard Build and Install

18.2.4 How installation works
-----------------------------

After the `build' command runs (whether you run it explicitly, or the
`install' command does it for you), the work of the `install' command
is relatively simple: all it has to do is copy everything under
`build/lib' (or `build/lib.`plat'') to your chosen installation
directory.

If you don’t choose an installation directory—i.e., if you just run
`setup.py install'—then the `install' command installs to the standard
location for third-party Python modules.  This location varies by
platform and by how you built/installed Python itself.  On Unix (and
Mac OS X, which is also Unix-based), it also depends on whether the
module distribution being installed is pure Python or contains
extensions (“non-pure”):

Platform              Standard installation location                            Default value                                          Notes
--------------------------------------------------------------------------------------------------------------------------------------------------- 
Unix (pure)           ``prefix'/lib/python`X.Y'/site-packages'                  `/usr/local/lib/python`X.Y'/site-packages'             (1)
Unix (non-pure)       ``exec-prefix'/lib/python`X.Y'/site-packages'             `/usr/local/lib/python`X.Y'/site-packages'             (1)
Windows               ``prefix'\Lib\site-packages'                              `C:\Python`XY'\Lib\site-packages'                      (2)

Notes:

  1. Most Linux distributions include Python as a standard part of the
     system, so ``prefix'' and ``exec-prefix'' are usually both `/usr'
     on Linux.  If you build Python yourself on Linux (or any Unix-like
     system), the default ``prefix'' and ``exec-prefix'' are
     `/usr/local'.

  2. The default installation directory on Windows was `C:\Program
     Files\Python' under Python 1.6a1, 1.5.2, and earlier.

``prefix'' and ``exec-prefix'' stand for the directories that Python is
installed to, and where it finds its libraries at run-time.  They are
always the same under Windows, and very often the same under Unix and
Mac OS X.  You can find out what your Python installation uses for
``prefix'' and ``exec-prefix'' by running Python in interactive mode
and typing a few simple commands. Under Unix, just type `python' at the
shell prompt.  Under Windows, choose Start ‣ Programs ‣ Python X.Y
‣ Python (command line).   Once the interpreter is started, you type
Python code at the prompt.  For example, on my Linux system, I type the
three Python statements shown below, and get the output as shown, to
find out my ``prefix'' and ``exec-prefix'':

    Python 2.4 (#26, Aug  7 2004, 17:19:02)
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import sys
    >>> sys.prefix
    '/usr'
    >>> sys.exec_prefix
    '/usr'

A few other placeholders are used in this document: ``X.Y'' stands for
the version of Python, for example `2.7'; ``distname'' will be replaced
by the name of the module distribution being installed.  Dots and
capitalization are important in the paths; for example, a value that
uses `python2.7' on UNIX will typically use `Python27' on Windows.

If you don’t want to install modules to the standard location, or if
you don’t have permission to write there, then you need to read about
alternate installations in section *Note Alternate Installation: 32b1.
If you want to customize your installation directories more heavily,
see section *Note Custom Installation: 32b2. on custom installations.


File: python.info,  Node: Alternate Installation,  Next: Custom Installation,  Prev: Standard Build and Install,  Up: Installing Python Modules Legacy version

18.3 Alternate Installation
===========================

Often, it is necessary or desirable to install modules to a location
other than the standard location for third-party Python modules.  For
example, on a Unix system you might not have permission to write to the
standard third-party module directory.  Or you might wish to try out a
module before making it a standard part of your local Python
installation.  This is especially true when upgrading a distribution
already present: you want to make sure your existing base of scripts
still works with the new version before actually upgrading.

The Distutils `install' command is designed to make installing module
distributions to an alternate location simple and painless.  The basic
idea is that you supply a base directory for the installation, and the
`install' command picks a set of directories (called an `installation
scheme') under this base directory in which to install files.  The
details differ across platforms, so read whichever of the following
sections applies to you.

Note that the various alternate installation schemes are mutually
exclusive: you can pass `--user', or `--home', or `--prefix' and
`--exec-prefix', or `--install-base' and `--install-platbase', but you
can’t mix from these groups.

* Menu:

* Alternate installation; the user scheme: Alternate installation the user scheme.
* Alternate installation; the home scheme: Alternate installation the home scheme.
* Alternate installation; Unix (the prefix scheme): Alternate installation Unix the prefix scheme.
* Alternate installation; Windows (the prefix scheme): Alternate installation Windows the prefix scheme.


File: python.info,  Node: Alternate installation the user scheme,  Next: Alternate installation the home scheme,  Up: Alternate Installation

18.3.1 Alternate installation: the user scheme
----------------------------------------------

This scheme is designed to be the most convenient solution for users
that don’t have write permission to the global site-packages
directory or don’t want to install into it.  It is enabled with a
simple option:

    python setup.py install --user

Files will be installed into subdirectories of *Note site.USER_BASE:
67e. (written as ``userbase'' hereafter).  This scheme installs pure
Python modules and extension modules in the same location (also known
as *Note site.USER_SITE: 669.).  Here are the values for UNIX,
including Mac OS X:

Type of file        Installation directory
------------------------------------------------------------------------------------ 
modules             ``userbase'/lib/python`X.Y'/site-packages'
scripts             ``userbase'/bin'
data                ``userbase''
C headers           ``userbase'/include/python`X.Y'/`distname''

And here are the values used on Windows:

Type of file        Installation directory
------------------------------------------------------------------------------------ 
modules             ``userbase'\Python`XY'\site-packages'
scripts             ``userbase'\Scripts'
data                ``userbase''
C headers           ``userbase'\Python`XY'\Include\`distname''

The advantage of using this scheme compared to the other ones described
below is that the user site-packages directory is under normal
conditions always included in *Note sys.path: 59a. (see *Note site:
158. for more information), which means that there is no additional
step to perform after running the `setup.py' script to finalize the
installation.

The `build_ext' command also has a `--user' option to add
``userbase'/include' to the compiler search path for header files and
``userbase'/lib' to the compiler search path for libraries as well as to
the runtime search path for shared C libraries (rpath).


File: python.info,  Node: Alternate installation the home scheme,  Next: Alternate installation Unix the prefix scheme,  Prev: Alternate installation the user scheme,  Up: Alternate Installation

18.3.2 Alternate installation: the home scheme
----------------------------------------------

The idea behind the “home scheme” is that you build and maintain a
personal stash of Python modules.  This scheme’s name is derived from
the idea of a “home” directory on Unix, since it’s not unusual
for a Unix user to make their home directory have a layout similar to
`/usr/' or `/usr/local/'.  This scheme can be used by anyone,
regardless of the operating system they are installing for.

Installing a new module distribution is as simple as

    python setup.py install --home=<dir>

where you can supply any directory you like for the `--home' option.  On
Unix, lazy typists can just type a tilde (`~'); the `install' command
will expand this to your home directory:

    python setup.py install --home=~

To make Python find the distributions installed with this scheme, you
may have to *Note modify Python’s search path: 32b7. or edit
`sitecustomize' (see *Note site: 158.) to call *Note site.addsitedir():
2530. or edit *Note sys.path: 59a.

The `--home' option defines the installation base directory.  Files are
installed to the following directories under the installation base as
follows:

Type of file        Installation directory
------------------------------------------------------------------------------------ 
modules             ``home'/lib/python'
scripts             ``home'/bin'
data                ``home''
C headers           ``home'/include/python/`distname''

(Mentally replace slashes with backslashes if you’re on Windows.)

Changed in version 2.4: The `--home' option used to be supported only
on Unix.


File: python.info,  Node: Alternate installation Unix the prefix scheme,  Next: Alternate installation Windows the prefix scheme,  Prev: Alternate installation the home scheme,  Up: Alternate Installation

18.3.3 Alternate installation: Unix (the prefix scheme)
-------------------------------------------------------

The “prefix scheme” is useful when you wish to use one Python
installation to perform the build/install (i.e., to run the setup
script), but install modules into the third-party module directory of a
different Python installation (or something that looks like a different
Python installation).  If this sounds a trifle unusual, it
is—that’s why the user and home schemes come before.  However,
there are at least two known cases where the prefix scheme will be
useful.

First, consider that many Linux distributions put Python in `/usr',
rather than the more traditional `/usr/local'.  This is entirely
appropriate, since in those cases Python is part of “the system”
rather than a local add-on.  However, if you are installing Python
modules from source, you probably want them to go in
`/usr/local/lib/python2.`X'' rather than `/usr/lib/python2.`X''.  This
can be done with

    /usr/bin/python setup.py install --prefix=/usr/local

Another possibility is a network filesystem where the name used to
write to a remote directory is different from the name used to read it:
for example, the Python interpreter accessed as `/usr/local/bin/python'
might search for modules in `/usr/local/lib/python2.`X'', but those
modules would have to be installed to, say,
`/mnt/`@server'/export/lib/python2.`X''.  This could be done with

    /usr/local/bin/python setup.py install --prefix=/mnt/@server/export

In either case, the `--prefix' option defines the installation base, and
the `--exec-prefix' option defines the platform-specific installation
base, which is used for platform-specific files.  (Currently, this just
means non-pure module distributions, but could be expanded to C
libraries, binary executables, etc.)  If `--exec-prefix' is not
supplied, it defaults to `--prefix'.  Files are installed as follows:

Type of file          Installation directory
------------------------------------------------------------------------------------- 
Python modules        ``prefix'/lib/python`X.Y'/site-packages'
extension modules     ``exec-prefix'/lib/python`X.Y'/site-packages'
scripts               ``prefix'/bin'
data                  ``prefix''
C headers             ``prefix'/include/python`X.Y'/`distname''

There is no requirement that `--prefix' or `--exec-prefix' actually
point to an alternate Python installation; if the directories listed
above do not already exist, they are created at installation time.

Incidentally, the real reason the prefix scheme is important is simply
that a standard Unix installation uses the prefix scheme, but with
`--prefix' and `--exec-prefix' supplied by Python itself as
`sys.prefix' and `sys.exec_prefix'.  Thus, you might think you’ll
never use the prefix scheme, but every time you run `python setup.py
install' without any other options, you’re using it.

Note that installing extensions to an alternate Python installation has
no effect on how those extensions are built: in particular, the Python
header files (`Python.h' and friends) installed with the Python
interpreter used to run the setup script will be used in compiling
extensions.  It is your responsibility to ensure that the interpreter
used to run extensions installed in this way is compatible with the
interpreter used to build them.  The best way to do this is to ensure
that the two interpreters are the same version of Python (possibly
different builds, or possibly copies of the same build).  (Of course,
if your `--prefix' and `--exec-prefix' don’t even point to an
alternate Python installation, this is immaterial.)


File: python.info,  Node: Alternate installation Windows the prefix scheme,  Prev: Alternate installation Unix the prefix scheme,  Up: Alternate Installation

18.3.4 Alternate installation: Windows (the prefix scheme)
----------------------------------------------------------

Windows has no concept of a user’s home directory, and since the
standard Python installation under Windows is simpler than under Unix,
the `--prefix' option has traditionally been used to install additional
packages in separate locations on Windows.

    python setup.py install --prefix="\Temp\Python"

to install modules to the `\Temp\Python' directory on the current drive.

The installation base is defined by the `--prefix' option; the
`--exec-prefix' option is not supported under Windows, which means that
pure Python modules and extension modules are installed into the same
location.  Files are installed as follows:

Type of file        Installation directory
----------------------------------------------------------------------------------- 
modules             ``prefix'\Lib\site-packages'
scripts             ``prefix'\Scripts'
data                ``prefix''
C headers           ``prefix'\Include\`distname''


File: python.info,  Node: Custom Installation,  Next: Distutils Configuration Files,  Prev: Alternate Installation,  Up: Installing Python Modules Legacy version

18.4 Custom Installation
========================

Sometimes, the alternate installation schemes described in section
*Note Alternate Installation: 32b1. just don’t do what you want.  You
might want to tweak just one or two directories while keeping
everything under the same base directory, or you might want to
completely redefine the installation scheme.  In either case, you’re
creating a `custom installation scheme'.

To create a custom installation scheme, you start with one of the
alternate schemes and override some of the installation directories
used for the various types of files, using these options:

Type of file               Override option
------------------------------------------------------- 
Python modules             `--install-purelib'
extension modules          `--install-platlib'
all modules                `--install-lib'
scripts                    `--install-scripts'
data                       `--install-data'
C headers                  `--install-headers'

These override options can be relative, absolute, or explicitly defined
in terms of one of the installation base directories.  (There are two
installation base directories, and they are normally the same— they
only differ when you use the Unix “prefix scheme” and supply
different `--prefix' and `--exec-prefix' options; using `--install-lib'
will override values computed or given for `--install-purelib' and
`--install-platlib', and is recommended for schemes that don’t make a
difference between Python and extension modules.)

For example, say you’re installing a module distribution to your home
directory under Unix—but you want scripts to go in `~/scripts' rather
than `~/bin'. As you might expect, you can override this directory with
the `--install-scripts' option; in this case, it makes most sense to
supply a relative path, which will be interpreted relative to the
installation base directory (your home directory, in this case):

    python setup.py install --home=~ --install-scripts=scripts

Another Unix example: suppose your Python installation was built and
installed with a prefix of `/usr/local/python', so under a standard
installation scripts will wind up in `/usr/local/python/bin'.  If you
want them in `/usr/local/bin' instead, you would supply this absolute
directory for the `--install-scripts' option:

    python setup.py install --install-scripts=/usr/local/bin

(This performs an installation using the “prefix scheme,” where the
prefix is whatever your Python interpreter was installed with—
`/usr/local/python' in this case.)

If you maintain Python on Windows, you might want third-party modules
to live in a subdirectory of ``prefix'', rather than right in ``prefix''
itself.  This is almost as easy as customizing the script installation
directory —you just have to remember that there are two types of
modules to worry about, Python and extension modules, which can
conveniently be both controlled by one option:

    python setup.py install --install-lib=Site

The specified installation directory is relative to ``prefix''.  Of
course, you also have to ensure that this directory is in Python’s
module search path, such as by putting a `.pth' file in a site
directory (see *Note site: 158.).  See section *Note Modifying
Python’s Search Path: 32b7. to find out how to modify Python’s
search path.

If you want to define an entire installation scheme, you just have to
supply all of the installation directory options.  The recommended way
to do this is to supply relative paths; for example, if you want to
maintain all Python module-related files under `python' in your home
directory, and you want a separate directory for each platform that you
use your home directory from, you might define the following
installation scheme:

    python setup.py install --home=~ \
                            --install-purelib=python/lib \
                            --install-platlib=python/lib.$PLAT \
                            --install-scripts=python/scripts
                            --install-data=python/data

or, equivalently,

    python setup.py install --home=~/python \
                            --install-purelib=lib \
                            --install-platlib='lib.$PLAT' \
                            --install-scripts=scripts
                            --install-data=data

`$PLAT' is not (necessarily) an environment variable—it will be
expanded by the Distutils as it parses your command line options, just
as it does when parsing your configuration file(s).

Obviously, specifying the entire installation scheme every time you
install a new module distribution would be very tedious.  Thus, you can
put these options into your Distutils config file (see section *Note
Distutils Configuration Files: 32ae.):

    [install]
    install-base=$HOME
    install-purelib=python/lib
    install-platlib=python/lib.$PLAT
    install-scripts=python/scripts
    install-data=python/data

or, equivalently,

    [install]
    install-base=$HOME/python
    install-purelib=lib
    install-platlib=lib.$PLAT
    install-scripts=scripts
    install-data=data

Note that these two are `not' equivalent if you supply a different
installation base directory when you run the setup script.  For example,

    python setup.py install --install-base=/tmp

would install pure modules to `/tmp/python/lib' in the first case, and
to `/tmp/lib' in the second case.  (For the second case, you probably
want to supply an installation base of `/tmp/python'.)

You probably noticed the use of `$HOME' and `$PLAT' in the sample
configuration file input.  These are Distutils configuration variables,
which bear a strong resemblance to environment variables. In fact, you
can use environment variables in config files on platforms that have
such a notion but the Distutils additionally define a few extra
variables that may not be in your environment, such as `$PLAT'.  (And
of course, on systems that don’t have environment variables, such as
Mac OS 9, the configuration variables supplied by the Distutils are the
only ones you can use.) See section *Note Distutils Configuration
Files: 32ae.  for details.

* Menu:

* Modifying Python’s Search Path::


File: python.info,  Node: Modifying Python’s Search Path,  Up: Custom Installation

18.4.1 Modifying Python’s Search Path
---------------------------------------

When the Python interpreter executes an *Note import: 1f4. statement,
it searches for both Python code and extension modules along a search
path.  A default value for the path is configured into the Python
binary when the interpreter is built.  You can determine the path by
importing the *Note sys: 16d. module and printing the value of
`sys.path'.

    $ python
    Python 2.2 (#11, Oct  3 2002, 13:31:27)
    [GCC 2.96 20000731 (Red Hat Linux 7.3 2.96-112)] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> import sys
    >>> sys.path
    ['', '/usr/local/lib/python2.3', '/usr/local/lib/python2.3/plat-linux2',
     '/usr/local/lib/python2.3/lib-tk', '/usr/local/lib/python2.3/lib-dynload',
     '/usr/local/lib/python2.3/site-packages']
    >>>

The null string in `sys.path' represents the current working directory.

The expected convention for locally installed packages is to put them
in the ``…'/site-packages/' directory, but you may want to install
Python modules into some arbitrary directory.  For example, your site
may have a convention of keeping all software related to the web server
under `/www'.  Add-on Python modules might then belong in
`/www/python', and in order to import them, this directory must be
added to `sys.path'.  There are several different ways to add the
directory.

The most convenient way is to add a path configuration file to a
directory that’s already on Python’s path, usually to the
`.../site-packages/' directory.  Path configuration files have an
extension of `.pth', and each line must contain a single path that will
be appended to `sys.path'.  (Because the new paths are appended to
`sys.path', modules in the added directories will not override standard
modules.  This means you can’t use this mechanism for installing
fixed versions of standard modules.)

Paths can be absolute or relative, in which case they’re relative to
the directory containing the `.pth' file.  See the documentation of the
*Note site: 158. module for more information.

A slightly less convenient way is to edit the `site.py' file in
Python’s standard library, and modify `sys.path'.  `site.py' is
automatically imported when the Python interpreter is executed, unless
the *Note -S: 66a. switch is supplied to suppress this behaviour.  So
you could simply edit `site.py' and add two lines to it:

    import sys
    sys.path.append('/www/python/')

However, if you reinstall the same major version of Python (perhaps when
upgrading from 2.2 to 2.2.2, for example) `site.py' will be overwritten
by the stock version.  You’d have to remember that it was modified
and save a copy before doing the installation.

There are two environment variables that can modify `sys.path'.  *Note
PYTHONHOME: 664. sets an alternate value for the prefix of the Python
installation.  For example, if *Note PYTHONHOME: 664. is set to
`/www/python', the search path will be set to `['',
'/www/python/lib/pythonX.Y/', '/www/python/lib/pythonX.Y/plat-linux2',
...]'.

The *Note PYTHONPATH: 59b. variable can be set to a list of paths that
will be added to the beginning of `sys.path'.  For example, if *Note
PYTHONPATH: 59b. is set to `/www/python:/opt/py', the search path will
begin with `['/www/python', '/opt/py']'.  (Note that directories must
exist in order to be added to `sys.path'; the *Note site: 158. module
removes paths that don’t exist.)

Finally, `sys.path' is just a regular Python list, so any Python
application can modify it by adding or removing entries.


File: python.info,  Node: Distutils Configuration Files,  Next: Building Extensions Tips and Tricks,  Prev: Custom Installation,  Up: Installing Python Modules Legacy version

18.5 Distutils Configuration Files
==================================

As mentioned above, you can use Distutils configuration files to record
personal or site preferences for any Distutils options.  That is, any
option to any command can be stored in one of two or three (depending
on your platform) configuration files, which will be consulted before
the command-line is parsed.  This means that configuration files will
override default values, and the command-line will in turn override
configuration files.  Furthermore, if multiple configuration files
apply, values from “earlier” files are overridden by “later”
files.

* Menu:

* Location and names of config files::
* Syntax of config files::


File: python.info,  Node: Location and names of config files,  Next: Syntax of config files,  Up: Distutils Configuration Files

18.5.1 Location and names of config files
-----------------------------------------

The names and locations of the configuration files vary slightly across
platforms.  On Unix and Mac OS X, the three configuration files (in the
order they are processed) are:

Type of file       Location and filename                                          Notes
---------------------------------------------------------------------------------------------- 
system             ``prefix'/lib/python`ver'/distutils/distutils.cfg'             (1)
personal           `$HOME/.pydistutils.cfg'                                       (2)
local              `setup.cfg'                                                    (3)

And on Windows, the configuration files are:

Type of file       Location and filename                                 Notes
------------------------------------------------------------------------------------- 
system             ``prefix'\Lib\distutils\distutils.cfg'                (4)
personal           `%HOME%\pydistutils.cfg'                              (5)
local              `setup.cfg'                                           (3)

On all platforms, the “personal” file can be temporarily disabled by
passing the `–no-user-cfg' option.

Notes:

  1. Strictly speaking, the system-wide configuration file lives in the
     directory where the Distutils are installed; under Python 1.6 and
     later on Unix, this is as shown. For Python 1.5.2, the Distutils
     will normally be installed to
     ``prefix'/lib/python1.5/site-packages/distutils', so the system
     configuration file should be put there under Python 1.5.2.

  2. On Unix, if the `HOME' environment variable is not defined, the
     user’s home directory will be determined with the `getpwuid()'
     function from the standard *Note pwd: 13d. module. This is done by
     the *Note os.path.expanduser(): e21.  function used by Distutils.

  3. I.e., in the current directory (usually the location of the setup
     script).

  4. (See also note (1).)  Under Python 1.6 and later, Python’s
     default “installation prefix” is `C:\Python', so the system
     configuration file is normally
     `C:\Python\Lib\distutils\distutils.cfg'. Under Python 1.5.2, the
     default prefix was `C:\Program Files\Python', and the Distutils
     were not part of the standard library—so the system
     configuration file would be `C:\Program
     Files\Python\distutils\distutils.cfg' in a standard Python 1.5.2
     installation under Windows.

  5. On Windows, if the `HOME' environment variable is not defined, `USERPROFILE'
     then `HOMEDRIVE' and `HOMEPATH' will be tried. This is done by the
     *Note os.path.expanduser(): e21. function used by Distutils.


File: python.info,  Node: Syntax of config files,  Prev: Location and names of config files,  Up: Distutils Configuration Files

18.5.2 Syntax of config files
-----------------------------

The Distutils configuration files all have the same syntax.  The config
files are grouped into sections.  There is one section for each
Distutils command, plus a `global' section for global options that
affect every command.  Each section consists of one option per line,
specified as `option=value'.

For example, the following is a complete config file that just forces
all commands to run quietly by default:

    [global]
    verbose=0

If this is installed as the system config file, it will affect all
processing of any Python module distribution by any user on the current
system.  If it is installed as your personal config file (on systems
that support them), it will affect only module distributions processed
by you.  And if it is used as the `setup.cfg' for a particular module
distribution, it affects only that distribution.

You could override the default “build base” directory and make the
`build*' commands always forcibly rebuild all files with the following:

    [build]
    build-base=blib
    force=1

which corresponds to the command-line arguments

    python setup.py build --build-base=blib --force

except that including the `build' command on the command-line means
that command will be run.  Including a particular command in config
files has no such implication; it only means that if the command is
run, the options in the config file will apply.  (Or if other commands
that derive values from it are run, they will use the values in the
config file.)

You can find out the complete list of options for any command using the
`--help' option, e.g.:

    python setup.py build --help

and you can find out the complete list of global options by using
`--help' without a command:

    python setup.py --help

See also the “Reference” section of the “Distributing Python
Modules” manual.


File: python.info,  Node: Building Extensions Tips and Tricks,  Prev: Distutils Configuration Files,  Up: Installing Python Modules Legacy version

18.6 Building Extensions: Tips and Tricks
=========================================

Whenever possible, the Distutils try to use the configuration
information made available by the Python interpreter used to run the
`setup.py' script.  For example, the same compiler and linker flags
used to compile Python will also be used for compiling extensions.
Usually this will work well, but in complicated situations this might
be inappropriate.  This section discusses how to override the usual
Distutils behaviour.

* Menu:

* Tweaking compiler/linker flags::
* Using non-Microsoft compilers on Windows::


File: python.info,  Node: Tweaking compiler/linker flags,  Next: Using non-Microsoft compilers on Windows,  Up: Building Extensions Tips and Tricks

18.6.1 Tweaking compiler/linker flags
-------------------------------------

Compiling a Python extension written in C or C++ will sometimes require
specifying custom flags for the compiler and linker in order to use a
particular library or produce a special kind of object code. This is
especially true if the extension hasn’t been tested on your platform,
or if you’re trying to cross-compile Python.

In the most general case, the extension author might have foreseen that
compiling the extensions would be complicated, and provided a `Setup'
file for you to edit.  This will likely only be done if the module
distribution contains many separate extension modules, or if they often
require elaborate sets of compiler flags in order to work.

A `Setup' file, if present, is parsed in order to get a list of
extensions to build.  Each line in a `Setup' describes a single module.
Lines have the following structure:

    module ... [sourcefile ...] [cpparg ...] [library ...]

Let’s examine each of the fields in turn.

   * `module' is the name of the extension module to be built, and
     should be a valid Python identifier.  You can’t just change this
     in order to rename a module (edits to the source code would also
     be needed), so this should be left alone.

   * `sourcefile' is anything that’s likely to be a source code file,
     at least judging by the filename.  Filenames ending in `.c' are
     assumed to be written in C, filenames ending in `.C', `.cc', and
     `.c++' are assumed to be C++, and filenames ending in `.m' or
     `.mm' are assumed to be in Objective C.

   * `cpparg' is an argument for the C preprocessor,  and is anything
     starting with `-I', `-D', `-U' or `-C'.

   * `library' is anything ending in `.a' or beginning with `-l' or
     `-L'.

If a particular platform requires a special library on your platform,
you can add it by editing the `Setup' file and running `python setup.py
build'.  For example, if the module defined by the line

    foo foomodule.c

must be linked with the math library `libm.a' on your platform, simply
add `-lm' to the line:

    foo foomodule.c -lm

Arbitrary switches intended for the compiler or the linker can be
supplied with the `-Xcompiler' `arg' and `-Xlinker' `arg' options:

    foo foomodule.c -Xcompiler -o32 -Xlinker -shared -lm

The next option after `-Xcompiler' and `-Xlinker' will be appended to
the proper command line, so in the above example the compiler will be
passed the `-o32' option, and the linker will be passed `-shared'.  If
a compiler option requires an argument, you’ll have to supply
multiple `-Xcompiler' options; for example, to pass `-x c++' the
`Setup' file would have to contain `-Xcompiler -x -Xcompiler c++'.

Compiler flags can also be supplied through setting the `CFLAGS'
environment variable.  If set, the contents of `CFLAGS' will be added to
the compiler flags specified in the  `Setup' file.


File: python.info,  Node: Using non-Microsoft compilers on Windows,  Prev: Tweaking compiler/linker flags,  Up: Building Extensions Tips and Tricks

18.6.2 Using non-Microsoft compilers on Windows
-----------------------------------------------

* Menu:

* Borland/CodeGear C++::
* GNU C / Cygwin / MinGW::


File: python.info,  Node: Borland/CodeGear C++,  Next: GNU C / Cygwin / MinGW,  Up: Using non-Microsoft compilers on Windows

18.6.2.1 Borland/CodeGear C++
.............................

This subsection describes the necessary steps to use Distutils with the
Borland C++ compiler version 5.5.  First you have to know that
Borland’s object file format (OMF) is different from the format used
by the Python version you can download from the Python or ActiveState
Web site.  (Python is built with Microsoft Visual C++, which uses COFF
as the object file format.) For this reason you have to convert
Python’s library `python25.lib' into the Borland format.  You can do
this as follows:

    coff2omf python25.lib python25_bcpp.lib

The `coff2omf' program comes with the Borland compiler.  The file
`python25.lib' is in the `Libs' directory of your Python installation.
If your extension uses other libraries (zlib, …) you have to convert
them too.

The converted files have to reside in the same directories as the normal
libraries.

How does Distutils manage to use these libraries with their changed
names?  If the extension needs a library (eg. `foo') Distutils checks
first if it finds a library with suffix `_bcpp' (eg. `foo_bcpp.lib')
and then uses this library.  In the case it doesn’t find such a
special library it uses the default name (`foo.lib'.) (1)

To let Distutils compile your extension with Borland C++ you now have
to type:

    python setup.py build --compiler=bcpp

If you want to use the Borland C++ compiler as the default, you could
specify this in your personal or system-wide configuration file for
Distutils (see section *Note Distutils Configuration Files: 32ae.)

See also
........

C++Builder Compiler(2)
     Information about the free C++ compiler from Borland, including
     links to the download pages.

Creating Python Extensions Using Borland's Free Compiler(3)
     Document describing how to use Borland’s free command-line C++
     compiler to build Python.

---------- Footnotes ----------

(1) This also means you could replace all existing COFF-libraries with
OMF-libraries of the same name.

(2) https://www.embarcadero.com/products

(3) http://www.cyberus.ca/~g_will/pyExtenDL.shtml


File: python.info,  Node: GNU C / Cygwin / MinGW,  Prev: Borland/CodeGear C++,  Up: Using non-Microsoft compilers on Windows

18.6.2.2 GNU C / Cygwin / MinGW
...............................

This section describes the necessary steps to use Distutils with the
GNU C/C++ compilers in their Cygwin and MinGW distributions. (1) For a
Python interpreter that was built with Cygwin, everything should work
without any of these following steps.

Not all extensions can be built with MinGW or Cygwin, but many can.
Extensions most likely to not work are those that use C++ or depend on
Microsoft Visual C extensions.

To let Distutils compile your extension with Cygwin you have to type:

    python setup.py build --compiler=cygwin

and for Cygwin in no-cygwin mode (2) or for MinGW type:

    python setup.py build --compiler=mingw32

If you want to use any of these options/compilers as default, you should
consider writing it in your personal or system-wide configuration file
for Distutils (see section *Note Distutils Configuration Files: 32ae.)

* Menu:

* Older Versions of Python and MinGW::

---------- Footnotes ----------

(1) Check <https://www.sourceware.org/cygwin/> and
<http://www.mingw.org/> for more information

(2) Then you have no POSIX emulation available, but you also don’t
need `cygwin1.dll'.


File: python.info,  Node: Older Versions of Python and MinGW,  Up: GNU C / Cygwin / MinGW

18.6.2.3 Older Versions of Python and MinGW
...........................................

The following instructions only apply if you’re using a version of
Python inferior to 2.4.1 with a MinGW inferior to 3.0.0 (with
binutils-2.13.90-20030111-1).

These compilers require some special libraries.  This task is more
complex than for Borland’s C++, because there is no program to
convert the library.  First you have to create a list of symbols which
the Python DLL exports. (You can find a good program for this task at
<https://sourceforge.net/projects/mingw/files/MinGW/Extension/pexports/>).

    pexports python25.dll >python25.def

The location of an installed `python25.dll' will depend on the
installation options and the version and language of Windows.  In a
“just for me” installation, it will appear in the root of the
installation directory.  In a shared installation, it will be located
in the system directory.

Then you can create from these information an import library for gcc.

    /cygwin/bin/dlltool --dllname python25.dll --def python25.def --output-lib libpython25.a

The resulting library has to be placed in the same directory as
`python25.lib'. (Should be the `libs' directory under your Python
installation directory.)

If your extension uses other libraries (zlib,…) you might  have to
convert them too. The converted files have to reside in the same
directories as the normal libraries do.

See also
........

Building Python modules on MS Windows platform with MinGW(1)
     Information about building the required libraries for the MinGW
     environment.

---------- Footnotes ----------

(1) http://old.zope.org/Members/als/tips/win32_mingw_modules


File: python.info,  Node: Python Module Index,  Next: Index,  Prev: Installing Python Modules Legacy version,  Up: Top

Python Module Index
*******************

* Menu:

* __builtin__: 0. The module that provides the built-in namespace.
* __future__: 1. Future statement definitions
* __main__: 2. The environment where the top-level script is run.
* _winreg: 3. Routines and objects for manipulating the Windows
                        registry.
* abc: 4. Abstract base classes according to PEP 3119.
* aepack: 5. Conversion between Python variables and AppleEvent
                        data containers.
* aetools: 6. Basic support for sending Apple Events
* aetypes: 7. Python representation of the Apple Event Object Model.
* aifc: 8. Read and write audio files in AIFF or AIFC format.
* AL: 9. Constants used with the al module.
* al: a. Audio functions on the SGI.
* anydbm: b. Generic interface to DBM-style database modules.
* applesingle: c. Rudimentary decoder for AppleSingle format files.
* argparse: d. Command-line option and argument parsing library.
* array: e. Space efficient arrays of uniformly typed numeric
                        values.
* ast: f. Abstract Syntax Tree classes and manipulation.
* asynchat: 10. Support for asynchronous command/response protocols.
* asyncore: 11. A base class for developing asynchronous socket
                        handling services.
* atexit: 12. Register and execute cleanup functions.
* audioop: 13. Manipulate raw audio data.
* autoGIL: 14. Global Interpreter Lock handling in event loops.
* base64: 15. RFC 3548: Base16, Base32, Base64 Data
                        Encodings
* BaseHTTPServer: 16. Basic HTTP server (base class for SimpleHTTPServer and
                        CGIHTTPServer).
* Bastion: 17. Providing restricted access to objects.
* bdb: 18. Debugger framework.
* binascii: 19. Tools for converting between binary and various ASCII-
                        encoded binary representations.
* binhex: 1a. Encode and decode files in binhex4 format.
* bisect: 1b. Array bisection algorithms for binary searching.
* bsddb: 1c. Interface to Berkeley DB database library
* buildtools: 1d. Helper module for BuildApplet, BuildApplication
                        and macfreeze.
* bz2: 1e. Interface to compression and decompression routines
                        compatible with bzip2.
* calendar: 1f. Functions for working with calendars, including
                        some emulation of the Unix cal program.
* Carbon.AE: 20. Interface to the Apple Events toolbox.
* Carbon.AH: 21. Interface to the Apple Help manager.
* Carbon.App: 22. Interface to the Appearance Manager.
* Carbon.Appearance: 23. Constant definitions for the interface to the
                        Appearance Manager.
* Carbon.CarbonEvents: 24. Constants for the interface to the Carbon Event
                        Manager.
* Carbon.CarbonEvt: 25. Interface to the Carbon Event Manager.
* Carbon.CF: 26. Interface to the Core Foundation.
* Carbon.CG: 27. Interface to Core Graphics.
* Carbon.Cm: 28. Interface to the Component Manager.
* Carbon.Components: 29. Constants for the interface to the Component Manager.
* Carbon.ControlAccessor: 2a. Accessor functions for the interface to the Control
                          Manager.
* Carbon.Controls: 2b. Constants for the interface to the Control Manager.
* Carbon.CoreFounation: 2c. Constants for the interface to CoreFoundation.
* Carbon.CoreGraphics: 2d. Constants for the interface to CoreGraphics.
* Carbon.Ctl: 2e. Interface to the Control Manager.
* Carbon.Dialogs: 2f. Constants for the interface to the Dialog Manager.
* Carbon.Dlg: 30. Interface to the Dialog Manager.
* Carbon.Drag: 31. Interface to the Drag and Drop Manager.
* Carbon.Dragconst: 32. Constants for the interface to the Drag and Drop
                        Manager.
* Carbon.Events: 33. Constants for the interface to the classic Event
                        Manager.
* Carbon.Evt: 34. Interface to the classic Event Manager.
* Carbon.File: 35. Interface to the File Manager.
* Carbon.Files: 36. Constants for the interface to the File Manager.
* Carbon.Fm: 37. Interface to the Font Manager.
* Carbon.Folder: 38. Interface to the Folder Manager.
* Carbon.Folders: 39. Constants for the interface to the Folder Manager.
* Carbon.Fonts: 3a. Constants for the interface to the Font Manager.
* Carbon.Help: 3b. Interface to the Carbon Help Manager.
* Carbon.IBCarbon: 3c. Interface to the Carbon InterfaceBuilder support
                        libraries.
* Carbon.IBCarbonRuntime: 3d. Constants for the interface to the Carbon
                          InterfaceBuilder support libraries.
* Carbon.Icns: 3e. Interface to the Carbon Icon Manager
* Carbon.Icons: 3f. Constants for the interface to the Carbon Icon Manager
* Carbon.Launch: 40. Interface to the Carbon Launch Services.
* Carbon.LaunchServices: 41. Constants for the interface to the Carbon Launch
                         Services.
* Carbon.List: 42. Interface to the List Manager.
* Carbon.Lists: 43. Constants for the interface to the List Manager.
* Carbon.MacHelp: 44. Constants for the interface to the Carbon Help
                        Manager.
* Carbon.MediaDescr: 45. Parsers and generators for Quicktime Media descriptors
* Carbon.Menu: 46. Interface to the Menu Manager.
* Carbon.Menus: 47. Constants for the interface to the Menu Manager.
* Carbon.Mlte: 48. Interface to the MultiLingual Text Editor.
* Carbon.OSA: 49. Interface to the Carbon OSA Library.
* Carbon.OSAconst: 4a. Constants for the interface to the Carbon OSA Library.
* Carbon.Qd: 4b. Interface to the QuickDraw toolbox.
* Carbon.Qdoffs: 4c. Interface to the QuickDraw Offscreen APIs.
* Carbon.QDOffscreen: 4d. Constants for the interface to the QuickDraw Offscreen
                        APIs.
* Carbon.Qt: 4e. Interface to the QuickTime toolbox.
* Carbon.QuickDraw: 4f. Constants for the interface to the QuickDraw toolbox.
* Carbon.QuickTime: 50. Constants for the interface to the QuickTime toolbox.
* Carbon.Res: 51. Interface to the Resource Manager and Handles.
* Carbon.Resources: 52. Constants for the interface to the Resource Manager
                        and Handles.
* Carbon.Scrap: 53. The Scrap Manager provides basic services for
                        implementing cut & paste and clipboard operations.
* Carbon.Snd: 54. Interface to the Sound Manager.
* Carbon.Sound: 55. Constants for the interface to the Sound Manager.
* Carbon.TE: 56. Interface to TextEdit.
* Carbon.TextEdit: 57. Constants for the interface to TextEdit.
* Carbon.Win: 58. Interface to the Window Manager.
* Carbon.Windows: 59. Constants for the interface to the Window Manager.
* cd: 5a. Interface to the CD-ROM on Silicon Graphics systems.
* cfmfile: 5b. Code Fragment Resource module.
* cgi: 5c. Helpers for running Python scripts via the Common
                        Gateway Interface.
* CGIHTTPServer: 5d. This module provides a request handler for HTTP
                        servers which can run CGI scripts.
* cgitb: 5e. Configurable traceback handler for CGI scripts.
* chunk: 5f. Module to read IFF chunks.
* cmath: 60. Mathematical functions for complex numbers.
* cmd: 61. Build line-oriented command interpreters.
* code: 62. Facilities to implement read-eval-print loops.
* codecs: 63. Encode and decode data and streams.
* codeop: 64. Compile (possibly incomplete) Python code.
* collections: 65. High-performance datatypes
* ColorPicker: 66. Interface to the standard color selection dialog.
* colorsys: 67. Conversion functions between RGB and other color
                        systems.
* commands: 68. Utility functions for running external commands.
* compileall: 69. Tools for byte-compiling all Python source files in a
                        directory tree.
* compiler: 6a. Python code compiler written in Python.
* compiler.ast: 6b.
* compiler.visitor: 6c.
* ConfigParser: 6d. Configuration file parser.
* contextlib: 6e. Utilities for with-statement contexts.
* Cookie: 6f. Support for HTTP state management (cookies).
* cookielib: 70. Classes for automatic handling of HTTP cookies.
* copy: 71. Shallow and deep copy operations.
* copy_reg: 72. Register pickle support functions.
* cPickle: 73. Faster version of pickle, but not subclassable.
* cProfile: 74.
* crypt: 75. The crypt() function used to check Unix passwords.
* cStringIO: 76. Faster version of StringIO, but not
                        subclassable.
* csv: 77. Write and read tabular data to and from delimited
                        files.
* ctypes: 78. A foreign function library for Python.
* curses: 79. An interface to the curses library, providing
                        portable terminal handling.
* curses.ascii: 7a. Constants and set-membership functions for ASCII
                        characters.
* curses.panel: 7b. A panel stack extension that adds depth to curses
                        windows.
* curses.textpad: 7c. Emacs-like input editing in a curses window.
* datetime: 7d. Basic date and time types.
* dbhash: 7e. DBM-style interface to the BSD database library.
* dbm: 7f. The standard "database" interface, based on
                        ndbm.
* decimal: 80. Implementation of the General Decimal Arithmetic
                        Specification.
* DEVICE: 81. Constants used with the gl module.
* difflib: 82. Helpers for computing differences between objects.
* dircache: 83. Return directory listing, with cache mechanism.
* dis: 84. Disassembler for Python bytecode.
* distutils: 85. Support for building and installing Python modules
                        into an existing Python installation.
* distutils.archive_util: 86. Utility functions for creating archive files
                          (tarballs, zip files, ...)
* distutils.bcppcompiler: 87.
* distutils.ccompiler: 88. Abstract CCompiler class
* distutils.cmd: 89. This module provides the abstract base class Command.
                        This class is subclassed by the modules in the
                        distutils.command subpackage.
* distutils.command: 8a. This subpackage contains one module for each standard
                        Distutils command.
* distutils.command.bdist: 8b. Build a binary installer for a package
* distutils.command.bdist_dumb: 8c. Build a "dumb" installer - a simple archive of
                                files
* distutils.command.bdist_msi: 8d. Build a binary distribution as a Windows MSI
                               file
* distutils.command.bdist_packager: 8e. Abstract base class for packagers
* distutils.command.bdist_rpm: 8f. Build a binary distribution as a Redhat RPM and
                               SRPM
* distutils.command.bdist_wininst: 90. Build a Windows installer
* distutils.command.build: 91. Build all files of a package
* distutils.command.build_clib: 92. Build any C libraries in a package
* distutils.command.build_ext: 93. Build any extensions in a package
* distutils.command.build_py: 94. Build the .py/.pyc files of a package
* distutils.command.build_scripts: 95. Build the scripts of a package
* distutils.command.check: 96. Check the metadata of a package
* distutils.command.clean: 97. Clean a package build area
* distutils.command.config: 98. Perform package configuration
* distutils.command.install: 99. Install a package
* distutils.command.install_data: 9a. Install data files from a package
* distutils.command.install_headers: 9b. Install C/C++ header files from a package
* distutils.command.install_lib: 9c. Install library files from a package
* distutils.command.install_scripts: 9d. Install script files from a package
* distutils.command.register: 9e. Register a module with the Python Package Index
* distutils.command.sdist: 9f. Build a source distribution
* distutils.core: a0. The core Distutils functionality
* distutils.cygwinccompiler: a1.
* distutils.debug: a2. Provides the debug flag for distutils
* distutils.dep_util: a3. Utility functions for simple dependency checking
* distutils.dir_util: a4. Utility functions for operating on directories and
                        directory trees
* distutils.dist: a5. Provides the Distribution class, which
                        represents the module distribution being
                        built/installed/distributed
* distutils.emxccompiler: a6. OS/2 EMX Compiler support
* distutils.errors: a7. Provides standard distutils exceptions
* distutils.extension: a8. Provides the Extension class, used to describe
                        C/C++ extension modules in setup scripts
* distutils.fancy_getopt: a9. Additional getopt functionality
* distutils.file_util: aa. Utility functions for operating on single files
* distutils.filelist: ab. The FileList class, used for poking about the
                        file system and building lists of files.
* distutils.log: ac. A simple logging mechanism, 282-style
* distutils.msvccompiler: ad. Microsoft Compiler
* distutils.spawn: ae. Provides the spawn() function
* distutils.sysconfig: af. Low-level access to configuration information of the
                        Python interpreter.
* distutils.text_file: b0. provides the TextFile class, a simple interface
                        to text files
* distutils.unixccompiler: b1. UNIX C Compiler
* distutils.util: b2. Miscellaneous other utility functions
* distutils.version: b3. implements classes that represent module version
                        numbers.
* dl: b4. Call C functions in shared objects.
* doctest: b5. Test pieces of code within docstrings.
* DocXMLRPCServer: b6. Self-documenting XML-RPC server implementation.
* dumbdbm: b7. Portable implementation of the simple DBM interface.
* dummy_thread: b8. Drop-in replacement for the thread module.
* dummy_threading: b9. Drop-in replacement for the threading module.
* EasyDialogs: ba. Basic Macintosh dialogs.
* email: bb. Package supporting the parsing,
                        manipulating, and generating email
                        messages, including MIME documents.
* email.charset: bc. Character Sets
* email.encoders: bd. Encoders for email message payloads.
* email.errors: be. The exception classes used by the email package.
* email.generator: bf. Generate flat text email messages from a message
                        structure.
* email.header: c0. Representing non-ASCII headers
* email.iterators: c1. Iterate over a message object tree.
* email.message: c2. The base class representing email messages.
* email.mime: c3. Build MIME messages.
* email.parser: c4. Parse flat text email messages to produce a message
                        object structure.
* email.utils: c5. Miscellaneous email package utilities.
* encodings.idna: c6. Internationalized Domain Names implementation
* encodings.utf_8_sig: c7. UTF-8 codec with BOM signature
* ensurepip: c8. Bootstrapping the ``pip`` installer into an
                        existing Python installation or virtual environment.
* errno: c9. Standard errno system symbols.
* exceptions: ca. Standard exception classes.
* fcntl: cb. The fcntl() and ioctl() system calls.
* filecmp: cc. Compare files efficiently.
* fileinput: cd. Loop over standard input or a list of files.
* findertools: ce. Wrappers around the finder's Apple Events interface.
* FL: cf. Constants used with the fl module.
* fl: d0. FORMS library for applications with graphical user
                        interfaces.
* flp: d1. Functions for loading stored FORMS designs.
* fm: d2. Font Manager interface for SGI workstations.
* fnmatch: d3. Unix shell style filename pattern matching.
* formatter: d4. Generic output formatter and device interface.
* fpectl: d5. Provide control for floating point exception handling.
* fpformat: d6. General floating point formatting functions.
* fractions: d7. Rational numbers.
* FrameWork: d8. Interactive application framework.
* ftplib: d9. FTP protocol client (requires sockets).
* functools: da. Higher-order functions and operations on callable
                        objects.
* future_builtins: db.
* gc: dc. Interface to the cycle-detecting garbage collector.
* gdbm: dd. GNU's reinterpretation of dbm.
* gensuitemodule: de. Create a stub package from an OSA dictionary
* getopt: df. Portable parser for command line options; support both
                        short and long option names.
* getpass: e0. Portable reading of passwords and retrieval of the
                        userid.
* gettext: e1. Multilingual internationalization services.
* gl: e2. Functions from the Silicon Graphics Graphics Library.
* GL: e3. Constants used with the gl module.
* glob: e4. Unix shell style pathname pattern expansion.
* grp: e5. The group database (getgrnam() and friends).
* gzip: e6. Interfaces for gzip compression and decompression
                        using file objects.
* hashlib: e7. Secure hash and message digest algorithms.
* heapq: e8. Heap queue algorithm (a.k.a. priority queue).
* hmac: e9. Keyed-Hashing for Message Authentication (HMAC)
                        implementation
* hotshot: ea. High performance logging profiler, mostly
                        written in C.
* hotshot.stats: eb. Statistical analysis for Hotshot
* htmlentitydefs: ec. Definitions of HTML general entities.
* htmllib: ed. A parser for HTML documents.
* HTMLParser: ee. A simple parser that can handle HTML and XHTML.
* httplib: ef. HTTP and HTTPS protocol client (requires sockets).
* ic: f0. Access to the Mac OS X Internet Config.
* icopen: f1. Internet Config replacement for open().
* imageop: f2. Manipulate raw image data.
* imaplib: f3. IMAP4 protocol client (requires sockets).
* imgfile: f4. Support for SGI imglib files.
* imghdr: f5. Determine the type of image contained in a file or
                        byte stream.
* imp: f6. Access the implementation of the import statement.
* importlib: f7. Convenience wrappers for __import__
* imputil: f8. Manage and augment the import process.
* inspect: f9. Extract information and source code from live objects.
* io: fa. Core tools for working with streams.
* itertools: fb. Functions creating iterators for efficient looping.
* jpeg: fc. Read and write image files in compressed JPEG format.
* json: fd. Encode and decode the JSON format.
* keyword: fe. Test whether a string is a keyword in Python.
* lib2to3: ff. the 2to3 library
* linecache: 100. This module provides random access to individual lines
                        from text files.
* locale: 101. Internationalization services.
* logging: 102. Flexible event logging system for applications.
* logging.config: 103. Configuration of the logging module.
* logging.handlers: 104. Handlers for the logging module.
* macerrors: 105. Constant definitions for many Mac OS error codes.
* MacOS: 106. Access to Mac OS-specific interpreter features.
* macostools: 107. Convenience routines for file manipulation.
* macpath: 108. Mac OS 9 path manipulation functions.
* macresource: 109. Locate script resources.
* mailbox: 10a. Manipulate mailboxes in various formats
* mailcap: 10b. Mailcap file handling.
* marshal: 10c. Convert Python objects to streams of bytes and back
                        (with different constraints).
* math: 10d. Mathematical functions (sin() etc.).
* md5: 10e. RSA's MD5 message digest algorithm.
* mhlib: 10f. Manipulate MH mailboxes from Python.
* mimetools: 110. Tools for parsing MIME-style message bodies.
* mimetypes: 111. Mapping of filename extensions to MIME types.
* MimeWriter: 112. Write MIME format files.
* mimify: 113. Mimification and unmimification of mail messages.
* MiniAEFrame: 114. Support to act as an Open Scripting Architecture (OSA)
                        server ("Apple Events").
* mmap: 115. Interface to memory-mapped files for Unix and Windows.
* modulefinder: 116. Find modules used by a script.
* msilib: 117. Creation of Microsoft Installer files, and CAB
                        files.
* msvcrt: 118. Miscellaneous useful routines from the MS VC++
                        runtime.
* multifile: 119. Support for reading files which contain distinct
                        parts, such as some MIME data.
* multiprocessing: 11a. Process-based "threading" interface.
* multiprocessing.connection: 11b. API for dealing with sockets.
* multiprocessing.dummy: 11c. Dumb wrapper around threading.
* multiprocessing.managers: 11d. Share data between process with shared objects.
* multiprocessing.pool: 11e. Create pools of processes.
* multiprocessing.sharedctypes: 11f. Allocate ctypes objects from shared memory.
* mutex: 120. Lock and queue for mutual exclusion.
* Nav: 121. Interface to Navigation Services.
* netrc: 122. Loading of .netrc files.
* new: 123. Interface to the creation of runtime implementation
                        objects.
* nis: 124. Interface to Sun's NIS (Yellow Pages) library.
* nntplib: 125. NNTP protocol client (requires sockets).
* numbers: 126. Numeric abstract base classes (Complex,
                        Real, Integral, etc.).
* operator: 127. Functions corresponding to the standard operators.
* optparse: 128. Command-line option parsing library.
* os: 129. Miscellaneous operating system interfaces.
* os.path: 12a. Operations on pathnames.
* ossaudiodev: 12b. Access to OSS-compatible audio devices.
* parser: 12c. Access parse trees for Python source code.
* pdb: 12d. The Python debugger for interactive interpreters.
* pickle: 12e. Convert Python objects to streams of bytes and back.
* pickletools: 12f. Contains extensive comments about the pickle protocols
                        and pickle-machine opcodes, as well as some
                        useful functions.
* pipes: 130. A Python interface to Unix shell pipelines.
* PixMapWrapper: 131. Wrapper for PixMap objects.
* pkgutil: 132. Utilities for the import system.
* platform: 133. Retrieves as much platform identifying data as
                        possible.
* plistlib: 134. Generate and parse Mac OS X plist files.
* popen2: 135. Subprocesses with accessible standard I/O streams.
* poplib: 136. POP3 protocol client (requires sockets).
* posix: 137. The most common POSIX system calls (normally used via
                        module os).
* posixfile: 138. A file-like object with support for locking.
* pprint: 139. Data pretty printer.
* profile: 13a. Python source profiler.
* pstats: 13b. Statistics object for use with the profiler.
* pty: 13c. Pseudo-Terminal Handling for Linux.
* pwd: 13d. The password database (getpwnam() and friends).
* py_compile: 13e. Generate byte-code files from Python source files.
* pyclbr: 13f. Supports information extraction for a Python class
                        browser.
* pydoc: 140. Documentation generator and online help system.
* Queue: 141. A synchronized queue class.
* quopri: 142. Encode and decode files using the MIME quoted-
                        printable encoding.
* random: 143. Generate pseudo-random numbers with various common
                        distributions.
* re: 144. Regular expression operations.
* readline: 145. GNU readline support for Python.
* resource: 146. An interface to provide resource usage information on
                        the current process.
* rexec: 147. Basic restricted execution framework.
* rfc822: 148. Parse 2822 style mail messages.
* rlcompleter: 149. Python identifier completion, suitable for the
                        GNU readline library.
* robotparser: 14a. Loads a robots.txt file and answers questions about
                        fetchability of other URLs.
* runpy: 14b. Locate and run Python modules without importing them
                        first.
* sched: 14c. General purpose event scheduler.
* ScrolledText: 14d. Text widget with a vertical scroll bar.
* select: 14e. Wait for I/O completion on multiple streams.
* sets: 14f. Implementation of sets of unique elements.
* sgmllib: 150. Only as much of an SGML parser as needed to parse
                        HTML.
* sha: 151. NIST's secure hash algorithm, SHA.
* shelve: 152. Python object persistence.
* shlex: 153. Simple lexical analysis for Unix shell-like languages.
* shutil: 154. High-level file operations, including copying.
* signal: 155. Set handlers for asynchronous events.
* SimpleHTTPServer: 156. This module provides a basic request handler for HTTP
                        servers.
* SimpleXMLRPCServer: 157. Basic XML-RPC server implementation.
* site: 158. Module responsible for site-specific configuration.
* smtpd: 159. A SMTP server implementation in Python.
* smtplib: 15a. SMTP protocol client (requires sockets).
* sndhdr: 15b. Determine type of a sound file.
* socket: 15c. Low-level networking interface.
* SocketServer: 15d. A framework for network servers.
* spwd: 15e. The shadow password database (getspnam() and friends).
* sqlite3: 15f. A DB-API 2.0 implementation using SQLite 3.x.
* ssl: 160. TLS/SSL wrapper for socket objects
* stat: 161. Utilities for interpreting the results of
                        os.stat(), os.lstat() and os.fstat().
* statvfs: 162. Constants for interpreting the result of os.statvfs().
* string: 163. Common string operations.
* StringIO: 164. Read and write strings as if they were files.
* stringprep: 165. String preparation, as per RFC 3453
* struct: 166. Interpret strings as packed binary data.
* subprocess: 167. Subprocess management.
* sunau: 168. Provide an interface to the Sun AU sound format.
* sunaudiodev: 169. Access to Sun audio hardware.
* SUNAUDIODEV: 16a. Constants for use with sunaudiodev.
* symbol: 16b. Constants representing internal nodes of the parse
                        tree.
* symtable: 16c. Interface to the compiler's internal symbol tables.
* sys: 16d. Access system-specific parameters and functions.
* sysconfig: 16e. Python's configuration information
* syslog: 16f. An interface to the Unix syslog library routines.
* tabnanny: 170. Tool for detecting white space related problems in
                        Python source files in a directory tree.
* tarfile: 171. Read and write tar-format archive files.
* telnetlib: 172. Telnet client class.
* tempfile: 173. Generate temporary files and directories.
* termios: 174. POSIX style tty control.
* test: 175. Regression tests package containing the testing suite
                        for Python.
* test.test_support: 176. Support for Python regression tests.
* textwrap: 177. Text wrapping and filling
* thread: 178. Create multiple threads of control within one
                        interpreter.
* threading: 179. Higher-level threading interface.
* time: 17a. Time access and conversions.
* timeit: 17b. Measure the execution time of small code snippets.
* Tix: 17c. Tk Extension Widgets for Tkinter
* Tkinter: 17d. Interface to Tcl/Tk for graphical user interfaces
* token: 17e. Constants representing terminal nodes of the parse
                        tree.
* tokenize: 17f. Lexical scanner for Python source code.
* trace: 180. Trace or track Python statement execution.
* traceback: 181. Print or retrieve a stack traceback.
* ttk: 182. Tk themed widget set
* tty: 183. Utility functions that perform common terminal control
                        operations.
* turtle: 184. Turtle graphics for Tk
* types: 185. Names for built-in types.
* unicodedata: 186. Access the Unicode Database.
* unittest: 187. Unit testing framework for Python.
* urllib: 188. Open an arbitrary network resource by URL (requires
                        sockets).
* urllib2: 189. Next generation URL opening library.
* urlparse: 18a. Parse URLs into or assemble them from components.
* user: 18b. A standard way to reference user-specific modules.
* UserDict: 18c. Class wrapper for dictionary objects.
* UserList: 18d. Class wrapper for list objects.
* UserString: 18e. Class wrapper for string objects.
* uu: 18f. Encode and decode files in uuencode format.
* uuid: 190. UUID objects (universally unique identifiers)
                        according to RFC 4122
* videoreader: 191. Read QuickTime movies frame by frame for further
                        processing.
* W: 192. Widgets for the Mac, built on top of FrameWork.
* warnings: 193. Issue warning messages and control their disposition.
* wave: 194. Provide an interface to the WAV sound format.
* weakref: 195. Support for weak references and weak dictionaries.
* webbrowser: 196. Easy-to-use controller for Web browsers.
* whichdb: 197. Guess which DBM-style module created a given database.
* winsound: 198. Access to the sound-playing machinery for Windows.
* wsgiref: 199. WSGI Utilities and Reference Implementation.
* wsgiref.handlers: 19a. WSGI server/gateway base classes.
* wsgiref.headers: 19b. WSGI response header tools.
* wsgiref.simple_server: 19c. A simple WSGI HTTP server.
* wsgiref.util: 19d. WSGI environment utilities.
* wsgiref.validate: 19e. WSGI conformance checker.
* xdrlib: 19f. Encoders and decoders for the External Data
                        Representation (XDR).
* xml: 1a0. Package containing XML processing modules
* xml.dom: 1a1. Document Object Model API for Python.
* xml.dom.minidom: 1a2. Minimal Document Object Model (DOM) implementation.
* xml.dom.pulldom: 1a3. Support for building partial DOM trees from SAX
                        events.
* xml.etree.ElementTree: 1a4. Implementation of the ElementTree API.
* xml.parsers.expat: 1a5. An interface to the Expat non-validating XML parser.
* xml.sax: 1a6. Package containing SAX2 base classes and convenience
                        functions.
* xml.sax.handler: 1a7. Base classes for SAX event handlers.
* xml.sax.saxutils: 1a8. Convenience functions and classes for use with SAX.
* xml.sax.xmlreader: 1a9. Interface which SAX-compliant XML parsers must
                        implement.
* xmlrpclib: 1aa. XML-RPC client access.
* zipfile: 1ab. Read and write ZIP-format archive files.
* zipimport: 1ac. support for importing Python modules from ZIP
                        archives.
* zlib: 1ad. Low-level interface to compression and decompression
                        routines compatible with gzip.

