This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: FileCookieJar subclasses and co-operation with web browsers,  Next: CookiePolicy Objects,  Prev: CookieJar and FileCookieJar Objects,  Up: cookielib — Cookie handling for HTTP clients

5.20.21.2 FileCookieJar subclasses and co-operation with web browsers
.....................................................................

The following *Note CookieJar: 1d39. subclasses are provided for
reading and writing.

 -- Class: cookielib.MozillaCookieJar (filename, delayload=None,
          policy=None)
     A *Note FileCookieJar: 1ef6. that can load from and save cookies
     to disk in the Mozilla `cookies.txt' file format (which is also
     used by the Lynx and Netscape browsers).

          Note: Version 3 of the Firefox web browser no longer writes
          cookies in the `cookies.txt' file format.

          Note: This loses information about RFC 2965 cookies, and also
          about newer or non-standard cookie-attributes such as `port'.

          Warning: Back up your cookies before saving if you have
          cookies whose loss / corruption would be inconvenient (there
          are some subtleties which may lead to slight changes in the
          file over a load / save round-trip).

     Also note that cookies saved while Mozilla is running will get
     clobbered by Mozilla.

 -- Class: cookielib.LWPCookieJar (filename, delayload=None,
          policy=None)
     A *Note FileCookieJar: 1ef6. that can load from and save cookies
     to disk in format compatible with the libwww-perl library’s
     `Set-Cookie3' file format.  This is convenient if you want to
     store cookies in a human-readable file.


File: python.info,  Node: CookiePolicy Objects,  Next: DefaultCookiePolicy Objects,  Prev: FileCookieJar subclasses and co-operation with web browsers,  Up: cookielib — Cookie handling for HTTP clients

5.20.21.3 CookiePolicy Objects
..............................

Objects implementing the *Note CookiePolicy: 1ef7. interface have the
following methods:

 -- Method: CookiePolicy.set_ok (cookie, request)
     Return boolean value indicating whether cookie should be accepted
     from server.

     `cookie' is a *Note cookielib.Cookie: 1efd. instance.  `request'
     is an object implementing the interface defined by the
     documentation for *Note CookieJar.extract_cookies(): 1f01.

 -- Method: CookiePolicy.return_ok (cookie, request)
     Return boolean value indicating whether cookie should be returned
     to server.

     `cookie' is a *Note cookielib.Cookie: 1efd. instance.  `request'
     is an object implementing the interface defined by the
     documentation for *Note CookieJar.add_cookie_header(): 1f00.

 -- Method: CookiePolicy.domain_return_ok (domain, request)
     Return false if cookies should not be returned, given cookie
     domain.

     This method is an optimization.  It removes the need for checking
     every cookie with a particular domain (which might involve reading
     many files).  Returning true from *Note domain_return_ok(): 1f12.
     and *Note path_return_ok(): 1f13. leaves all the work to *Note
     return_ok(): 1f11.

     If *Note domain_return_ok(): 1f12. returns true for the cookie
     domain, *Note path_return_ok(): 1f13. is called for the cookie
     path.  Otherwise, *Note path_return_ok(): 1f13. and *Note
     return_ok(): 1f11. are never called for that cookie domain.  If
     *Note path_return_ok(): 1f13. returns true, *Note return_ok():
     1f11. is called with the *Note Cookie: 1efd. object itself for a
     full check.  Otherwise, *Note return_ok(): 1f11. is never called
     for that cookie path.

     Note that *Note domain_return_ok(): 1f12. is called for every
     `cookie' domain, not just for the `request' domain.  For example,
     the function might be called with both `".example.com"' and
     `"www.example.com"' if the request domain is `"www.example.com"'.
     The same goes for *Note path_return_ok(): 1f13.

     The `request' argument is as documented for *Note return_ok():
     1f11.

 -- Method: CookiePolicy.path_return_ok (path, request)
     Return false if cookies should not be returned, given cookie path.

     See the documentation for *Note domain_return_ok(): 1f12.

In addition to implementing the methods above, implementations of the
*Note CookiePolicy: 1ef7. interface must also supply the following
attributes, indicating which protocols should be used, and how.  All of
these attributes may be assigned to.

 -- Attribute: CookiePolicy.netscape
     Implement Netscape protocol.

 -- Attribute: CookiePolicy.rfc2965
     Implement RFC 2965 protocol.

 -- Attribute: CookiePolicy.hide_cookie2
     Don’t add `Cookie2' header to requests (the presence of this
     header indicates to the server that we understand RFC 2965
     cookies).

The most useful way to define a *Note CookiePolicy: 1ef7. class is by
subclassing from *Note DefaultCookiePolicy: 1efb. and overriding some
or all of the methods above.  *Note CookiePolicy: 1ef7. itself may be
used as a ‘null policy’ to allow setting and receiving any and all
cookies (this is unlikely to be useful).


File: python.info,  Node: DefaultCookiePolicy Objects,  Next: Cookie Objects,  Prev: CookiePolicy Objects,  Up: cookielib — Cookie handling for HTTP clients

5.20.21.4 DefaultCookiePolicy Objects
.....................................

Implements the standard rules for accepting and returning cookies.

Both RFC 2965 and Netscape cookies are covered.  RFC 2965 handling is
switched off by default.

The easiest way to provide your own policy is to override this class
and call its methods in your overridden implementations before adding
your own additional checks:

    import cookielib
    class MyCookiePolicy(cookielib.DefaultCookiePolicy):
        def set_ok(self, cookie, request):
            if not cookielib.DefaultCookiePolicy.set_ok(self, cookie, request):
                return False
            if i_dont_want_to_store_this_cookie(cookie):
                return False
            return True

In addition to the features required to implement the *Note
CookiePolicy: 1ef7.  interface, this class allows you to block and
allow domains from setting and receiving cookies.  There are also some
strictness switches that allow you to tighten up the rather loose
Netscape protocol rules a little bit (at the cost of blocking some
benign cookies).

A domain blacklist and whitelist is provided (both off by default).
Only domains not in the blacklist and present in the whitelist (if the
whitelist is active) participate in cookie setting and returning.  Use
the `blocked_domains' constructor argument, and `blocked_domains()' and
`set_blocked_domains()' methods (and the corresponding argument and
methods for `allowed_domains').  If you set a whitelist, you can turn
it off again by setting it to *Note None: 3b2.

Domains in block or allow lists that do not start with a dot must equal
the cookie domain to be matched.  For example, `"example.com"' matches
a blacklist entry of `"example.com"', but `"www.example.com"' does not.
Domains that do start with a dot are matched by more specific domains
too. For example, both `"www.example.com"' and
`"www.coyote.example.com"' match `".example.com"' (but `"example.com"'
itself does not).  IP addresses are an exception, and must match
exactly.  For example, if blocked_domains contains `"192.168.1.2"' and
`".168.1.2"', 192.168.1.2 is blocked, but 193.168.1.2 is not.

*Note DefaultCookiePolicy: 1efb. implements the following additional
methods:

 -- Method: DefaultCookiePolicy.blocked_domains ()
     Return the sequence of blocked domains (as a tuple).

 -- Method: DefaultCookiePolicy.set_blocked_domains (blocked_domains)
     Set the sequence of blocked domains.

 -- Method: DefaultCookiePolicy.is_blocked (domain)
     Return whether `domain' is on the blacklist for setting or
     receiving cookies.

 -- Method: DefaultCookiePolicy.allowed_domains ()
     Return *Note None: 3b2, or the sequence of allowed domains (as a
     tuple).

 -- Method: DefaultCookiePolicy.set_allowed_domains (allowed_domains)
     Set the sequence of allowed domains, or *Note None: 3b2.

 -- Method: DefaultCookiePolicy.is_not_allowed (domain)
     Return whether `domain' is not on the whitelist for setting or
     receiving cookies.

*Note DefaultCookiePolicy: 1efb. instances have the following
attributes, which are all initialised from the constructor arguments of
the same name, and which may all be assigned to.

 -- Attribute: DefaultCookiePolicy.rfc2109_as_netscape
     If true, request that the *Note CookieJar: 1d39. instance
     downgrade RFC 2109 cookies (ie. cookies received in a `Set-Cookie'
     header with a version cookie-attribute of 1) to Netscape cookies
     by setting the version attribute of the *Note Cookie: 1efd.
     instance to 0.  The default value is *Note None: 3b2, in which
     case RFC 2109 cookies are downgraded if and only if RFC 2965
     handling is turned off.  Therefore, RFC 2109 cookies are
     downgraded by default.

     New in version 2.5.


General strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_domain
     Don’t allow sites to set two-component domains with country-code
     top-level domains like `.co.uk', `.gov.uk', `.co.nz'.etc.  This is
     far from perfect and isn’t guaranteed to work!

RFC 2965 protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_rfc2965_unverifiable
     Follow RFC 2965 rules on unverifiable transactions (usually, an
     unverifiable transaction is one resulting from a redirect or a
     request for an image hosted on another site).  If this is false,
     cookies are `never' blocked on the basis of verifiability

Netscape protocol strictness switches:

 -- Attribute: DefaultCookiePolicy.strict_ns_unverifiable
     Apply RFC 2965 rules on unverifiable transactions even to Netscape
     cookies.

 -- Attribute: DefaultCookiePolicy.strict_ns_domain
     Flags indicating how strict to be with domain-matching rules for
     Netscape cookies.  See below for acceptable values.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_initial_dollar
     Ignore cookies in Set-Cookie: headers that have names starting
     with `'$''.

 -- Attribute: DefaultCookiePolicy.strict_ns_set_path
     Don’t allow setting cookies whose path doesn’t path-match
     request URI.

`strict_ns_domain' is a collection of flags.  Its value is constructed
by or-ing together (for example,
`DomainStrictNoDots|DomainStrictNonDomain' means both flags are set).

 -- Attribute: DefaultCookiePolicy.DomainStrictNoDots
     When setting cookies, the ‘host prefix’ must not contain a dot
     (eg.  `www.foo.bar.com' can’t set a cookie for `.bar.com',
     because `www.foo' contains a dot).

 -- Attribute: DefaultCookiePolicy.DomainStrictNonDomain
     Cookies that did not explicitly specify a `domain'
     cookie-attribute can only be returned to a domain equal to the
     domain that set the cookie (eg.  `spam.example.com' won’t be
     returned cookies from `example.com' that had no `domain'
     cookie-attribute).

 -- Attribute: DefaultCookiePolicy.DomainRFC2965Match
     When setting cookies, require a full RFC 2965 domain-match.

The following attributes are provided for convenience, and are the most
useful combinations of the above flags:

 -- Attribute: DefaultCookiePolicy.DomainLiberal
     Equivalent to 0 (ie. all of the above Netscape domain strictness
     flags switched off).

 -- Attribute: DefaultCookiePolicy.DomainStrict
     Equivalent to `DomainStrictNoDots|DomainStrictNonDomain'.


File: python.info,  Node: Cookie Objects,  Next: Examples<16>,  Prev: DefaultCookiePolicy Objects,  Up: cookielib — Cookie handling for HTTP clients

5.20.21.5 Cookie Objects
........................

*Note Cookie: 1efd. instances have Python attributes roughly
corresponding to the standard cookie-attributes specified in the
various cookie standards.  The correspondence is not one-to-one,
because there are complicated rules for assigning default values,
because the `max-age' and `expires' cookie-attributes contain
equivalent information, and because RFC 2109 cookies may be
‘downgraded’ by *Note cookielib: 70. from version 1 to version 0
(Netscape) cookies.

Assignment to these attributes should not be necessary other than in
rare circumstances in a *Note CookiePolicy: 1ef7. method.  The class
does not enforce internal consistency, so you should know what you’re
doing if you do that.

 -- Attribute: Cookie.version
     Integer or *Note None: 3b2.  Netscape cookies have *Note version:
     1f2c. 0. RFC 2965 and RFC 2109 cookies have a `version'
     cookie-attribute of 1.  However, note that *Note cookielib: 70.
     may ‘downgrade’ RFC 2109 cookies to Netscape cookies, in which
     case *Note version: 1f2c. is 0.

 -- Attribute: Cookie.name
     Cookie name (a string).

 -- Attribute: Cookie.value
     Cookie value (a string), or *Note None: 3b2.

 -- Attribute: Cookie.port
     String representing a port or a set of ports (eg. ‘80’, or
     ‘80,8080’), or *Note None: 3b2.

 -- Attribute: Cookie.path
     Cookie path (a string, eg. `'/acme/rocket_launchers'').

 -- Attribute: Cookie.secure
     `True' if cookie should only be returned over a secure connection.

 -- Attribute: Cookie.expires
     Integer expiry date in seconds since epoch, or *Note None: 3b2.
     See also the *Note is_expired(): 1f33. method.

 -- Attribute: Cookie.discard
     `True' if this is a session cookie.

 -- Attribute: Cookie.comment
     String comment from the server explaining the function of this
     cookie, or *Note None: 3b2.

 -- Attribute: Cookie.comment_url
     URL linking to a comment from the server explaining the function
     of this cookie, or *Note None: 3b2.

 -- Attribute: Cookie.rfc2109
     `True' if this cookie was received as an RFC 2109 cookie (ie. the
     cookie arrived in a `Set-Cookie' header, and the value of the
     Version cookie-attribute in that header was 1).  This attribute is
     provided because *Note cookielib: 70. may ‘downgrade’ RFC 2109
     cookies to Netscape cookies, in which case *Note version: 1f2c. is
     0.

     New in version 2.5.


 -- Attribute: Cookie.port_specified
     `True' if a port or set of ports was explicitly specified by the
     server (in the `Set-Cookie' / `Set-Cookie2' header).

 -- Attribute: Cookie.domain_specified
     `True' if a domain was explicitly specified by the server.

 -- Attribute: Cookie.domain_initial_dot
     `True' if the domain explicitly specified by the server began with
     a dot (`'.'').

Cookies may have additional non-standard cookie-attributes.  These may
be accessed using the following methods:

 -- Method: Cookie.has_nonstandard_attr (name)
     Return true if cookie has the named cookie-attribute.

 -- Method: Cookie.get_nonstandard_attr (name, default=None)
     If cookie has the named cookie-attribute, return its value.
     Otherwise, return `default'.

 -- Method: Cookie.set_nonstandard_attr (name, value)
     Set the value of the named cookie-attribute.

The *Note Cookie: 1efd. class also defines the following method:

 -- Method: Cookie.is_expired ([now=None])
     `True' if cookie has passed the time at which the server requested
     it should expire.  If `now' is given (in seconds since the epoch),
     return whether the cookie has expired at the specified time.


File: python.info,  Node: Examples<16>,  Prev: Cookie Objects,  Up: cookielib — Cookie handling for HTTP clients

5.20.21.6 Examples
..................

The first example shows the most common usage of *Note cookielib: 70.:

    import cookielib, urllib2
    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    r = opener.open("http://example.com/")

This example illustrates how to open a URL using your Netscape,
Mozilla, or Lynx cookies (assumes Unix/Netscape convention for location
of the cookies file):

    import os, cookielib, urllib2
    cj = cookielib.MozillaCookieJar()
    cj.load(os.path.join(os.path.expanduser("~"), ".netscape", "cookies.txt"))
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    r = opener.open("http://example.com/")

The next example illustrates the use of *Note DefaultCookiePolicy:
1efb. Turn on RFC 2965 cookies, be more strict about domains when
setting and returning Netscape cookies, and block some domains from
setting cookies or having them returned:

    import urllib2
    from cookielib import CookieJar, DefaultCookiePolicy
    policy = DefaultCookiePolicy(
        rfc2965=True, strict_ns_domain=DefaultCookiePolicy.DomainStrict,
        blocked_domains=["ads.net", ".ads.net"])
    cj = CookieJar(policy)
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    r = opener.open("http://example.com/")


File: python.info,  Node: Cookie — HTTP state management,  Next: xmlrpclib — XML-RPC client access,  Prev: cookielib — Cookie handling for HTTP clients,  Up: Internet Protocols and Support

5.20.22 `Cookie' — HTTP state management
------------------------------------------

     Note: The *Note Cookie: 6f. module has been renamed to
     `http.cookies' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

`Source code:' Lib/Cookie.py(1)

__________________________________________________________________

The *Note Cookie: 6f. module defines classes for abstracting the
concept of cookies, an HTTP state management mechanism. It supports
both simple string-only cookies, and provides an abstraction for having
any serializable data-type as cookie value.

The module formerly strictly applied the parsing rules described in the RFC
2109(2) and RFC 2068(3) specifications.  It has since been discovered
that MSIE 3.0x doesn’t follow the character rules outlined in those
specs and also many current day browsers and servers have relaxed
parsing rules when comes to Cookie handling.  As a result, the parsing
rules used are a bit less strict.

The character set, *Note string.ascii_letters: 990, *Note
string.digits: 993. and `!#$%&'*+-.^_`|~' denote the set of valid
characters allowed by this module in Cookie name (as *Note key: 1f42.).

     Note: On encountering an invalid cookie, *Note CookieError: 1f43.
     is raised, so if your cookie data comes from a browser you should
     always prepare for invalid data and catch *Note CookieError: 1f43.
     on parsing.

 -- Exception: Cookie.CookieError
     Exception failing because of RFC 2109(4) invalidity: incorrect
     attributes, incorrect `Set-Cookie' header, etc.

 -- Class: Cookie.BaseCookie ([input])
     This class is a dictionary-like object whose keys are strings and
     whose values are *Note Morsel: 1f45. instances. Note that upon
     setting a key to a value, the value is first converted to a *Note
     Morsel: 1f45. containing the key and the value.

     If `input' is given, it is passed to the *Note load(): 1f46.
     method.

 -- Class: Cookie.SimpleCookie ([input])
     This class derives from *Note BaseCookie: 1f44. and overrides
     `value_decode()' and `value_encode()' to be the identity and *Note
     str(): 1ea. respectively.

 -- Class: Cookie.SerialCookie ([input])
     This class derives from *Note BaseCookie: 1f44. and overrides
     `value_decode()' and `value_encode()' to be the *Note
     pickle.loads(): ef5. and *Note pickle.dumps(): 461.

     Deprecated since version 2.3: Reading pickled values from
     untrusted cookie data is a huge security hole, as pickle strings
     can be crafted to cause arbitrary code to execute on your server.
     It is supported for backwards compatibility only, and may
     eventually go away.


 -- Class: Cookie.SmartCookie ([input])
     This class derives from *Note BaseCookie: 1f44. It overrides
     `value_decode()' to be *Note pickle.loads(): ef5. if it is a valid
     pickle, and otherwise the value itself. It overrides
     `value_encode()' to be *Note pickle.dumps(): 461. unless it is a
     string, in which case it returns the value itself.

     Deprecated since version 2.3: The same security warning from *Note
     SerialCookie: 1f48. applies here.


A further security note is warranted.  For backwards compatibility, the
*Note Cookie: 6f. module exports a class named `Cookie' which is just
an alias for *Note SmartCookie: 1f49.  This is probably a mistake and
will likely be removed in a future version.  You should not use the
`Cookie' class in your applications, for the same reason why you should
not use the *Note SerialCookie: 1f48. class.

See also
........

Module *Note cookielib: 70.
     HTTP cookie handling for web `clients'.  The *Note cookielib: 70.
     and *Note Cookie: 6f.  modules do not depend on each other.

RFC 2109(5) - HTTP State Management Mechanism
     This is the state management specification implemented by this
     module.

* Menu:

* Cookie Objects: Cookie Objects<2>.
* Morsel Objects::
* Example: Example<13>.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/Cookie.py

(2) https://tools.ietf.org/html/rfc2109.html

(3) https://tools.ietf.org/html/rfc2068.html

(4) https://tools.ietf.org/html/rfc2109.html

(5) https://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Cookie Objects<2>,  Next: Morsel Objects,  Up: Cookie — HTTP state management

5.20.22.1 Cookie Objects
........................

 -- Method: BaseCookie.value_decode (val)
     Return a decoded value from a string representation. Return value
     can be any type. This method does nothing in *Note BaseCookie:
     1f44. — it exists so it can be overridden.

 -- Method: BaseCookie.value_encode (val)
     Return an encoded value. `val' can be any type, but return value
     must be a string. This method does nothing in *Note BaseCookie:
     1f44. — it exists so it can be overridden.

     In general, it should be the case that *Note value_encode(): 1f4d.
     and *Note value_decode(): 1f4c. are inverses on the range of
     `value_decode'.

 -- Method: BaseCookie.output ([attrs[, header[, sep]]])
     Return a string representation suitable to be sent as HTTP
     headers. `attrs' and `header' are sent to each *Note Morsel:
     1f45.’s *Note output(): 1f4e. method. `sep' is used to join the
     headers together, and is by default the combination `'\r\n''
     (CRLF).

     Changed in version 2.5: The default separator has been changed
     from `'\n'' to match the cookie specification.


 -- Method: BaseCookie.js_output ([attrs])
     Return an embeddable JavaScript snippet, which, if run on a
     browser which supports JavaScript, will act the same as if the
     HTTP headers was sent.

     The meaning for `attrs' is the same as in *Note output(): 1f4e.

 -- Method: BaseCookie.load (rawdata)
     If `rawdata' is a string, parse it as an `HTTP_COOKIE' and add the
     values found there as *Note Morsel: 1f45.s. If it is a dictionary,
     it is equivalent to:

         for k, v in rawdata.items():
             cookie[k] = v


File: python.info,  Node: Morsel Objects,  Next: Example<13>,  Prev: Cookie Objects<2>,  Up: Cookie — HTTP state management

5.20.22.2 Morsel Objects
........................

 -- Class: Cookie.Morsel
     Abstract a key/value pair, which has some RFC 2109(1) attributes.

     Morsels are dictionary-like objects, whose set of keys is constant
     — the valid RFC 2109(2) attributes, which are

        * `expires'

        * `path'

        * `comment'

        * `domain'

        * `max-age'

        * `secure'

        * `version'

        * `httponly'

     The attribute `httponly' specifies that the cookie is only
     transferred in HTTP requests, and is not accessible through
     JavaScript. This is intended to mitigate some forms of cross-site
     scripting.

     The keys are case-insensitive.

     New in version 2.6: The `httponly' attribute was added.


 -- Attribute: Morsel.value
     The value of the cookie.

 -- Attribute: Morsel.coded_value
     The encoded value of the cookie — this is what should be sent.

 -- Attribute: Morsel.key
     The name of the cookie.

 -- Method: Morsel.set (key, value, coded_value)
     Set the `key', `value' and `coded_value' attributes.

 -- Method: Morsel.isReservedKey (K)
     Whether `K' is a member of the set of keys of a *Note Morsel: 1f45.

 -- Method: Morsel.output ([attrs[, header]])
     Return a string representation of the Morsel, suitable to be sent
     as an HTTP header. By default, all the attributes are included,
     unless `attrs' is given, in which case it should be a list of
     attributes to use. `header' is by default `"Set-Cookie:"'.

 -- Method: Morsel.js_output ([attrs])
     Return an embeddable JavaScript snippet, which, if run on a
     browser which supports JavaScript, will act the same as if the
     HTTP header was sent.

     The meaning for `attrs' is the same as in *Note output(): 1f56.

 -- Method: Morsel.OutputString ([attrs])
     Return a string representing the Morsel, without any surrounding
     HTTP or JavaScript.

     The meaning for `attrs' is the same as in *Note output(): 1f56.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2109.html

(2) https://tools.ietf.org/html/rfc2109.html


File: python.info,  Node: Example<13>,  Prev: Morsel Objects,  Up: Cookie — HTTP state management

5.20.22.3 Example
.................

The following example demonstrates how to use the *Note Cookie: 6f.
module.

    >>> import Cookie
    >>> C = Cookie.SimpleCookie()
    >>> C["fig"] = "newton"
    >>> C["sugar"] = "wafer"
    >>> print C # generate HTTP headers
    Set-Cookie: fig=newton
    Set-Cookie: sugar=wafer
    >>> print C.output() # same thing
    Set-Cookie: fig=newton
    Set-Cookie: sugar=wafer
    >>> C = Cookie.SimpleCookie()
    >>> C["rocky"] = "road"
    >>> C["rocky"]["path"] = "/cookie"
    >>> print C.output(header="Cookie:")
    Cookie: rocky=road; Path=/cookie
    >>> print C.output(attrs=[], header="Cookie:")
    Cookie: rocky=road
    >>> C = Cookie.SimpleCookie()
    >>> C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)
    >>> print C
    Set-Cookie: chips=ahoy
    Set-Cookie: vienna=finger
    >>> C = Cookie.SimpleCookie()
    >>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
    >>> print C
    Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
    >>> C = Cookie.SimpleCookie()
    >>> C["oreo"] = "doublestuff"
    >>> C["oreo"]["path"] = "/"
    >>> print C
    Set-Cookie: oreo=doublestuff; Path=/
    >>> C["twix"] = "none for you"
    >>> C["twix"].value
    'none for you'
    >>> C = Cookie.SimpleCookie()
    >>> C["number"] = 7 # equivalent to C["number"] = str(7)
    >>> C["string"] = "seven"
    >>> C["number"].value
    '7'
    >>> C["string"].value
    'seven'
    >>> print C
    Set-Cookie: number=7
    Set-Cookie: string=seven
    >>> # SerialCookie and SmartCookie are deprecated
    >>> # using it can cause security loopholes in your code.
    >>> C = Cookie.SerialCookie()
    >>> C["number"] = 7
    >>> C["string"] = "seven"
    >>> C["number"].value
    7
    >>> C["string"].value
    'seven'
    >>> print C
    Set-Cookie: number="I7\012."
    Set-Cookie: string="S'seven'\012p1\012."
    >>> C = Cookie.SmartCookie()
    >>> C["number"] = 7
    >>> C["string"] = "seven"
    >>> C["number"].value
    7
    >>> C["string"].value
    'seven'
    >>> print C
    Set-Cookie: number="I7\012."
    Set-Cookie: string=seven


File: python.info,  Node: xmlrpclib — XML-RPC client access,  Next: SimpleXMLRPCServer — Basic XML-RPC server,  Prev: Cookie — HTTP state management,  Up: Internet Protocols and Support

5.20.23 `xmlrpclib' — XML-RPC client access
---------------------------------------------

     Note: The *Note xmlrpclib: 1aa. module has been renamed to
     `xmlrpc.client' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

New in version 2.2.

`Source code:' Lib/xmlrpclib.py(1)

__________________________________________________________________

XML-RPC is a Remote Procedure Call method that uses XML passed via
HTTP(S) as a transport.  With it, a client can call methods with
parameters on a remote server (the server is named by a URI) and get
back structured data.  This module supports writing XML-RPC client
code; it handles all the details of translating between conformable
Python objects and XML on the wire.

     Warning: The *Note xmlrpclib: 1aa. module is not secure against
     maliciously constructed data.  If you need to parse untrusted or
     unauthenticated data see *Note XML vulnerabilities: 1abf.

Changed in version 2.7.9: For HTTPS URIs, *Note xmlrpclib: 1aa. now
performs all the necessary certificate and hostname checks by default.

 -- Class: xmlrpclib.ServerProxy (uri[, transport[, encoding[,
          verbose[, allow_none[, use_datetime[, context]]]]]])
     A *Note ServerProxy: 1f5d. instance is an object that manages
     communication with a remote XML-RPC server.  The required first
     argument is a URI (Uniform Resource Indicator), and will normally
     be the URL of the server.  The optional second argument is a
     transport factory instance; by default it is an internal
     `SafeTransport' instance for https: URLs and an internal HTTP
     `Transport' instance otherwise.  The optional third argument is an
     encoding, by default UTF-8. The optional fourth argument is a
     debugging flag.

     The following parameters govern the use of the returned proxy
     instance.  If `allow_none' is true,  the Python constant `None'
     will be translated into XML; the default behaviour is for `None'
     to raise a *Note TypeError: 218. This is a commonly-used extension
     to the XML-RPC specification, but isn’t supported by all clients
     and servers; see http://ontosys.com/xml-rpc/extensions.php(2) for
     a description.  The `use_datetime' flag can be used to cause
     date/time values to be presented as *Note datetime.datetime: 2dc.
     objects; this is false by default.  *Note datetime.datetime: 2dc.
     objects may be passed to calls.

     Both the HTTP and HTTPS transports support the URL syntax
     extension for HTTP Basic Authentication:
     `http://user:pass@host:port/path'.  The `user:pass' portion will
     be base64-encoded as an HTTP ‘Authorization’ header, and sent
     to the remote server as part of the connection process when
     invoking an XML-RPC method.  You only need to use this if the
     remote server requires a Basic Authentication user and password.
     If an HTTPS URL is provided, `context' may be *Note
     ssl.SSLContext: 2e5. and configures the SSL settings of the
     underlying HTTPS connection.

     The returned instance is a proxy object with methods that can be
     used to invoke corresponding RPC calls on the remote server.  If
     the remote server supports the introspection API, the proxy can
     also be used to query the remote server for the methods it
     supports (service discovery) and fetch other server-associated
     metadata.

     Types that are conformable (e.g. that can be marshalled through
     XML), include the following (and except where noted, they are
     unmarshalled as the same Python type):

     XML-RPC type               Python type
     --------------------------------------------------------------------------------------- 
     `boolean'                  *Note bool: 455.
     `int' or `i4'              *Note int: 1f2. or *Note long: 1f3. in range from
                                -2147483648 to 2147483647.
     `double'                   *Note float: 1eb.
     `string'                   *Note str: 1ea. or *Note unicode: 1f5.
     `array'                    *Note list: 3d6. or *Note tuple: 421. containing
                                conformable elements.  Arrays are returned as *Note lists:
                                3d6.
     `struct'                   *Note dict: 319.  Keys must be strings, values may be any
                                conformable type.  Objects of user-defined classes can be
                                passed in; only their *Note __dict__: 4a0. attribute is
                                transmitted.
     `dateTime.iso8601'         *Note DateTime: 376. or *Note datetime.datetime: 2dc.
                                Returned type depends on values of the `use_datetime'
                                flags.
     `base64'                   *Note Binary: 1f5e.
     `nil'                      The `None' constant.  Passing is allowed only if
                                `allow_none' is true.

     This is the full set of data types supported by XML-RPC.  Method
     calls may also raise a special *Note Fault: 1f5f. instance, used
     to signal XML-RPC server errors, or *Note ProtocolError: 1f60.
     used to signal an error in the HTTP/HTTPS transport layer.  Both
     *Note Fault: 1f5f. and *Note ProtocolError: 1f60. derive from a
     base class called `Error'.  Note that even though starting with
     Python 2.2 you can subclass built-in types, the xmlrpclib module
     currently does not marshal instances of such subclasses.

     When passing strings, characters special to XML such as `<', `>',
     and `&' will be automatically escaped.  However, it’s the
     caller’s responsibility to ensure that the string is free of
     characters that aren’t allowed in XML, such as the control
     characters with ASCII values between 0 and 31 (except, of course,
     tab, newline and carriage return); failing to do this will result
     in an XML-RPC request that isn’t well-formed XML.  If you have
     to pass arbitrary strings via XML-RPC, use the *Note Binary: 1f5e.
     wrapper class described below.

     `Server' is retained as an alias for *Note ServerProxy: 1f5d. for
     backwards compatibility.  New code should use *Note ServerProxy:
     1f5d.

     Changed in version 2.5: The `use_datetime' flag was added.

     Changed in version 2.6: Instances of *Note new-style class: 5ec.es
     can be passed in if they have an `__dict__' attribute and don’t
     have a base class that is marshalled in a special way.

     Changed in version 2.7.9: Added the `context' argument.


See also
........

XML-RPC HOWTO(3)
     A good description of XML-RPC operation and client software in
     several languages.  Contains pretty much everything an XML-RPC
     client developer needs to know.

XML-RPC Introspection(4)
     Describes the XML-RPC protocol extension for introspection.

XML-RPC Specification(5)
     The official specification.

Unofficial XML-RPC Errata(6)
     Fredrik Lundh’s “unofficial errata, intended to clarify certain
     details in the XML-RPC specification, as well as hint at ‘best
     practices’ to use when designing your own XML-RPC
     implementations.”

* Menu:

* ServerProxy Objects::
* Boolean Objects::
* DateTime Objects::
* Binary Objects::
* Fault Objects::
* ProtocolError Objects::
* MultiCall Objects::
* Convenience Functions::
* Example of Client Usage::
* Example of Client and Server Usage::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/xmlrpclib.py

(2)
https://web.archive.org/web/20130120074804/http://ontosys.com/xml-rpc/extensions.php

(3) http://www.tldp.org/HOWTO/XML-RPC-HOWTO/index.html

(4) http://xmlrpc-c.sourceforge.net/introspection.html

(5) http://www.xmlrpc.com/spec

(6) http://effbot.org/zone/xmlrpc-errata.htm


File: python.info,  Node: ServerProxy Objects,  Next: Boolean Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.1 ServerProxy Objects
.............................

A *Note ServerProxy: 1f5d. instance has a method corresponding to each
remote procedure call accepted by the XML-RPC server.  Calling the
method performs an RPC, dispatched by both name and argument signature
(e.g. the same method name can be overloaded with multiple argument
signatures).  The RPC finishes by returning a value, which may be
either returned data in a conformant type or a *Note Fault: 1f5f. or
*Note ProtocolError: 1f60. object indicating an error.

Servers that support the XML introspection API support some common
methods grouped under the reserved `system' attribute:

 -- Method: ServerProxy.system.listMethods ()
     This method returns a list of strings, one for each (non-system)
     method supported by the XML-RPC server.

 -- Method: ServerProxy.system.methodSignature (name)
     This method takes one parameter, the name of a method implemented
     by the XML-RPC server. It returns an array of possible signatures
     for this method. A signature is an array of types. The first of
     these types is the return type of the method, the rest are
     parameters.

     Because multiple signatures (ie. overloading) is permitted, this
     method returns a list of signatures rather than a singleton.

     Signatures themselves are restricted to the top level parameters
     expected by a method. For instance if a method expects one array
     of structs as a parameter, and it returns a string, its signature
     is simply “string, array”. If it expects three integers and
     returns a string, its signature is “string, int, int, int”.

     If no signature is defined for the method, a non-array value is
     returned. In Python this means that the type of the returned
     value will be something other than list.

 -- Method: ServerProxy.system.methodHelp (name)
     This method takes one parameter, the name of a method implemented
     by the XML-RPC server.  It returns a documentation string
     describing the use of that method. If no such string is available,
     an empty string is returned. The documentation string may contain
     HTML markup.


File: python.info,  Node: Boolean Objects,  Next: DateTime Objects,  Prev: ServerProxy Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.2 Boolean Objects
.........................

This class may be initialized from any Python value; the instance
returned depends only on its truth value.  It supports various Python
operators through *Note __cmp__(): 221, *Note __repr__(): 4a3, *Note
__int__(): 261, and *Note __nonzero__(): 734.  methods, all implemented
in the obvious ways.

It also has the following method, supported mainly for internal use by
the unmarshalling code:

 -- Method: Boolean.encode (out)
     Write the XML-RPC encoding of this Boolean item to the out stream
     object.

A working example follows. The server code:

    import xmlrpclib
    from SimpleXMLRPCServer import SimpleXMLRPCServer

    def is_even(n):
        return n % 2 == 0

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(is_even, "is_even")
    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    print "3 is even: %s" % str(proxy.is_even(3))
    print "100 is even: %s" % str(proxy.is_even(100))


File: python.info,  Node: DateTime Objects,  Next: Binary Objects,  Prev: Boolean Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.3 DateTime Objects
..........................

 -- Class: xmlrpclib.DateTime
     This class may be initialized with seconds since the epoch, a time
     tuple, an ISO 8601 time/date string, or a *Note datetime.datetime:
     2dc.  instance.  It has the following methods, supported mainly
     for internal use by the marshalling/unmarshalling code:

      -- Method: decode (string)
          Accept a string as the instance’s new time value.

      -- Method: encode (out)
          Write the XML-RPC encoding of this *Note DateTime: 376. item
          to the `out' stream object.

     It also supports certain of Python’s built-in operators through
     *Note __cmp__(): 221.  and *Note __repr__(): 4a3. methods.

A working example follows. The server code:

    import datetime
    from SimpleXMLRPCServer import SimpleXMLRPCServer
    import xmlrpclib

    def today():
        today = datetime.datetime.today()
        return xmlrpclib.DateTime(today)

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(today, "today")
    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib
    import datetime

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")

    today = proxy.today()
    # convert the ISO8601 string to a datetime object
    converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
    print "Today: %s" % converted.strftime("%d.%m.%Y, %H:%M")


File: python.info,  Node: Binary Objects,  Next: Fault Objects,  Prev: DateTime Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.4 Binary Objects
........................

 -- Class: xmlrpclib.Binary
     This class may be initialized from string data (which may include
     NULs). The primary access to the content of a *Note Binary: 1f5e.
     object is provided by an attribute:

      -- Attribute: data
          The binary data encapsulated by the *Note Binary: 1f5e.
          instance.  The data is provided as an 8-bit string.

     *Note Binary: 1f5e. objects have the following methods, supported
     mainly for internal use by the marshalling/unmarshalling code:

      -- Method: decode (string)
          Accept a base64 string and decode it as the instance’s new
          data.

      -- Method: encode (out)
          Write the XML-RPC base 64 encoding of this binary item to the
          `out' stream object.

          The encoded data will have newlines every 76 characters as per
          RFC 2045 section 6.8(1), which was the de facto standard
          base64 specification when the XML-RPC spec was written.

     It also supports certain of Python’s built-in operators through a
     *Note __cmp__(): 221. method.

Example usage of the binary objects.  We’re going to transfer an
image over XMLRPC:

    from SimpleXMLRPCServer import SimpleXMLRPCServer
    import xmlrpclib

    def python_logo():
         with open("python_logo.jpg", "rb") as handle:
             return xmlrpclib.Binary(handle.read())

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(python_logo, 'python_logo')

    server.serve_forever()

The client gets the image and saves it to a file:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    with open("fetched_python_logo.jpg", "wb") as handle:
        handle.write(proxy.python_logo().data)

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2045#section-6.8


File: python.info,  Node: Fault Objects,  Next: ProtocolError Objects,  Prev: Binary Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.5 Fault Objects
.......................

 -- Class: xmlrpclib.Fault
     A *Note Fault: 1f5f. object encapsulates the content of an XML-RPC
     fault tag. Fault objects have the following attributes:

      -- Attribute: faultCode
          A string indicating the fault type.

      -- Attribute: faultString
          A string containing a diagnostic message associated with the
          fault.

In the following example we’re going to intentionally cause a *Note
Fault: 1f5f. by returning a complex type object.  The server code:

    from SimpleXMLRPCServer import SimpleXMLRPCServer

    # A marshalling error is going to occur because we're returning a
    # complex number
    def add(x, y):
        return x+y+0j

    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_function(add, 'add')

    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    try:
        proxy.add(2, 5)
    except xmlrpclib.Fault as err:
        print "A fault occurred"
        print "Fault code: %d" % err.faultCode
        print "Fault string: %s" % err.faultString


File: python.info,  Node: ProtocolError Objects,  Next: MultiCall Objects,  Prev: Fault Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.6 ProtocolError Objects
...............................

 -- Class: xmlrpclib.ProtocolError
     A *Note ProtocolError: 1f60. object describes a protocol error in
     the underlying transport layer (such as a 404 ‘not found’
     error if the server named by the URI does not exist).  It has the
     following attributes:

      -- Attribute: url
          The URI or URL that triggered the error.

      -- Attribute: errcode
          The error code.

      -- Attribute: errmsg
          The error message or diagnostic string.

      -- Attribute: headers
          A string containing the headers of the HTTP/HTTPS request
          that triggered the error.

In the following example we’re going to intentionally cause a *Note
ProtocolError: 1f60.  by providing a URI that doesn’t point to an
XMLRPC server:

    import xmlrpclib

    # create a ServerProxy with a URI that doesn't respond to XMLRPC requests
    proxy = xmlrpclib.ServerProxy("http://www.google.com/")

    try:
        proxy.some_method()
    except xmlrpclib.ProtocolError as err:
        print "A protocol error occurred"
        print "URL: %s" % err.url
        print "HTTP/HTTPS headers: %s" % err.headers
        print "Error code: %d" % err.errcode
        print "Error message: %s" % err.errmsg


File: python.info,  Node: MultiCall Objects,  Next: Convenience Functions,  Prev: ProtocolError Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.7 MultiCall Objects
...........................

New in version 2.4.

The *Note MultiCall: 1f7d. object provides a way to encapsulate
multiple calls to a remote server into a single request (1).

 -- Class: xmlrpclib.MultiCall (server)
     Create an object used to boxcar method calls. `server' is the
     eventual target of the call. Calls can be made to the result
     object, but they will immediately return `None', and only store
     the call name and parameters in the *Note MultiCall: 1f7d. object.
     Calling the object itself causes all stored calls to be
     transmitted as a single `system.multicall' request. The result of
     this call is a *Note generator: 5f7.; iterating over this
     generator yields the individual results.

A usage example of this class follows.  The server code

    from SimpleXMLRPCServer import SimpleXMLRPCServer

    def add(x,y):
        return x+y

    def subtract(x, y):
        return x-y

    def multiply(x, y):
        return x*y

    def divide(x, y):
        return x/y

    # A simple server with simple arithmetic functions
    server = SimpleXMLRPCServer(("localhost", 8000))
    print "Listening on port 8000..."
    server.register_multicall_functions()
    server.register_function(add, 'add')
    server.register_function(subtract, 'subtract')
    server.register_function(multiply, 'multiply')
    server.register_function(divide, 'divide')
    server.serve_forever()

The client code for the preceding server:

    import xmlrpclib

    proxy = xmlrpclib.ServerProxy("http://localhost:8000/")
    multicall = xmlrpclib.MultiCall(proxy)
    multicall.add(7,3)
    multicall.subtract(7,3)
    multicall.multiply(7,3)
    multicall.divide(7,3)
    result = multicall()

    print "7+3=%d, 7-3=%d, 7*3=%d, 7/3=%d" % tuple(result)

---------- Footnotes ----------

(1) This approach has been first presented in a discussion on
xmlrpc.com
(https://web.archive.org/web/20060624230303/http://www.xmlrpc.com/discuss/msgReader$1208?mode=topic).


File: python.info,  Node: Convenience Functions,  Next: Example of Client Usage,  Prev: MultiCall Objects,  Up: xmlrpclib — XML-RPC client access

5.20.23.8 Convenience Functions
...............................

 -- Function: xmlrpclib.boolean (value)
     Convert any Python value to one of the XML-RPC Boolean constants,
     `True' or `False'.

 -- Function: xmlrpclib.dumps (params[, methodname[, methodresponse[,
          encoding[, allow_none]]]])
     Convert `params' into an XML-RPC request. or into a response if
     `methodresponse' is true. `params' can be either a tuple of
     arguments or an instance of the *Note Fault: 1f5f. exception
     class.  If `methodresponse' is true, only a single value can be
     returned, meaning that `params' must be of length 1. `encoding', if
     supplied, is the encoding to use in the generated XML; the default
     is UTF-8.  Python’s *Note None: 3b2. value cannot be used in
     standard XML-RPC; to allow using it via an extension,  provide a
     true value for `allow_none'.

 -- Function: xmlrpclib.loads (data[, use_datetime])
     Convert an XML-RPC request or response into Python objects, a
     `(params, methodname)'.  `params' is a tuple of argument;
     `methodname' is a string, or `None' if no method name is present
     in the packet. If the XML-RPC packet represents a fault condition,
     this function will raise a *Note Fault: 1f5f. exception.  The
     `use_datetime' flag can be used to cause date/time values to be
     presented as *Note datetime.datetime: 2dc. objects; this is false
     by default.

     Changed in version 2.5: The `use_datetime' flag was added.



File: python.info,  Node: Example of Client Usage,  Next: Example of Client and Server Usage,  Prev: Convenience Functions,  Up: xmlrpclib — XML-RPC client access

5.20.23.9 Example of Client Usage
.................................

    # simple test program (from the XML-RPC specification)
    from xmlrpclib import ServerProxy, Error

    # server = ServerProxy("http://localhost:8000") # local server
    server = ServerProxy("http://betty.userland.com")

    print server

    try:
        print server.examples.getStateName(41)
    except Error as v:
        print "ERROR", v

To access an XML-RPC server through a HTTP proxy, you need to define a
custom transport.  The following example shows how:

    import xmlrpclib, httplib

    class ProxiedTransport(xmlrpclib.Transport):
        def set_proxy(self, proxy):
            self.proxy = proxy

        def make_connection(self, host):
            self.realhost = host
            h = httplib.HTTPConnection(self.proxy)
            return h

        def send_request(self, connection, handler, request_body):
            connection.putrequest("POST", 'http://%s%s' % (self.realhost, handler))

        def send_host(self, connection, host):
            connection.putheader('Host', self.realhost)

    p = ProxiedTransport()
    p.set_proxy('proxy-server:8080')
    server = xmlrpclib.ServerProxy('http://time.xmlrpc.com/RPC2', transport=p)
    print server.currentTime.getCurrentTime()


File: python.info,  Node: Example of Client and Server Usage,  Prev: Example of Client Usage,  Up: xmlrpclib — XML-RPC client access

5.20.23.10 Example of Client and Server Usage
.............................................

See *Note SimpleXMLRPCServer Example: 1f85.


File: python.info,  Node: SimpleXMLRPCServer — Basic XML-RPC server,  Next: DocXMLRPCServer — Self-documenting XML-RPC server,  Prev: xmlrpclib — XML-RPC client access,  Up: Internet Protocols and Support

5.20.24 `SimpleXMLRPCServer' — Basic XML-RPC server
-----------------------------------------------------

     Note: The *Note SimpleXMLRPCServer: 157. module has been merged
     into `xmlrpc.server' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

New in version 2.2.

`Source code:' Lib/SimpleXMLRPCServer.py(1)

__________________________________________________________________

The *Note SimpleXMLRPCServer: 157. module provides a basic server
framework for XML-RPC servers written in Python.  Servers can either be
free standing, using *Note SimpleXMLRPCServer: 372, or embedded in a
CGI environment, using *Note CGIXMLRPCRequestHandler: 1f88.

 -- Class: SimpleXMLRPCServer.SimpleXMLRPCServer (addr[,
          requestHandler[, logRequests[, allow_none[, encoding[,
          bind_and_activate]]]])
     Create a new server instance.  This class provides methods for
     registration of functions that can be called by the XML-RPC
     protocol.  The `requestHandler' parameter should be a factory for
     request handler instances; it defaults to *Note
     SimpleXMLRPCRequestHandler: 1f89.  The `addr' and `requestHandler'
     parameters are passed to the *Note SocketServer.TCPServer: 255.
     constructor.  If `logRequests' is true (the default), requests
     will be logged; setting this parameter to false will turn off
     logging.   The `allow_none' and `encoding' parameters are passed
     on to  *Note xmlrpclib: 1aa. and control the XML-RPC responses
     that will be returned from the server. The `bind_and_activate'
     parameter controls whether `server_bind()' and `server_activate()'
     are called immediately by the constructor; it defaults to true.
     Setting it to false allows code to manipulate the
     `allow_reuse_address' class variable before the address is bound.

     Changed in version 2.5: The `allow_none' and `encoding' parameters
     were added.

     Changed in version 2.6: The `bind_and_activate' parameter was
     added.


 -- Class: SimpleXMLRPCServer.CGIXMLRPCRequestHandler ([allow_none[,
          encoding]])
     Create a new instance to handle XML-RPC requests in a CGI
     environment.  The `allow_none' and `encoding' parameters are
     passed on to  *Note xmlrpclib: 1aa. and control the XML-RPC
     responses that will be returned  from the server.

     New in version 2.3.

     Changed in version 2.5: The `allow_none' and `encoding' parameters
     were added.


 -- Class: SimpleXMLRPCServer.SimpleXMLRPCRequestHandler
     Create a new request handler instance.  This request handler
     supports `POST' requests and modifies logging so that the
     `logRequests' parameter to the *Note SimpleXMLRPCServer: 372.
     constructor parameter is honored.

* Menu:

* SimpleXMLRPCServer Objects::
* CGIXMLRPCRequestHandler::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/SimpleXMLRPCServer.py


File: python.info,  Node: SimpleXMLRPCServer Objects,  Next: CGIXMLRPCRequestHandler,  Up: SimpleXMLRPCServer — Basic XML-RPC server

5.20.24.1 SimpleXMLRPCServer Objects
....................................

The *Note SimpleXMLRPCServer: 372. class is based on *Note
SocketServer.TCPServer: 255. and provides a means of creating simple,
stand alone XML-RPC servers.

 -- Method: SimpleXMLRPCServer.register_function (function[, name])
     Register a function that can respond to XML-RPC requests.  If
     `name' is given, it will be the method name associated with
     `function', otherwise `function.__name__' will be used.  `name'
     can be either a normal or Unicode string, and may contain
     characters not legal in Python identifiers, including the period
     character.

 -- Method: SimpleXMLRPCServer.register_instance (instance[,
          allow_dotted_names])
     Register an object which is used to expose method names which have
     not been registered using *Note register_function(): 1f8c.  If
     `instance' contains a `_dispatch()' method, it is called with the
     requested method name and the parameters from the request.  Its
     API is `def _dispatch(self, method, params)' (note that `params'
     does not represent a variable argument list).  If it calls an
     underlying function to perform its task, that function is called as
     `func(*params)', expanding the parameter list. The return value
     from `_dispatch()' is returned to the client as the result.  If
     `instance' does not have a `_dispatch()' method, it is searched
     for an attribute matching the name of the requested method.

     If the optional `allow_dotted_names' argument is true and the
     instance does not have a `_dispatch()' method, then if the
     requested method name contains periods, each component of the
     method name is searched for individually, with the effect that a
     simple hierarchical search is performed.  The value found from
     this search is then called with the parameters from the request,
     and the return value is passed back to the client.

          Warning: Enabling the `allow_dotted_names' option allows
          intruders to access your module’s global variables and may
          allow intruders to execute arbitrary code on your machine.
          Only use this option on a secure, closed network.

     Changed in version 2.3.5,: 2.4.1 `allow_dotted_names' was added to
     plug a security hole; prior versions are insecure.


 -- Method: SimpleXMLRPCServer.register_introspection_functions ()
     Registers the XML-RPC introspection functions `system.listMethods',
     `system.methodHelp' and `system.methodSignature'.

     New in version 2.3.


 -- Method: SimpleXMLRPCServer.register_multicall_functions ()
     Registers the XML-RPC multicall function system.multicall.

 -- Attribute: SimpleXMLRPCRequestHandler.rpc_paths
     An attribute value that must be a tuple listing valid path
     portions of the URL for receiving XML-RPC requests.  Requests
     posted to other paths will result in a 404 “no such page” HTTP
     error.  If this tuple is empty, all paths will be considered
     valid. The default value is `('/', '/RPC2')'.

     New in version 2.5.


 -- Attribute: SimpleXMLRPCRequestHandler.encode_threshold
     If this attribute is not `None', responses larger than this value
     will be encoded using the `gzip' transfer encoding, if permitted by
     the client.  The default is `1400' which corresponds roughly to a
     single TCP packet.

     New in version 2.7.


* Menu:

* SimpleXMLRPCServer Example::


File: python.info,  Node: SimpleXMLRPCServer Example,  Up: SimpleXMLRPCServer Objects

5.20.24.2 SimpleXMLRPCServer Example
....................................

Server code:

    from SimpleXMLRPCServer import SimpleXMLRPCServer
    from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

    # Restrict to a particular path.
    class RequestHandler(SimpleXMLRPCRequestHandler):
        rpc_paths = ('/RPC2',)

    # Create server
    server = SimpleXMLRPCServer(("localhost", 8000),
                                requestHandler=RequestHandler)
    server.register_introspection_functions()

    # Register pow() function; this will use the value of
    # pow.__name__ as the name, which is just 'pow'.
    server.register_function(pow)

    # Register a function under a different name
    def adder_function(x,y):
        return x + y
    server.register_function(adder_function, 'add')

    # Register an instance; all the methods of the instance are
    # published as XML-RPC methods (in this case, just 'div').
    class MyFuncs:
        def div(self, x, y):
            return x // y

    server.register_instance(MyFuncs())

    # Run the server's main loop
    server.serve_forever()

The following client code will call the methods made available by the
preceding server:

    import xmlrpclib

    s = xmlrpclib.ServerProxy('http://localhost:8000')
    print s.pow(2,3)  # Returns 2**3 = 8
    print s.add(2,3)  # Returns 5
    print s.div(5,2)  # Returns 5//2 = 2

    # Print list of available methods
    print s.system.listMethods()

The following *Note SimpleXMLRPCServer: 372. example is included in the
module `Lib/SimpleXMLRPCServer.py':

    server = SimpleXMLRPCServer(("localhost", 8000))
    server.register_function(pow)
    server.register_function(lambda x,y: x+y, 'add')
    server.register_multicall_functions()
    server.serve_forever()

This demo server can be run from the command line as:

    python -m SimpleXMLRPCServer

Example client code which talks to the above server is included with
`Lib/xmlrpclib.py':

    server = ServerProxy("http://localhost:8000")
    print server
    multi = MultiCall(server)
    multi.pow(2, 9)
    multi.add(5, 1)
    multi.add(24, 11)
    try:
        for response in multi():
            print response
    except Error, v:
        print "ERROR", v

And the client can be invoked directly using the following command:

    python -m xmlrpclib


File: python.info,  Node: CGIXMLRPCRequestHandler,  Prev: SimpleXMLRPCServer Objects,  Up: SimpleXMLRPCServer — Basic XML-RPC server

5.20.24.3 CGIXMLRPCRequestHandler
.................................

The *Note CGIXMLRPCRequestHandler: 1f88. class can be used to  handle
XML-RPC requests sent to Python CGI scripts.

 -- Method: CGIXMLRPCRequestHandler.register_function (function[, name])
     Register a function that can respond to XML-RPC requests. If
     `name' is given, it will be the method name associated with
     function, otherwise `function.__name__' will be used. `name' can
     be either a normal or Unicode string, and may contain  characters
     not legal in Python identifiers, including the period character.

 -- Method: CGIXMLRPCRequestHandler.register_instance (instance)
     Register an object which is used to expose method names  which
     have not been registered using *Note register_function(): 1f94. If
     instance contains a `_dispatch()' method, it is called with the
     requested method name and the parameters from the  request; the
     return value is returned to the client as the result. If instance
     does not have a `_dispatch()' method, it is searched for an
     attribute matching the name of the requested method; if  the
     requested method name contains periods, each  component of the
     method name is searched for individually,  with the effect that a
     simple hierarchical search is performed.  The value found from
     this search is then called with the  parameters from the request,
     and the return value is passed  back to the client.

 -- Method: CGIXMLRPCRequestHandler.register_introspection_functions ()
     Register the XML-RPC introspection functions  `system.listMethods',
     `system.methodHelp' and  `system.methodSignature'.

 -- Method: CGIXMLRPCRequestHandler.register_multicall_functions ()
     Register the XML-RPC multicall function `system.multicall'.

 -- Method: CGIXMLRPCRequestHandler.handle_request ([request_text =
          None])
     Handle an XML-RPC request. If `request_text' is given, it should
     be the POST data provided by the HTTP server,  otherwise the
     contents of stdin will be used.

Example:

    class MyFuncs:
        def div(self, x, y): return x // y


    handler = CGIXMLRPCRequestHandler()
    handler.register_function(pow)
    handler.register_function(lambda x,y: x+y, 'add')
    handler.register_introspection_functions()
    handler.register_instance(MyFuncs())
    handler.handle_request()


File: python.info,  Node: DocXMLRPCServer — Self-documenting XML-RPC server,  Prev: SimpleXMLRPCServer — Basic XML-RPC server,  Up: Internet Protocols and Support

5.20.25 `DocXMLRPCServer' — Self-documenting XML-RPC server
-------------------------------------------------------------

     Note: The *Note DocXMLRPCServer: b6. module has been merged into
     `xmlrpc.server' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

New in version 2.3.

The *Note DocXMLRPCServer: b6. module extends the classes found in
*Note SimpleXMLRPCServer: 157. to serve HTML documentation in response
to HTTP GET requests. Servers can either be free standing, using *Note
DocXMLRPCServer: 373, or embedded in a CGI environment, using *Note
DocCGIXMLRPCRequestHandler: 1f9b.

 -- Class: DocXMLRPCServer.DocXMLRPCServer (addr[, requestHandler[,
          logRequests[, allow_none[, encoding[, bind_and_activate]]]]])
     Create a new server instance. All parameters have the same meaning
     as for *Note SimpleXMLRPCServer.SimpleXMLRPCServer: 372.;
     `requestHandler' defaults to *Note DocXMLRPCRequestHandler: 1f9c.

 -- Class: DocXMLRPCServer.DocCGIXMLRPCRequestHandler
     Create a new instance to handle XML-RPC requests in a CGI
     environment.

 -- Class: DocXMLRPCServer.DocXMLRPCRequestHandler
     Create a new request handler instance. This request handler
     supports XML-RPC POST requests, documentation GET requests, and
     modifies logging so that the `logRequests' parameter to the *Note
     DocXMLRPCServer: 373. constructor parameter is honored.

* Menu:

* DocXMLRPCServer Objects::
* DocCGIXMLRPCRequestHandler::


File: python.info,  Node: DocXMLRPCServer Objects,  Next: DocCGIXMLRPCRequestHandler,  Up: DocXMLRPCServer — Self-documenting XML-RPC server

5.20.25.1 DocXMLRPCServer Objects
.................................

The *Note DocXMLRPCServer: 373. class is derived from *Note
SimpleXMLRPCServer.SimpleXMLRPCServer: 372. and provides a means of
creating self-documenting, stand alone XML-RPC servers. HTTP POST
requests are handled as XML-RPC method calls. HTTP GET requests are
handled by generating pydoc-style HTML documentation. This allows a
server to provide its own web-based documentation.

 -- Method: DocXMLRPCServer.set_server_title (server_title)
     Set the title used in the generated HTML documentation. This title
     will be used inside the HTML “title” element.

 -- Method: DocXMLRPCServer.set_server_name (server_name)
     Set the name used in the generated HTML documentation. This name
     will appear at the top of the generated documentation inside a
     “h1” element.

 -- Method: DocXMLRPCServer.set_server_documentation
          (server_documentation)
     Set the description used in the generated HTML documentation. This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: DocCGIXMLRPCRequestHandler,  Prev: DocXMLRPCServer Objects,  Up: DocXMLRPCServer — Self-documenting XML-RPC server

5.20.25.2 DocCGIXMLRPCRequestHandler
....................................

The *Note DocCGIXMLRPCRequestHandler: 1f9b. class is derived from *Note
SimpleXMLRPCServer.CGIXMLRPCRequestHandler: 1f88. and provides a means
of creating self-documenting, XML-RPC CGI scripts. HTTP POST requests
are handled as XML-RPC method calls. HTTP GET requests are handled by
generating pydoc-style HTML documentation. This allows a server to
provide its own web-based documentation.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_title (server_title)
     Set the title used in the generated HTML documentation. This title
     will be used inside the HTML “title” element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_name (server_name)
     Set the name used in the generated HTML documentation. This name
     will appear at the top of the generated documentation inside a
     “h1” element.

 -- Method: DocCGIXMLRPCRequestHandler.set_server_documentation
          (server_documentation)
     Set the description used in the generated HTML documentation. This
     description will appear as a paragraph, below the server name, in
     the documentation.


File: python.info,  Node: Multimedia Services,  Next: Internationalization,  Prev: Internet Protocols and Support,  Up: The Python Standard Library

5.21 Multimedia Services
========================

The modules described in this chapter implement various algorithms or
interfaces that are mainly useful for multimedia applications.  They
are available at the discretion of the installation.  Here’s an
overview:

* Menu:

* audioop — Manipulate raw audio data::
* imageop — Manipulate raw image data::
* aifc — Read and write AIFF and AIFC files::
* sunau — Read and write Sun AU files::
* wave — Read and write WAV files::
* chunk — Read IFF chunked data::
* colorsys — Conversions between color systems::
* imghdr — Determine the type of an image::
* sndhdr — Determine type of sound file::
* ossaudiodev — Access to OSS-compatible audio devices::


File: python.info,  Node: audioop — Manipulate raw audio data,  Next: imageop — Manipulate raw image data,  Up: Multimedia Services

5.21.1 `audioop' — Manipulate raw audio data
----------------------------------------------

The *Note audioop: 13. module contains some useful operations on sound
fragments.  It operates on sound fragments consisting of signed integer
samples 8, 16 or 32 bits wide, stored in Python strings.  This is the
same format as used by the *Note al: a. and *Note sunaudiodev: 169.
modules.  All scalar items are integers, unless specified otherwise.

This module provides support for a-LAW, u-LAW and Intel/DVI ADPCM
encodings.

A few of the more complicated operations only take 16-bit samples,
otherwise the sample size (in bytes) is always a parameter of the
operation.

The module defines the following variables and functions:

 -- Exception: audioop.error
     This exception is raised on all errors, such as unknown number of
     bytes per sample, etc.

 -- Function: audioop.add (fragment1, fragment2, width)
     Return a fragment which is the addition of the two samples passed
     as parameters.  `width' is the sample width in bytes, either `1',
     `2' or `4'.  Both fragments should have the same length.  Samples
     are truncated in case of overflow.

 -- Function: audioop.adpcm2lin (adpcmfragment, width, state)
     Decode an Intel/DVI ADPCM coded fragment to a linear fragment.
     See the description of *Note lin2adpcm(): 1fae. for details on
     ADPCM coding. Return a tuple `(sample, newstate)' where the sample
     has the width specified in `width'.

 -- Function: audioop.alaw2lin (fragment, width)
     Convert sound fragments in a-LAW encoding to linearly encoded
     sound fragments.  a-LAW encoding always uses 8 bits samples, so
     `width' refers only to the sample width of the output fragment
     here.

     New in version 2.5.


 -- Function: audioop.avg (fragment, width)
     Return the average over all samples in the fragment.

 -- Function: audioop.avgpp (fragment, width)
     Return the average peak-peak value over all samples in the
     fragment. No filtering is done, so the usefulness of this routine
     is questionable.

 -- Function: audioop.bias (fragment, width, bias)
     Return a fragment that is the original fragment with a bias added
     to each sample.  Samples wrap around in case of overflow.

 -- Function: audioop.cross (fragment, width)
     Return the number of zero crossings in the fragment passed as an
     argument.

 -- Function: audioop.findfactor (fragment, reference)
     Return a factor `F' such that `rms(add(fragment, mul(reference,
     -F)))' is minimal, i.e., return the factor with which you should
     multiply `reference' to make it match as well as possible to
     `fragment'.  The fragments should both contain 2-byte samples.

     The time taken by this routine is proportional to `len(fragment)'.

 -- Function: audioop.findfit (fragment, reference)
     Try to match `reference' as well as possible to a portion of
     `fragment' (which should be the longer fragment).  This is
     (conceptually) done by taking slices out of `fragment', using
     *Note findfactor(): 1fb4. to compute the best match, and
     minimizing the result.  The fragments should both contain 2-byte
     samples.  Return a tuple `(offset, factor)' where `offset' is the
     (integer) offset into `fragment' where the optimal match started
     and `factor' is the (floating-point) factor as per *Note
     findfactor(): 1fb4.

 -- Function: audioop.findmax (fragment, length)
     Search `fragment' for a slice of length `length' samples (not
     bytes!) with maximum energy, i.e., return `i' for which
     `rms(fragment[i*2:(i+length)*2])' is maximal.  The fragments
     should both contain 2-byte samples.

     The routine takes time proportional to `len(fragment)'.

 -- Function: audioop.getsample (fragment, width, index)
     Return the value of sample `index' from the fragment.

 -- Function: audioop.lin2adpcm (fragment, width, state)
     Convert samples to 4 bit Intel/DVI ADPCM encoding.  ADPCM coding
     is an adaptive coding scheme, whereby each 4 bit number is the
     difference between one sample and the next, divided by a (varying)
     step.  The Intel/DVI ADPCM algorithm has been selected for use by
     the IMA, so it may well become a standard.

     `state' is a tuple containing the state of the coder.  The coder
     returns a tuple `(adpcmfrag, newstate)', and the `newstate' should
     be passed to the next call of *Note lin2adpcm(): 1fae.  In the
     initial call, `None' can be passed as the state.  `adpcmfrag' is
     the ADPCM coded fragment packed 2 4-bit values per byte.

 -- Function: audioop.lin2alaw (fragment, width)
     Convert samples in the audio fragment to a-LAW encoding and return
     this as a Python string.  a-LAW is an audio encoding format
     whereby you get a dynamic range of about 13 bits using only 8 bit
     samples.  It is used by the Sun audio hardware, among others.

     New in version 2.5.


 -- Function: audioop.lin2lin (fragment, width, newwidth)
     Convert samples between 1-, 2- and 4-byte formats.

          Note: In some audio formats, such as .WAV files, 16 and 32
          bit samples are signed, but 8 bit samples are unsigned.  So
          when converting to 8 bit wide samples for these formats, you
          need to also add 128 to the result:

              new_frames = audioop.lin2lin(frames, old_width, 1)
              new_frames = audioop.bias(new_frames, 1, 128)

          The same, in reverse, has to be applied when converting from
          8 to 16 or 32 bit width samples.

 -- Function: audioop.lin2ulaw (fragment, width)
     Convert samples in the audio fragment to u-LAW encoding and return
     this as a Python string.  u-LAW is an audio encoding format
     whereby you get a dynamic range of about 14 bits using only 8 bit
     samples.  It is used by the Sun audio hardware, among others.

 -- Function: audioop.max (fragment, width)
     Return the maximum of the `absolute value' of all samples in a
     fragment.

 -- Function: audioop.maxpp (fragment, width)
     Return the maximum peak-peak value in the sound fragment.

 -- Function: audioop.minmax (fragment, width)
     Return a tuple consisting of the minimum and maximum values of all
     samples in the sound fragment.

 -- Function: audioop.mul (fragment, width, factor)
     Return a fragment that has all samples in the original fragment
     multiplied by the floating-point value `factor'.  Samples are
     truncated in case of overflow.

 -- Function: audioop.ratecv (fragment, width, nchannels, inrate,
          outrate, state[, weightA[, weightB]])
     Convert the frame rate of the input fragment.

     `state' is a tuple containing the state of the converter.  The
     converter returns a tuple `(newfragment, newstate)', and
     `newstate' should be passed to the next call of *Note ratecv():
     1fbf.  The initial call should pass `None' as the state.

     The `weightA' and `weightB' arguments are parameters for a simple
     digital filter and default to `1' and `0' respectively.

 -- Function: audioop.reverse (fragment, width)
     Reverse the samples in a fragment and returns the modified
     fragment.

 -- Function: audioop.rms (fragment, width)
     Return the root-mean-square of the fragment, i.e.
     `sqrt(sum(S_i^2)/n)'.

     This is a measure of the power in an audio signal.

 -- Function: audioop.tomono (fragment, width, lfactor, rfactor)
     Convert a stereo fragment to a mono fragment.  The left channel is
     multiplied by `lfactor' and the right channel by `rfactor' before
     adding the two channels to give a mono signal.

 -- Function: audioop.tostereo (fragment, width, lfactor, rfactor)
     Generate a stereo fragment from a mono fragment.  Each pair of
     samples in the stereo fragment are computed from the mono sample,
     whereby left channel samples are multiplied by `lfactor' and right
     channel samples by `rfactor'.

 -- Function: audioop.ulaw2lin (fragment, width)
     Convert sound fragments in u-LAW encoding to linearly encoded
     sound fragments.  u-LAW encoding always uses 8 bits samples, so
     `width' refers only to the sample width of the output fragment
     here.

Note that operations such as *Note mul(): 1fbe. or *Note max(): 1fbb.
make no distinction between mono and stereo fragments, i.e. all samples
are treated equal.  If this is a problem the stereo fragment should be
split into two mono fragments first and recombined later.  Here is an
example of how to do that:

    def mul_stereo(sample, width, lfactor, rfactor):
        lsample = audioop.tomono(sample, width, 1, 0)
        rsample = audioop.tomono(sample, width, 0, 1)
        lsample = audioop.mul(lsample, width, lfactor)
        rsample = audioop.mul(rsample, width, rfactor)
        lsample = audioop.tostereo(lsample, width, 1, 0)
        rsample = audioop.tostereo(rsample, width, 0, 1)
        return audioop.add(lsample, rsample, width)

If you use the ADPCM coder to build network packets and you want your
protocol to be stateless (i.e. to be able to tolerate packet loss) you
should not only transmit the data but also the state.  Note that you
should send the `initial' state (the one you passed to *Note
lin2adpcm(): 1fae.) along to the decoder, not the final state (as
returned by the coder).  If you want to use *Note struct.Struct: a2c.
to store the state in binary you can code the first element (the
predicted value) in 16 bits and the second (the delta index) in 8.

The ADPCM coders have never been tried against other ADPCM coders, only
against themselves.  It could well be that I misinterpreted the
standards in which case they will not be interoperable with the
respective standards.

The `find*()' routines might look a bit funny at first sight. They are
primarily meant to do echo cancellation.  A reasonably fast way to do
this is to pick the most energetic piece of the output sample, locate
that in the input sample and subtract the whole output sample from the
input sample:

    def echocancel(outputdata, inputdata):
        pos = audioop.findmax(outputdata, 800)    # one tenth second
        out_test = outputdata[pos*2:]
        in_test = inputdata[pos*2:]
        ipos, factor = audioop.findfit(in_test, out_test)
        # Optional (for better cancellation):
        # factor = audioop.findfactor(in_test[ipos*2:ipos*2+len(out_test)],
        #              out_test)
        prefill = '\0'*(pos+ipos)*2
        postfill = '\0'*(len(inputdata)-len(prefill)-len(outputdata))
        outputdata = prefill + audioop.mul(outputdata, 2, -factor) + postfill
        return audioop.add(inputdata, outputdata, 2)


File: python.info,  Node: imageop — Manipulate raw image data,  Next: aifc — Read and write AIFF and AIFC files,  Prev: audioop — Manipulate raw audio data,  Up: Multimedia Services

5.21.2 `imageop' — Manipulate raw image data
----------------------------------------------

Deprecated since version 2.6: The *Note imageop: f2. module has been
removed in Python 3.

The *Note imageop: f2. module contains some useful operations on
images. It operates on images consisting of 8 or 32 bit pixels stored
in Python strings.  This is the same format as used by
`gl.lrectwrite()' and the *Note imgfile: f4. module.

The module defines the following variables and functions:

 -- Exception: imageop.error
     This exception is raised on all errors, such as unknown number of
     bits per pixel, etc.

 -- Function: imageop.crop (image, psize, width, height, x0, y0, x1, y1)
     Return the selected part of `image', which should be `width' by
     `height' in size and consist of pixels of `psize' bytes. `x0',
     `y0', `x1' and `y1' are like the `gl.lrectread()' parameters, i.e.
     the boundary is included in the new image.  The new boundaries
     need not be inside the picture.  Pixels that fall outside the old
     image will have their value set to zero.  If `x0' is bigger than
     `x1' the new image is mirrored.  The same holds for the y
     coordinates.

 -- Function: imageop.scale (image, psize, width, height, newwidth,
          newheight)
     Return `image' scaled to size `newwidth' by `newheight'. No
     interpolation is done, scaling is done by simple-minded pixel
     duplication or removal.  Therefore, computer-generated images or
     dithered images will not look nice after scaling.

 -- Function: imageop.tovideo (image, psize, width, height)
     Run a vertical low-pass filter over an image.  It does so by
     computing each destination pixel as the average of two
     vertically-aligned source pixels.  The main use of this routine is
     to forestall excessive flicker if the image is displayed on a
     video device that uses interlacing, hence the name.

 -- Function: imageop.grey2mono (image, width, height, threshold)
     Convert an 8-bit deep greyscale image to a 1-bit deep image by
     thresholding all the pixels.  The resulting image is tightly
     packed and is probably only useful as an argument to *Note
     mono2grey(): 1fcc.

 -- Function: imageop.dither2mono (image, width, height)
     Convert an 8-bit greyscale image to a 1-bit monochrome image using
     a (simple-minded) dithering algorithm.

 -- Function: imageop.mono2grey (image, width, height, p0, p1)
     Convert a 1-bit monochrome image to an 8 bit greyscale or color
     image. All pixels that are zero-valued on input get value `p0' on
     output and all one-value input pixels get value `p1' on output.
     To convert a monochrome black-and-white image to greyscale pass
     the values `0' and `255' respectively.

 -- Function: imageop.grey2grey4 (image, width, height)
     Convert an 8-bit greyscale image to a 4-bit greyscale image
     without dithering.

 -- Function: imageop.grey2grey2 (image, width, height)
     Convert an 8-bit greyscale image to a 2-bit greyscale image
     without dithering.

 -- Function: imageop.dither2grey2 (image, width, height)
     Convert an 8-bit greyscale image to a 2-bit greyscale image with
     dithering.  As for *Note dither2mono(): 1fcd, the dithering
     algorithm is currently very simple.

 -- Function: imageop.grey42grey (image, width, height)
     Convert a 4-bit greyscale image to an 8-bit greyscale image.

 -- Function: imageop.grey22grey (image, width, height)
     Convert a 2-bit greyscale image to an 8-bit greyscale image.

 -- Data: imageop.backward_compatible
     If set to 0, the functions in this module use a non-backward
     compatible way of representing multi-byte pixels on little-endian
     systems.  The SGI for which this module was originally written is
     a big-endian system, so setting this variable will have no effect.
     However, the code wasn’t originally intended to run on anything
     else, so it made assumptions about byte order which are not
     universal.  Setting this variable to 0 will cause the byte order
     to be reversed on little-endian systems, so that it then is the
     same as on big-endian systems.


File: python.info,  Node: aifc — Read and write AIFF and AIFC files,  Next: sunau — Read and write Sun AU files,  Prev: imageop — Manipulate raw image data,  Up: Multimedia Services

5.21.3 `aifc' — Read and write AIFF and AIFC files
----------------------------------------------------

`Source code:' Lib/aifc.py(1)

__________________________________________________________________

This module provides support for reading and writing AIFF and AIFF-C
files.  AIFF is Audio Interchange File Format, a format for storing
digital audio samples in a file.  AIFF-C is a newer version of the
format that includes the ability to compress the audio data.

     Note: Some operations may only work under IRIX; these will raise
     *Note ImportError: 388.  when attempting to import the `cl'
     module, which is only available on IRIX.

Audio files have a number of parameters that describe the audio data.
The sampling rate or frame rate is the number of times per second the
sound is sampled.  The number of channels indicate if the audio is
mono, stereo, or quadro.  Each frame consists of one sample per
channel.  The sample size is the size in bytes of each sample.  Thus a
frame consists of `nchannels'*`samplesize' bytes, and a second’s
worth of audio consists of `nchannels'*`samplesize'*`framerate' bytes.

For example, CD quality audio has a sample size of two bytes (16 bits),
uses two channels (stereo) and has a frame rate of 44,100
frames/second.  This gives a frame size of 4 bytes (2*2), and a
second’s worth occupies 2*2*44100 bytes (176,400 bytes).

Module *Note aifc: 8. defines the following function:

 -- Function: aifc.open (file[, mode])
     Open an AIFF or AIFF-C file and return an object instance with
     methods that are described below.  The argument `file' is either a
     string naming a file or a file object.  `mode' must be `'r'' or
     `'rb'' when the file must be opened for reading, or `'w''  or
     `'wb'' when the file must be opened for writing.  If omitted,
     `file.mode' is used if it exists, otherwise `'rb'' is used.  When
     used for writing, the file object should be seekable, unless you
     know ahead of time how many samples you are going to write in
     total and use `writeframesraw()' and `setnframes()'.

Objects returned by *Note open(): 1fd6. when a file is opened for
reading have the following methods:

 -- Method: aifc.getnchannels ()
     Return the number of audio channels (1 for mono, 2 for stereo).

 -- Method: aifc.getsampwidth ()
     Return the size in bytes of individual samples.

 -- Method: aifc.getframerate ()
     Return the sampling rate (number of audio frames per second).

 -- Method: aifc.getnframes ()
     Return the number of audio frames in the file.

 -- Method: aifc.getcomptype ()
     Return a four-character string describing the type of compression
     used in the audio file.  For AIFF files, the returned value is
     `'NONE''.

 -- Method: aifc.getcompname ()
     Return a human-readable description of the type of compression
     used in the audio file.  For AIFF files, the returned value is
     `'not compressed''.

 -- Method: aifc.getparams ()
     Return a tuple consisting of all of the above values in the above
     order.

 -- Method: aifc.getmarkers ()
     Return a list of markers in the audio file.  A marker consists of
     a tuple of three elements.  The first is the mark ID (an integer),
     the second is the mark position in frames from the beginning of
     the data (an integer), the third is the name of the mark (a
     string).

 -- Method: aifc.getmark (id)
     Return the tuple as described in *Note getmarkers(): 1fde. for the
     mark with the given `id'.

 -- Method: aifc.readframes (nframes)
     Read and return the next `nframes' frames from the audio file.
     The returned data is a string containing for each frame the
     uncompressed samples of all channels.

 -- Method: aifc.rewind ()
     Rewind the read pointer.  The next *Note readframes(): 1fe0. will
     start from the beginning.

 -- Method: aifc.setpos (pos)
     Seek to the specified frame number.

 -- Method: aifc.tell ()
     Return the current frame number.

 -- Method: aifc.close ()
     Close the AIFF file.  After calling this method, the object can no
     longer be used.

Objects returned by *Note open(): 1fd6. when a file is opened for
writing have all the above methods, except for `readframes()' and
`setpos()'.  In addition the following methods exist.  The `get*()'
methods can only be called after the corresponding `set*()' methods
have been called.  Before the first `writeframes()' or
`writeframesraw()', all parameters except for the number of frames must
be filled in.

 -- Method: aifc.aiff ()
     Create an AIFF file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in `'.aiff'' in which
     case the default is an AIFF file.

 -- Method: aifc.aifc ()
     Create an AIFF-C file.  The default is that an AIFF-C file is
     created, unless the name of the file ends in `'.aiff'' in which
     case the default is an AIFF file.

 -- Method: aifc.setnchannels (nchannels)
     Specify the number of channels in the audio file.

 -- Method: aifc.setsampwidth (width)
     Specify the size in bytes of audio samples.

 -- Method: aifc.setframerate (rate)
     Specify the sampling frequency in frames per second.

 -- Method: aifc.setnframes (nframes)
     Specify the number of frames that are to be written to the audio
     file. If this parameter is not set, or not set correctly, the file
     needs to support seeking.

 -- Method: aifc.setcomptype (type, name)
     Specify the compression type.  If not specified, the audio data
     will not be compressed.  In AIFF files, compression is not
     possible.  The name parameter should be a human-readable
     description of the compression type, the type parameter should be
     a four-character string.  Currently the following compression
     types are supported: NONE, ULAW, ALAW, G722.

 -- Method: aifc.setparams (nchannels, sampwidth, framerate, comptype,
          compname)
     Set all the above parameters at once.  The argument is a tuple
     consisting of the various parameters.  This means that it is
     possible to use the result of a *Note getparams(): 1fdd. call as
     argument to *Note setparams(): 1fec.

 -- Method: aifc.setmark (id, pos, name)
     Add a mark with the given id (larger than 0), and the given name
     at the given position.  This method can be called at any time
     before *Note close(): 1fe4.

 -- Method: aifc.tell ()
     Return the current write position in the output file.  Useful in
     combination with *Note setmark(): 1fed.

 -- Method: aifc.writeframes (data)
     Write data to the output file.  This method can only be called
     after the audio file parameters have been set.

 -- Method: aifc.writeframesraw (data)
     Like *Note writeframes(): 1fee, except that the header of the
     audio file is not updated.

 -- Method: aifc.close ()
     Close the AIFF file.  The header of the file is updated to reflect
     the actual size of the audio data. After calling this method, the
     object can no longer be used.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/aifc.py


File: python.info,  Node: sunau — Read and write Sun AU files,  Next: wave — Read and write WAV files,  Prev: aifc — Read and write AIFF and AIFC files,  Up: Multimedia Services

5.21.4 `sunau' — Read and write Sun AU files
----------------------------------------------

`Source code:' Lib/sunau.py(1)

__________________________________________________________________

The *Note sunau: 168. module provides a convenient interface to the Sun
AU sound format.  Note that this module is interface-compatible with
the modules *Note aifc: 8. and *Note wave: 194.

An audio file consists of a header followed by the data.  The fields of
the header are:

Field               Contents
------------------------------------------------------------------------ 
magic word          The four bytes `.snd'.
header size         Size of the header, including info, in bytes.
data size           Physical size of the data, in bytes.
encoding            Indicates how the audio samples are encoded.
sample rate         The sampling rate.
# of channels       The number of channels in the samples.
info                ASCII string giving a description of the audio
                    file (padded with null bytes).

Apart from the info field, all header fields are 4 bytes in size. They
are all 32-bit unsigned integers encoded in big-endian byte order.

The *Note sunau: 168. module defines the following functions:

 -- Function: sunau.open (file, mode)
     If `file' is a string, open the file by that name, otherwise treat
     it as a seekable file-like object. `mode' can be any of

    `'r''
          Read only mode.

    `'w''
          Write only mode.

     Note that it does not allow read/write files.

     A `mode' of `'r'' returns an `AU_read' object, while a `mode' of
     `'w'' or `'wb'' returns an `AU_write' object.

 -- Function: sunau.openfp (file, mode)
     A synonym for *Note open(): 1ff2, maintained for backwards
     compatibility.

The *Note sunau: 168. module defines the following exception:

 -- Exception: sunau.Error
     An error raised when something is impossible because of Sun AU
     specs or implementation deficiency.

The *Note sunau: 168. module defines the following data items:

 -- Data: sunau.AUDIO_FILE_MAGIC
     An integer every valid Sun AU file begins with, stored in
     big-endian form.  This is the string `.snd' interpreted as an
     integer.

 -- Data: sunau.AUDIO_FILE_ENCODING_MULAW_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_8
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_16
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_24
 -- Data: sunau.AUDIO_FILE_ENCODING_LINEAR_32
 -- Data: sunau.AUDIO_FILE_ENCODING_ALAW_8
     Values of the encoding field from the AU header which are
     supported by this module.

 -- Data: sunau.AUDIO_FILE_ENCODING_FLOAT
 -- Data: sunau.AUDIO_FILE_ENCODING_DOUBLE
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G721
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G722
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3
 -- Data: sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5
     Additional known values of the encoding field from the AU header,
     but which are not supported by this module.

* Menu:

* AU_read Objects::
* AU_write Objects::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/sunau.py


File: python.info,  Node: AU_read Objects,  Next: AU_write Objects,  Up: sunau — Read and write Sun AU files

5.21.4.1 AU_read Objects
........................

AU_read objects, as returned by *Note open(): 1ff2. above, have the
following methods:

 -- Method: AU_read.close ()
     Close the stream, and make the instance unusable. (This is  called
     automatically on deletion.)

 -- Method: AU_read.getnchannels ()
     Returns number of audio channels (1 for mone, 2 for stereo).

 -- Method: AU_read.getsampwidth ()
     Returns sample width in bytes.

 -- Method: AU_read.getframerate ()
     Returns sampling frequency.

 -- Method: AU_read.getnframes ()
     Returns number of audio frames.

 -- Method: AU_read.getcomptype ()
     Returns compression type. Supported compression types are
     `'ULAW'', `'ALAW'' and `'NONE''.

 -- Method: AU_read.getcompname ()
     Human-readable version of *Note getcomptype(): 2009.  The
     supported types have the respective names `'CCITT G.711 u-law'',
     `'CCITT G.711 A-law'' and `'not compressed''.

 -- Method: AU_read.getparams ()
     Returns a tuple `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', equivalent to output of the `get*()' methods.

 -- Method: AU_read.readframes (n)
     Reads and returns at most `n' frames of audio, as a string of
     bytes.  The data will be returned in linear format.  If the
     original data is in u-LAW format, it will be converted.

 -- Method: AU_read.rewind ()
     Rewind the file pointer to the beginning of the audio stream.

The following two methods define a term “position” which is
compatible between them, and is otherwise implementation dependent.

 -- Method: AU_read.setpos (pos)
     Set the file pointer to the specified position.  Only values
     returned from *Note tell(): 200f. should be used for `pos'.

 -- Method: AU_read.tell ()
     Return current file pointer position.  Note that the returned
     value has nothing to do with the actual position in the file.

The following two functions are defined for compatibility with the
*Note aifc: 8, and don’t do anything interesting.

 -- Method: AU_read.getmarkers ()
     Returns `None'.

 -- Method: AU_read.getmark (id)
     Raise an error.


File: python.info,  Node: AU_write Objects,  Prev: AU_read Objects,  Up: sunau — Read and write Sun AU files

5.21.4.2 AU_write Objects
.........................

AU_write objects, as returned by *Note open(): 1ff2. above, have the
following methods:

 -- Method: AU_write.setnchannels (n)
     Set the number of channels.

 -- Method: AU_write.setsampwidth (n)
     Set the sample width (in bytes.)

 -- Method: AU_write.setframerate (n)
     Set the frame rate.

 -- Method: AU_write.setnframes (n)
     Set the number of frames. This can be later changed, when and if
     more  frames are written.

 -- Method: AU_write.setcomptype (type, name)
     Set the compression type and description. Only `'NONE'' and
     `'ULAW'' are supported on output.

 -- Method: AU_write.setparams (tuple)
     The `tuple' should be `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', with values valid for the `set*()' methods.
     Set all parameters.

 -- Method: AU_write.tell ()
     Return current position in the file, with the same disclaimer for
     the *Note AU_read.tell(): 200f. and *Note AU_read.setpos(): 200e.
     methods.

 -- Method: AU_write.writeframesraw (data)
     Write audio frames, without correcting `nframes'.

 -- Method: AU_write.writeframes (data)
     Write audio frames and make sure `nframes' is correct.

 -- Method: AU_write.close ()
     Make sure `nframes' is correct, and close the file.

     This method is called upon deletion.

Note that it is invalid to set any parameters after calling
`writeframes()' or `writeframesraw()'.


File: python.info,  Node: wave — Read and write WAV files,  Next: chunk — Read IFF chunked data,  Prev: sunau — Read and write Sun AU files,  Up: Multimedia Services

5.21.5 `wave' — Read and write WAV files
------------------------------------------

`Source code:' Lib/wave.py(1)

__________________________________________________________________

The *Note wave: 194. module provides a convenient interface to the WAV
sound format.  It does not support compression/decompression, but it
does support mono/stereo.

The *Note wave: 194. module defines the following function and
exception:

 -- Function: wave.open (file[, mode])
     If `file' is a string, open the file by that name, otherwise treat
     it as a seekable file-like object.  `mode' can be any of

    `'r'', `'rb''
          Read only mode.

    `'w'', `'wb''
          Write only mode.

     Note that it does not allow read/write WAV files.

     A `mode' of `'r'' or `'rb'' returns a `Wave_read' object, while a
     `mode' of `'w'' or `'wb'' returns a `Wave_write' object.  If
     `mode' is omitted and a file-like object is passed as `file',
     `file.mode' is used as the default value for `mode' (the `'b''
     flag is still added if necessary).

     If you pass in a file-like object, the wave object will not close
     it when its `close()' method is called; it is the caller’s
     responsibility to close the file object.

 -- Function: wave.openfp (file, mode)
     A synonym for *Note open(): 2020, maintained for backwards
     compatibility.

 -- Exception: wave.Error
     An error raised when something is impossible because it violates
     the WAV specification or hits an implementation deficiency.

* Menu:

* Wave_read Objects::
* Wave_write Objects::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/wave.py


File: python.info,  Node: Wave_read Objects,  Next: Wave_write Objects,  Up: wave — Read and write WAV files

5.21.5.1 Wave_read Objects
..........................

Wave_read objects, as returned by *Note open(): 2020, have the
following methods:

 -- Method: Wave_read.close ()
     Close the stream if it was opened by *Note wave: 194, and make the
     instance unusable.  This is called automatically on object
     collection.

 -- Method: Wave_read.getnchannels ()
     Returns number of audio channels (`1' for mono, `2' for stereo).

 -- Method: Wave_read.getsampwidth ()
     Returns sample width in bytes.

 -- Method: Wave_read.getframerate ()
     Returns sampling frequency.

 -- Method: Wave_read.getnframes ()
     Returns number of audio frames.

 -- Method: Wave_read.getcomptype ()
     Returns compression type (`'NONE'' is the only supported type).

 -- Method: Wave_read.getcompname ()
     Human-readable version of *Note getcomptype(): 202a. Usually `'not
     compressed'' parallels `'NONE''.

 -- Method: Wave_read.getparams ()
     Returns a tuple `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', equivalent to output of the `get*()' methods.

 -- Method: Wave_read.readframes (n)
     Reads and returns at most `n' frames of audio, as a string of
     bytes.

 -- Method: Wave_read.rewind ()
     Rewind the file pointer to the beginning of the audio stream.

The following two methods are defined for compatibility with the *Note
aifc: 8.  module, and don’t do anything interesting.

 -- Method: Wave_read.getmarkers ()
     Returns `None'.

 -- Method: Wave_read.getmark (id)
     Raise an error.

The following two methods define a term “position” which is
compatible between them, and is otherwise implementation dependent.

 -- Method: Wave_read.setpos (pos)
     Set the file pointer to the specified position.

 -- Method: Wave_read.tell ()
     Return current file pointer position.


File: python.info,  Node: Wave_write Objects,  Prev: Wave_read Objects,  Up: wave — Read and write WAV files

5.21.5.2 Wave_write Objects
...........................

Wave_write objects, as returned by *Note open(): 2020, have the
following methods:

 -- Method: Wave_write.close ()
     Make sure `nframes' is correct, and close the file if it was
     opened by *Note wave: 194.  This method is called upon object
     collection.

 -- Method: Wave_write.setnchannels (n)
     Set the number of channels.

 -- Method: Wave_write.setsampwidth (n)
     Set the sample width to `n' bytes.

 -- Method: Wave_write.setframerate (n)
     Set the frame rate to `n'.

 -- Method: Wave_write.setnframes (n)
     Set the number of frames to `n'. This will be changed later if
     more frames are written.

 -- Method: Wave_write.setcomptype (type, name)
     Set the compression type and description. At the moment, only
     compression type `NONE' is supported, meaning no compression.

 -- Method: Wave_write.setparams (tuple)
     The `tuple' should be `(nchannels, sampwidth, framerate, nframes,
     comptype, compname)', with values valid for the `set*()' methods.
     Sets all parameters.

 -- Method: Wave_write.tell ()
     Return current position in the file, with the same disclaimer for
     the *Note Wave_read.tell(): 2032. and *Note Wave_read.setpos():
     2031. methods.

 -- Method: Wave_write.writeframesraw (data)
     Write audio frames, without correcting `nframes'.

 -- Method: Wave_write.writeframes (data)
     Write audio frames and make sure `nframes' is correct.

Note that it is invalid to set any parameters after calling
`writeframes()' or `writeframesraw()', and any attempt to do so will
raise *Note wave.Error: 2022.


File: python.info,  Node: chunk — Read IFF chunked data,  Next: colorsys — Conversions between color systems,  Prev: wave — Read and write WAV files,  Up: Multimedia Services

5.21.6 `chunk' — Read IFF chunked data
----------------------------------------

This module provides an interface for reading files that use EA IFF 85
chunks.  (1)  This format is used in at least the Audio Interchange
File Format (AIFF/AIFF-C) and the Real Media File Format (RMFF).  The
WAVE audio file format is closely related and can also be read using
this module.

A chunk has the following structure:

Offset        Length       Contents
--------------------------------------------------------------- 
0             4            Chunk ID
4             4            Size of chunk in big-endian byte
                           order, not including the header
8             `n'          Data bytes, where `n' is the size
                           given in the preceding field
8 + `n'       0 or 1       Pad byte needed if `n' is odd and
                           chunk alignment is used

The ID is a 4-byte string which identifies the type of chunk.

The size field (a 32-bit value, encoded using big-endian byte order)
gives the size of the chunk data, not including the 8-byte header.

Usually an IFF-type file consists of one or more chunks.  The proposed
usage of the *Note Chunk: 2041. class defined here is to instantiate an
instance at the start of each chunk and read from the instance until it
reaches the end, after which a new instance can be instantiated. At the
end of the file, creating a new instance will fail with an *Note
EOFError: 8b3. exception.

 -- Class: chunk.Chunk (file[, align, bigendian, inclheader])
     Class which represents a chunk.  The `file' argument is expected
     to be a file-like object.  An instance of this class is
     specifically allowed.  The only method that is needed is *Note
     read(): 939.  If the methods *Note seek(): 938. and *Note tell():
     93b. are present and don’t raise an exception, they are also
     used.  If these methods are present and raise an exception, they
     are expected to not have altered the object.  If the optional
     argument `align' is true, chunks are assumed to be aligned on
     2-byte boundaries.  If `align' is false, no alignment is assumed.
     The default value is true.  If the optional argument `bigendian'
     is false, the chunk size is assumed to be in little-endian order.
     This is needed for WAVE audio files. The default value is true.
     If the optional argument `inclheader' is true, the size given in
     the chunk header includes the size of the header.  The default
     value is false.

     A *Note Chunk: 2041. object supports the following methods:

      -- Method: getname ()
          Returns the name (ID) of the chunk.  This is the first 4
          bytes of the chunk.

      -- Method: getsize ()
          Returns the size of the chunk.

      -- Method: close ()
          Close and skip to the end of the chunk.  This does not close
          the underlying file.

     The remaining methods will raise *Note IOError: 1fa. if called
     after the *Note close(): 2044. method has been called.

      -- Method: isatty ()
          Returns `False'.

      -- Method: seek (pos[, whence])
          Set the chunk’s current position.  The `whence' argument is
          optional and defaults to `0' (absolute file positioning);
          other values are `1' (seek relative to the current position)
          and `2' (seek relative to the file’s end).  There is no
          return value. If the underlying file does not allow seek,
          only forward seeks are allowed.

      -- Method: tell ()
          Return the current position into the chunk.

      -- Method: read ([size])
          Read at most `size' bytes from the chunk (less if the read
          hits the end of the chunk before obtaining `size' bytes).  If
          the `size' argument is negative or omitted, read all data
          until the end of the chunk.  The bytes are returned as a
          string object.  An empty string is returned when the end of
          the chunk is encountered immediately.

      -- Method: skip ()
          Skip to the end of the chunk.  All further calls to *Note
          read(): 2048. for the chunk will return `'''.  If you are not
          interested in the contents of the chunk, this method should
          be called so that the file points to the start of the next
          chunk.

---------- Footnotes ----------

(1) “EA IFF 85” Standard for Interchange Format Files, Jerry
Morrison, Electronic Arts, January 1985.


File: python.info,  Node: colorsys — Conversions between color systems,  Next: imghdr — Determine the type of an image,  Prev: chunk — Read IFF chunked data,  Up: Multimedia Services

5.21.7 `colorsys' — Conversions between color systems
-------------------------------------------------------

`Source code:' Lib/colorsys.py(1)

__________________________________________________________________

The *Note colorsys: 67. module defines bidirectional conversions of
color values between colors expressed in the RGB (Red Green Blue) color
space used in computer monitors and three other coordinate systems:
YIQ, HLS (Hue Lightness Saturation) and HSV (Hue Saturation Value).
Coordinates in all of these color spaces are floating point values.  In
the YIQ space, the Y coordinate is between 0 and 1, but the I and Q
coordinates can be positive or negative.  In all other spaces, the
coordinates are all between 0 and 1.

See also
........

More information about color spaces can be found at
<http://www.poynton.com/ColorFAQ.html> and
<https://www.cambridgeincolour.com/tutorials/color-spaces.htm>.

The *Note colorsys: 67. module defines the following functions:

 -- Function: colorsys.rgb_to_yiq (r, g, b)
     Convert the color from RGB coordinates to YIQ coordinates.

 -- Function: colorsys.yiq_to_rgb (y, i, q)
     Convert the color from YIQ coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hls (r, g, b)
     Convert the color from RGB coordinates to HLS coordinates.

 -- Function: colorsys.hls_to_rgb (h, l, s)
     Convert the color from HLS coordinates to RGB coordinates.

 -- Function: colorsys.rgb_to_hsv (r, g, b)
     Convert the color from RGB coordinates to HSV coordinates.

 -- Function: colorsys.hsv_to_rgb (h, s, v)
     Convert the color from HSV coordinates to RGB coordinates.

Example:

    >>> import colorsys
    >>> colorsys.rgb_to_hsv(0.2, 0.4, 0.4)
    (0.5, 0.5, 0.4)
    >>> colorsys.hsv_to_rgb(0.5, 0.5, 0.4)
    (0.2, 0.4, 0.4)

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/colorsys.py


File: python.info,  Node: imghdr — Determine the type of an image,  Next: sndhdr — Determine type of sound file,  Prev: colorsys — Conversions between color systems,  Up: Multimedia Services

5.21.8 `imghdr' — Determine the type of an image
--------------------------------------------------

`Source code:' Lib/imghdr.py(1)

__________________________________________________________________

The *Note imghdr: f5. module determines the type of image contained in
a file or byte stream.

The *Note imghdr: f5. module defines the following function:

 -- Function: imghdr.what (filename[, h])
     Tests the image data contained in the file named by `filename',
     and returns a string describing the image type.  If optional `h'
     is provided, the `filename' is ignored and `h' is assumed to
     contain the byte stream to test.

The following image types are recognized, as listed below with the
return value from *Note what(): 2054.:

Value            Image format
--------------------------------------------------------- 
`'rgb''          SGI ImgLib Files
`'gif''          GIF 87a and 89a Files
`'pbm''          Portable Bitmap Files
`'pgm''          Portable Graymap Files
`'ppm''          Portable Pixmap Files
`'tiff''         TIFF Files
`'rast''         Sun Raster Files
`'xbm''          X Bitmap Files
`'jpeg''         JPEG data in JFIF or Exif formats
`'bmp''          BMP files
`'png''          Portable Network Graphics

New in version 2.5: Exif detection.

You can extend the list of file types *Note imghdr: f5. can recognize
by appending to this variable:

 -- Data: imghdr.tests
     A list of functions performing the individual tests.  Each
     function takes two arguments: the byte-stream and an open
     file-like object. When *Note what(): 2054. is called with a
     byte-stream, the file-like object will be `None'.

     The test function should return a string describing the image type
     if the test succeeded, or `None' if it failed.

Example:

    >>> import imghdr
    >>> imghdr.what('bass.gif')
    'gif'

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/imghdr.py


File: python.info,  Node: sndhdr — Determine type of sound file,  Next: ossaudiodev — Access to OSS-compatible audio devices,  Prev: imghdr — Determine the type of an image,  Up: Multimedia Services

5.21.9 `sndhdr' — Determine type of sound file
------------------------------------------------

`Source code:' Lib/sndhdr.py(1)

__________________________________________________________________

The *Note sndhdr: 15b. provides utility functions which attempt to
determine the type of sound data which is in a file.  When these
functions are able to determine what type of sound data is stored in a
file, they return a tuple `(type, sampling_rate, channels, frames,
bits_per_sample)'.  The value for `type' indicates the data type and
will be one of the strings `'aifc'', `'aiff'', `'au'', `'hcom'',
`'sndr'', `'sndt'', `'voc'', `'wav'', `'8svx'', `'sb'', `'ub'', or
`'ul''.  The `sampling_rate' will be either the actual value or `0' if
unknown or difficult to decode.  Similarly, `channels' will be either
the number of channels or `0' if it cannot be determined or if the
value is difficult to decode.  The value for `frames' will be either
the number of frames or `-1'.  The last item in the tuple,
`bits_per_sample', will either be the sample size in bits or `'A'' for
A-LAW or `'U'' for u-LAW.

 -- Function: sndhdr.what (filename)
     Determines the type of sound data stored in the file `filename'
     using *Note whathdr(): 2059.  If it succeeds, returns a tuple as
     described above, otherwise `None' is returned.

 -- Function: sndhdr.whathdr (filename)
     Determines the type of sound data stored in a file based on the
     file  header.  The name of the file is given by `filename'.  This
     function returns a tuple as described above on success, or `None'.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/sndhdr.py


File: python.info,  Node: ossaudiodev — Access to OSS-compatible audio devices,  Prev: sndhdr — Determine type of sound file,  Up: Multimedia Services

5.21.10 `ossaudiodev' — Access to OSS-compatible audio devices
----------------------------------------------------------------

New in version 2.3.

This module allows you to access the OSS (Open Sound System) audio
interface.  OSS is available for a wide range of open-source and
commercial Unices, and is the standard audio interface for Linux and
recent versions of FreeBSD.

See also
........

Open Sound System Programmer's Guide(1)
     the official documentation for the OSS C API

The module defines a large number of constants supplied by the OSS
device driver; see `<sys/soundcard.h>' on either Linux or FreeBSD for a
listing.

*Note ossaudiodev: 12b. defines the following variables and functions:

 -- Exception: ossaudiodev.OSSAudioError
     This exception is raised on certain errors.  The argument is a
     string describing what went wrong.

     (If *Note ossaudiodev: 12b. receives an error from a system call
     such as `open()', `write()', or `ioctl()', it raises *Note
     IOError: 1fa.  Errors detected directly by *Note ossaudiodev: 12b.
     result in *Note OSSAudioError: 205c.)

     (For backwards compatibility, the exception class is also
     available as `ossaudiodev.error'.)

 -- Function: ossaudiodev.open (mode)
 -- Function: ossaudiodev.open (device, mode)
     Open an audio device and return an OSS audio device object.  This
     object supports many file-like methods, such as `read()',
     `write()', and `fileno()' (although there are subtle differences
     between conventional Unix read/write semantics and those of OSS
     audio devices).  It also supports a number of audio-specific
     methods; see below for the complete list of methods.

     `device' is the audio device filename to use.  If it is not
     specified, this module first looks in the environment variable `AUDIODEV'
     for a device to use.  If not found, it falls back to `/dev/dsp'.

     `mode' is one of `'r'' for read-only (record) access, `'w'' for
     write-only (playback) access and `'rw'' for both. Since many sound
     cards only allow one process to have the recorder or player open
     at a time, it is a good idea to open the device only for the
     activity needed.  Further, some sound cards are half-duplex: they
     can be opened for reading or writing, but not both at once.

     Note the unusual calling syntax: the `first' argument is optional,
     and the second is required.  This is a historical artifact for
     compatibility with the older `linuxaudiodev' module which *Note
     ossaudiodev: 12b. supersedes.


 -- Function: ossaudiodev.openmixer ([device])
     Open a mixer device and return an OSS mixer device object.
     `device' is the mixer device filename to use.  If it is not
     specified, this module first looks in the environment variable `MIXERDEV'
     for a device to use.  If not found, it falls back to `/dev/mixer'.

* Menu:

* Audio Device Objects::
* Mixer Device Objects::

---------- Footnotes ----------

(1) http://www.opensound.com/pguide/oss.pdf


File: python.info,  Node: Audio Device Objects,  Next: Mixer Device Objects,  Up: ossaudiodev — Access to OSS-compatible audio devices

5.21.10.1 Audio Device Objects
..............................

Before you can write to or read from an audio device, you must call
three methods in the correct order:

  1. `setfmt()' to set the output format

  2. `channels()' to set the number of channels

  3. `speed()' to set the sample rate

Alternately, you can use the `setparameters()' method to set all three
audio parameters at once.  This is more convenient, but may not be as
flexible in all cases.

The audio device objects returned by *Note open(): 205d. define the
following methods and (read-only) attributes:

 -- Method: oss_audio_device.close ()
     Explicitly close the audio device.  When you are done writing to
     or reading from an audio device, you should explicitly close it.
     A closed device cannot be used again.

 -- Method: oss_audio_device.fileno ()
     Return the file descriptor associated with the device.

 -- Method: oss_audio_device.read (size)
     Read `size' bytes from the audio input and return them as a Python
     string.  Unlike most Unix device drivers, OSS audio devices in
     blocking mode (the default) will block *Note read(): 2063. until
     the entire requested amount of data is available.

 -- Method: oss_audio_device.write (data)
     Write the Python string `data' to the audio device and return the
     number of bytes written.  If the audio device is in blocking mode
     (the default), the entire string is always written (again, this is
     different from usual Unix device semantics).  If the device is in
     non-blocking mode, some data may not be written —see *Note
     writeall(): 2065.

 -- Method: oss_audio_device.writeall (data)
     Write the entire Python string `data' to the audio device: waits
     until the audio device is able to accept data, writes as much data
     as it will accept, and repeats until `data' has been completely
     written. If the device is in blocking mode (the default), this has
     the same effect as *Note write(): 2064.; *Note writeall(): 2065.
     is only useful in non-blocking mode.  Has no return value, since
     the amount of data written is always equal to the amount of data
     supplied.

The following methods each map to exactly one `ioctl()' system call.
The correspondence is obvious: for example, `setfmt()' corresponds to
the `SNDCTL_DSP_SETFMT' ioctl, and `sync()' to `SNDCTL_DSP_SYNC' (this
can be useful when consulting the OSS documentation).  If the underlying
`ioctl()' fails, they all raise *Note IOError: 1fa.

 -- Method: oss_audio_device.nonblock ()
     Put the device into non-blocking mode.  Once in non-blocking mode,
     there is no way to return it to blocking mode.

 -- Method: oss_audio_device.getfmts ()
     Return a bitmask of the audio output formats supported by the
     soundcard.  Some of the formats supported by OSS are:

     Format                        Description
     -------------------------------------------------------------------------------- 
     `AFMT_MU_LAW'                 a logarithmic encoding (used by Sun `.au' files
                                   and `/dev/audio')
     `AFMT_A_LAW'                  a logarithmic encoding
     `AFMT_IMA_ADPCM'              a 4:1 compressed format defined by the
                                   Interactive Multimedia Association
     `AFMT_U8'                     Unsigned, 8-bit audio
     `AFMT_S16_LE'                 Signed, 16-bit audio, little-endian byte order
                                   (as used by Intel processors)
     `AFMT_S16_BE'                 Signed, 16-bit audio, big-endian byte order (as
                                   used by 68k, PowerPC, Sparc)
     `AFMT_S8'                     Signed, 8 bit audio
     `AFMT_U16_LE'                 Unsigned, 16-bit little-endian audio
     `AFMT_U16_BE'                 Unsigned, 16-bit big-endian audio

     Consult the OSS documentation for a full list of audio formats,
     and note that most devices support only a subset of these formats.
     Some older devices only support `AFMT_U8'; the most common format
     used today is `AFMT_S16_LE'.

 -- Method: oss_audio_device.setfmt (format)
     Try to set the current audio format to `format'—see *Note
     getfmts(): 2067. for a list.  Returns the audio format that the
     device was set to, which may not be the requested format.  May
     also be used to return the current audio format—do this by
     passing an “audio format” of `AFMT_QUERY'.

 -- Method: oss_audio_device.channels (nchannels)
     Set the number of output channels to `nchannels'.  A value of 1
     indicates monophonic sound, 2 stereophonic.  Some devices may have
     more than 2 channels, and some high-end devices may not support
     mono. Returns the number of channels the device was set to.

 -- Method: oss_audio_device.speed (samplerate)
     Try to set the audio sampling rate to `samplerate' samples per
     second.  Returns the rate actually set.  Most sound devices
     don’t support arbitrary sampling rates.  Common rates are:

     Rate        Description
     ------------------------------------------------------------ 
     8000        default rate for `/dev/audio'
     11025       speech recording
     22050       
     44100       CD quality audio (at 16 bits/sample and 2
                 channels)
     96000       DVD quality audio (at 24 bits/sample)


 -- Method: oss_audio_device.sync ()
     Wait until the sound device has played every byte in its buffer.
     (This happens implicitly when the device is closed.)  The OSS
     documentation recommends closing and re-opening the device rather
     than using *Note sync(): 206b.

 -- Method: oss_audio_device.reset ()
     Immediately stop playing or recording and return the device to a
     state where it can accept commands.  The OSS documentation
     recommends closing and re-opening the device after calling *Note
     reset(): 206c.

 -- Method: oss_audio_device.post ()
     Tell the driver that there is likely to be a pause in the output,
     making it possible for the device to handle the pause more
     intelligently.  You might use this after playing a spot sound
     effect, before waiting for user input, or before doing disk I/O.

The following convenience methods combine several ioctls, or one ioctl
and some simple calculations.

 -- Method: oss_audio_device.setparameters (format, nchannels,
          samplerate[, strict=False])
     Set the key audio sampling parameters—sample format, number of
     channels, and sampling rate—in one method call.  `format',
     `nchannels', and `samplerate' should be as specified in the *Note
     setfmt(): 2068, *Note channels(): 2069, and *Note speed(): 206a.
     methods.  If `strict' is true, *Note setparameters(): 206e. checks
     to see if each parameter was actually set to the requested value,
     and raises *Note OSSAudioError: 205c. if not.  Returns a tuple
     (`format', `nchannels', `samplerate') indicating the parameter
     values that were actually set by the device driver (i.e., the same
     as the return values of *Note setfmt(): 2068, *Note channels():
     2069, and *Note speed(): 206a.).

     For example,

         (fmt, channels, rate) = dsp.setparameters(fmt, channels, rate)

     is equivalent to

         fmt = dsp.setfmt(fmt)
         channels = dsp.channels(channels)
         rate = dsp.rate(rate)

 -- Method: oss_audio_device.bufsize ()
     Returns the size of the hardware buffer, in samples.

 -- Method: oss_audio_device.obufcount ()
     Returns the number of samples that are in the hardware buffer yet
     to be played.

 -- Method: oss_audio_device.obuffree ()
     Returns the number of samples that could be queued into the
     hardware buffer to be played without blocking.

Audio device objects also support several read-only attributes:

 -- Attribute: oss_audio_device.closed
     Boolean indicating whether the device has been closed.

 -- Attribute: oss_audio_device.name
     String containing the name of the device file.

 -- Attribute: oss_audio_device.mode
     The I/O mode for the file, either `"r"', `"rw"', or `"w"'.


File: python.info,  Node: Mixer Device Objects,  Prev: Audio Device Objects,  Up: ossaudiodev — Access to OSS-compatible audio devices

5.21.10.2 Mixer Device Objects
..............................

The mixer object provides two file-like methods:

 -- Method: oss_mixer_device.close ()
     This method closes the open mixer device file.  Any further
     attempts to use the mixer after this file is closed will raise an
     *Note IOError: 1fa.

 -- Method: oss_mixer_device.fileno ()
     Returns the file handle number of the open mixer device file.

The remaining methods are specific to audio mixing:

 -- Method: oss_mixer_device.controls ()
     This method returns a bitmask specifying the available mixer
     controls (“Control” being a specific mixable “channel”,
     such as `SOUND_MIXER_PCM' or `SOUND_MIXER_SYNTH').  This bitmask
     indicates a subset of all available mixer controls—the
     `SOUND_MIXER_*' constants defined at module level.  To determine
     if, for example, the current mixer object supports a PCM mixer, use
     the following Python code:

         mixer=ossaudiodev.openmixer()
         if mixer.controls() & (1 << ossaudiodev.SOUND_MIXER_PCM):
             # PCM is supported
             ... code ...

     For most purposes, the `SOUND_MIXER_VOLUME' (master volume) and
     `SOUND_MIXER_PCM' controls should suffice—but code that uses the
     mixer should be flexible when it comes to choosing mixer controls.
     On the Gravis Ultrasound, for example, `SOUND_MIXER_VOLUME' does
     not exist.

 -- Method: oss_mixer_device.stereocontrols ()
     Returns a bitmask indicating stereo mixer controls.  If a bit is
     set, the corresponding control is stereo; if it is unset, the
     control is either monophonic or not supported by the mixer (use in
     combination with *Note controls(): 2079. to determine which).

     See the code example for the *Note controls(): 2079. function for
     an example of getting data from a bitmask.

 -- Method: oss_mixer_device.reccontrols ()
     Returns a bitmask specifying the mixer controls that may be used
     to record.  See the code example for *Note controls(): 2079. for
     an example of reading from a bitmask.

 -- Method: oss_mixer_device.get (control)
     Returns the volume of a given mixer control.  The returned volume
     is a 2-tuple `(left_volume,right_volume)'.  Volumes are specified
     as numbers from 0 (silent) to 100 (full volume).  If the control
     is monophonic, a 2-tuple is still returned, but both volumes are
     the same.

     Raises *Note OSSAudioError: 205c. if an invalid control was is
     specified, or *Note IOError: 1fa. if an unsupported control is
     specified.

 -- Method: oss_mixer_device.set (control, (left, right))
     Sets the volume for a given mixer control to `(left,right)'.
     `left' and `right' must be ints and between 0 (silent) and 100
     (full volume).  On success, the new volume is returned as a
     2-tuple. Note that this may not be exactly the same as the volume
     specified, because of the limited resolution of some soundcard’s
     mixers.

     Raises *Note OSSAudioError: 205c. if an invalid mixer control was
     specified, or if the specified volumes were out-of-range.

 -- Method: oss_mixer_device.get_recsrc ()
     This method returns a bitmask indicating which control(s) are
     currently being used as a recording source.

 -- Method: oss_mixer_device.set_recsrc (bitmask)
     Call this function to specify a recording source.  Returns a
     bitmask indicating the new recording source (or sources) if
     successful; raises *Note IOError: 1fa. if an invalid source was
     specified.  To set the current recording source to the microphone
     input:

         mixer.setrecsrc (1 << ossaudiodev.SOUND_MIXER_MIC)


File: python.info,  Node: Internationalization,  Next: Program Frameworks,  Prev: Multimedia Services,  Up: The Python Standard Library

5.22 Internationalization
=========================

The modules described in this chapter help you write software that is
independent of language and locale by providing mechanisms for
selecting a language to be used in  program messages or by tailoring
output to match local conventions.

The list of modules described in this chapter is:

* Menu:

* gettext — Multilingual internationalization services::
* locale — Internationalization services::


File: python.info,  Node: gettext — Multilingual internationalization services,  Next: locale — Internationalization services,  Up: Internationalization

5.22.1 `gettext' — Multilingual internationalization services
---------------------------------------------------------------

`Source code:' Lib/gettext.py(1)

__________________________________________________________________

The *Note gettext: e1. module provides internationalization (I18N) and
localization (L10N) services for your Python modules and applications.
It supports both the GNU `gettext' message catalog API and a higher
level, class-based API that may be more appropriate for Python files.
The interface described below allows you to write your module and
application messages in one natural language, and provide a catalog of
translated messages for running under different natural languages.

Some hints on localizing your Python modules and applications are also
given.

* Menu:

* GNU gettext API::
* Class-based API::
* Internationalizing your programs and modules::
* Acknowledgements: Acknowledgements<9>.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/gettext.py


File: python.info,  Node: GNU gettext API,  Next: Class-based API,  Up: gettext — Multilingual internationalization services

5.22.1.1 GNU `gettext' API
..........................

The *Note gettext: e1. module defines the following API, which is very
similar to the GNU `gettext' API.  If you use this API you will affect
the translation of your entire application globally.  Often this is
what you want if your application is monolingual, with the choice of
language dependent on the locale of your user.  If you are localizing a
Python module, or if your application needs to switch languages on the
fly, you probably want to use the class-based API instead.

 -- Function: gettext.bindtextdomain (domain[, localedir])
     Bind the `domain' to the locale directory `localedir'.  More
     concretely, *Note gettext: e1. will look for binary `.mo' files
     for the given domain using the path (on Unix):
     `localedir/language/LC_MESSAGES/domain.mo', where `languages' is
     searched for in the environment variables `LANGUAGE', `LC_ALL', `LC_MESSAGES',
     and `LANG' respectively.

     If `localedir' is omitted or `None', then the current binding for
     `domain' is returned. (1)

 -- Function: gettext.bind_textdomain_codeset (domain[, codeset])
     Bind the `domain' to `codeset', changing the encoding of strings
     returned by the *Note gettext(): e1. family of functions. If
     `codeset' is omitted, then the current binding is returned.

     New in version 2.4.


 -- Function: gettext.textdomain ([domain])
     Change or query the current global domain.  If `domain' is `None',
     then the current global domain is returned, otherwise the global
     domain is set to `domain', which is returned.

 -- Function: gettext.gettext (message)
     Return the localized translation of `message', based on the
     current global domain, language, and locale directory.  This
     function is usually aliased as `_()' in the local namespace (see
     examples below).

 -- Function: gettext.lgettext (message)
     Equivalent to *Note gettext(): e1, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with *Note bind_textdomain_codeset(): 2087.

     New in version 2.4.


 -- Function: gettext.dgettext (domain, message)
     Like *Note gettext(): e1, but look the message up in the specified
     `domain'.

 -- Function: gettext.ldgettext (domain, message)
     Equivalent to *Note dgettext(): 208a, but the translation is
     returned in the preferred system encoding, if no other encoding
     was explicitly set with *Note bind_textdomain_codeset(): 2087.

     New in version 2.4.


 -- Function: gettext.ngettext (singular, plural, n)
     Like *Note gettext(): e1, but consider plural forms. If a
     translation is found, apply the plural formula to `n', and return
     the resulting message (some languages have more than two plural
     forms). If no translation is found, return `singular' if `n' is 1;
     return `plural' otherwise.

     The Plural formula is taken from the catalog header. It is a C or
     Python expression that has a free variable `n'; the expression
     evaluates to the index of the plural in the catalog. See the GNU
     gettext documentation for the precise syntax to be used in `.po'
     files and the formulas for a variety of languages.

     New in version 2.3.


 -- Function: gettext.lngettext (singular, plural, n)
     Equivalent to *Note ngettext(): 208c, but the translation is
     returned in the preferred system encoding, if no other encoding
     was explicitly set with *Note bind_textdomain_codeset(): 2087.

     New in version 2.4.


 -- Function: gettext.dngettext (domain, singular, plural, n)
     Like *Note ngettext(): 208c, but look the message up in the
     specified `domain'.

     New in version 2.3.


 -- Function: gettext.ldngettext (domain, singular, plural, n)
     Equivalent to *Note dngettext(): 208e, but the translation is
     returned in the preferred system encoding, if no other encoding
     was explicitly set with *Note bind_textdomain_codeset(): 2087.

     New in version 2.4.


Note that GNU `gettext' also defines a `dcgettext()' method, but this
was deemed not useful and so it is currently unimplemented.

Here’s an example of typical usage for this API:

    import gettext
    gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')
    gettext.textdomain('myapplication')
    _ = gettext.gettext
    # ...
    print _('This is a translatable string.')

---------- Footnotes ----------

(1) The default locale directory is system dependent; for example, on
RedHat Linux it is `/usr/share/locale', but on Solaris it is
`/usr/lib/locale'.  The *Note gettext: e1. module does not try to
support these system dependent defaults; instead its default is
`sys.prefix/share/locale'. For this reason, it is always best to call
*Note bindtextdomain(): 2086. with an explicit absolute path at the
start of your application.


File: python.info,  Node: Class-based API,  Next: Internationalizing your programs and modules,  Prev: GNU gettext API,  Up: gettext — Multilingual internationalization services

5.22.1.2 Class-based API
........................

The class-based API of the *Note gettext: e1. module gives you more
flexibility and greater convenience than the GNU `gettext' API.  It is
the recommended way of localizing your Python applications and modules.
*Note gettext: e1. defines a “translations” class which implements
the parsing of GNU `.mo' format files, and has methods for returning
either standard 8-bit strings or Unicode strings. Instances of this
“translations” class can also install themselves  in the built-in
namespace as the function `_()'.

 -- Function: gettext.find (domain[, localedir[, languages[, all]]])
     This function implements the standard `.mo' file search algorithm.
     It takes a `domain', identical to what *Note textdomain(): 2088.
     takes.  Optional `localedir' is as in *Note bindtextdomain():
     2086.  Optional `languages' is a list of strings, where each
     string is a language code.

     If `localedir' is not given, then the default system locale
     directory is used.  (1)  If `languages' is not given, then the
     following environment variables are searched: `LANGUAGE', `LC_ALL', `LC_MESSAGES',
     and `LANG'.  The first one returning a non-empty value is used for
     the `languages' variable. The environment variables should contain
     a colon separated list of languages, which will be split on the
     colon to produce the expected list of language code strings.

     *Note find(): 2091. then expands and normalizes the languages, and
     then iterates through them, searching for an existing file built
     of these components:

     `localedir/language/LC_MESSAGES/domain.mo'

     The first such file name that exists is returned by *Note find():
     2091. If no such file is found, then `None' is returned. If `all'
     is given, it returns a list of all file names, in the order in
     which they appear in the languages list or the environment
     variables.

 -- Function: gettext.translation (domain[, localedir[, languages[,
          class_[, fallback[, codeset]]]]])
     Return a `Translations' instance based on the `domain',
     `localedir', and `languages', which are first passed to *Note
     find(): 2091. to get a list of the associated `.mo' file paths.
     Instances with identical `.mo' file names are cached.  The actual
     class instantiated is either `class_' if provided, otherwise
     `GNUTranslations'.  The class’s constructor must take a single
     file object argument. If provided, `codeset' will change the
     charset used to encode translated strings.

     If multiple files are found, later files are used as fallbacks for
     earlier ones.  To allow setting the fallback, *Note copy.copy():
     c62. is used to clone each translation object from the cache; the
     actual instance data is still shared with the cache.

     If no `.mo' file is found, this function raises *Note IOError:
     1fa. if `fallback' is false (which is the default), and returns a
     *Note NullTranslations: 2093. instance if `fallback' is true.

     Changed in version 2.4: Added the `codeset' parameter.


 -- Function: gettext.install (domain[, localedir[, unicode[, codeset[,
          names]]]])
     This installs the function `_()' in Python’s builtins namespace,
     based on `domain', `localedir', and `codeset' which are passed to
     the function *Note translation(): 2092.  The `unicode' flag is
     passed to the resulting translation object’s *Note install():
     2095. method.

     For the `names' parameter, please see the description of the
     translation object’s *Note install(): 2095. method.

     As seen below, you usually mark the strings in your application
     that are candidates for translation, by wrapping them in a call to
     the `_()' function, like this:

         print _('This string will be translated.')

     For convenience, you want the `_()' function to be installed in
     Python’s builtins namespace, so it is easily accessible in all
     modules of your application.

     Changed in version 2.4: Added the `codeset' parameter.

     Changed in version 2.5: Added the `names' parameter.


* Menu:

* The NullTranslations class::
* The GNUTranslations class::
* Solaris message catalog support::
* The Catalog constructor::

---------- Footnotes ----------

(1) See the footnote for *Note bindtextdomain(): 2086. above.


File: python.info,  Node: The NullTranslations class,  Next: The GNUTranslations class,  Up: Class-based API

5.22.1.3 The `NullTranslations' class
.....................................

Translation classes are what actually implement the translation of
original source file message strings to translated message strings. The
base class used by all translation classes is *Note NullTranslations:
2093.; this provides the basic interface you can use to write your own
specialized translation classes.  Here are the methods of *Note
NullTranslations: 2093.:

 -- Class: gettext.NullTranslations ([fp])
     Takes an optional file object `fp', which is ignored by the base
     class.  Initializes “protected” instance variables `_info' and
     `_charset' which are set by derived classes, as well as
     `_fallback', which is set through *Note add_fallback(): 2097.  It
     then calls `self._parse(fp)' if `fp' is not `None'.

      -- Method: _parse (fp)
          No-op’d in the base class, this method takes file object
          `fp', and reads the data from the file, initializing its
          message catalog.  If you have an unsupported message catalog
          file format, you should override this method to parse your
          format.

      -- Method: add_fallback (fallback)
          Add `fallback' as the fallback object for the current
          translation object. A translation object should consult the
          fallback if it cannot provide a translation for a given
          message.

      -- Method: gettext (message)
          If a fallback has been set, forward *Note gettext(): e1. to
          the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

      -- Method: lgettext (message)
          If a fallback has been set, forward *Note lgettext(): 2089.
          to the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.4.


      -- Method: ugettext (message)
          If a fallback has been set, forward *Note ugettext(): 209b.
          to the fallback. Otherwise, return the translated message as
          a Unicode string. Overridden in derived classes.

      -- Method: ngettext (singular, plural, n)
          If a fallback has been set, forward *Note ngettext(): 208c.
          to the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.3.


      -- Method: lngettext (singular, plural, n)
          If a fallback has been set, forward *Note lngettext(): 208d.
          to the fallback. Otherwise, return the translated message.
          Overridden in derived classes.

          New in version 2.4.


      -- Method: ungettext (singular, plural, n)
          If a fallback has been set, forward *Note ungettext(): 209e.
          to the fallback.  Otherwise, return the translated message as
          a Unicode string. Overridden in derived classes.

          New in version 2.3.


      -- Method: info ()
          Return the “protected” `_info' variable.

      -- Method: charset ()
          Return the “protected” `_charset' variable.

      -- Method: output_charset ()
          Return the “protected” `_output_charset' variable, which
          defines the encoding used to return translated messages.

          New in version 2.4.


      -- Method: set_output_charset (charset)
          Change the “protected” `_output_charset' variable, which
          defines the encoding used to return translated messages.

          New in version 2.4.


      -- Method: install ([unicode[, names]])
          If the `unicode' flag is false, this method installs
          `self.gettext()' into the built-in namespace, binding it to
          `_'.  If `unicode' is true, it binds `self.ugettext()'
          instead.  By default, `unicode' is false.

          If the `names' parameter is given, it must be a sequence
          containing the names of functions you want to install in the
          builtins namespace in addition to `_()'.  Supported names are
          `'gettext'' (bound to `self.gettext()' or `self.ugettext()'
          according to the `unicode' flag), `'ngettext'' (bound to
          `self.ngettext()' or `self.ungettext()' according to the
          `unicode' flag), `'lgettext'' and `'lngettext''.

          Note that this is only one way, albeit the most convenient
          way, to make the `_()' function available to your
          application.  Because it affects the entire application
          globally, and specifically the built-in namespace, localized
          modules should never install `_()'. Instead, they should use
          this code to make `_()' available to their module:

              import gettext
              t = gettext.translation('mymodule', ...)
              _ = t.gettext

          This puts `_()' only in the module’s global namespace and
          so only affects calls within this module.

          Changed in version 2.5: Added the `names' parameter.



File: python.info,  Node: The GNUTranslations class,  Next: Solaris message catalog support,  Prev: The NullTranslations class,  Up: Class-based API

5.22.1.4 The `GNUTranslations' class
....................................

The *Note gettext: e1. module provides one additional class derived from
*Note NullTranslations: 2093.: `GNUTranslations'.  This class overrides
`_parse()' to enable reading GNU `gettext' format `.mo' files in both
big-endian and little-endian format. It also coerces both message ids
and message strings to Unicode.

`GNUTranslations' parses optional meta-data out of the translation
catalog.  It is convention with GNU `gettext' to include meta-data as
the translation for the empty string.  This meta-data is in RFC
822(1)-style `key: value' pairs, and should contain the
`Project-Id-Version' key.  If the key `Content-Type' is found, then the
`charset' property is used to initialize the “protected” `_charset'
instance variable, defaulting to `None' if not found.  If the charset
encoding is specified, then all message ids and message strings read
from the catalog are converted to Unicode using this encoding.  The
`ugettext()' method always returns a Unicode, while the *Note
gettext(): e1. returns an encoded 8-bit string.  For the message id
arguments of both methods, either Unicode strings or 8-bit strings
containing only US-ASCII characters are acceptable.  Note that the
Unicode version of the methods (i.e. `ugettext()' and `ungettext()')
are the recommended interface to use for internationalized Python
programs.

The entire set of key/value pairs are placed into a dictionary and set
as the “protected” `_info' instance variable.

If the `.mo' file’s magic number is invalid, or if other problems
occur while reading the file, instantiating a `GNUTranslations' class
can raise *Note IOError: 1fa.

The following methods are overridden from the base class implementation:

 -- Method: GNUTranslations.gettext (message)
     Look up the `message' id in the catalog and return the
     corresponding message string, as an 8-bit string encoded with the
     catalog’s charset encoding, if known.  If there is no entry in
     the catalog for the `message' id, and a fallback has been set, the
     look up is forwarded to the fallback’s *Note gettext(): e1.
     method.  Otherwise, the `message' id is returned.

 -- Method: GNUTranslations.lgettext (message)
     Equivalent to *Note gettext(): e1, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with `set_output_charset()'.

     New in version 2.4.


 -- Method: GNUTranslations.ugettext (message)
     Look up the `message' id in the catalog and return the
     corresponding message string, as a Unicode string.  If there is no
     entry in the catalog for the `message' id, and a fallback has been
     set, the look up is forwarded to the fallback’s *Note
     ugettext(): 20a6. method.  Otherwise, the `message' id is returned.

 -- Method: GNUTranslations.ngettext (singular, plural, n)
     Do a plural-forms lookup of a message id.  `singular' is used as
     the message id for purposes of lookup in the catalog, while `n' is
     used to determine which plural form to use.  The returned message
     string is an 8-bit string encoded with the catalog’s charset
     encoding, if known.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback’s *Note
     ngettext(): 208c. method.  Otherwise, when `n' is 1 `singular' is
     returned, and `plural' is returned in all other cases.

     New in version 2.3.


 -- Method: GNUTranslations.lngettext (singular, plural, n)
     Equivalent to *Note gettext(): e1, but the translation is returned
     in the preferred system encoding, if no other encoding was
     explicitly set with `set_output_charset()'.

     New in version 2.4.


 -- Method: GNUTranslations.ungettext (singular, plural, n)
     Do a plural-forms lookup of a message id.  `singular' is used as
     the message id for purposes of lookup in the catalog, while `n' is
     used to determine which plural form to use.  The returned message
     string is a Unicode string.

     If the message id is not found in the catalog, and a fallback is
     specified, the request is forwarded to the fallback’s *Note
     ungettext(): 20a9. method.  Otherwise, when `n' is 1 `singular' is
     returned, and `plural' is returned in all other cases.

     Here is an example:

         n = len(os.listdir('.'))
         cat = GNUTranslations(somefile)
         message = cat.ungettext(
             'There is %(num)d file in this directory',
             'There are %(num)d files in this directory',
             n) % {'num': n}

     New in version 2.3.


---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: Solaris message catalog support,  Next: The Catalog constructor,  Prev: The GNUTranslations class,  Up: Class-based API

5.22.1.5 Solaris message catalog support
........................................

The Solaris operating system defines its own binary `.mo' file format,
but since no documentation can be found on this format, it is not
supported at this time.


File: python.info,  Node: The Catalog constructor,  Prev: Solaris message catalog support,  Up: Class-based API

5.22.1.6 The Catalog constructor
................................

GNOME uses a version of the *Note gettext: e1. module by James
Henstridge, but this version has a slightly different API.  Its
documented usage was:

    import gettext
    cat = gettext.Catalog(domain, localedir)
    _ = cat.gettext
    print _('hello world')

For compatibility with this older module, the function `Catalog()' is an
alias for the *Note translation(): 2092. function described above.

One difference between this module and Henstridge’s: his catalog
objects supported access through a mapping API, but this appears to be
unused and so is not currently supported.


File: python.info,  Node: Internationalizing your programs and modules,  Next: Acknowledgements<9>,  Prev: Class-based API,  Up: gettext — Multilingual internationalization services

5.22.1.7 Internationalizing your programs and modules
.....................................................

Internationalization (I18N) refers to the operation by which a program
is made aware of multiple languages.  Localization (L10N) refers to the
adaptation of your program, once internationalized, to the local
language and cultural habits.  In order to provide multilingual
messages for your Python programs, you need to take the following steps:

  1. prepare your program or module by specially marking translatable
     strings

  2. run a suite of tools over your marked files to generate raw
     messages catalogs

  3. create language specific translations of the message catalogs

  4. use the *Note gettext: e1. module so that message strings are
     properly translated

In order to prepare your code for I18N, you need to look at all the
strings in your files.  Any string that needs to be translated should
be marked by wrapping it in `_('...')' — that is, a call to the
function `_()'.  For example:

    filename = 'mylog.txt'
    message = _('writing a log message')
    fp = open(filename, 'w')
    fp.write(message)
    fp.close()

In this example, the string `'writing a log message'' is marked as a
candidate for translation, while the strings `'mylog.txt'' and `'w''
are not.

The Python distribution comes with two tools which help you generate
the message catalogs once you’ve prepared your source code.  These
may or may not be available from a binary distribution, but they can be
found in a source distribution, in the `Tools/i18n' directory.

The `pygettext' (1) program scans all your Python source code looking
for the strings you previously marked as translatable.  It is similar
to the GNU `gettext' program except that it understands all the
intricacies of Python source code, but knows nothing about C or C++
source code.  You don’t need GNU `gettext' unless you’re also going
to be translating C code (such as C extension modules).

`pygettext' generates textual Uniforum-style human readable message
catalog `.pot' files, essentially structured human readable files which
contain every marked string in the source code, along with a
placeholder for the translation strings. `pygettext' is a command line
script that supports a similar command line interface as `xgettext';
for details on its use, run:

    pygettext.py --help

Copies of these `.pot' files are then handed over to the individual
human translators who write language-specific versions for every
supported natural language.  They send you back the filled in
language-specific versions as a `.po' file.  Using the `msgfmt.py' (2)
program (in the `Tools/i18n' directory), you take the `.po' files from
your translators and generate the machine-readable `.mo' binary catalog
files.  The `.mo' files are what the *Note gettext: e1. module uses for
the actual translation processing during run-time.

How you use the *Note gettext: e1. module in your code depends on
whether you are internationalizing a single module or your entire
application. The next two sections will discuss each case.

* Menu:

* Localizing your module::
* Localizing your application::
* Changing languages on the fly::
* Deferred translations::
* gettext() vs. lgettext(): gettext vs lgettext.

---------- Footnotes ----------

(1) François Pinard has written a program called `xpot' which does a
similar job.  It is available as part of his po-utils package
(https://github.com/pinard/po-utils).

(2) `msgfmt.py' is binary compatible with GNU `msgfmt' except that it
provides a simpler, all-Python implementation.  With this and
`pygettext.py', you generally won’t need to install the GNU `gettext'
package to internationalize your Python applications.


File: python.info,  Node: Localizing your module,  Next: Localizing your application,  Up: Internationalizing your programs and modules

5.22.1.8 Localizing your module
...............................

If you are localizing your module, you must take care not to make global
changes, e.g. to the built-in namespace.  You should not use the GNU
`gettext' API but instead the class-based API.

Let’s say your module is called “spam” and the module’s various
natural language translation `.mo' files reside in `/usr/share/locale'
in GNU `gettext' format.  Here’s what you would put at the top of your
module:

    import gettext
    t = gettext.translation('spam', '/usr/share/locale')
    _ = t.lgettext

If your translators were providing you with Unicode strings in their
`.po' files, you’d instead do:

    import gettext
    t = gettext.translation('spam', '/usr/share/locale')
    _ = t.ugettext


File: python.info,  Node: Localizing your application,  Next: Changing languages on the fly,  Prev: Localizing your module,  Up: Internationalizing your programs and modules

5.22.1.9 Localizing your application
....................................

If you are localizing your application, you can install the `_()'
function globally into the built-in namespace, usually in the main
driver file of your application.  This will let all your
application-specific files just use `_('...')' without having to
explicitly install it in each file.

In the simple case then, you need only add the following bit of code to
the main driver file of your application:

    import gettext
    gettext.install('myapplication')

If you need to set the locale directory or the `unicode' flag, you can
pass these into the *Note install(): 2094. function:

    import gettext
    gettext.install('myapplication', '/usr/share/locale', unicode=1)


File: python.info,  Node: Changing languages on the fly,  Next: Deferred translations,  Prev: Localizing your application,  Up: Internationalizing your programs and modules

5.22.1.10 Changing languages on the fly
.......................................

If your program needs to support many languages at the same time, you
may want to create multiple translation instances and then switch
between them explicitly, like so:

    import gettext

    lang1 = gettext.translation('myapplication', languages=['en'])
    lang2 = gettext.translation('myapplication', languages=['fr'])
    lang3 = gettext.translation('myapplication', languages=['de'])

    # start by using language1
    lang1.install()

    # ... time goes by, user selects language 2
    lang2.install()

    # ... more time goes by, user selects language 3
    lang3.install()


File: python.info,  Node: Deferred translations,  Next: gettext vs lgettext,  Prev: Changing languages on the fly,  Up: Internationalizing your programs and modules

5.22.1.11 Deferred translations
...............................

In most coding situations, strings are translated where they are coded.
Occasionally however, you need to mark strings for translation, but
defer actual translation until later.  A classic example is:

    animals = ['mollusk',
               'albatross',
               'rat',
               'penguin',
               'python', ]
    # ...
    for a in animals:
        print a

Here, you want to mark the strings in the `animals' list as being
translatable, but you don’t actually want to translate them until
they are printed.

Here is one way you can handle this situation:

    def _(message): return message

    animals = [_('mollusk'),
               _('albatross'),
               _('rat'),
               _('penguin'),
               _('python'), ]

    del _

    # ...
    for a in animals:
        print _(a)

This works because the dummy definition of `_()' simply returns the
string unchanged.  And this dummy definition will temporarily override
any definition of `_()' in the built-in namespace (until the *Note del:
585. command). Take care, though if you have a previous definition of
`_()' in the local namespace.

Note that the second use of `_()' will not identify “a” as being
translatable to the `pygettext' program, since it is not a string.

Another way to handle this is with the following example:

    def N_(message): return message

    animals = [N_('mollusk'),
               N_('albatross'),
               N_('rat'),
               N_('penguin'),
               N_('python'), ]

    # ...
    for a in animals:
        print _(a)

In this case, you are marking translatable strings with the function
`N_()', (1) which won’t conflict with any definition of `_()'.
However, you will need to teach your message extraction program to look
for translatable strings marked with `N_()'. `pygettext' and `xpot'
both support this through the use of command line switches.

---------- Footnotes ----------

(1) The choice of `N_()' here is totally arbitrary; it could have just
as easily been `MarkThisStringForTranslation()'.


File: python.info,  Node: gettext vs lgettext,  Prev: Deferred translations,  Up: Internationalizing your programs and modules

5.22.1.12 `gettext()' vs. `lgettext()'
......................................

In Python 2.4 the *Note lgettext(): 2089. family of functions were
introduced. The intention of these functions is to provide an
alternative which is more compliant with the current implementation of
GNU gettext. Unlike *Note gettext(): e1, which returns strings encoded
with the same codeset used in the translation file, *Note lgettext():
2089. will return strings encoded with the preferred system encoding,
as returned by *Note locale.getpreferredencoding(): 11e6.  Also notice
that Python 2.4 introduces new functions to explicitly choose the
codeset used in translated strings. If a codeset is explicitly set, even
*Note lgettext(): 2089. will return translated strings in the requested
codeset, as would be expected in the GNU gettext implementation.


File: python.info,  Node: Acknowledgements<9>,  Prev: Internationalizing your programs and modules,  Up: gettext — Multilingual internationalization services

5.22.1.13 Acknowledgements
..........................

The following people contributed code, feedback, design suggestions,
previous implementations, and valuable experience to the creation of
this module:

   * Peter Funk

   * James Henstridge

   * Juan David Ibáñez Palomar

   * Marc-André Lemburg

   * Martin von Löwis

   * François Pinard

   * Barry Warsaw

   * Gustavo Niemeyer


File: python.info,  Node: locale — Internationalization services,  Prev: gettext — Multilingual internationalization services,  Up: Internationalization

5.22.2 `locale' — Internationalization services
-------------------------------------------------

The *Note locale: 101. module opens access to the POSIX locale database
and functionality. The POSIX locale mechanism allows programmers to
deal with certain cultural issues in an application, without requiring
the programmer to know all the specifics of each country where the
software is executed.

The *Note locale: 101. module is implemented on top of the `_locale'
module, which in turn uses an ANSI C locale implementation if available.

The *Note locale: 101. module defines the following exception and
functions:

 -- Exception: locale.Error
     Exception raised when the locale passed to *Note setlocale(): 997.
     is not recognized.

 -- Function: locale.setlocale (category[, locale])
     If `locale' is given and not `None', *Note setlocale(): 997.
     modifies the locale setting for the `category'. The available
     categories are listed in the data description below. `locale' may
     be a string, or an iterable of two strings (language code and
     encoding). If it’s an iterable, it’s converted to a locale
     name using the locale aliasing engine. An empty string specifies
     the user’s default settings. If the modification of the locale
     fails, the exception *Note Error: 20b5. is raised. If successful,
     the new locale setting is returned.

     If `locale' is omitted or `None', the current setting for
     `category' is returned.

     *Note setlocale(): 997. is not thread-safe on most systems.
     Applications typically start with a call of

         import locale
         locale.setlocale(locale.LC_ALL, '')

     This sets the locale for all categories to the user’s default
     setting (typically specified in the `LANG' environment variable).
     If the locale is not changed thereafter, using multithreading
     should not cause problems.

     Changed in version 2.0: Added support for iterable values of the
     `locale' parameter.


 -- Function: locale.localeconv ()
     Returns the database of the local conventions as a dictionary.
     This dictionary has the following strings as keys:

     Category                   Key                                       Meaning
     ---------------------------------------------------------------------------------------------------------- 
     *Note LC_NUMERIC: 20b7.    `'decimal_point''                         Decimal point character.
                                `'grouping''                              Sequence of numbers specifying
                                                                          which relative positions the
                                                                          `'thousands_sep'' is expected.  If
                                                                          the sequence is terminated with
                                                                          *Note CHAR_MAX: 20b8, no further
                                                                          grouping is performed. If the
                                                                          sequence terminates with a `0',
                                                                          the last group size is repeatedly
                                                                          used.
                                `'thousands_sep''                         Character used between groups.
     *Note LC_MONETARY: 20b9.   `'int_curr_symbol''                       International currency symbol.
                                `'currency_symbol''                       Local currency symbol.
                                `'p_cs_precedes/n_cs_precedes''           Whether the currency symbol
                                                                          precedes the value (for positive
                                                                          resp. negative values).
                                `'p_sep_by_space/n_sep_by_space''         Whether the currency symbol is
                                                                          separated from the value  by a
                                                                          space (for positive resp.  negative
                                                                          values).
                                `'mon_decimal_point''                     Decimal point used for monetary
                                                                          values.
                                `'frac_digits''                           Number of fractional digits used in
                                                                          local formatting of monetary values.
                                `'int_frac_digits''                       Number of fractional digits used in
                                                                          international formatting of
                                                                          monetary values.
                                `'mon_thousands_sep''                     Group separator used for monetary
                                                                          values.
                                `'mon_grouping''                          Equivalent to `'grouping'', used
                                                                          for monetary values.
                                `'positive_sign''                         Symbol used to annotate a positive
                                                                          monetary value.
                                `'negative_sign''                         Symbol used to annotate a negative
                                                                          monetary value.
                                `'p_sign_posn/n_sign_posn''               The position of the sign (for
                                                                          positive resp. negative values),
                                                                          see below.

     All numeric values can be set to *Note CHAR_MAX: 20b8. to indicate
     that there is no value specified in this locale.

     The possible values for `'p_sign_posn'' and `'n_sign_posn'' are
     given below.

     Value              Explanation
     ----------------------------------------------------------------- 
     `0'                Currency and value are surrounded by
                        parentheses.
     `1'                The sign should precede the value and
                        currency symbol.
     `2'                The sign should follow the value and
                        currency symbol.
     `3'                The sign should immediately precede the
                        value.
     `4'                The sign should immediately follow the value.
     `CHAR_MAX'         Nothing is specified in this locale.


 -- Function: locale.nl_langinfo (option)
     Return some locale-specific information as a string.  This
     function is not available on all systems, and the set of possible
     options might also vary across platforms.  The possible argument
     values are numbers, for which symbolic constants are available in
     the locale module.

     The *Note nl_langinfo(): 20ba. function accepts one of the
     following keys.  Most descriptions are taken from the
     corresponding description in the GNU C library.

      -- Data: locale.CODESET
          Get a string with the name of the character encoding used in
          the selected locale.

      -- Data: locale.D_T_FMT
          Get a string that can be used as a format string for *Note
          time.strftime(): 3d8. to represent date and time in a
          locale-specific way.

      -- Data: locale.D_FMT
          Get a string that can be used as a format string for *Note
          time.strftime(): 3d8. to represent a date in a
          locale-specific way.

      -- Data: locale.T_FMT
          Get a string that can be used as a format string for *Note
          time.strftime(): 3d8. to represent a time in a
          locale-specific way.

      -- Data: locale.T_FMT_AMPM
          Get a format string for *Note time.strftime(): 3d8. to
          represent time in the am/pm format.

      -- Data: DAY_1 ... DAY_7
          Get the name of the n-th day of the week.

               Note: This follows the US convention of `DAY_1' being
               Sunday, not the international convention (ISO 8601) that
               Monday is the first day of the week.

      -- Data: ABDAY_1 ... ABDAY_7
          Get the abbreviated name of the n-th day of the week.

      -- Data: MON_1 ... MON_12
          Get the name of the n-th month.

      -- Data: ABMON_1 ... ABMON_12
          Get the abbreviated name of the n-th month.

      -- Data: locale.RADIXCHAR
          Get the radix character (decimal dot, decimal comma, etc.).

      -- Data: locale.THOUSEP
          Get the separator character for thousands (groups of three
          digits).

      -- Data: locale.YESEXPR
          Get a regular expression that can be used with the regex
          function to recognize a positive response to a yes/no
          question.

               Note: The expression is in the syntax suitable for the
               `regex()' function from the C library, which might
               differ from the syntax used in *Note re: 144.

      -- Data: locale.NOEXPR
          Get a regular expression that can be used with the regex(3)
          function to recognize a negative response to a yes/no
          question.

      -- Data: locale.CRNCYSTR
          Get the currency symbol, preceded by “-” if the symbol
          should appear before the value, “+” if the symbol should
          appear after the value, or “.” if the symbol should
          replace the radix character.

      -- Data: locale.ERA
          Get a string that represents the era used in the current
          locale.

          Most locales do not define this value.  An example of a
          locale which does define this value is the Japanese one.  In
          Japan, the traditional representation of dates includes the
          name of the era corresponding to the then-emperor’s reign.

          Normally it should not be necessary to use this value
          directly. Specifying the `E' modifier in their format strings
          causes the *Note time.strftime(): 3d8.  function to use this
          information.  The format of the returned string is not
          specified, and therefore you should not assume knowledge of
          it on different systems.

      -- Data: locale.ERA_D_T_FMT
          Get a format string for *Note time.strftime(): 3d8. to
          represent date and time in a locale-specific era-based way.

      -- Data: locale.ERA_D_FMT
          Get a format string for *Note time.strftime(): 3d8. to
          represent a date in a locale-specific era-based way.

      -- Data: locale.ERA_T_FMT
          Get a format string for *Note time.strftime(): 3d8. to
          represent a time in a locale-specific era-based way.

      -- Data: locale.ALT_DIGITS
          Get a representation of up to 100 values used to represent
          the values 0 to 99.

 -- Function: locale.getdefaultlocale ([envvars])
     Tries to determine the default locale settings and returns them as
     a tuple of the form `(language code, encoding)'.

     According to POSIX, a program which has not called
     `setlocale(LC_ALL, '')' runs using the portable `'C'' locale.
     Calling `setlocale(LC_ALL, '')' lets it use the default locale as
     defined by the `LANG' variable.  Since we do not want to interfere
     with the current locale setting we thus emulate the behavior in
     the way described above.

     To maintain compatibility with other platforms, not only the `LANG'
     variable is tested, but a list of variables given as envvars
     parameter.  The first found to be defined will be used.  `envvars'
     defaults to the search path used in GNU gettext; it must always
     contain the variable name `LANG'.  The GNU gettext search path
     contains `'LANGUAGE'', `'LC_ALL'', `'LC_CTYPE'', and `'LANG'', in
     that order.

     Except for the code `'C'', the language code corresponds to RFC
     1766(1).  `language code' and `encoding' may be `None' if their
     values cannot be determined.

     New in version 2.0.


 -- Function: locale.getlocale ([category])
     Returns the current setting for the given locale category as
     sequence containing `language code', `encoding'. `category' may be
     one of the `LC_*' values except *Note LC_ALL: 20cb.  It defaults
     to *Note LC_CTYPE: 20cc.

     Except for the code `'C'', the language code corresponds to RFC
     1766(2).  `language code' and `encoding' may be `None' if their
     values cannot be determined.

     New in version 2.0.


 -- Function: locale.getpreferredencoding ([do_setlocale])
     Return the encoding used for text data, according to user
     preferences.  User preferences are expressed differently on
     different systems, and might not be available programmatically on
     some systems, so this function only returns a guess.

     On some systems, it is necessary to invoke *Note setlocale(): 997.
     to obtain the user preferences, so this function is not
     thread-safe. If invoking setlocale is not necessary or desired,
     `do_setlocale' should be set to `False'.

     New in version 2.3.


 -- Function: locale.normalize (localename)
     Returns a normalized locale code for the given locale name.  The
     returned locale code is formatted for use with *Note setlocale():
     997.  If normalization fails, the original name is returned
     unchanged.

     If the given encoding is not known, the function defaults to the
     default encoding for the locale code just like *Note setlocale():
     997.

     New in version 2.0.


 -- Function: locale.resetlocale ([category])
     Sets the locale for `category' to the default setting.

     The default setting is determined by calling *Note
     getdefaultlocale(): 20ca.  `category' defaults to *Note LC_ALL:
     20cb.

     New in version 2.0.


 -- Function: locale.strcoll (string1, string2)
     Compares two strings according to the current *Note LC_COLLATE:
     20d0. setting. As any other compare function, returns a negative,
     or a positive value, or `0', depending on whether `string1'
     collates before or after `string2' or is equal to it.

 -- Function: locale.strxfrm (string)
     Transforms a string to one that can be used for the built-in
     function *Note cmp(): 4da, and still returns locale-aware results.
     This function can be used when the same string is compared
     repeatedly, e.g. when collating a sequence of strings.

 -- Function: locale.format (format, val[, grouping[, monetary]])
     Formats a number `val' according to the current *Note LC_NUMERIC:
     20b7. setting.  The format follows the conventions of the `%'
     operator.  For floating point values, the decimal point is
     modified if appropriate.  If `grouping' is true, also takes the
     grouping into account.

     If `monetary' is true, the conversion uses monetary thousands
     separator and grouping strings.

     Please note that this function will only work for exactly one
     %char specifier.  For whole format strings, use *Note
     format_string(): 20d3.

     Changed in version 2.5: Added the `monetary' parameter.


 -- Function: locale.format_string (format, val[, grouping])
     Processes formatting specifiers as in `format % val', but takes
     the current locale settings into account.

     New in version 2.5.


 -- Function: locale.currency (val[, symbol[, grouping[,
          international]]])
     Formats a number `val' according to the current *Note LC_MONETARY:
     20b9. settings.

     The returned string includes the currency symbol if `symbol' is
     true, which is the default. If `grouping' is true (which is not
     the default), grouping is done with the value. If `international'
     is true (which is not the default), the international currency
     symbol is used.

     Note that this function will not work with the ‘C’ locale, so
     you have to set a locale via *Note setlocale(): 997. first.

     New in version 2.5.


 -- Function: locale.str (float)
     Formats a floating point number using the same format as the
     built-in function `str(float)', but takes the decimal point into
     account.

 -- Function: locale.atof (string)
     Converts a string to a floating point number, following the *Note
     LC_NUMERIC: 20b7.  settings.

 -- Function: locale.atoi (string)
     Converts a string to an integer, following the *Note LC_NUMERIC:
     20b7. conventions.

 -- Data: locale.LC_CTYPE
     Locale category for the character type functions.  Depending on
     the settings of this category, the functions of module *Note
     string: 163. dealing with case change their behaviour.

 -- Data: locale.LC_COLLATE
     Locale category for sorting strings.  The functions *Note
     strcoll(): 20cf. and *Note strxfrm(): 20d1. of the *Note locale:
     101. module are affected.

 -- Data: locale.LC_TIME
     Locale category for the formatting of time.  The function *Note
     time.strftime(): 3d8.  follows these conventions.

 -- Data: locale.LC_MONETARY
     Locale category for formatting of monetary values.  The available
     options are available from the *Note localeconv(): 20b6. function.

 -- Data: locale.LC_MESSAGES
     Locale category for message display. Python currently does not
     support application specific locale-aware messages.  Messages
     displayed by the operating system, like those returned by *Note
     os.strerror(): 112f. might be affected by this category.

 -- Data: locale.LC_NUMERIC
     Locale category for formatting numbers.  The functions *Note
     format(): 20d2, *Note atoi(): 20d7, *Note atof(): 20d6. and *Note
     str(): 20d5. of the *Note locale: 101. module are affected by that
     category.  All other numeric formatting operations are not
     affected.

 -- Data: locale.LC_ALL
     Combination of all locale settings.  If this flag is used when the
     locale is changed, setting the locale for all categories is
     attempted. If that fails for any category, no category is changed
     at all.  When the locale is retrieved using this flag, a string
     indicating the setting for all categories is returned. This string
     can be later used to restore the settings.

 -- Data: locale.CHAR_MAX
     This is a symbolic constant used for different values returned by
     *Note localeconv(): 20b6.

Example:

    >>> import locale
    >>> loc = locale.getlocale()  # get current locale
    # use German locale; name might vary with platform
    >>> locale.setlocale(locale.LC_ALL, 'de_DE')
    >>> locale.strcoll('f\xe4n', 'foo')  # compare a string containing an umlaut
    >>> locale.setlocale(locale.LC_ALL, '')   # use user's preferred locale
    >>> locale.setlocale(locale.LC_ALL, 'C')  # use default (C) locale
    >>> locale.setlocale(locale.LC_ALL, loc)  # restore saved locale

* Menu:

* Background, details, hints, tips and caveats: Background details hints tips and caveats.
* For extension writers and programs that embed Python::
* Access to message catalogs::

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc1766.html

(2) https://tools.ietf.org/html/rfc1766.html


File: python.info,  Node: Background details hints tips and caveats,  Next: For extension writers and programs that embed Python,  Up: locale — Internationalization services

5.22.2.1 Background, details, hints, tips and caveats
.....................................................

The C standard defines the locale as a program-wide property that may be
relatively expensive to change.  On top of that, some implementation
are broken in such a way that frequent locale changes may cause core
dumps.  This makes the locale somewhat painful to use correctly.

Initially, when a program is started, the locale is the `C' locale, no
matter what the user’s preferred locale is.  The program must
explicitly say that it wants the user’s preferred locale settings by
calling `setlocale(LC_ALL, '')'.

It is generally a bad idea to call *Note setlocale(): 997. in some
library routine, since as a side effect it affects the entire program.
Saving and restoring it is almost as bad: it is expensive and affects
other threads that happen to run before the settings have been restored.

If, when coding a module for general use, you need a locale independent
version of an operation that is affected by the locale (such as *Note
string.lower(): 9cb, or certain formats used with *Note
time.strftime(): 3d8.), you will have to find a way to do it without
using the standard library routine.  Even better is convincing yourself
that using locale settings is okay.  Only as a last resort should you
document that your module is not compatible with non-`C' locale
settings.

The case conversion functions in the *Note string: 163. module are
affected by the locale settings.  When a call to the *Note setlocale():
997. function changes the *Note LC_CTYPE: 20cc. settings, the variables
`string.lowercase', `string.uppercase' and `string.letters' are
recalculated.  Note that code that uses these variable through ‘*Note
from: 847. … *Note import: 1f4. …’, e.g. `from string import
letters', is not affected by subsequent *Note setlocale(): 997. calls.

The only way to perform numeric operations according to the locale is
to use the special functions defined by this module: *Note atof():
20d6, *Note atoi(): 20d7, *Note format(): 20d2, *Note str(): 20d5.


File: python.info,  Node: For extension writers and programs that embed Python,  Next: Access to message catalogs,  Prev: Background details hints tips and caveats,  Up: locale — Internationalization services

5.22.2.2 For extension writers and programs that embed Python
.............................................................

Extension modules should never call *Note setlocale(): 997, except to
find out what the current locale is.  But since the return value can
only be used portably to restore it, that is not very useful (except
perhaps to find out whether or not the locale is `C').

When Python code uses the *Note locale: 101. module to change the
locale, this also affects the embedding application.  If the embedding
application doesn’t want this to happen, it should remove the
`_locale' extension module (which does all the work) from the table of
built-in modules in the `config.c' file, and make sure that the
`_locale' module is not accessible as a shared library.


File: python.info,  Node: Access to message catalogs,  Prev: For extension writers and programs that embed Python,  Up: locale — Internationalization services

5.22.2.3 Access to message catalogs
...................................

The locale module exposes the C library’s gettext interface on
systems that provide this interface.  It consists of the functions
*Note gettext(): e1, `dgettext()', `dcgettext()', `textdomain()',
`bindtextdomain()', and `bind_textdomain_codeset()'.  These are similar
to the same functions in the *Note gettext: e1. module, but use the C
library’s binary format for message catalogs, and the C library’s
search algorithms for locating message catalogs.

Python applications should normally find no need to invoke these
functions, and should use *Note gettext: e1. instead.  A known
exception to this rule are applications that link with additional C
libraries which internally invoke `gettext()' or `dcgettext()'.  For
these applications, it may be necessary to bind the text domain, so
that the libraries can properly locate their message catalogs.


File: python.info,  Node: Program Frameworks,  Next: Graphical User Interfaces with Tk,  Prev: Internationalization,  Up: The Python Standard Library

5.23 Program Frameworks
=======================

The modules described in this chapter are frameworks that will largely
dictate the structure of your program.  Currently the modules described
here are all oriented toward writing command-line interfaces.

The full list of modules described in this chapter is:

* Menu:

* cmd — Support for line-oriented command interpreters::
* shlex — Simple lexical analysis::


File: python.info,  Node: cmd — Support for line-oriented command interpreters,  Next: shlex — Simple lexical analysis,  Up: Program Frameworks

5.23.1 `cmd' — Support for line-oriented command interpreters
---------------------------------------------------------------

`Source code:' Lib/cmd.py(1)

__________________________________________________________________

The *Note Cmd: 20e4. class provides a simple framework for writing
line-oriented command interpreters.  These are often useful for test
harnesses, administrative tools, and prototypes that will later be
wrapped in a more sophisticated interface.

 -- Class: cmd.Cmd ([completekey[, stdin[, stdout]]])
     A *Note Cmd: 20e4. instance or subclass instance is a
     line-oriented interpreter framework.  There is no good reason to
     instantiate *Note Cmd: 20e4. itself; rather, it’s useful as a
     superclass of an interpreter class you define yourself in order to
     inherit *Note Cmd: 20e4.’s methods and encapsulate action
     methods.

     The optional argument `completekey' is the *Note readline: 145.
     name of a completion key; it defaults to `Tab'. If `completekey'
     is not *Note None: 3b2. and *Note readline: 145. is available,
     command completion is done automatically.

     The optional arguments `stdin' and `stdout' specify the  input and
     output file objects that the Cmd instance or subclass  instance
     will use for input and output. If not specified, they will default
     to *Note sys.stdin: 65c. and *Note sys.stdout: 8b2.

     If you want a given `stdin' to be used, make sure to set the
     instance’s *Note use_rawinput: 20e5. attribute to `False',
     otherwise `stdin' will be ignored.

     Changed in version 2.3: The `stdin' and `stdout' parameters were
     added.


* Menu:

* Cmd Objects::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/cmd.py


File: python.info,  Node: Cmd Objects,  Up: cmd — Support for line-oriented command interpreters

5.23.1.1 Cmd Objects
....................

A *Note Cmd: 20e4. instance has the following methods:

 -- Method: Cmd.cmdloop ([intro])
     Repeatedly issue a prompt, accept input, parse an initial prefix
     off the received input, and dispatch to action methods, passing
     them the remainder of the line as argument.

     The optional argument is a banner or intro string to be issued
     before the first prompt (this overrides the *Note intro: 20e9.
     class attribute).

     If the *Note readline: 145. module is loaded, input will
     automatically inherit `bash'-like history-list editing (e.g.
     `Control-P' scrolls back to the last command, `Control-N' forward
     to the next one, `Control-F' moves the cursor to the right
     non-destructively, `Control-B' moves the cursor to the left
     non-destructively, etc.).

     An end-of-file on input is passed back as the string `'EOF''.

     An interpreter instance will recognize a command name `foo' if and
     only if it has a method `do_foo()'.  As a special case, a line
     beginning with the character `'?'' is dispatched to the method
     `do_help()'.  As another special case, a line beginning with the
     character `'!'' is dispatched to the method `do_shell()' (if such
     a method is defined).

     This method will return when the *Note postcmd(): 20ea. method
     returns a true value.  The `stop' argument to *Note postcmd():
     20ea. is the return value from the command’s corresponding
     `do_*()' method.

     If completion is enabled, completing commands will be done
     automatically, and completing of commands args is done by calling
     `complete_foo()' with arguments `text', `line', `begidx', and
     `endidx'.  `text' is the string prefix we are attempting to match:
     all returned matches must begin with it. `line' is the current
     input line with leading whitespace removed, `begidx' and `endidx'
     are the beginning and ending indexes of the prefix text, which
     could be used to provide different completion depending upon which
     position the argument is in.

     All subclasses of *Note Cmd: 20e4. inherit a predefined
     `do_help()'.  This method, called with an argument `'bar'',
     invokes the corresponding method `help_bar()', and if that is not
     present, prints the docstring of `do_bar()', if available.  With
     no argument, `do_help()' lists all available help topics (that is,
     all commands with corresponding `help_*()' methods or commands
     that have docstrings), and also lists any undocumented commands.

 -- Method: Cmd.onecmd (str)
     Interpret the argument as though it had been typed in response to
     the prompt.  This may be overridden, but should not normally need
     to be; see the *Note precmd(): 20ec. and *Note postcmd(): 20ea.
     methods for useful execution hooks.  The return value is a flag
     indicating whether interpretation of commands by the interpreter
     should stop.  If there is a `do_*()' method for the command `str',
     the return value of that method is returned, otherwise the return
     value from the *Note default(): 20ed. method is returned.

 -- Method: Cmd.emptyline ()
     Method called when an empty line is entered in response to the
     prompt. If this method is not overridden, it repeats the last
     nonempty command entered.

 -- Method: Cmd.default (line)
     Method called on an input line when the command prefix is not
     recognized. If this method is not overridden, it prints an error
     message and returns.

 -- Method: Cmd.completedefault (text, line, begidx, endidx)
     Method called to complete an input line when no command-specific
     `complete_*()' method is available.  By default, it returns an
     empty list.

 -- Method: Cmd.precmd (line)
     Hook method executed just before the command line `line' is
     interpreted, but after the input prompt is generated and issued.
     This method is a stub in *Note Cmd: 20e4.; it exists to be
     overridden by subclasses.  The return value is used as the command
     which will be executed by the *Note onecmd(): 20eb. method; the
     *Note precmd(): 20ec. implementation may re-write the command or
     simply return `line' unchanged.

 -- Method: Cmd.postcmd (stop, line)
     Hook method executed just after a command dispatch is finished.
     This method is a stub in *Note Cmd: 20e4.; it exists to be
     overridden by subclasses.  `line' is the command line which was
     executed, and `stop' is a flag which indicates whether execution
     will be terminated after the call to *Note postcmd(): 20ea.; this
     will be the return value of the *Note onecmd(): 20eb. method.  The
     return value of this method will be used as the new value for the
     internal flag which corresponds to `stop'; returning false will
     cause interpretation to continue.

 -- Method: Cmd.preloop ()
     Hook method executed once when *Note cmdloop(): 20e8. is called.
     This method is a stub in *Note Cmd: 20e4.; it exists to be
     overridden by subclasses.

 -- Method: Cmd.postloop ()
     Hook method executed once when *Note cmdloop(): 20e8. is about to
     return. This method is a stub in *Note Cmd: 20e4.; it exists to be
     overridden by subclasses.

Instances of *Note Cmd: 20e4. subclasses have some public instance
variables:

 -- Attribute: Cmd.prompt
     The prompt issued to solicit input.

 -- Attribute: Cmd.identchars
     The string of characters accepted for the command prefix.

 -- Attribute: Cmd.lastcmd
     The last nonempty command prefix seen.

 -- Attribute: Cmd.cmdqueue
     A list of queued input lines.  The cmdqueue list is checked in
     *Note cmdloop(): 20e8. when new input is needed; if it is
     nonempty, its elements will be processed in order, as if entered
     at the prompt.

 -- Attribute: Cmd.intro
     A string to issue as an intro or banner.  May be overridden by
     giving the *Note cmdloop(): 20e8. method an argument.

 -- Attribute: Cmd.doc_header
     The header to issue if the help output has a section for
     documented commands.

 -- Attribute: Cmd.misc_header
     The header to issue if the help output has a section for
     miscellaneous  help topics (that is, there are `help_*()' methods
     without corresponding `do_*()' methods).

 -- Attribute: Cmd.undoc_header
     The header to issue if the help output has a section for
     undocumented  commands (that is, there are `do_*()' methods
     without corresponding `help_*()' methods).

 -- Attribute: Cmd.ruler
     The character used to draw separator lines under the help-message
     headers.  If empty, no ruler line is drawn.  It defaults to `'=''.

 -- Attribute: Cmd.use_rawinput
     A flag, defaulting to true.  If true, *Note cmdloop(): 20e8. uses
     *Note raw_input(): 891. to display a prompt and read the next
     command; if false, `sys.stdout.write()' and `sys.stdin.readline()'
     are used. (This means that by importing *Note readline: 145, on
     systems that support it, the interpreter will automatically
     support `Emacs'-like line editing  and command-history keystrokes.)


File: python.info,  Node: shlex — Simple lexical analysis,  Prev: cmd — Support for line-oriented command interpreters,  Up: Program Frameworks

5.23.2 `shlex' — Simple lexical analysis
------------------------------------------

New in version 1.5.2.

`Source code:' Lib/shlex.py(1)

__________________________________________________________________

The *Note shlex: 20fc. class makes it easy to write lexical analyzers
for simple syntaxes resembling that of the Unix shell.  This will often
be useful for writing minilanguages, (for example, in run control files
for Python applications) or for parsing quoted strings.

Prior to Python 2.7.3, this module did not support Unicode input.

The *Note shlex: 153. module defines the following functions:

 -- Function: shlex.split (s[, comments[, posix]])
     Split the string `s' using shell-like syntax. If `comments' is
     *Note False: 3c9.  (the default), the parsing of comments in the
     given string will be disabled (setting the *Note commenters: 20fd.
     attribute of the *Note shlex: 20fc. instance to the empty string).
     This function operates in POSIX mode by default, but uses
     non-POSIX mode if the `posix' argument is false.

     New in version 2.3.

     Changed in version 2.6: Added the `posix' parameter.

          Note: Since the *Note split(): 1732. function instantiates a
          *Note shlex: 20fc.  instance, passing `None' for `s' will
          read the string to split from standard input.

The *Note shlex: 153. module defines the following class:

 -- Class: shlex.shlex ([instream[, infile[, posix]]])
     A *Note shlex: 20fc. instance or subclass instance is a lexical
     analyzer object.  The initialization argument, if present,
     specifies where to read characters from. It must be a
     file-/stream-like object with *Note read(): 1213. and *Note
     readline(): 8b0. methods, or a string (strings are accepted since
     Python 2.3).  If no argument is given, input will be taken from
     `sys.stdin'.  The second optional argument is a filename string,
     which sets the initial value of the *Note infile: 20fe.
     attribute.  If the `instream' argument is omitted or equal to
     `sys.stdin', this second argument defaults to “stdin”.  The
     `posix' argument was introduced in Python 2.3, and defines the
     operational mode.  When `posix' is not true (default), the *Note
     shlex: 20fc. instance will operate in compatibility mode.  When
     operating in POSIX mode, *Note shlex: 20fc.  will try to be as
     close as possible to the POSIX shell parsing rules.

See also
........

Module *Note ConfigParser: 6d.
     Parser for configuration files similar to the Windows `.ini' files.

* Menu:

* shlex Objects::
* Parsing Rules::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/shlex.py


File: python.info,  Node: shlex Objects,  Next: Parsing Rules,  Up: shlex — Simple lexical analysis

5.23.2.1 shlex Objects
......................

A *Note shlex: 20fc. instance has the following methods:

 -- Method: shlex.get_token ()
     Return a token.  If tokens have been stacked using *Note
     push_token(): 2102, pop a token off the stack.  Otherwise, read
     one from the input stream.  If reading encounters an immediate
     end-of-file, *Note eof: 2103. is returned (the empty string (`''')
     in non-POSIX mode, and `None' in POSIX mode).

 -- Method: shlex.push_token (str)
     Push the argument onto the token stack.

 -- Method: shlex.read_token ()
     Read a raw token.  Ignore the pushback stack, and do not interpret
     source requests.  (This is not ordinarily a useful entry point,
     and is documented here only for the sake of completeness.)

 -- Method: shlex.sourcehook (filename)
     When *Note shlex: 20fc. detects a source request (see *Note
     source: 2106.  below) this method is given the following token as
     argument, and expected to return a tuple consisting of a filename
     and an open file-like object.

     Normally, this method first strips any quotes off the argument.
     If the result is an absolute pathname, or there was no previous
     source request in effect, or the previous source was a stream
     (such as `sys.stdin'), the result is left alone.  Otherwise, if
     the result is a relative pathname, the directory part of the name
     of the file immediately before it on the source inclusion stack is
     prepended (this behavior is like the way the C preprocessor
     handles `#include "file.h"').

     The result of the manipulations is treated as a filename, and
     returned as the first component of the tuple, with *Note open():
     2d9. called on it to yield the second component. (Note: this is
     the reverse of the order of arguments in instance initialization!)

     This hook is exposed so that you can use it to implement directory
     search paths, addition of file extensions, and other namespace
     hacks. There is no corresponding ‘close’ hook, but a shlex
     instance will call the *Note close(): 1140. method of the sourced
     input stream when it returns EOF.

     For more explicit control of source stacking, use the *Note
     push_source(): 2107. and *Note pop_source(): 2108. methods.

 -- Method: shlex.push_source (stream[, filename])
     Push an input source stream onto the input stack.  If the filename
     argument is specified it will later be available for use in error
     messages.  This is the same method used internally by the *Note
     sourcehook(): 2105. method.

     New in version 2.1.


 -- Method: shlex.pop_source ()
     Pop the last-pushed input source from the input stack. This is the
     same method used internally when the lexer reaches EOF on a
     stacked input stream.

     New in version 2.1.


 -- Method: shlex.error_leader ([file[, line]])
     This method generates an error message leader in the format of a
     Unix C compiler error label; the format is `'"%s", line %d: '',
     where the `%s' is replaced with the name of the current source
     file and the `%d' with the current input line number (the optional
     arguments can be used to override these).

     This convenience is provided to encourage *Note shlex: 153. users
     to generate error messages in the standard, parseable format
     understood by Emacs and other Unix tools.

Instances of *Note shlex: 20fc. subclasses have some public instance
variables which either control lexical analysis or can be used for
debugging:

 -- Attribute: shlex.commenters
     The string of characters that are recognized as comment beginners.
     All characters from the comment beginner to end of line are
     ignored. Includes just `'#'' by default.

 -- Attribute: shlex.wordchars
     The string of characters that will accumulate into multi-character
     tokens.  By default, includes all ASCII alphanumerics and
     underscore.

 -- Attribute: shlex.whitespace
     Characters that will be considered whitespace and skipped.
     Whitespace bounds tokens.  By default, includes space, tab,
     linefeed and carriage-return.

 -- Attribute: shlex.escape
     Characters that will be considered as escape. This will be only
     used in POSIX mode, and includes just `'\'' by default.

     New in version 2.3.


 -- Attribute: shlex.quotes
     Characters that will be considered string quotes.  The token
     accumulates until the same quote is encountered again (thus,
     different quote types protect each other as in the shell.)  By
     default, includes ASCII single and double quotes.

 -- Attribute: shlex.escapedquotes
     Characters in *Note quotes: 210d. that will interpret escape
     characters defined in *Note escape: 210c.  This is only used in
     POSIX mode, and includes just `'"'' by default.

     New in version 2.3.


 -- Attribute: shlex.whitespace_split
     If `True', tokens will only be split in whitespaces. This is
     useful, for example, for parsing command lines with *Note shlex:
     20fc, getting tokens in a similar way to shell arguments.

     New in version 2.3.


 -- Attribute: shlex.infile
     The name of the current input file, as initially set at class
     instantiation time or stacked by later source requests.  It may be
     useful to examine this when constructing error messages.

 -- Attribute: shlex.instream
     The input stream from which this *Note shlex: 20fc. instance is
     reading characters.

 -- Attribute: shlex.source
     This attribute is `None' by default.  If you assign a string to
     it, that string will be recognized as a lexical-level inclusion
     request similar to the `source' keyword in various shells.  That
     is, the immediately following token will be opened as a filename
     and input will be taken from that stream until EOF, at which point
     the *Note close(): 1140. method of that stream will be called and
     the input source will again become the original input stream.
     Source requests may be stacked any number of levels deep.

 -- Attribute: shlex.debug
     If this attribute is numeric and `1' or more, a *Note shlex: 20fc.
     instance will print verbose progress output on its behavior.  If
     you need to use this, you can read the module source code to learn
     the details.

 -- Attribute: shlex.lineno
     Source line number (count of newlines seen so far plus one).

 -- Attribute: shlex.token
     The token buffer.  It may be useful to examine this when catching
     exceptions.

 -- Attribute: shlex.eof
     Token used to determine end of file. This will be set to the empty
     string (`'''), in non-POSIX mode, and to `None' in POSIX mode.

     New in version 2.3.



File: python.info,  Node: Parsing Rules,  Prev: shlex Objects,  Up: shlex — Simple lexical analysis

5.23.2.2 Parsing Rules
......................

When operating in non-POSIX mode, *Note shlex: 20fc. will try to obey
to the following rules.

   * Quote characters are not recognized within words
     (`Do"Not"Separate' is parsed as the single word `Do"Not"Separate');

   * Escape characters are not recognized;

   * Enclosing characters in quotes preserve the literal value of all
     characters within the quotes;

   * Closing quotes separate words (`"Do"Separate' is parsed as `"Do"'
     and `Separate');

   * If *Note whitespace_split: 210f. is `False', any character not
     declared to be a word character, whitespace, or a quote will be
     returned as a single-character token. If it is `True', *Note
     shlex: 20fc. will only split words in whitespaces;

   * EOF is signaled with an empty string (`''');

   * It’s not possible to parse empty strings, even if quoted.

When operating in POSIX mode, *Note shlex: 20fc. will try to obey to the
following parsing rules.

   * Quotes are stripped out, and do not separate words
     (`"Do"Not"Separate"' is parsed as the single word `DoNotSeparate');

   * Non-quoted escape characters (e.g. `'\'') preserve the literal
     value of the next character that follows;

   * Enclosing characters in quotes which are not part of *Note
     escapedquotes: 210e. (e.g. `"'"') preserve the literal value of
     all characters within the quotes;

   * Enclosing characters in quotes which are part of *Note
     escapedquotes: 210e. (e.g. `'"'') preserves the literal value of
     all characters within the quotes, with the exception of the
     characters mentioned in *Note escape: 210c.  The escape characters
     retain its special meaning only when followed by the quote in use,
     or the escape character itself. Otherwise the escape character
     will be considered a normal character.

   * EOF is signaled with a *Note None: 3b2. value;

   * Quoted empty strings (`''') are allowed;


File: python.info,  Node: Graphical User Interfaces with Tk,  Next: Development Tools,  Prev: Program Frameworks,  Up: The Python Standard Library

5.24 Graphical User Interfaces with Tk
======================================

Tk/Tcl has long been an integral part of Python.  It provides a robust
and platform independent windowing toolkit, that is available to Python
programmers using the *Note Tkinter: 17d. module, and its extensions,
the *Note Tix: 17c. and the *Note ttk: 182. modules.

The *Note Tkinter: 17d. module is a thin object-oriented layer on top
of Tcl/Tk. To use *Note Tkinter: 17d, you don’t need to write Tcl
code, but you will need to consult the Tk documentation, and
occasionally the Tcl documentation.  *Note Tkinter: 17d. is a set of
wrappers that implement the Tk widgets as Python classes.  In addition,
the internal module `_tkinter' provides a threadsafe mechanism which
allows Python and Tcl to interact.

*Note Tkinter: 17d.’s chief virtues are that it is fast, and that it
usually comes bundled with Python. Although its standard documentation
is weak, good material is available, which includes: references,
tutorials, a book and others. *Note Tkinter: 17d. is also famous for
having an outdated look and feel, which has been vastly improved in Tk
8.5. Nevertheless, there are many other GUI libraries that you could be
interested in. For more information about alternatives, see the *Note
Other Graphical User Interface Packages: 2119. section.

* Menu:

* Tkinter — Python interface to Tcl/Tk::
* ttk — Tk themed widgets::
* Tix — Extension widgets for Tk::
* ScrolledText — Scrolled Text Widget::
* turtle — Turtle graphics for Tk::
* IDLE::
* Other Graphical User Interface Packages::


File: python.info,  Node: Tkinter — Python interface to Tcl/Tk,  Next: ttk — Tk themed widgets,  Up: Graphical User Interfaces with Tk

5.24.1 `Tkinter' — Python interface to Tcl/Tk
-----------------------------------------------

The *Note Tkinter: 17d. module (“Tk interface”) is the standard
Python interface to the Tk GUI toolkit.  Both Tk and *Note Tkinter:
17d. are available on most Unix platforms, as well as on Windows
systems.  (Tk itself is not part of Python; it is maintained at
ActiveState.)

     Note: *Note Tkinter: 17d. has been renamed to `tkinter' in Python
     3.  The *Note 2to3: c05. tool will automatically adapt imports
     when converting your sources to Python 3.

See also
........

Python Tkinter Resources(1)
     The Python Tkinter Topic Guide provides a great deal of
     information on using Tk from Python and links to other sources of
     information on Tk.

TKDocs(2)
     Extensive tutorial plus friendlier widget pages for some of the
     widgets.

Tkinter reference: a GUI for Python(3)
     On-line reference material.

Tkinter docs from effbot(4)
     Online reference for tkinter supported by effbot.org.

Tcl/Tk manual(5)
     Official manual for the latest tcl/tk version.

Programming Python(6)
     Book by Mark Lutz, has excellent coverage of Tkinter.

Modern Tkinter for Busy Python Developers(7)
     Book by Mark Rozerman about building attractive and modern
     graphical user interfaces with Python and Tkinter.

Python and Tkinter Programming(8)
     The book by John Grayson (ISBN 1-884777-81-3).

* Menu:

* Tkinter Modules::
* Tkinter Life Preserver::
* A (Very) Quick Look at Tcl/Tk: A Very Quick Look at Tcl/Tk.
* Mapping Basic Tk into Tkinter::
* How Tk and Tkinter are Related::
* Handy Reference::
* File Handlers::

---------- Footnotes ----------

(1) https://wiki.python.org/moin/TkInter

(2) http://www.tkdocs.com/

(3) https://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html

(4) http://effbot.org/tkinterbook/

(5) https://www.tcl.tk/man/tcl8.5/

(6) http://learning-python.com/books/about-pp4e.html

(7)
http://www.amazon.com/Modern-Tkinter-Python-Developers-ebook/dp/B0071QDNLO/

(8) https://www.manning.com/books/python-and-tkinter-programming


File: python.info,  Node: Tkinter Modules,  Next: Tkinter Life Preserver,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.1 Tkinter Modules
........................

Most of the time, the *Note Tkinter: 17d. module is all you really
need, but a number of additional modules are available as well.  The Tk
interface is located in a binary module named `_tkinter'. This module
contains the low-level interface to Tk, and should never be used
directly by application programmers.  It is usually a shared library
(or DLL), but might in some cases be statically linked with the Python
interpreter.

In addition to the Tk interface module, *Note Tkinter: 17d. includes a
number of Python modules. The two most important modules are the *Note
Tkinter: 17d. module itself, and a module called `Tkconstants'. The
former automatically imports the latter, so to use Tkinter, all you
need to do is to import one module:

    import Tkinter

Or, more often:

    from Tkinter import *

 -- Class: Tkinter.Tk (screenName=None, baseName=None, className='Tk',
          useTk=1)
     The *Note Tk: 211d. class is instantiated without arguments. This
     creates a toplevel widget of Tk which usually is the main window
     of an application. Each instance has its own associated Tcl
     interpreter.

     Changed in version 2.4: The `useTk' parameter was added.


 -- Function: Tkinter.Tcl (screenName=None, baseName=None,
          className='Tk', useTk=0)
     The *Note Tcl(): 211e. function is a factory function which
     creates an object much like that created by the *Note Tk: 211d.
     class, except that it does not initialize the Tk subsystem.  This
     is most often useful when driving the Tcl interpreter in an
     environment where one doesn’t want to create extraneous toplevel
     windows, or where one cannot (such as Unix/Linux systems without
     an X server).  An object created by the *Note Tcl(): 211e. object
     can have a Toplevel window created (and the Tk subsystem
     initialized) by calling its `loadtk()' method.

     New in version 2.4.


Other modules that provide Tk support include:

*Note ScrolledText: 14d.
     Text widget with a vertical scroll bar built in.

`tkColorChooser'
     Dialog to let the user choose a color.

`tkCommonDialog'
     Base class for the dialogs defined in the other modules listed
     here.

`tkFileDialog'
     Common dialogs to allow the user to specify a file to open or save.

`tkFont'
     Utilities to help work with fonts.

`tkMessageBox'
     Access to standard Tk dialog boxes.

`tkSimpleDialog'
     Basic dialogs and convenience functions.

`Tkdnd'
     Drag-and-drop support for *Note Tkinter: 17d. This is experimental
     and should become deprecated when it is replaced  with the Tk DND.

*Note turtle: 184.
     Turtle graphics in a Tk window.

These have been renamed as well in Python 3; they were all made
submodules of the new `tkinter' package.


File: python.info,  Node: Tkinter Life Preserver,  Next: A Very Quick Look at Tcl/Tk,  Prev: Tkinter Modules,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.2 Tkinter Life Preserver
...............................

This section is not designed to be an exhaustive tutorial on either Tk
or Tkinter.  Rather, it is intended as a stop gap, providing some
introductory orientation on the system.

Credits:

   * Tkinter was written by Steen Lumholt and Guido van Rossum.

   * Tk was written by John Ousterhout while at Berkeley.

   * This Life Preserver was written by Matt Conway at the University
     of Virginia.

   * The html rendering, and some liberal editing, was produced from a
     FrameMaker version by Ken Manheimer.

   * Fredrik Lundh elaborated and revised the class interface
     descriptions, to get them current with Tk 4.2.

   * Mike Clarkson converted the documentation to LaTeX, and compiled
     the  User Interface chapter of the reference manual.

* Menu:

* How To Use This Section::
* A Simple Hello World Program::


File: python.info,  Node: How To Use This Section,  Next: A Simple Hello World Program,  Up: Tkinter Life Preserver

5.24.1.3 How To Use This Section
................................

This section is designed in two parts: the first half (roughly) covers
background material, while the second half can be taken to the keyboard
as a handy reference.

When trying to answer questions of the form “how do I do blah”, it
is often best to find out how to do”blah” in straight Tk, and then
convert this back into the corresponding *Note Tkinter: 17d. call.
Python programmers can often guess at the correct Python command by
looking at the Tk documentation. This means that in order to use
Tkinter, you will have to know a little bit about Tk. This document
can’t fulfill that role, so the best we can do is point you to the
best documentation that exists. Here are some hints:

   * The authors strongly suggest getting a copy of the Tk man pages.
     Specifically, the man pages in the `mann' directory are most
     useful. The `man3' man pages describe the C interface to the Tk
     library and thus are not especially helpful for script writers.

   * Addison-Wesley publishes a book called Tcl and the Tk Toolkit by
     John Ousterhout (ISBN 0-201-63337-X) which is a good introduction
     to Tcl and Tk for the novice.  The book is not exhaustive, and for
     many details it defers to the man pages.

   * `Tkinter.py' is a last resort for most, but can be a good place to
     go when nothing else makes sense.

See also
........

ActiveState Tcl Home Page(1)
     The Tk/Tcl development is largely taking place at ActiveState.

Tcl and the Tk Toolkit(2)
     The book by John Ousterhout, the inventor of Tcl.

Practical Programming in Tcl and Tk(3)
     Brent Welch’s encyclopedic book.

---------- Footnotes ----------

(1) http://tcl.activestate.com/

(2) http://www.amazon.com/exec/obidos/ASIN/020163337X

(3) http://www.beedub.com/book/


File: python.info,  Node: A Simple Hello World Program,  Prev: How To Use This Section,  Up: Tkinter Life Preserver

5.24.1.4 A Simple Hello World Program
.....................................

    from Tkinter import *

    class Application(Frame):
        def say_hi(self):
            print "hi there, everyone!"

        def createWidgets(self):
            self.QUIT = Button(self)
            self.QUIT["text"] = "QUIT"
            self.QUIT["fg"]   = "red"
            self.QUIT["command"] =  self.quit

            self.QUIT.pack({"side": "left"})

            self.hi_there = Button(self)
            self.hi_there["text"] = "Hello",
            self.hi_there["command"] = self.say_hi

            self.hi_there.pack({"side": "left"})

        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()
            self.createWidgets()

    root = Tk()
    app = Application(master=root)
    app.mainloop()
    root.destroy()


File: python.info,  Node: A Very Quick Look at Tcl/Tk,  Next: Mapping Basic Tk into Tkinter,  Prev: Tkinter Life Preserver,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.5 A (Very) Quick Look at Tcl/Tk
......................................

The class hierarchy looks complicated, but in actual practice,
application programmers almost always refer to the classes at the very
bottom of the hierarchy.

Notes:

   * These classes are provided for the purposes of organizing certain
     functions under one namespace. They aren’t meant to be
     instantiated independently.

   * The *Note Tk: 211d. class is meant to be instantiated only once in
     an application.  Application programmers need not instantiate one
     explicitly, the system creates one whenever any of the other
     classes are instantiated.

   * The `Widget' class is not meant to be instantiated, it is meant
     only for subclassing to make “real” widgets (in C++, this is
     called an ‘abstract class’).

To make use of this reference material, there will be times when you
will need to know how to read short passages of Tk and how to identify
the various parts of a Tk command.   (See section *Note Mapping Basic
Tk into Tkinter: 2123. for the *Note Tkinter: 17d. equivalents of
what’s below.)

Tk scripts are Tcl programs.  Like all Tcl programs, Tk scripts are
just lists of tokens separated by spaces.  A Tk widget is just its
`class', the `options' that help configure it, and the `actions' that
make it do useful things.

To make a widget in Tk, the command is always of the form:

    classCommand newPathname options

`classCommand'
     denotes which kind of widget to make (a button, a label, a menu…)

`newPathname'
     is the new name for this widget.  All names in Tk must be unique.
     To help enforce this, widgets in Tk are named with `pathnames',
     just like files in a file system.  The top level widget, the
     `root', is called `.' (period) and children are delimited by more
     periods.  For example, `.myApp.controlPanel.okButton' might be the
     name of a widget.

`options'
     configure the widget’s appearance and in some cases, its
     behavior.  The options come in the form of a list of flags and
     values. Flags are preceded by a ‘-‘, like Unix shell command
     flags, and values are put in quotes if they are more than one word.

For example:

    button   .fred   -fg red -text "hi there"
       ^       ^     \_____________________/
       |       |                |
     class    new            options
    command  widget  (-opt val -opt val ...)

Once created, the pathname to the widget becomes a new command.  This
new `widget command' is the programmer’s handle for getting the new
widget to perform some `action'.  In C, you’d express this as
someAction(fred, someOptions), in C++, you would express this as
fred.someAction(someOptions), and in Tk, you say:

    .fred someAction someOptions

Note that the object name, `.fred', starts with a dot.

As you’d expect, the legal values for `someAction' will depend on the
widget’s class: `.fred disable' works if fred is a button (fred gets
greyed out), but does not work if fred is a label (disabling of labels
is not supported in Tk).

The legal values of `someOptions' is action dependent.  Some actions,
like `disable', require no arguments, others, like a text-entry box’s
`delete' command, would need arguments to specify what range of text to
delete.


File: python.info,  Node: Mapping Basic Tk into Tkinter,  Next: How Tk and Tkinter are Related,  Prev: A Very Quick Look at Tcl/Tk,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.6 Mapping Basic Tk into Tkinter
......................................

Class commands in Tk correspond to class constructors in Tkinter.

    button .fred                =====>  fred = Button()

The master of an object is implicit in the new name given to it at
creation time.  In Tkinter, masters are specified explicitly.

    button .panel.fred          =====>  fred = Button(panel)

The configuration options in Tk are given in lists of hyphened tags
followed by values.  In Tkinter, options are specified as
keyword-arguments in the instance constructor, and keyword-args for
configure calls or as instance indices, in dictionary style, for
established instances.  See section *Note Setting Options: 2125. on
setting options.

    button .fred -fg red        =====>  fred = Button(panel, fg = "red")
    .fred configure -fg red     =====>  fred["fg"] = red
                                OR ==>  fred.config(fg = "red")

In Tk, to perform an action on a widget, use the widget name as a
command, and follow it with an action name, possibly with arguments
(options).  In Tkinter, you call methods on the class instance to
invoke actions on the widget.  The actions (methods) that a given
widget can perform are listed in the Tkinter.py module.

    .fred invoke                =====>  fred.invoke()

To give a widget to the packer (geometry manager), you call pack with
optional arguments.  In Tkinter, the Pack class holds all this
functionality, and the various forms of the pack command are
implemented as methods.  All widgets in *Note Tkinter: 17d. are
subclassed from the Packer, and so inherit all the packing methods. See
the *Note Tix: 17c. module documentation for additional information on
the Form geometry manager.

    pack .fred -side left       =====>  fred.pack(side = "left")


File: python.info,  Node: How Tk and Tkinter are Related,  Next: Handy Reference,  Prev: Mapping Basic Tk into Tkinter,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.7 How Tk and Tkinter are Related
.......................................

From the top down:

Your App Here (Python)
     A Python application makes a *Note Tkinter: 17d. call.

Tkinter (Python Module)
     This call (say, for example, creating a button widget), is
     implemented in the `Tkinter' module, which is written in Python.
     This Python function will parse the commands and the arguments and
     convert them into a form that makes them look as if they had come
     from a Tk script instead of a Python script.

tkinter (C)
     These commands and their arguments will be passed to a C function
     in the `tkinter' - note the lowercase - extension module.

Tk Widgets (C and Tcl)
     This C function is able to make calls into other C modules,
     including the C functions that make up the Tk library.  Tk is
     implemented in C and some Tcl.  The Tcl part of the Tk widgets is
     used to bind certain default behaviors to widgets, and is executed
     once at the point where the Python *Note Tkinter: 17d.  module is
     imported. (The user never sees this stage).

Tk (C)
     The Tk part of the Tk Widgets implement the final mapping to …

Xlib (C)
     the Xlib library to draw graphics on the screen.


File: python.info,  Node: Handy Reference,  Next: File Handlers,  Prev: How Tk and Tkinter are Related,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.8 Handy Reference
........................

* Menu:

* Setting Options::
* The Packer::
* Packer Options::
* Coupling Widget Variables::
* The Window Manager::
* Tk Option Data Types::
* Bindings and Events::
* The index Parameter::
* Images::


File: python.info,  Node: Setting Options,  Next: The Packer,  Up: Handy Reference

5.24.1.9 Setting Options
........................

Options control things like the color and border width of a widget.
Options can be set in three ways:

At object creation time, using keyword arguments
         fred = Button(self, fg = "red", bg = "blue")

After object creation, treating the option name like a dictionary index
         fred["fg"] = "red"
         fred["bg"] = "blue"

Use the config() method to update multiple attrs subsequent to object creation
         fred.config(fg = "red", bg = "blue")

For a complete explanation of a given option and its behavior, see the
Tk man pages for the widget in question.

Note that the man pages list “STANDARD OPTIONS” and “WIDGET
SPECIFIC OPTIONS” for each widget.  The former is a list of options
that are common to many widgets, the latter are the options that are
idiosyncratic to that particular widget.  The Standard Options are
documented on the `options(3)' man page.

No distinction between standard and widget-specific options is made in
this document.  Some options don’t apply to some kinds of widgets.
Whether a given widget responds to a particular option depends on the
class of the widget; buttons have a `command' option, labels do not.

The options supported by a given widget are listed in that widget’s
man page, or can be queried at runtime by calling the `config()' method
without arguments, or by calling the `keys()' method on that widget.
The return value of these calls is a dictionary whose key is the name
of the option as a string (for example, `'relief'') and whose values
are 5-tuples.

Some options, like `bg' are synonyms for common options with long names
(`bg' is shorthand for “background”). Passing the `config()' method
the name of a shorthand option will return a 2-tuple, not 5-tuple. The
2-tuple passed back will contain the name of the synonym and the
“real” option (such as `('bg', 'background')').

Index       Meaning                               Example
--------------------------------------------------------------------- 
0           option name                           `'relief''
1           option name for database lookup       `'relief''
2           option class for database lookup      `'Relief''
3           default value                         `'raised''
4           current value                         `'groove''

Example:

    >>> print fred.config()
    {'relief': ('relief', 'relief', 'Relief', 'raised', 'groove')}

Of course, the dictionary printed will include all the options
available and their values.  This is meant only as an example.


File: python.info,  Node: The Packer,  Next: Packer Options,  Prev: Setting Options,  Up: Handy Reference

5.24.1.10 The Packer
....................

The packer is one of Tk’s geometry-management mechanisms.    Geometry
managers are used to specify the relative positioning of the
positioning of widgets within their container - their mutual `master'.
In contrast to the more cumbersome `placer' (which is used less
commonly, and we do not cover here), the packer takes qualitative
relationship specification - `above', `to the left of', `filling', etc
- and works everything out to determine the exact placement coordinates
for you.

The size of any `master' widget is determined by the size of the
“slave widgets” inside.  The packer is used to control where slave
widgets appear inside the master into which they are packed.  You can
pack widgets into frames, and frames into other frames, in order to
achieve the kind of layout you desire.  Additionally, the arrangement
is dynamically adjusted to accommodate incremental changes to the
configuration, once it is packed.

Note that widgets do not appear until they have had their geometry
specified with a geometry manager.  It’s a common early mistake to
leave out the geometry specification, and then be surprised when the
widget is created but nothing appears.  A widget will appear only after
it has had, for example, the packer’s `pack()' method applied to it.

The pack() method can be called with keyword-option/value pairs that
control where the widget is to appear within its container, and how it
is to behave when the main application window is resized.  Here are
some examples:

    fred.pack()                     # defaults to side = "top"
    fred.pack(side = "left")
    fred.pack(expand = 1)


File: python.info,  Node: Packer Options,  Next: Coupling Widget Variables,  Prev: The Packer,  Up: Handy Reference

5.24.1.11 Packer Options
........................

For more extensive information on the packer and the options that it
can take, see the man pages and page 183 of John Ousterhout’s book.

anchor
     Anchor type.  Denotes where the packer is to place each slave in
     its parcel.

expand
     Boolean, `0' or `1'.

fill
     Legal values: `'x'', `'y'', `'both'', `'none''.

ipadx and ipady
     A distance - designating internal padding on each side of the
     slave widget.

padx and pady
     A distance - designating external padding on each side of the
     slave widget.

side
     Legal values are: `'left'', `'right'', `'top'', `'bottom''.


File: python.info,  Node: Coupling Widget Variables,  Next: The Window Manager,  Prev: Packer Options,  Up: Handy Reference

5.24.1.12 Coupling Widget Variables
...................................

The current-value setting of some widgets (like text entry widgets) can
be connected directly to application variables by using special
options.  These options are `variable', `textvariable', `onvalue',
`offvalue', and `value'.  This connection works both ways: if the
variable changes for any reason, the widget it’s connected to will be
updated to reflect the new value.

Unfortunately, in the current implementation of *Note Tkinter: 17d. it
is not possible to hand over an arbitrary Python variable to a widget
through a `variable' or `textvariable' option.  The only kinds of
variables for which this works are variables that are subclassed from a
class called Variable, defined in the *Note Tkinter: 17d. module.

There are many useful subclasses of Variable already defined:
`StringVar', `IntVar', `DoubleVar', and `BooleanVar'.  To read the
current value of such a variable, call the `get()' method on it, and to
change its value you call the `set()' method.  If you follow this
protocol, the widget will always track the value of the variable, with
no further intervention on your part.

For example:

    class App(Frame):
        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()

            self.entrythingy = Entry()
            self.entrythingy.pack()

            # here is the application variable
            self.contents = StringVar()
            # set it to some value
            self.contents.set("this is a variable")
            # tell the entry widget to watch this variable
            self.entrythingy["textvariable"] = self.contents

            # and here we get a callback when the user hits return.
            # we will have the program print out the value of the
            # application variable when the user hits return
            self.entrythingy.bind('<Key-Return>',
                                  self.print_contents)

        def print_contents(self, event):
            print "hi. contents of entry is now ---->", \
                  self.contents.get()


File: python.info,  Node: The Window Manager,  Next: Tk Option Data Types,  Prev: Coupling Widget Variables,  Up: Handy Reference

5.24.1.13 The Window Manager
............................

In Tk, there is a utility command, `wm', for interacting with the window
manager.  Options to the `wm' command allow you to control things like
titles, placement, icon bitmaps, and the like.  In *Note Tkinter: 17d,
these commands have been implemented as methods on the `Wm' class.
Toplevel widgets are subclassed from the `Wm' class, and so can call
the `Wm' methods directly.

To get at the toplevel window that contains a given widget, you can
often just refer to the widget’s master.  Of course if the widget has
been packed inside of a frame, the master won’t represent a toplevel
window.  To get at the toplevel window that contains an arbitrary
widget, you can call the `_root()' method.  This method begins with an
underscore to denote the fact that this function is part of the
implementation, and not an interface to Tk functionality.

Here are some examples of typical usage:

    from Tkinter import *
    class App(Frame):
        def __init__(self, master=None):
            Frame.__init__(self, master)
            self.pack()


    # create the application
    myapp = App()

    #
    # here are method calls to the window manager class
    #
    myapp.master.title("My Do-Nothing Application")
    myapp.master.maxsize(1000, 400)

    # start the program
    myapp.mainloop()


File: python.info,  Node: Tk Option Data Types,  Next: Bindings and Events,  Prev: The Window Manager,  Up: Handy Reference

5.24.1.14 Tk Option Data Types
..............................

anchor
     Legal values are points of the compass: `"n"', `"ne"', `"e"',
     `"se"', `"s"', `"sw"', `"w"', `"nw"', and also `"center"'.

bitmap
     There are eight built-in, named bitmaps: `'error'', `'gray25'',
     `'gray50'', `'hourglass'', `'info'', `'questhead'', `'question'',
     `'warning''.  To specify an X bitmap filename, give the full path
     to the file, preceded with an `@', as in
     `"@/usr/contrib/bitmap/gumby.bit"'.

boolean
     You can pass integers 0 or 1 or the strings `"yes"' or `"no"'.

callback
     This is any Python function that takes no arguments.  For example:

         def print_it():
                 print "hi there"
         fred["command"] = print_it

color
     Colors can be given as the names of X colors in the rgb.txt file,
     or as strings representing RGB values in 4 bit: `"#RGB"', 8 bit:
     `"#RRGGBB"', 12 bit” `"#RRRGGGBBB"', or 16 bit `"#RRRRGGGGBBBB"'
     ranges, where R,G,B here represent any legal hex digit.  See page
     160 of Ousterhout’s book for details.

cursor
     The standard X cursor names from `cursorfont.h' can be used,
     without the `XC_' prefix.  For example to get a hand cursor
     (`XC_hand2'), use the string `"hand2"'.  You can also specify a
     bitmap and mask file of your own.  See page 179 of Ousterhout’s
     book.

distance
     Screen distances can be specified in either pixels or absolute
     distances.  Pixels are given as numbers and absolute distances as
     strings, with the trailing character denoting units: `c' for
     centimetres, `i' for inches, `m' for millimetres, `p' for
     printer’s points.  For example, 3.5 inches is expressed as
     `"3.5i"'.

font
     Tk uses a list font name format, such as `{courier 10 bold}'. Font
     sizes with positive numbers are measured in points; sizes with
     negative numbers are measured in pixels.

geometry
     This is a string of the form `widthxheight', where width and
     height are measured in pixels for most widgets (in characters for
     widgets displaying text).  For example: `fred["geometry"] =
     "200x100"'.

justify
     Legal values are the strings: `"left"', `"center"', `"right"', and
     `"fill"'.

region
     This is a string with four space-delimited elements, each of which
     is a legal distance (see above).  For example: `"2 3 4 5"' and
     `"3i 2i 4.5i 2i"' and `"3c 2c 4c 10.43c"'  are all legal regions.

relief
     Determines what the border style of a widget will be.  Legal
     values are: `"raised"', `"sunken"', `"flat"', `"groove"', and
     `"ridge"'.

scrollcommand
     This is almost always the `set()' method of some scrollbar widget,
     but can be any widget method that takes a single argument.   Refer
     to the file `Demo/tkinter/matt/canvas-with-scrollbars.py' in the
     Python source distribution for an example.

wrap:
     Must be one of: `"none"', `"char"', or `"word"'.


File: python.info,  Node: Bindings and Events,  Next: The index Parameter,  Prev: Tk Option Data Types,  Up: Handy Reference

5.24.1.15 Bindings and Events
.............................

The bind method from the widget command allows you to watch for certain
events and to have a callback function trigger when that event type
occurs.  The form of the bind method is:

    def bind(self, sequence, func, add=''):

where:

sequence
     is a string that denotes the target kind of event.  (See the bind
     man page and page 201 of John Ousterhout’s book for details).

func
     is a Python function, taking one argument, to be invoked when the
     event occurs.  An Event instance will be passed as the argument.
     (Functions deployed this way are commonly known as `callbacks'.)

add
     is optional, either `''' or `'+''.  Passing an empty string
     denotes that this binding is to replace any other bindings that
     this event is associated with.  Passing a `'+'' means that this
     function is to be added to the list of functions bound to this
     event type.

For example:

    def turnRed(self, event):
        event.widget["activeforeground"] = "red"

    self.button.bind("<Enter>", self.turnRed)

Notice how the widget field of the event is being accessed in the
`turnRed()' callback.  This field contains the widget that caught the X
event.  The following table lists the other event fields you can
access, and how they are denoted in Tk, which can be useful when
referring to the Tk man pages.

    Tk      Tkinter Event Field             Tk      Tkinter Event Field
    --      -------------------             --      -------------------
    %f      focus                           %A      char
    %h      height                          %E      send_event
    %k      keycode                         %K      keysym
    %s      state                           %N      keysym_num
    %t      time                            %T      type
    %w      width                           %W      widget
    %x      x                               %X      x_root
    %y      y                               %Y      y_root


File: python.info,  Node: The index Parameter,  Next: Images,  Prev: Bindings and Events,  Up: Handy Reference

5.24.1.16 The index Parameter
.............................

A number of widgets require”index” parameters to be passed.  These
are used to point at a specific place in a Text widget, or to
particular characters in an Entry widget, or to particular menu items
in a Menu widget.

Entry widget indexes (index, view index, etc.)
     Entry widgets have options that refer to character positions in
     the text being displayed.  You can use these *Note Tkinter: 17d.
     functions to access these special points in text widgets:

    AtEnd()
          refers to the last position in the text

    AtInsert()
          refers to the point where the text cursor is

    AtSelFirst()
          indicates the beginning point of the selected text

    AtSelLast()
          denotes the last point of the selected text and finally

    At(x[, y])
          refers to the character at pixel location `x', `y' (with `y'
          not used in the case of a text entry widget, which contains a
          single line of text).

Text widget indexes
     The index notation for Text widgets is very rich and is best
     described in the Tk man pages.

Menu indexes (menu.invoke(), menu.entryconfig(), etc.)
     Some options and methods for menus manipulate specific menu
     entries. Anytime a menu index is needed for an option or a
     parameter, you may pass in:

        * an integer which refers to the numeric position of the entry
          in the widget, counted from the top, starting with 0;

        * the string `'active'', which refers to the menu position that
          is currently under the cursor;

        * the string `"last"' which refers to the last menu item;

        * An integer preceded by `@', as in `@6', where the integer is
          interpreted as a y pixel coordinate in the menu’s
          coordinate system;

        * the string `"none"', which indicates no menu entry at all,
          most often used with menu.activate() to deactivate all
          entries, and finally,

        * a text string that is pattern matched against the label of
          the menu entry, as scanned from the top of the menu to the
          bottom.  Note that this index type is considered after all
          the others, which means that matches for menu items labelled
          `last', `active', or `none' may be interpreted as the above
          literals, instead.


File: python.info,  Node: Images,  Prev: The index Parameter,  Up: Handy Reference

5.24.1.17 Images
................

Bitmap/Pixelmap images can be created through the subclasses of
`Tkinter.Image':

   * `BitmapImage' can be used for X11 bitmap data.

   * `PhotoImage' can be used for GIF and PPM/PGM color bitmaps.

Either type of image is created through either the `file' or the `data'
option (other options are available as well).

The image object can then be used wherever an `image' option is
supported by some widget (e.g. labels, buttons, menus). In these cases,
Tk will not keep a reference to the image. When the last Python
reference to the image object is deleted, the image data is deleted as
well, and Tk will display an empty box wherever the image was used.


File: python.info,  Node: File Handlers,  Prev: Handy Reference,  Up: Tkinter — Python interface to Tcl/Tk

5.24.1.18 File Handlers
.......................

Tk allows you to register and unregister a callback function which will
be called from the Tk mainloop when I/O is possible on a file
descriptor.  Only one handler may be registered per file descriptor.
Example code:

    import Tkinter
    widget = Tkinter.Tk()
    mask = Tkinter.READABLE | Tkinter.WRITABLE
    widget.tk.createfilehandler(file, mask, callback)
    ...
    widget.tk.deletefilehandler(file)

This feature is not available on Windows.

Since you don’t know how many bytes are available for reading, you
may not want to use the *Note BufferedIOBase: 228. or *Note TextIOBase:
22f.  *Note read(): 11fc. or *Note readline(): 11ec. methods, since
these will insist on reading a predefined number of bytes.  For
sockets, the *Note recv(): 1791. or *Note recvfrom(): 1792. methods
will work fine; for other files, use raw reads or
`os.read(file.fileno(), maxbytecount)'.

 -- Method: Widget.tk.createfilehandler (file, mask, func)
     Registers the file handler callback function `func'. The `file'
     argument may either be an object with a *Note fileno(): 11ee.
     method (such as a file or socket object), or an integer file
     descriptor. The `mask' argument is an ORed combination of any of
     the three constants below.  The callback is called as follows:

         callback(file, mask)

 -- Method: Widget.tk.deletefilehandler (file)
     Unregisters a file handler.

 -- Data: Tkinter.READABLE
 -- Data: Tkinter.WRITABLE
 -- Data: Tkinter.EXCEPTION
     Constants used in the `mask' arguments.


File: python.info,  Node: ttk — Tk themed widgets,  Next: Tix — Extension widgets for Tk,  Prev: Tkinter — Python interface to Tcl/Tk,  Up: Graphical User Interfaces with Tk

5.24.2 `ttk' — Tk themed widgets
----------------------------------

The *Note ttk: 182. module provides access to the Tk themed widget set,
which has been introduced in Tk 8.5. If Python is not compiled against
Tk 8.5 code may still use this module as long as Tile is installed.
However, some features provided by the new Tk, like anti-aliased font
rendering under X11, window transparency (on X11 you will need a
composition window manager) will be missing.

The basic idea of *Note ttk: 182. is to separate, to the extent
possible, the code implementing a widget’s behavior from the code
implementing its appearance.

See also
........

Tk Widget Styling Support(1)
     The document which brought up theming support for Tk

* Menu:

* Using Ttk::
* Ttk Widgets::
* Widget::
* Combobox::
* Notebook::
* Progressbar::
* Separator::
* Sizegrip::
* Treeview::
* Ttk Styling::

---------- Footnotes ----------

(1) https://www.tcl.tk/cgi-bin/tct/tip/48


File: python.info,  Node: Using Ttk,  Next: Ttk Widgets,  Up: ttk — Tk themed widgets

5.24.2.1 Using Ttk
..................

To start using Ttk, import its module:

    import ttk

But code like this:

    from Tkinter import *

may optionally want to use this:

    from Tkinter import *
    from ttk import *

And then several *Note ttk: 182. widgets (`Button', `Checkbutton',
`Entry', `Frame', `Label', `LabelFrame', `Menubutton', `PanedWindow',
`Radiobutton', `Scale' and `Scrollbar') will automatically substitute
for the Tk widgets.

This has the direct benefit of using the new widgets, giving better
look & feel across platforms, but be aware that they are not totally
compatible. The main difference is that widget options such as
“fg”, “bg” and others related to widget styling are no longer
present in Ttk widgets. Use *Note ttk.Style: 213b. to achieve the same
(or better) styling.

See also
........

Converting existing applications to use the Tile widgets(1)
     A text which talks in Tcl terms about differences typically found
     when converting applications to use the new widgets.

---------- Footnotes ----------

(1) http://tktable.sourceforge.net/tile/doc/converting.txt


File: python.info,  Node: Ttk Widgets,  Next: Widget,  Prev: Using Ttk,  Up: ttk — Tk themed widgets

5.24.2.2 Ttk Widgets
....................

Ttk comes with 17 widgets, 11 of which already exist in Tkinter:
`Button', `Checkbutton', `Entry', `Frame', `Label', `LabelFrame',
`Menubutton', `PanedWindow', `Radiobutton', `Scale' and `Scrollbar'.
The 6 new widget classes are: *Note Combobox: 213d, *Note Notebook:
213e, *Note Progressbar: 213f, `Separator', `Sizegrip' and *Note
Treeview: 2140.  All of these classes are subclasses of *Note Widget:
2141.

As said previously, you will notice changes in look-and-feel as well in
the styling code. To demonstrate the latter, a very simple example is
shown below.

Tk code:

    l1 = Tkinter.Label(text="Test", fg="black", bg="white")
    l2 = Tkinter.Label(text="Test", fg="black", bg="white")

Corresponding Ttk code:

    style = ttk.Style()
    style.configure("BW.TLabel", foreground="black", background="white")

    l1 = ttk.Label(text="Test", style="BW.TLabel")
    l2 = ttk.Label(text="Test", style="BW.TLabel")

For more information about *Note TtkStyling: 2142. read the *Note
Style: 213b. class documentation.


File: python.info,  Node: Widget,  Next: Combobox,  Prev: Ttk Widgets,  Up: ttk — Tk themed widgets

5.24.2.3 Widget
...............

*Note ttk.Widget: 2141. defines standard options and methods supported
by Tk themed widgets and is not supposed to be directly instantiated.

* Menu:

* Standard Options::
* Scrollable Widget Options::
* Label Options::
* Compatibility Options::
* Widget States::
* ttk.Widget: ttk Widget.


File: python.info,  Node: Standard Options,  Next: Scrollable Widget Options,  Up: Widget

5.24.2.4 Standard Options
.........................

All the *Note ttk: 182. widgets accept the following options:

      Option          Description
     ----------------------------------------------------------------------------------- 
     class           Specifies the window class. The class is used when querying the
                     option database for the window’s other options, to determine
                     the default bindtags for the window, and to select the widget’s
                     default layout and style. This is a read-only option which may
                     only be specified when the window is created.
     cursor          Specifies the mouse cursor to be used for the widget. If set to
                     the empty string (the default), the cursor is inherited from the
                     parent widget.
     takefocus       Determines whether the window accepts the focus during keyboard
                     traversal. 0, 1 or an empty string is returned.  If 0, the window
                     should be skipped entirely during keyboard traversal. If 1, the
                     window should receive the input focus as long as it is viewable.
                     An empty string means that the traversal scripts make the
                     decision about whether or not to focus on the window.
     style           May be used to specify a custom widget style.



File: python.info,  Node: Scrollable Widget Options,  Next: Label Options,  Prev: Standard Options,  Up: Widget

5.24.2.5 Scrollable Widget Options
..................................

The following options are supported by widgets that are controlled by a
scrollbar.

      option               description
     ----------------------------------------------------------------------------------- 
     xscrollcommand       Used to communicate with horizontal scrollbars.
                          
                          When the view in the widget’s window changes, the widget
                          will generate a Tcl command based on the scrollcommand.
                          
                          Usually this option consists of the `Scrollbar.set()' method
                          of some scrollbar. This will cause the scrollbar to be
                          updated whenever the view in the window changes.
     yscrollcommand       Used to communicate with vertical scrollbars.  For more
                          information, see above.



File: python.info,  Node: Label Options,  Next: Compatibility Options,  Prev: Scrollable Widget Options,  Up: Widget

5.24.2.6 Label Options
......................

The following options are supported by labels, buttons and other
button-like widgets.

      option             description
     ----------------------------------------------------------------------------------- 
     text               Specifies a text string to be displayed inside the widget.
     textvariable       Specifies a name whose value will be used in place of the text
                        option resource.
     underline          If set, specifies the index (0-based) of a character to
                        underline in the text string. The underline character is used
                        for mnemonic activation.
     image              Specifies an image to display. This is a list of 1 or more
                        elements. The first element is the default image name. The
                        rest of the list is a sequence of statespec/value pairs as
                        defined by *Note Style.map(): 2147, specifying different images
                        to use when the widget is in a particular state or a
                        combination of states. All images in the list should have the
                        same size.
     compound           Specifies how to display the image relative to the text, in
                        the case both text and image options are present.  Valid
                        values are:
                        
                           * text: display text only
                        
                           * image: display image only
                        
                           * top, bottom, left, right: display image above, below,
                             left of, or right of the text, respectively.
                        
                           * none: the default. display the image if present,
                             otherwise the text.
     width              If greater than zero, specifies how much space, in character
                        widths, to allocate for the text label; if less than zero,
                        specifies a minimum width. If zero or unspecified, the natural
                        width of the text label is used.



File: python.info,  Node: Compatibility Options,  Next: Widget States,  Prev: Label Options,  Up: Widget

5.24.2.7 Compatibility Options
..............................

      option       description
     ---------------------------------------------------------------------------------- 
     state        May be set to “normal” or “disabled” to control the
                  “disabled” state bit. This is a write-only option: setting it
                  changes the widget state, but the *Note Widget.state(): 2149.
                  method does not affect this option.



File: python.info,  Node: Widget States,  Next: ttk Widget,  Prev: Compatibility Options,  Up: Widget

5.24.2.8 Widget States
......................

The widget state is a bitmap of independent state flags.

      flag             description
     ----------------------------------------------------------------------------------- 
     active           The mouse cursor is over the widget and pressing a mouse button
                      will cause some action to occur.
     disabled         Widget is disabled under program control.
     focus            Widget has keyboard focus.
     pressed          Widget is being pressed.
     selected         “On”, “true”, or “current” for things like
                      Checkbuttons and radiobuttons.
     background       Windows and Mac have a notion of an “active” or foreground
                      window. The `background' state is set for widgets in a
                      background window, and cleared for those in the foreground
                      window.
     readonly         Widget should not allow user modification.
     alternate        A widget-specific alternate display format.
     invalid          The widget’s value is invalid.


A state specification is a sequence of state names, optionally prefixed
with an exclamation point indicating that the bit is off.


File: python.info,  Node: ttk Widget,  Prev: Widget States,  Up: Widget

5.24.2.9 ttk.Widget
...................

Besides the methods described below, the *Note ttk.Widget: 2141. class
supports the `Tkinter.Widget.cget()' and `Tkinter.Widget.configure()'
methods.

 -- Class: ttk.Widget
      -- Method: identify (x, y)
          Returns the name of the element at position `x' `y', or the
          empty string if the point does not lie within any element.

          `x' and `y' are pixel coordinates relative to the widget.

      -- Method: instate (statespec, callback=None, *args, **kw)
          Test the widget’s state. If a callback is not specified,
          returns `True' if the widget state matches `statespec' and
          `False' otherwise. If callback is specified then it is called
          with `args' if widget state matches `statespec'.

      -- Method: state ([statespec=None])
          Modify or read widget state. If `statespec' is specified,
          sets the widget state accordingly and returns a new
          `statespec' indicating which flags were changed. If
          `statespec' is not specified, returns the currently-enabled
          state flags.

     `statespec' will usually be a list or a tuple.


File: python.info,  Node: Combobox,  Next: Notebook,  Prev: Widget,  Up: ttk — Tk themed widgets

5.24.2.10 Combobox
..................

The *Note ttk.Combobox: 213d. widget combines a text field with a
pop-down list of values. This widget is a subclass of `Entry'.

Besides the methods inherited from *Note Widget: 2141. (`Widget.cget()',
`Widget.configure()', *Note Widget.identify(): 214c, *Note
Widget.instate(): 214d.  and *Note Widget.state(): 2149.) and those
inherited from `Entry' (`Entry.bbox()', `Entry.delete()',
`Entry.icursor()', `Entry.index()', `Entry.insert()',
`Entry.selection()', `Entry.xview()'), this class has some other
methods, described at *Note ttk.Combobox: 213d.

* Menu:

* Options::
* Virtual events::
* ttk.Combobox: ttk Combobox.


File: python.info,  Node: Options,  Next: Virtual events,  Up: Combobox

5.24.2.11 Options
.................

This widget accepts the following options:

      option                description
     ----------------------------------------------------------------------------------- 
     exportselection       Boolean value. If set, the widget selection is linked to
                           the Window Manager selection (which can be returned by
                           invoking `Misc.selection_get()', for example).
     justify               Specifies how the text is aligned within the widget.  One
                           of “left”, “center”, or “right”.
     height                Specifies the height of the pop-down listbox, in rows.
     postcommand           A script (possibly registered with `Misc.register()') that
                           is called immediately before displaying the values. It may
                           specify which values to display.
     state                 One of “normal”, “readonly”, or “disabled”. In
                           the “readonly” state, the value may not be edited
                           directly, and the user can only select one of the values
                           from the dropdown list. In the “normal” state, the text
                           field is directly editable. In the “disabled” state, no
                           interaction is possible.
     textvariable          Specifies a name whose value is linked to the widget value.
                           Whenever the value associated with that name changes, the
                           widget value is updated, and vice versa.  See
                           `Tkinter.StringVar'.
     values                Specifies the list of values to display in the drop-down
                           listbox.
     width                 Specifies an integer value indicating the desired width of
                           the entry window, in average-size characters of the
                           widget’s font.



File: python.info,  Node: Virtual events,  Next: ttk Combobox,  Prev: Options,  Up: Combobox

5.24.2.12 Virtual events
........................

The combobox widget generates a `<<ComboboxSelected>>' virtual event
when the user selects an element from the list of values.


File: python.info,  Node: ttk Combobox,  Prev: Virtual events,  Up: Combobox

5.24.2.13 ttk.Combobox
......................

 -- Class: ttk.Combobox
      -- Method: current ([newindex=None])
          If `newindex' is specified, sets the combobox value to the
          element position `newindex'. Otherwise, returns the index of
          the current value or -1 if the current value is not in the
          values list.

      -- Method: get ()
          Returns the current value of the combobox.

      -- Method: set (value)
          Sets the value of the combobox to `value'.


File: python.info,  Node: Notebook,  Next: Progressbar,  Prev: Combobox,  Up: ttk — Tk themed widgets

5.24.2.14 Notebook
..................

The Ttk Notebook widget manages a collection of windows and displays a
single one at a time. Each child window is associated with a tab, which
the user may select to change the currently-displayed window.

* Menu:

* Options: Options<2>.
* Tab Options::
* Tab Identifiers::
* Virtual Events::
* ttk.Notebook: ttk Notebook.


File: python.info,  Node: Options<2>,  Next: Tab Options,  Up: Notebook

5.24.2.15 Options
.................

This widget accepts the following specific options:

      option        description
     ----------------------------------------------------------------------------------- 
     height        If present and greater than zero, specifies the desired height of
                   the pane area (not including internal padding or tabs).  Otherwise,
                   the maximum height of all panes is used.
     padding       Specifies the amount of extra space to add around the outside of
                   the notebook. The padding is a list of up to four length
                   specifications: left top right bottom. If fewer than four elements
                   are specified, bottom defaults to top, right defaults to left, and
                   top defaults to left.
     width         If present and greater than zero, specifies the desired width of
                   the pane area (not including internal padding). Otherwise, the
                   maximum width of all panes is used.



File: python.info,  Node: Tab Options,  Next: Tab Identifiers,  Prev: Options<2>,  Up: Notebook

5.24.2.16 Tab Options
.....................

There are also specific options for tabs:

      option          description
     ----------------------------------------------------------------------------------- 
     state           Either “normal”, “disabled” or “hidden”. If
                     “disabled”, then the tab is not selectable. If “hidden”,
                     then the tab is not shown.
     sticky          Specifies how the child window is positioned within the pane
                     area. Value is a string containing zero or more of the characters
                     “n”, “s”, “e” or “w”. Each letter refers to a
                     side (north, south, east or west) that the child window will
                     stick to, as per the `grid()' geometry manager.
     padding         Specifies the amount of extra space to add between the notebook
                     and this pane. Syntax is the same as for the option padding used
                     by this widget.
     text            Specifies a text to be displayed in the tab.
     image           Specifies an image to display in the tab. See the option image
                     described in *Note Widget: 2141.
     compound        Specifies how to display the image relative to the text, in the
                     case both text and image options are present. See *Note Label
                     Options: 2146. for legal values.
     underline       Specifies the index (0-based) of a character to underline in the
                     text string. The underlined character is used for mnemonic
                     activation if *Note Notebook.enable_traversal(): 2158. is called.



File: python.info,  Node: Tab Identifiers,  Next: Virtual Events,  Prev: Tab Options,  Up: Notebook

5.24.2.17 Tab Identifiers
.........................

The `tab_id' present in several methods of *Note ttk.Notebook: 213e.
may take any of the following forms:

   * An integer between zero and the number of tabs.

   * The name of a child window.

   * A positional specification of the form “@x,y”, which
     identifies the tab.

   * The literal string “current”, which identifies the
     currently-selected tab.

   * The literal string “end”, which returns the number of tabs
     (only valid for *Note Notebook.index(): 215a.).


File: python.info,  Node: Virtual Events,  Next: ttk Notebook,  Prev: Tab Identifiers,  Up: Notebook

5.24.2.18 Virtual Events
........................

This widget generates a `<<NotebookTabChanged>>' virtual event after a
new tab is selected.


File: python.info,  Node: ttk Notebook,  Prev: Virtual Events,  Up: Notebook

5.24.2.19 ttk.Notebook
......................

 -- Class: ttk.Notebook
      -- Method: add (child, **kw)
          Adds a new tab to the notebook.

          If window is currently managed by the notebook but hidden, it
          is restored to its previous position.

          See *Note Tab Options: 2157. for the list of available
          options.

      -- Method: forget (tab_id)
          Removes the tab specified by `tab_id', unmaps and unmanages
          the associated window.

      -- Method: hide (tab_id)
          Hides the tab specified by `tab_id'.

          The tab will not be displayed, but the associated window
          remains managed by the notebook and its configuration
          remembered. Hidden tabs may be restored with the *Note add():
          215d. command.

      -- Method: identify (x, y)
          Returns the name of the tab element at position `x', `y', or
          the empty string if none.

      -- Method: index (tab_id)
          Returns the numeric index of the tab specified by `tab_id',
          or the total number of tabs if `tab_id' is the string
          “end”.

      -- Method: insert (pos, child, **kw)
          Inserts a pane at the specified position.

          `pos' is either the string “end”, an integer index, or
          the name of a managed child. If `child' is already managed by
          the notebook, moves it to the specified position.

          See *Note Tab Options: 2157. for the list of available
          options.

      -- Method: select ([tab_id])
          Selects the specified `tab_id'.

          The associated child window will be displayed, and the
          previously-selected window (if different) is unmapped. If
          `tab_id' is omitted, returns the widget name of the currently
          selected pane.

      -- Method: tab (tab_id, option=None, **kw)
          Query or modify the options of the specific `tab_id'.

          If `kw' is not given, returns a dictionary of the tab option
          values. If `option' is specified, returns the value of that
          `option'. Otherwise, sets the options to the corresponding
          values.

      -- Method: tabs ()
          Returns a list of windows managed by the notebook.

      -- Method: enable_traversal ()
          Enable keyboard traversal for a toplevel window containing
          this notebook.

          This will extend the bindings for the toplevel window
          containing the notebook as follows:

             * `Control-Tab': selects the tab following the currently
               selected one.

             * `Shift-Control-Tab': selects the tab preceding the
               currently selected one.

             * `Alt-K': where `K' is the mnemonic (underlined)
               character of any tab, will select that tab.

          Multiple notebooks in a single toplevel may be enabled for
          traversal, including nested notebooks. However, notebook
          traversal only works properly if all panes have the notebook
          they are in as master.


File: python.info,  Node: Progressbar,  Next: Separator,  Prev: Notebook,  Up: ttk — Tk themed widgets

5.24.2.20 Progressbar
.....................

The *Note ttk.Progressbar: 213f. widget shows the status of a
long-running operation. It can operate in two modes: determinate mode
shows the amount completed relative to the total amount of work to be
done, and indeterminate mode provides an animated display to let the
user know that something is happening.

* Menu:

* Options: Options<3>.
* ttk.Progressbar: ttk Progressbar.


File: python.info,  Node: Options<3>,  Next: ttk Progressbar,  Up: Progressbar

5.24.2.21 Options
.................

This widget accepts the following specific options:

      option         description
     ----------------------------------------------------------------------------------- 
     orient         One of “horizontal” or “vertical”. Specifies the
                    orientation of the progress bar.
     length         Specifies the length of the long axis of the progress bar (width
                    if horizontal, height if vertical).
     mode           One of “determinate” or “indeterminate”.
     maximum        A number specifying the maximum value. Defaults to 100.
     value          The current value of the progress bar. In “determinate” mode,
                    this represents the amount of work completed. In
                    “indeterminate” mode, it is interpreted as modulo `maximum';
                    that is, the progress bar completes one “cycle” when its value
                    increases by `maximum'.
     variable       A name which is linked to the option value. If specified, the
                    value of the progress bar is automatically set to the value of
                    this name whenever the latter is modified.
     phase          Read-only option. The widget periodically increments the value of
                    this option whenever its value is greater than 0 and, in
                    determinate mode, less than maximum. This option may be used by
                    the current theme to provide additional animation effects.



File: python.info,  Node: ttk Progressbar,  Prev: Options<3>,  Up: Progressbar

5.24.2.22 ttk.Progressbar
.........................

 -- Class: ttk.Progressbar
      -- Method: start ([interval])
          Begin autoincrement mode: schedules a recurring timer event
          that calls *Note Progressbar.step(): 2169. every `interval'
          milliseconds. If omitted, `interval' defaults to 50
          milliseconds.

      -- Method: step ([amount])
          Increments the progress bar’s value by `amount'.

          `amount' defaults to 1.0 if omitted.

      -- Method: stop ()
          Stop autoincrement mode: cancels any recurring timer event
          initiated by *Note Progressbar.start(): 2168. for this
          progress bar.


File: python.info,  Node: Separator,  Next: Sizegrip,  Prev: Progressbar,  Up: ttk — Tk themed widgets

5.24.2.23 Separator
...................

The `ttk.Separator' widget displays a horizontal or vertical separator
bar.

It has no other methods besides the ones inherited from *Note
ttk.Widget: 2141.

* Menu:

* Options: Options<4>.


File: python.info,  Node: Options<4>,  Up: Separator

5.24.2.24 Options
.................

This widget accepts the following specific option:

      option       description
     ---------------------------------------------------------------------------------- 
     orient       One of “horizontal” or “vertical”. Specifies the
                  orientation of the separator.



File: python.info,  Node: Sizegrip,  Next: Treeview,  Prev: Separator,  Up: ttk — Tk themed widgets

5.24.2.25 Sizegrip
..................

The `ttk.Sizegrip' widget (also known as a grow box) allows the user to
resize the containing toplevel window by pressing and dragging the grip.

This widget has neither specific options nor specific methods, besides
the ones inherited from *Note ttk.Widget: 2141.

* Menu:

* Platform-specific notes::
* Bugs::


File: python.info,  Node: Platform-specific notes,  Next: Bugs,  Up: Sizegrip

5.24.2.26 Platform-specific notes
.................................

   * On Mac OS X, toplevel windows automatically include a built-in
     size grip by default. Adding a `Sizegrip' is harmless, since the
     built-in grip will just mask the widget.


File: python.info,  Node: Bugs,  Prev: Platform-specific notes,  Up: Sizegrip

5.24.2.27 Bugs
..............

   * If the containing toplevel’s position was specified relative to
     the right or bottom of the screen (e.g. ….), the `Sizegrip'
     widget will not resize the window.

   * This widget supports only “southeast” resizing.


File: python.info,  Node: Treeview,  Next: Ttk Styling,  Prev: Sizegrip,  Up: ttk — Tk themed widgets

5.24.2.28 Treeview
..................

The *Note ttk.Treeview: 2140. widget displays a hierarchical collection
of items.  Each item has a textual label, an optional image, and an
optional list of data values. The data values are displayed in
successive columns after the tree label.

The order in which data values are displayed may be controlled by
setting the widget option `displaycolumns'. The tree widget can also
display column headings. Columns may be accessed by number or symbolic
names listed in the widget option columns. See *Note Column
Identifiers: 2171.

Each item is identified by a unique name. The widget will generate item
IDs if they are not supplied by the caller. There is a distinguished
root item, named `{}'. The root item itself is not displayed; its
children appear at the top level of the hierarchy.

Each item also has a list of tags, which can be used to associate event
bindings with individual items and control the appearance of the item.

The Treeview widget supports horizontal and vertical scrolling,
according to the options described in *Note Scrollable Widget Options:
2145. and the methods *Note Treeview.xview(): 2172. and *Note
Treeview.yview(): 2173.

* Menu:

* Options: Options<5>.
* Item Options::
* Tag Options::
* Column Identifiers::
* Virtual Events: Virtual Events<2>.
* ttk.Treeview: ttk Treeview.


File: python.info,  Node: Options<5>,  Next: Item Options,  Up: Treeview

5.24.2.29 Options
.................

This widget accepts the following specific options:

      option               description
     ---------------------------------------------------------------------------------- 
     columns              A list of column identifiers, specifying the number of
                          columns and their names.
     displaycolumns       A list of column identifiers (either symbolic or integer
                          indices) specifying which data columns are displayed and
                          the order in which they appear, or the string “#all”.
     height               Specifies the number of rows which should be visible.
                          Note: the requested width is determined from the sum of the
                          column widths.
     padding              Specifies the internal padding for the widget. The padding
                          is a list of up to four length specifications.
     selectmode           Controls how the built-in class bindings manage the
                          selection. One of “extended”, “browse” or
                          “none”.  If set to “extended” (the default),
                          multiple items may be selected. If “browse”, only a
                          single item will be selected at a time. If “none”, the
                          selection will not be changed.
                          
                          Note that the application code and tag bindings can set the
                          selection however they wish, regardless of the value  of
                          this option.
     show                 A list containing zero or more of the following values,
                          specifying which elements of the tree to display.
                          
                             * tree: display tree labels in column #0.
                          
                             * headings: display the heading row.
                          The default is “tree headings”, i.e., show all elements.
                          
                          `Note': Column #0 always refers to the tree column, even if
                          show=”tree” is not specified.



File: python.info,  Node: Item Options,  Next: Tag Options,  Prev: Options<5>,  Up: Treeview

5.24.2.30 Item Options
......................

The following item options may be specified for items in the insert and
item widget commands.

      option       description
     --------------------------------------------------------------------------------- 
     text         The textual label to display for the item.
     image        A Tk Image, displayed to the left of the label.
     values       The list of values associated with the item.
                  
                  Each item should have the same number of values as the widget
                  option columns. If there are fewer values than columns, the
                  remaining values are assumed empty. If there are more values than
                  columns, the extra values are ignored.
     open         True/False value indicating whether the item’s children should
                  be displayed or hidden.
     tags         A list of tags associated with this item.



File: python.info,  Node: Tag Options,  Next: Column Identifiers,  Prev: Item Options,  Up: Treeview

5.24.2.31 Tag Options
.....................

The following options may be specified on tags:

      option           description
     --------------------------------------------------------------------------------- 
     foreground       Specifies the text foreground color.
     background       Specifies the cell or item background color.
     font             Specifies the font to use when drawing text.
     image            Specifies the item image, in case the item’s image option is
                      empty.



File: python.info,  Node: Column Identifiers,  Next: Virtual Events<2>,  Prev: Tag Options,  Up: Treeview

5.24.2.32 Column Identifiers
............................

Column identifiers take any of the following forms:

   * A symbolic name from the list of columns option.

   * An integer n, specifying the nth data column.

   * A string of the form #n, where n is an integer, specifying the nth
     display column.

Notes:

   * Item’s option values may be displayed in a different order than
     the order in which they are stored.

   * Column #0 always refers to the tree column, even if
     show=”tree” is not specified.

A data column number is an index into an item’s option values list; a
display column number is the column number in the tree where the values
are displayed.  Tree labels are displayed in column #0. If option
displaycolumns is not set, then data column n is displayed in column
#n+1. Again, `column #0 always refers to the tree column'.


File: python.info,  Node: Virtual Events<2>,  Next: ttk Treeview,  Prev: Column Identifiers,  Up: Treeview

5.24.2.33 Virtual Events
........................

The Treeview widget generates the following virtual events.

      event                    description
     -------------------------------------------------------------------------------- 
     <<TreeviewSelect>>       Generated whenever the selection changes.
     <<TreeviewOpen>>         Generated just before settings the focus item to
                              open=True.
     <<TreeviewClose>>        Generated just after setting the focus item to
                              open=False.


The *Note Treeview.focus(): 2178. and *Note Treeview.selection(): 2179.
methods can be used to determine the affected item or items.


File: python.info,  Node: ttk Treeview,  Prev: Virtual Events<2>,  Up: Treeview

5.24.2.34 ttk.Treeview
......................

 -- Class: ttk.Treeview
      -- Method: bbox (item, column=None)
          Returns the bounding box (relative to the treeview widget’s
          window) of the specified `item' in the form (x, y, width,
          height).

          If `column' is specified, returns the bounding box of that
          cell. If the `item' is not visible (i.e., if it is a
          descendant of a closed item or is scrolled offscreen),
          returns an empty string.

      -- Method: get_children ([item])
          Returns the list of children belonging to `item'.

          If `item' is not specified, returns root children.

      -- Method: set_children (item, *newchildren)
          Replaces `item'’s child with `newchildren'.

          Children present in `item' that are not present in
          `newchildren' are detached from the tree. No items in
          `newchildren' may be an ancestor of `item'. Note that not
          specifying `newchildren' results in detaching `item'’s
          children.

      -- Method: column (column, option=None, **kw)
          Query or modify the options for the specified `column'.

          If `kw' is not given, returns a dict of the column option
          values. If `option' is specified then the value for that
          `option' is returned.  Otherwise, sets the options to the
          corresponding values.

          The valid options/values are:

             *
              id
                    Returns the column name. This is a read-only option.

             *
              anchor: One of the standard Tk anchor values.
                    Specifies how the text in this column should be
                    aligned with respect to the cell.

             *
              minwidth: width
                    The minimum width of the column in pixels. The
                    treeview widget will not make the column any
                    smaller than specified by this option when the
                    widget is resized or the user drags a column.

             *
              stretch: True/False
                    Specifies whether the column’s width should be
                    adjusted when the widget is resized.

             *
              width: width
                    The width of the column in pixels.

          To configure the tree column, call this with column = “#0”

      -- Method: delete (*items)
          Delete all specified `items' and all their descendants.

          The root item may not be deleted.

      -- Method: detach (*items)
          Unlinks all of the specified `items' from the tree.

          The items and all of their descendants are still present, and
          may be reinserted at another point in the tree, but will not
          be displayed.

          The root item may not be detached.

      -- Method: exists (item)
          Returns `True' if the specified `item' is present in the tree.

      -- Method: focus ([item=None])
          If `item' is specified, sets the focus item to `item'.
          Otherwise, returns the current focus item, or ‘’ if there
          is none.

      -- Method: heading (column, option=None, **kw)
          Query or modify the heading options for the specified
          `column'.

          If `kw' is not given, returns a dict of the heading option
          values. If `option' is specified then the value for that
          `option' is returned.  Otherwise, sets the options to the
          corresponding values.

          The valid options/values are:

             *
              text: text
                    The text to display in the column heading.

             *
              image: imageName
                    Specifies an image to display to the right of the
                    column heading.

             *
              anchor: anchor
                    Specifies how the heading text should be aligned.
                    One of the standard Tk anchor values.

             *
              command: callback
                    A callback to be invoked when the heading label is
                    pressed.

          To configure the tree column heading, call this with column =
          “#0”.

      -- Method: identify (component, x, y)
          Returns a description of the specified `component' under the
          point given by `x' and `y', or the empty string if no such
          `component' is present at that position.

      -- Method: identify_row (y)
          Returns the item ID of the item at position `y'.

      -- Method: identify_column (x)
          Returns the data column identifier of the cell at position
          `x'.

          The tree column has ID #0.

      -- Method: identify_region (x, y)
          Returns one of:

          region          meaning
          ----------------------------------------------------------- 
          heading         Tree heading area.
          separator       Space between two columns headings.
          tree            The tree area.
          cell            A data cell.

          Availability: Tk 8.6.

      -- Method: identify_element (x, y)
          Returns the element at position `x', `y'.

          Availability: Tk 8.6.

      -- Method: index (item)
          Returns the integer index of `item' within its parent’s
          list of children.

      -- Method: insert (parent, index, iid=None, **kw)
          Creates a new item and returns the item identifier of the
          newly created item.

          `parent' is the item ID of the parent item, or the empty
          string to create a new top-level item. `index' is an integer,
          or the value “end”, specifying where in the list of
          parent’s children to insert the new item.  If `index' is
          less than or equal to zero, the new node is inserted at the
          beginning; if `index' is greater than or equal to the current
          number of children, it is inserted at the end. If `iid' is
          specified, it is used as the item identifier; `iid' must not
          already exist in the tree.  Otherwise, a new unique
          identifier is generated.

          See *Note Item Options: 2175. for the list of available
          points.

      -- Method: item (item[, option[, **kw]])
          Query or modify the options for the specified `item'.

          If no options are given, a dict with options/values for the
          item is returned.  If `option' is specified then the value
          for that option is returned.  Otherwise, sets the options to
          the corresponding values as given by `kw'.

      -- Method: move (item, parent, index)
          Moves `item' to position `index' in `parent'’s list of
          children.

          It is illegal to move an item under one of its descendants.
          If `index' is less than or equal to zero, `item' is moved to
          the beginning; if greater than or equal to the number of
          children, it is moved to the end. If `item' was detached it
          is reattached.

      -- Method: next (item)
          Returns the identifier of `item'’s next sibling, or ‘’
          if `item' is the last child of its parent.

      -- Method: parent (item)
          Returns the ID of the parent of `item', or ‘’ if `item'
          is at the top level of the hierarchy.

      -- Method: prev (item)
          Returns the identifier of `item'’s previous sibling, or
          ‘’ if `item' is the first child of its parent.

      -- Method: reattach (item, parent, index)
          An alias for *Note Treeview.move(): 218b.

      -- Method: see (item)
          Ensure that `item' is visible.

          Sets all of `item'’s ancestors open option to `True', and
          scrolls the widget if necessary so that `item' is within the
          visible portion of the tree.

      -- Method: selection ([selop=None[, items=None]])
          If `selop' is not specified, returns selected items.
          Otherwise, it will act according to the following selection
          methods.

      -- Method: selection_set (items)
          `items' becomes the new selection.

      -- Method: selection_add (items)
          Add `items' to the selection.

      -- Method: selection_remove (items)
          Remove `items' from the selection.

      -- Method: selection_toggle (items)
          Toggle the selection state of each item in `items'.

      -- Method: set (item, column=None, value=None)
          With one argument, returns a dictionary of column/value pairs
          for the specified `item'. With two arguments, returns the
          current value of the specified `column'. With three
          arguments, sets the value of given `column' in given `item'
          to the specified `value'.

      -- Method: tag_bind (tagname, sequence=None, callback=None)
          Bind a callback for the given event `sequence' to the tag
          `tagname'.  When an event is delivered to an item, the
          callbacks for each of the item’s tags option are called.

      -- Method: tag_configure (tagname, option=None, **kw)
          Query or modify the options for the specified `tagname'.

          If `kw' is not given, returns a dict of the option settings
          for `tagname'. If `option' is specified, returns the value
          for that `option' for the specified `tagname'. Otherwise,
          sets the options to the corresponding values for the given
          `tagname'.

      -- Method: tag_has (tagname[, item])
          If `item' is specified, returns 1 or 0 depending on whether
          the specified `item' has the given `tagname'. Otherwise,
          returns a list of all items that have the specified tag.

          Availability: Tk 8.6

      -- Method: xview (*args)
          Query or modify horizontal position of the treeview.

      -- Method: yview (*args)
          Query or modify vertical position of the treeview.


File: python.info,  Node: Ttk Styling,  Prev: Treeview,  Up: ttk — Tk themed widgets

5.24.2.35 Ttk Styling
.....................

Each widget in *Note ttk: 182. is assigned a style, which specifies the
set of elements making up the widget and how they are arranged, along
with dynamic and default settings for element options. By default the
style name is the same as the widget’s class name, but it may be
overridden by the widget’s style option. If the class name of a
widget is unknown, use the method `Misc.winfo_class()'
(somewidget.winfo_class()).

See also
........

Tcl'2004 conference presentation(1)
     This document explains how the theme engine works

 -- Class: ttk.Style
     This class is used to manipulate the style database.

      -- Method: configure (style, query_opt=None, **kw)
          Query or set the default value of the specified option(s) in
          `style'.

          Each key in `kw' is an option and each value is a string
          identifying the value for that option.

          For example, to change every default button to be a flat
          button with some padding and a different background color do:

              import ttk
              import Tkinter

              root = Tkinter.Tk()

              ttk.Style().configure("TButton", padding=6, relief="flat",
                 background="#ccc")

              btn = ttk.Button(text="Sample")
              btn.pack()

              root.mainloop()

      -- Method: map (style, query_opt=None, **kw)
          Query or sets dynamic values of the specified option(s) in
          `style'.

          Each key in `kw' is an option and each value should be a list
          or a tuple (usually) containing statespecs grouped in tuples,
          lists, or something else of your preference. A statespec is a
          compound of one or more states and then a value.

          An example:

              import Tkinter
              import ttk

              root = Tkinter.Tk()

              style = ttk.Style()
              style.map("C.TButton",
                  foreground=[('pressed', 'red'), ('active', 'blue')],
                  background=[('pressed', '!disabled', 'black'), ('active', 'white')]
                  )

              colored_btn = ttk.Button(text="Test", style="C.TButton").pack()

              root.mainloop()

          Note that the order of the (states, value) sequences for an
          option matters.  In the previous example, if you change the
          order to `[('active', 'blue'), ('pressed', 'red')]' in the
          foreground option, for example, you would get a blue
          foreground when the widget is in the active or pressed states.

      -- Method: lookup (style, option, state=None, default=None)
          Returns the value specified for `option' in `style'.

          If `state' is specified, it is expected to be a sequence of
          one or more states. If the `default' argument is set, it is
          used as a fallback value in case no specification for option
          is found.

          To check what font a Button uses by default, do:

              import ttk

              print ttk.Style().lookup("TButton", "font")

      -- Method: layout (style, layoutspec=None)
          Define the widget layout for given `style'. If `layoutspec'
          is omitted, return the layout specification for given style.

          `layoutspec', if specified, is expected to be a list or some
          other sequence type (excluding strings), where each item
          should be a tuple and the first item is the layout name and
          the second item should have the format described in *Note
          Layouts: 219d.

          To understand the format, see the following example (it is not
          intended to do anything useful):

              import ttk
              import Tkinter

              root = Tkinter.Tk()

              style = ttk.Style()
              style.layout("TMenubutton", [
                 ("Menubutton.background", None),
                 ("Menubutton.button", {"children":
                     [("Menubutton.focus", {"children":
                         [("Menubutton.padding", {"children":
                             [("Menubutton.label", {"side": "left", "expand": 1})]
                         })]
                     })]
                 }),
              ])

              mbtn = ttk.Menubutton(text='Text')
              mbtn.pack()
              root.mainloop()

      -- Method: element_create (elementname, etype, *args, **kw)
          Create a new element in the current theme, of the given
          `etype' which is expected to be either “image”,
          “from” or “vsapi”. The latter is only available in Tk
          8.6a for Windows XP and Vista and is not described here.

          If “image” is used, `args' should contain the default
          image name followed by statespec/value pairs (this is the
          imagespec), and `kw' may have the following options:

                  *
                   border=padding
                         padding is a list of up to four integers,
                         specifying the left, top, right, and bottom
                         borders, respectively.

                  *
                   height=height
                         Specifies a minimum height for the element. If
                         less than zero, the base image’s height is
                         used as a default.

                  *
                   padding=padding
                         Specifies the element’s interior padding.
                         Defaults to border’s value if not specified.

                  *
                   sticky=spec
                         Specifies how the image is placed within the
                         final parcel. spec contains zero or more
                         characters “n”, “s”, “w”, or
                         “e”.

                  *
                   width=width
                         Specifies a minimum width for the element. If
                         less than zero, the base image’s width is
                         used as a default.

          If “from” is used as the value of `etype', *Note
          element_create(): 219e. will clone an existing element.
          `args' is expected to contain a themename, from which the
          element will be cloned, and optionally an element to clone
          from.  If this element to clone from is not specified, an
          empty element will be used. `kw' is discarded.

      -- Method: element_names ()
          Returns the list of elements defined in the current theme.

      -- Method: element_options (elementname)
          Returns the list of `elementname'’s options.

      -- Method: theme_create (themename, parent=None, settings=None)
          Create a new theme.

          It is an error if `themename' already exists. If `parent' is
          specified, the new theme will inherit styles, elements and
          layouts from the parent theme. If `settings' are present they
          are expected to have the same syntax used for *Note
          theme_settings(): 21a2.

      -- Method: theme_settings (themename, settings)
          Temporarily sets the current theme to `themename', apply
          specified `settings' and then restore the previous theme.

          Each key in `settings' is a style and each value may contain
          the keys ‘configure’, ‘map’, ‘layout’ and
          ‘element create’ and they are expected to have the same
          format as specified by the methods *Note Style.configure():
          219a, *Note Style.map(): 2147, *Note Style.layout(): 219c. and
          *Note Style.element_create(): 219e. respectively.

          As an example, let’s change the Combobox for the default
          theme a bit:

              import ttk
              import Tkinter

              root = Tkinter.Tk()

              style = ttk.Style()
              style.theme_settings("default", {
                 "TCombobox": {
                     "configure": {"padding": 5},
                     "map": {
                         "background": [("active", "green2"),
                                        ("!disabled", "green4")],
                         "fieldbackground": [("!disabled", "green3")],
                         "foreground": [("focus", "OliveDrab1"),
                                        ("!disabled", "OliveDrab2")]
                     }
                 }
              })

              combo = ttk.Combobox().pack()

              root.mainloop()

      -- Method: theme_names ()
          Returns a list of all known themes.

      -- Method: theme_use ([themename])
          If `themename' is not given, returns the theme in use.
          Otherwise, sets the current theme to `themename', refreshes
          all widgets and emits a <<ThemeChanged>> event.

* Menu:

* Layouts::

---------- Footnotes ----------

(1) http://tktable.sourceforge.net/tile/tile-tcl2004.pdf

