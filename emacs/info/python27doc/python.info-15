This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: Installing your CGI script on a Unix system,  Next: Testing your CGI script,  Prev: Caring about security,  Up: cgi — Common Gateway Interface support

5.20.2.7 Installing your CGI script on a Unix system
....................................................

Read the documentation for your HTTP server and check with your local
system administrator to find the directory where CGI scripts should be
installed; usually this is in a directory `cgi-bin' in the server tree.

Make sure that your script is readable and executable by “others”;
the Unix file mode should be `0755' octal (use `chmod 0755 filename').
Make sure that the first line of the script contains `#!' starting in
column 1 followed by the pathname of the Python interpreter, for
instance:

    #!/usr/local/bin/python

Make sure the Python interpreter exists and is executable by
“others”.

Make sure that any files your script needs to read or write are
readable or writable, respectively, by “others” — their mode
should be `0644' for readable and `0666' for writable.  This is
because, for security reasons, the HTTP server executes your script as
user “nobody”, without any special privileges.  It can only read
(write, execute) files that everybody can read (write, execute).  The
current directory at execution time is also different (it is usually
the server’s cgi-bin directory) and the set of environment variables
is also different from what you get when you log in.  In particular,
don’t count on the shell’s search path for executables ( `PATH') or
the Python module search path ( *Note PYTHONPATH: 59b.) to be set to
anything interesting.

If you need to load modules from a directory which is not on Python’s
default module search path, you can change the path in your script,
before importing other modules.  For example:

    import sys
    sys.path.insert(0, "/usr/home/joe/lib/python")
    sys.path.insert(0, "/usr/local/lib/python")

(This way, the directory inserted last will be searched first!)

Instructions for non-Unix systems will vary; check your HTTP server’s
documentation (it will usually have a section on CGI scripts).


File: python.info,  Node: Testing your CGI script,  Next: Debugging CGI scripts,  Prev: Installing your CGI script on a Unix system,  Up: cgi — Common Gateway Interface support

5.20.2.8 Testing your CGI script
................................

Unfortunately, a CGI script will generally not run when you try it from
the command line, and a script that works perfectly from the command
line may fail mysteriously when run from the server.  There’s one
reason why you should still test your script from the command line: if
it contains a syntax error, the Python interpreter won’t execute it
at all, and the HTTP server will most likely send a cryptic error to
the client.

Assuming your script has no syntax errors, yet it does not work, you
have no choice but to read the next section.


File: python.info,  Node: Debugging CGI scripts,  Next: Common problems and solutions,  Prev: Testing your CGI script,  Up: cgi — Common Gateway Interface support

5.20.2.9 Debugging CGI scripts
..............................

First of all, check for trivial installation errors — reading the
section above on installing your CGI script carefully can save you a
lot of time.  If you wonder whether you have understood the
installation procedure correctly, try installing a copy of this module
file (`cgi.py') as a CGI script.  When invoked as a script, the file
will dump its environment and the contents of the form in HTML form.
Give it the right mode etc, and send it a request.  If it’s installed
in the standard `cgi-bin' directory, it should be possible to send it a
request by entering a URL into your browser of the form:

    http://yourhostname/cgi-bin/cgi.py?name=Joe+Blow&addr=At+Home

If this gives an error of type 404, the server cannot find the script
– perhaps you need to install it in a different directory.  If it
gives another error, there’s an installation problem that you should
fix before trying to go any further.  If you get a nicely formatted
listing of the environment and form content (in this example, the
fields should be listed as “addr” with value “At Home” and
“name” with value “Joe Blow”), the `cgi.py' script has been
installed correctly.  If you follow the same procedure for your own
script, you should now be able to debug it.

The next step could be to call the *Note cgi: 5c. module’s *Note
test(): 175. function from your script: replace its main code with the
single statement

    cgi.test()

This should produce the same results as those gotten from installing the
`cgi.py' file itself.

When an ordinary Python script raises an unhandled exception (for
whatever reason: of a typo in a module name, a file that can’t be
opened, etc.), the Python interpreter prints a nice traceback and
exits.  While the Python interpreter will still do this when your CGI
script raises an exception, most likely the traceback will end up in
one of the HTTP server’s log files, or be discarded altogether.

Fortunately, once you have managed to get your script to execute `some'
code, you can easily send tracebacks to the Web browser using the *Note
cgitb: 5e. module.  If you haven’t done so already, just add the
lines:

    import cgitb
    cgitb.enable()

to the top of your script.  Then try running it again; when a problem
occurs, you should see a detailed report that will likely make apparent
the cause of the crash.

If you suspect that there may be a problem in importing the *Note
cgitb: 5e. module, you can use an even more robust approach (which only
uses built-in modules):

    import sys
    sys.stderr = sys.stdout
    print "Content-Type: text/plain"
    print
    ...your code here...

This relies on the Python interpreter to print the traceback.  The
content type of the output is set to plain text, which disables all
HTML processing.  If your script works, the raw HTML will be displayed
by your client.  If it raises an exception, most likely after the first
two lines have been printed, a traceback will be displayed. Because no
HTML interpretation is going on, the traceback will be readable.


File: python.info,  Node: Common problems and solutions,  Prev: Debugging CGI scripts,  Up: cgi — Common Gateway Interface support

5.20.2.10 Common problems and solutions
.......................................

   * Most HTTP servers buffer the output from CGI scripts until the
     script is completed.  This means that it is not possible to
     display a progress report on the client’s display while the
     script is running.

   * Check the installation instructions above.

   * Check the HTTP server’s log files.  (`tail -f logfile' in a
     separate window may be useful!)

   * Always check a script for syntax errors first, by doing something
     like `python script.py'.

   * If your script does not have any syntax errors, try adding `import
     cgitb; cgitb.enable()' to the top of the script.

   * When invoking external programs, make sure they can be found.
     Usually, this means using absolute path names — `PATH' is
     usually not set to a very useful value in a CGI script.

   * When reading or writing external files, make sure they can be read
     or written by the userid under which your CGI script will be
     running: this is typically the userid under which the web server
     is running, or some explicitly specified userid for a web
     server’s `suexec' feature.

   * Don’t try to give a CGI script a set-uid mode.  This doesn’t
     work on most systems, and is a security liability as well.


File: python.info,  Node: cgitb — Traceback manager for CGI scripts,  Next: wsgiref — WSGI Utilities and Reference Implementation,  Prev: cgi — Common Gateway Interface support,  Up: Internet Protocols and Support

5.20.3 `cgitb' — Traceback manager for CGI scripts
----------------------------------------------------

New in version 2.2.

The *Note cgitb: 5e. module provides a special exception handler for
Python scripts.  (Its name is a bit misleading.  It was originally
designed to display extensive traceback information in HTML for CGI
scripts.  It was later generalized to also display this information in
plain text.)  After this module is activated, if an uncaught exception
occurs, a detailed, formatted report will be displayed.  The report
includes a traceback showing excerpts of the source code for each level,
as well as the values of the arguments and local variables to currently
running functions, to help you debug the problem.  Optionally, you can
save this information to a file instead of sending it to the browser.

To enable this feature, simply add this to the top of your CGI script:

    import cgitb
    cgitb.enable()

The options to the *Note enable(): 1c99. function control whether the
report is displayed in the browser and whether the report is logged to
a file for later analysis.

 -- Function: cgitb.enable ([display[, logdir[, context[, format]]]])
     This function causes the *Note cgitb: 5e. module to take over the
     interpreter’s default handling for exceptions by setting the
     value of *Note sys.excepthook: 4e9.

     The optional argument `display' defaults to `1' and can be set to
     `0' to suppress sending the traceback to the browser. If the
     argument `logdir' is present, the traceback reports are written to
     files.  The value of `logdir' should be a directory where these
     files will be placed. The optional argument `context' is the
     number of lines of context to display around the current line of
     source code in the traceback; this defaults to `5'. If the optional
     argument `format' is `"html"', the output is formatted as HTML.
     Any other value forces plain text output.  The default value is
     `"html"'.

 -- Function: cgitb.handler ([info])
     This function handles an exception using the default settings
     (that is, show a report in the browser, but don’t log to a
     file). This can be used when you’ve caught an exception and want
     to report it using *Note cgitb: 5e.  The optional `info' argument
     should be a 3-tuple containing an exception type, exception value,
     and traceback object, exactly like the tuple returned by *Note
     sys.exc_info(): 306.  If the `info' argument is not supplied, the
     current exception is obtained from *Note sys.exc_info(): 306.


File: python.info,  Node: wsgiref — WSGI Utilities and Reference Implementation,  Next: urllib — Open arbitrary resources by URL,  Prev: cgitb — Traceback manager for CGI scripts,  Up: Internet Protocols and Support

5.20.4 `wsgiref' — WSGI Utilities and Reference Implementation
----------------------------------------------------------------

New in version 2.5.

The Web Server Gateway Interface (WSGI) is a standard interface between
web server software and web applications written in Python. Having a
standard interface makes it easy to use an application that supports
WSGI with a number of different web servers.

Only authors of web servers and programming frameworks need to know
every detail and corner case of the WSGI design.  You don’t need to
understand every detail of WSGI just to install a WSGI application or
to write a web application using an existing framework.

*Note wsgiref: 199. is a reference implementation of the WSGI
specification that can be used to add WSGI support to a web server or
framework.  It provides utilities for manipulating WSGI environment
variables and response headers, base classes for implementing WSGI
servers, a demo HTTP server that serves WSGI applications, and a
validation tool that checks WSGI servers and applications for
conformance to the WSGI specification ( PEP 333(1)).

See <https://wsgi.readthedocs.org/> for more information about WSGI,
and links to tutorials and other resources.

* Menu:

* wsgiref.util – WSGI environment utilities: wsgiref util – WSGI environment utilities.
* wsgiref.headers – WSGI response header tools: wsgiref headers – WSGI response header tools.
* wsgiref.simple_server – a simple WSGI HTTP server: wsgiref simple_server – a simple WSGI HTTP server.
* wsgiref.validate — WSGI conformance checker: wsgiref validate — WSGI conformance checker.
* wsgiref.handlers – server/gateway base classes: wsgiref handlers – server/gateway base classes.
* Examples: Examples<11>.

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref util – WSGI environment utilities,  Next: wsgiref headers – WSGI response header tools,  Up: wsgiref — WSGI Utilities and Reference Implementation

5.20.4.1 `wsgiref.util' – WSGI environment utilities
......................................................

This module provides a variety of utility functions for working with
WSGI environments.  A WSGI environment is a dictionary containing HTTP
request variables as described in PEP 333(1).  All of the functions
taking an `environ' parameter expect a WSGI-compliant dictionary to be
supplied; please see PEP 333(2) for a detailed specification.

 -- Function: wsgiref.util.guess_scheme (environ)
     Return a guess for whether `wsgi.url_scheme' should be “http”
     or “https”, by checking for a `HTTPS' environment variable in
     the `environ' dictionary.  The return value is a string.

     This function is useful when creating a gateway that wraps CGI or
     a CGI-like protocol such as FastCGI.  Typically, servers providing
     such protocols will include a `HTTPS' variable with a value of
     “1” “yes”, or “on” when a request is received via SSL.
     So, this function returns “https” if such a value is found,
     and “http” otherwise.

 -- Function: wsgiref.util.request_uri (environ, include_query=1)
     Return the full request URI, optionally including the query
     string, using the algorithm found in the “URL Reconstruction”
     section of PEP 333(3).  If `include_query' is false, the query
     string is not included in the resulting URI.

 -- Function: wsgiref.util.application_uri (environ)
     Similar to *Note request_uri(): 1c9f, except that the `PATH_INFO'
     and `QUERY_STRING' variables are ignored.  The result is the base
     URI of the application object addressed by the request.

 -- Function: wsgiref.util.shift_path_info (environ)
     Shift a single name from `PATH_INFO' to `SCRIPT_NAME' and return
     the name.  The `environ' dictionary is `modified' in-place; use a
     copy if you need to keep the original `PATH_INFO' or `SCRIPT_NAME'
     intact.

     If there are no remaining path segments in `PATH_INFO', `None' is
     returned.

     Typically, this routine is used to process each portion of a
     request URI path, for example to treat the path as a series of
     dictionary keys. This routine modifies the passed-in environment
     to make it suitable for invoking another WSGI application that is
     located at the target URI. For example, if there is a WSGI
     application at `/foo', and the request URI path is `/foo/bar/baz',
     and the WSGI application at `/foo' calls *Note shift_path_info():
     1ca1, it will receive the string “bar”, and the environment
     will be updated to be suitable for passing to a WSGI application
     at `/foo/bar'.  That is, `SCRIPT_NAME' will change from `/foo' to
     `/foo/bar', and `PATH_INFO' will change from `/bar/baz' to `/baz'.

     When `PATH_INFO' is just a “/”, this routine returns an empty
     string and appends a trailing slash to `SCRIPT_NAME', even though
     empty path segments are normally ignored, and `SCRIPT_NAME'
     doesn’t normally end in a slash.  This is intentional behavior,
     to ensure that an application can tell the difference between URIs
     ending in `/x' from ones ending in `/x/' when using this routine
     to do object traversal.

 -- Function: wsgiref.util.setup_testing_defaults (environ)
     Update `environ' with trivial defaults for testing purposes.

     This routine adds various parameters required for WSGI, including
     `HTTP_HOST', `SERVER_NAME', `SERVER_PORT', `REQUEST_METHOD',
     `SCRIPT_NAME', `PATH_INFO', and all of the PEP 333(4)-defined
     `wsgi.*' variables.  It only supplies default values, and does not
     replace any existing settings for these variables.

     This routine is intended to make it easier for unit tests of WSGI
     servers and applications to set up dummy environments.  It should
     NOT be used by actual WSGI servers or applications, since the data
     is fake!

     Example usage:

         from wsgiref.util import setup_testing_defaults
         from wsgiref.simple_server import make_server

         # A relatively simple WSGI application. It's going to print out the
         # environment dictionary after being updated by setup_testing_defaults
         def simple_app(environ, start_response):
             setup_testing_defaults(environ)

             status = '200 OK'
             headers = [('Content-type', 'text/plain')]

             start_response(status, headers)

             ret = ["%s: %s\n" % (key, value)
                    for key, value in environ.iteritems()]
             return ret

         httpd = make_server('', 8000, simple_app)
         print "Serving on port 8000..."
         httpd.serve_forever()

In addition to the environment functions above, the *Note wsgiref.util:
19d. module also provides these miscellaneous utilities:

 -- Function: wsgiref.util.is_hop_by_hop (header_name)
     Return true if ‘header_name’ is an HTTP/1.1 “Hop-by-Hop”
     header, as defined by RFC 2616(5).

 -- Class: wsgiref.util.FileWrapper (filelike, blksize=8192)
     A wrapper to convert a file-like object to an *Note iterator: 8a8.
     The resulting objects support both *Note __getitem__(): 468. and
     *Note __iter__(): 335. iteration styles, for compatibility with
     Python 2.1 and Jython. As the object is iterated over, the
     optional `blksize' parameter will be repeatedly passed to the
     `filelike' object’s `read()' method to obtain strings to yield.
     When `read()' returns an empty string, iteration is ended and is
     not resumable.

     If `filelike' has a `close()' method, the returned object will
     also have a `close()' method, and it will invoke the `filelike'
     object’s `close()' method when called.

     Example usage:

         from StringIO import StringIO
         from wsgiref.util import FileWrapper

         # We're using a StringIO-buffer for as the file-like object
         filelike = StringIO("This is an example file-like object"*10)
         wrapper = FileWrapper(filelike, blksize=5)

         for chunk in wrapper:
             print chunk

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0333

(2) https://www.python.org/dev/peps/pep-0333

(3) https://www.python.org/dev/peps/pep-0333

(4) https://www.python.org/dev/peps/pep-0333

(5) https://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: wsgiref headers – WSGI response header tools,  Next: wsgiref simple_server – a simple WSGI HTTP server,  Prev: wsgiref util – WSGI environment utilities,  Up: wsgiref — WSGI Utilities and Reference Implementation

5.20.4.2 `wsgiref.headers' – WSGI response header tools
.........................................................

This module provides a single class, *Note Headers: 1ca6, for convenient
manipulation of WSGI response headers using a mapping-like interface.

 -- Class: wsgiref.headers.Headers (headers)
     Create a mapping-like object wrapping `headers', which must be a
     list of header name/value tuples as described in PEP 333(1).  Any
     changes made to the new *Note Headers: 1ca6. object will directly
     update the `headers' list it was created with.

     *Note Headers: 1ca6. objects support typical mapping operations
     including *Note __getitem__(): 468, `get()', *Note __setitem__():
     481, `setdefault()', *Note __delitem__(): 482, *Note
     __contains__(): 336. and `has_key()'.  For each of these methods,
     the key is the header name (treated case-insensitively), and the
     value is the first value associated with that header name.
     Setting a header deletes any existing values for that header, then
     adds a new value at the end of the wrapped header list.
     Headers’ existing order is generally maintained, with new
     headers added to the end of the wrapped list.

     Unlike a dictionary, *Note Headers: 1ca6. objects do not raise an
     error when you try to get or delete a key that isn’t in the
     wrapped header list. Getting a nonexistent header just returns
     `None', and deleting a nonexistent header does nothing.

     *Note Headers: 1ca6. objects also support `keys()', `values()', and
     `items()' methods.  The lists returned by `keys()' and `items()'
     can include the same key more than once if there is a multi-valued
     header.  The `len()' of a *Note Headers: 1ca6. object is the same
     as the length of its `items()', which is the same as the length of
     the wrapped header list.  In fact, the `items()' method just
     returns a copy of the wrapped header list.

     Calling `str()' on a *Note Headers: 1ca6. object returns a
     formatted string suitable for transmission as HTTP response
     headers.  Each header is placed on a line with its value,
     separated by a colon and a space. Each line is terminated by a
     carriage return and line feed, and the string is terminated with a
     blank line.

     In addition to their mapping interface and formatting features,
     *Note Headers: 1ca6.  objects also have the following methods for
     querying and adding multi-valued headers, and for adding headers
     with MIME parameters:

      -- Method: get_all (name)
          Return a list of all the values for the named header.

          The returned list will be sorted in the order they appeared
          in the original header list or were added to this instance,
          and may contain duplicates.  Any fields deleted and
          re-inserted are always appended to the header list.  If no
          fields exist with the given name, returns an empty list.

      -- Method: add_header (name, value, **_params)
          Add a (possibly multi-valued) header, with optional MIME
          parameters specified via keyword arguments.

          `name' is the header field to add.  Keyword arguments can be
          used to set MIME parameters for the header field.  Each
          parameter must be a string or `None'.  Underscores in
          parameter names are converted to dashes, since dashes are
          illegal in Python identifiers, but many MIME parameter names
          include dashes.  If the parameter value is a string, it is
          added to the header value parameters in the form
          `name="value"'. If it is `None', only the parameter name is
          added.  (This is used for MIME parameters without a value.)
          Example usage:

              h.add_header('content-disposition', 'attachment', filename='bud.gif')

          The above will add a header that looks like this:

              Content-Disposition: attachment; filename="bud.gif"

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref simple_server – a simple WSGI HTTP server,  Next: wsgiref validate — WSGI conformance checker,  Prev: wsgiref headers – WSGI response header tools,  Up: wsgiref — WSGI Utilities and Reference Implementation

5.20.4.3 `wsgiref.simple_server' – a simple WSGI HTTP server
..............................................................

This module implements a simple HTTP server (based on *Note
BaseHTTPServer: 16.)  that serves WSGI applications.  Each server
instance serves a single WSGI application on a given host and port.  If
you want to serve multiple applications on a single host and port, you
should create a WSGI application that parses `PATH_INFO' to select
which application to invoke for each request.  (E.g., using the
`shift_path_info()' function from *Note wsgiref.util: 19d.)

 -- Function: wsgiref.simple_server.make_server (host, port, app,
          server_class=WSGIServer, handler_class=WSGIRequestHandler)
     Create a new WSGI server listening on `host' and `port', accepting
     connections for `app'.  The return value is an instance of the
     supplied `server_class', and will process requests using the
     specified `handler_class'.  `app' must be a WSGI application
     object, as defined by PEP 333(1).

     Example usage:

         from wsgiref.simple_server import make_server, demo_app

         httpd = make_server('', 8000, demo_app)
         print "Serving HTTP on port 8000..."

         # Respond to requests until process is killed
         httpd.serve_forever()

         # Alternative: serve one request, then exit
         httpd.handle_request()

 -- Function: wsgiref.simple_server.demo_app (environ, start_response)
     This function is a small but complete WSGI application that
     returns a text page containing the message “Hello world!” and
     a list of the key/value pairs provided in the `environ' parameter.
     It’s useful for verifying that a WSGI server (such as *Note
     wsgiref.simple_server: 19c.) is able to run a simple WSGI
     application correctly.

 -- Class: wsgiref.simple_server.WSGIServer (server_address,
          RequestHandlerClass)
     Create a *Note WSGIServer: 1cac. instance.  `server_address'
     should be a `(host,port)' tuple, and `RequestHandlerClass' should
     be the subclass of *Note BaseHTTPServer.BaseHTTPRequestHandler:
     1cad. that will be used to process requests.

     You do not normally need to call this constructor, as the *Note
     make_server(): 1caa.  function can handle all the details for you.

     *Note WSGIServer: 1cac. is a subclass of *Note
     BaseHTTPServer.HTTPServer: 1cae, so all of its methods (such as
     `serve_forever()' and `handle_request()') are available. *Note
     WSGIServer: 1cac. also provides these WSGI-specific methods:

      -- Method: set_app (application)
          Sets the callable `application' as the WSGI application that
          will receive requests.

      -- Method: get_app ()
          Returns the currently-set application callable.

     Normally, however, you do not need to use these additional
     methods, as *Note set_app(): 1caf. is normally called by *Note
     make_server(): 1caa, and the *Note get_app(): 1cb0. exists mainly
     for the benefit of request handler instances.

 -- Class: wsgiref.simple_server.WSGIRequestHandler (request,
          client_address, server)
     Create an HTTP handler for the given `request' (i.e. a socket),
     `client_address' (a `(host,port)' tuple), and `server' (*Note
     WSGIServer: 1cac. instance).

     You do not need to create instances of this class directly; they
     are automatically created as needed by *Note WSGIServer: 1cac.
     objects.  You can, however, subclass this class and supply it as a
     `handler_class' to the *Note make_server(): 1caa. function.  Some
     possibly relevant methods for overriding in subclasses:

      -- Method: get_environ ()
          Returns a dictionary containing the WSGI environment for a
          request.  The default implementation copies the contents of
          the *Note WSGIServer: 1cac. object’s `base_environ'
          dictionary attribute and then adds various headers derived
          from the HTTP request.  Each call to this method should
          return a new dictionary containing all of the relevant CGI
          environment variables as specified in PEP 333(2).

      -- Method: get_stderr ()
          Return the object that should be used as the `wsgi.errors'
          stream. The default implementation just returns `sys.stderr'.

      -- Method: handle ()
          Process the HTTP request.  The default implementation creates
          a handler instance using a *Note wsgiref.handlers: 19a. class
          to implement the actual WSGI application interface.

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0333

(2) https://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref validate — WSGI conformance checker,  Next: wsgiref handlers – server/gateway base classes,  Prev: wsgiref simple_server – a simple WSGI HTTP server,  Up: wsgiref — WSGI Utilities and Reference Implementation

5.20.4.4 `wsgiref.validate' — WSGI conformance checker
........................................................

When creating new WSGI application objects, frameworks, servers, or
middleware, it can be useful to validate the new code’s conformance
using *Note wsgiref.validate: 19e.  This module provides a function
that creates WSGI application objects that validate communications
between a WSGI server or gateway and a WSGI application object, to
check both sides for protocol conformance.

Note that this utility does not guarantee complete PEP 333(1)
compliance; an absence of errors from this module does not necessarily
mean that errors do not exist.  However, if this module does produce an
error, then it is virtually certain that either the server or
application is not 100% compliant.

This module is based on the `paste.lint' module from Ian Bicking’s
“Python Paste” library.

 -- Function: wsgiref.validate.validator (application)
     Wrap `application' and return a new WSGI application object.  The
     returned application will forward all requests to the original
     `application', and will check that both the `application' and the
     server invoking it are conforming to the WSGI specification and to
     RFC 2616.

     Any detected nonconformance results in an *Note AssertionError:
     834. being raised; note, however, that how these errors are
     handled is server-dependent.  For example, *Note
     wsgiref.simple_server: 19c. and other servers based on *Note
     wsgiref.handlers: 19a. (that don’t override the error handling
     methods to do something else) will simply output a message that an
     error has occurred, and dump the traceback to `sys.stderr' or some
     other error stream.

     This wrapper may also generate output using the *Note warnings:
     193. module to indicate behaviors that are questionable but which
     may not actually be prohibited by PEP 333(2).  Unless they are
     suppressed using Python command-line options or the *Note
     warnings: 193. API, any such warnings will be written to
     `sys.stderr' (`not' `wsgi.errors', unless they happen to be the
     same object).

     Example usage:

         from wsgiref.validate import validator
         from wsgiref.simple_server import make_server

         # Our callable object which is intentionally not compliant to the
         # standard, so the validator is going to break
         def simple_app(environ, start_response):
             status = '200 OK'  # HTTP Status
             headers = [('Content-type', 'text/plain')]  # HTTP Headers
             start_response(status, headers)

             # This is going to break because we need to return a list, and
             # the validator is going to inform us
             return "Hello World"

         # This is the application wrapped in a validator
         validator_app = validator(simple_app)

         httpd = make_server('', 8000, validator_app)
         print "Listening on port 8000...."
         httpd.serve_forever()

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0333

(2) https://www.python.org/dev/peps/pep-0333


File: python.info,  Node: wsgiref handlers – server/gateway base classes,  Next: Examples<11>,  Prev: wsgiref validate — WSGI conformance checker,  Up: wsgiref — WSGI Utilities and Reference Implementation

5.20.4.5 `wsgiref.handlers' – server/gateway base classes
...........................................................

This module provides base handler classes for implementing WSGI servers
and gateways.  These base classes handle most of the work of
communicating with a WSGI application, as long as they are given a
CGI-like environment, along with input, output, and error streams.

 -- Class: wsgiref.handlers.CGIHandler
     CGI-based invocation via `sys.stdin', `sys.stdout', `sys.stderr'
     and `os.environ'.  This is useful when you have a WSGI application
     and want to run it as a CGI script.  Simply invoke
     `CGIHandler().run(app)', where `app' is the WSGI application
     object you wish to invoke.

     This class is a subclass of *Note BaseCGIHandler: 1cb9. that sets
     `wsgi.run_once' to true, `wsgi.multithread' to false, and
     `wsgi.multiprocess' to true, and always uses *Note sys: 16d. and
     *Note os: 129. to obtain the necessary CGI streams and environment.

 -- Class: wsgiref.handlers.BaseCGIHandler (stdin, stdout, stderr,
          environ, multithread=True, multiprocess=False)
     Similar to *Note CGIHandler: 1cb8, but instead of using the *Note
     sys: 16d. and *Note os: 129. modules, the CGI environment and I/O
     streams are specified explicitly.  The `multithread' and
     `multiprocess' values are used to set the `wsgi.multithread' and
     `wsgi.multiprocess' flags for any applications run by the handler
     instance.

     This class is a subclass of *Note SimpleHandler: 1cba. intended
     for use with software other than HTTP “origin servers”.  If
     you are writing a gateway protocol implementation (such as CGI,
     FastCGI, SCGI, etc.) that uses a `Status:' header to send an HTTP
     status, you probably want to subclass this instead of *Note
     SimpleHandler: 1cba.

 -- Class: wsgiref.handlers.SimpleHandler (stdin, stdout, stderr,
          environ, multithread=True, multiprocess=False)
     Similar to *Note BaseCGIHandler: 1cb9, but designed for use with
     HTTP origin servers.  If you are writing an HTTP server
     implementation, you will probably want to subclass this instead of
     *Note BaseCGIHandler: 1cb9.

     This class is a subclass of *Note BaseHandler: 1cbb.  It overrides
     the *Note __init__(): 394, `get_stdin()', `get_stderr()',
     `add_cgi_vars()', `_write()', and `_flush()' methods to support
     explicitly setting the environment and streams via the
     constructor.  The supplied environment and streams are stored in
     the `stdin', `stdout', `stderr', and `environ' attributes.

 -- Class: wsgiref.handlers.BaseHandler
     This is an abstract base class for running WSGI applications.
     Each instance will handle a single HTTP request, although in
     principle you could create a subclass that was reusable for
     multiple requests.

     *Note BaseHandler: 1cbb. instances have only one method intended
     for external use:

      -- Method: run (app)
          Run the specified WSGI application, `app'.

     All of the other *Note BaseHandler: 1cbb. methods are invoked by
     this method in the process of running the application, and thus
     exist primarily to allow customizing the process.

     The following methods MUST be overridden in a subclass:

      -- Method: _write (data)
          Buffer the string `data' for transmission to the client.
          It’s okay if this method actually transmits the data; *Note
          BaseHandler: 1cbb. just separates write and flush operations
          for greater efficiency when the underlying system actually
          has such a distinction.

      -- Method: _flush ()
          Force buffered data to be transmitted to the client.  It’s
          okay if this method is a no-op (i.e., if *Note _write():
          1cbd. actually sends the data).

      -- Method: get_stdin ()
          Return an input stream object suitable for use as the
          `wsgi.input' of the request currently being processed.

      -- Method: get_stderr ()
          Return an output stream object suitable for use as the
          `wsgi.errors' of the request currently being processed.

      -- Method: add_cgi_vars ()
          Insert CGI variables for the current request into the
          `environ' attribute.

     Here are some other methods and attributes you may wish to
     override. This list is only a summary, however, and does not
     include every method that can be overridden.  You should consult
     the docstrings and source code for additional information before
     attempting to create a customized *Note BaseHandler: 1cbb.
     subclass.

     Attributes and methods for customizing the WSGI environment:

      -- Attribute: wsgi_multithread
          The value to be used for the `wsgi.multithread' environment
          variable.  It defaults to true in *Note BaseHandler: 1cbb,
          but may have a different default (or be set by the
          constructor) in the other subclasses.

      -- Attribute: wsgi_multiprocess
          The value to be used for the `wsgi.multiprocess' environment
          variable.  It defaults to true in *Note BaseHandler: 1cbb,
          but may have a different default (or be set by the
          constructor) in the other subclasses.

      -- Attribute: wsgi_run_once
          The value to be used for the `wsgi.run_once' environment
          variable.  It defaults to false in *Note BaseHandler: 1cbb,
          but *Note CGIHandler: 1cb8. sets it to true by default.

      -- Attribute: os_environ
          The default environment variables to be included in every
          request’s WSGI environment.  By default, this is a copy of
          `os.environ' at the time that *Note wsgiref.handlers: 19a.
          was imported, but subclasses can either create their own at
          the class or instance level.  Note that the dictionary should
          be considered read-only, since the default value is shared
          between multiple classes and instances.

      -- Attribute: server_software
          If the *Note origin_server: 1cc7. attribute is set, this
          attribute’s value is used to set the default
          `SERVER_SOFTWARE' WSGI environment variable, and also to set a
          default `Server:' header in HTTP responses.  It is ignored
          for handlers (such as *Note BaseCGIHandler: 1cb9. and *Note
          CGIHandler: 1cb8.) that are not HTTP origin servers.

      -- Method: get_scheme ()
          Return the URL scheme being used for the current request.
          The default implementation uses the `guess_scheme()' function
          from *Note wsgiref.util: 19d.  to guess whether the scheme
          should be “http” or “https”, based on the current
          request’s `environ' variables.

      -- Method: setup_environ ()
          Set the `environ' attribute to a fully-populated WSGI
          environment.  The default implementation uses all of the
          above methods and attributes, plus the *Note get_stdin():
          1cbf, *Note get_stderr(): 1cc0, and *Note add_cgi_vars():
          1cc1. methods and the *Note wsgi_file_wrapper: 1cca.
          attribute.  It also inserts a `SERVER_SOFTWARE' key if not
          present, as long as the *Note origin_server: 1cc7. attribute
          is a true value and the *Note server_software: 1cc6.
          attribute is set.

     Methods and attributes for customizing exception handling:

      -- Method: log_exception (exc_info)
          Log the `exc_info' tuple in the server log.  `exc_info' is a
          `(type, value, traceback)' tuple.  The default implementation
          simply writes the traceback to the request’s `wsgi.errors'
          stream and flushes it.  Subclasses can override this method
          to change the format or retarget the output, mail the
          traceback to an administrator, or whatever other action may
          be deemed suitable.

      -- Attribute: traceback_limit
          The maximum number of frames to include in tracebacks output
          by the default *Note log_exception(): 1ccb. method.  If
          `None', all frames are included.

      -- Method: error_output (environ, start_response)
          This method is a WSGI application to generate an error page
          for the user.  It is only invoked if an error occurs before
          headers are sent to the client.

          This method can access the current error information using
          `sys.exc_info()', and should pass that information to
          `start_response' when calling it (as described in the
          “Error Handling” section of PEP 333(1)).

          The default implementation just uses the *Note error_status:
          1cce, *Note error_headers: 1ccf, and *Note error_body: 1cd0.
          attributes to generate an output page.  Subclasses can
          override this to produce more dynamic error output.

          Note, however, that it’s not recommended from a security
          perspective to spit out diagnostics to any old user; ideally,
          you should have to do something special to enable diagnostic
          output, which is why the default implementation doesn’t
          include any.

      -- Attribute: error_status
          The HTTP status used for error responses.  This should be a
          status string as defined in PEP 333(2); it defaults to a 500
          code and message.

      -- Attribute: error_headers
          The HTTP headers used for error responses.  This should be a
          list of WSGI response headers (`(name, value)' tuples), as
          described in PEP 333(3).  The default list just sets the
          content type to `text/plain'.

      -- Attribute: error_body
          The error response body.  This should be an HTTP response
          body string. It defaults to the plain text, “A server error
          occurred.  Please contact the administrator.”

     Methods and attributes for PEP 333(4)’s “Optional
     Platform-Specific File Handling” feature:

      -- Attribute: wsgi_file_wrapper
          A `wsgi.file_wrapper' factory, or `None'.  The default value
          of this attribute is the `FileWrapper' class from *Note
          wsgiref.util: 19d.

      -- Method: sendfile ()
          Override to implement platform-specific file transmission.
          This method is called only if the application’s return
          value is an instance of the class specified by the *Note
          wsgi_file_wrapper: 1cca. attribute.  It should return a true
          value if it was able to successfully transmit the file, so
          that the default transmission code will not be executed. The
          default implementation of this method just returns a false
          value.

     Miscellaneous methods and attributes:

      -- Attribute: origin_server
          This attribute should be set to a true value if the
          handler’s *Note _write(): 1cbd. and *Note _flush(): 1cbe.
          are being used to communicate directly to the client, rather
          than via a CGI-like gateway protocol that wants the HTTP
          status in a special `Status:' header.

          This attribute’s default value is true in *Note
          BaseHandler: 1cbb, but false in *Note BaseCGIHandler: 1cb9.
          and *Note CGIHandler: 1cb8.

      -- Attribute: http_version
          If *Note origin_server: 1cc7. is true, this string attribute
          is used to set the HTTP version of the response set to the
          client.  It defaults to `"1.0"'.

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0333

(2) https://www.python.org/dev/peps/pep-0333

(3) https://www.python.org/dev/peps/pep-0333

(4) https://www.python.org/dev/peps/pep-0333


File: python.info,  Node: Examples<11>,  Prev: wsgiref handlers – server/gateway base classes,  Up: wsgiref — WSGI Utilities and Reference Implementation

5.20.4.6 Examples
.................

This is a working “Hello World” WSGI application:

    from wsgiref.simple_server import make_server

    # Every WSGI application must have an application object - a callable
    # object that accepts two arguments. For that purpose, we're going to
    # use a function (note that you're not limited to a function, you can
    # use a class for example). The first argument passed to the function
    # is a dictionary containing CGI-style environment variables and the
    # second variable is the callable object (see PEP 333).
    def hello_world_app(environ, start_response):
        status = '200 OK'  # HTTP Status
        headers = [('Content-type', 'text/plain')]  # HTTP Headers
        start_response(status, headers)

        # The returned object is going to be printed
        return ["Hello World"]

    httpd = make_server('', 8000, hello_world_app)
    print "Serving on port 8000..."

    # Serve until process is killed
    httpd.serve_forever()


File: python.info,  Node: urllib — Open arbitrary resources by URL,  Next: urllib2 — extensible library for opening URLs,  Prev: wsgiref — WSGI Utilities and Reference Implementation,  Up: Internet Protocols and Support

5.20.5 `urllib' — Open arbitrary resources by URL
---------------------------------------------------

     Note: The *Note urllib: 188. module has been split into parts and
     renamed in Python 3 to `urllib.request', `urllib.parse', and
     `urllib.error'. The *Note 2to3: c05. tool will automatically adapt
     imports when converting your sources to Python 3.  Also note that
     the `urllib.request.urlopen()' function in Python 3 is equivalent
     to *Note urllib2.urlopen(): 371. and that *Note urllib.urlopen():
     370. has been removed.

This module provides a high-level interface for fetching data across
the World Wide Web.  In particular, the *Note urlopen(): 370. function
is similar to the built-in function *Note open(): 2d9, but accepts
Universal Resource Locators (URLs) instead of filenames.  Some
restrictions apply — it can only open URLs for reading, and no seek
operations are available.

See also
........

The Requests package(1) is recommended for a higher-level HTTP client
interface.

     Warning: When opening HTTPS URLs, it does not attempt to validate
     the server certificate.  Use at your own risk!

* Menu:

* High-level interface::
* Utility functions: Utility functions<2>.
* URL Opener objects::
* urllib Restrictions::
* Examples: Examples<12>.

---------- Footnotes ----------

(1) http://requests.readthedocs.org/


File: python.info,  Node: High-level interface,  Next: Utility functions<2>,  Up: urllib — Open arbitrary resources by URL

5.20.5.1 High-level interface
.............................

 -- Function: urllib.urlopen (url[, data[, proxies[, context]]])
     Open a network object denoted by a URL for reading.  If the URL
     does not have a scheme identifier, or if it has `file:' as its
     scheme identifier, this opens a local file (without *Note
     universal newlines: 329.); otherwise it opens a socket to a server
     somewhere on the network.  If the connection cannot be made the
     *Note IOError: 1fa. exception is raised.  If all went well, a
     file-like object is returned.  This supports the following
     methods: `read()', *Note readline(): 145, `readlines()',
     `fileno()', `close()', `info()', `getcode()' and `geturl()'.  It
     also has proper support for the *Note iterator: 8a8. protocol. One
     caveat: the `read()' method, if the size argument is omitted or
     negative, may not read until the end of the data stream; there is
     no good way to determine that the entire stream from a socket has
     been read in the general case.

     Except for the `info()', `getcode()' and `geturl()' methods, these
     methods have the same interface as for file objects — see section
     *Note File Objects: 66e. in this manual.  (It is not a built-in
     file object, however, so it can’t be used at those few places
     where a true built-in file object is required.)

     The `info()' method returns an instance of the class *Note
     mimetools.Message: 19b0. containing meta-information associated
     with the URL.  When the method is HTTP, these headers are those
     returned by the server at the head of the retrieved HTML page
     (including Content-Length and Content-Type).  When the method is
     FTP, a Content-Length header will be present if (as is now usual)
     the server passed back a file length in response to the FTP
     retrieval request. A Content-Type header will be present if the
     MIME type can be guessed.  When the method is local-file, returned
     headers will include a Date representing the file’s
     last-modified time, a Content-Length giving file size, and a
     Content-Type containing a guess at the file’s type. See also the
     description of the *Note mimetools: 110. module.

     The `geturl()' method returns the real URL of the page.  In some
     cases, the HTTP server redirects a client to another URL.  The
     *Note urlopen(): 370. function handles this transparently, but in
     some cases the caller needs to know which URL the client was
     redirected to.  The `geturl()' method can be used to get at this
     redirected URL.

     The `getcode()' method returns the HTTP status code that was sent
     with the response, or `None' if the URL is no HTTP URL.

     If the `url' uses the `http:' scheme identifier, the optional
     `data' argument may be given to specify a `POST' request (normally
     the request type is `GET').  The `data' argument must be in
     standard `application/x-www-form-urlencoded' format; see the *Note
     urlencode(): 13b7.  function below.

     The *Note urlopen(): 370. function works transparently with
     proxies which do not require authentication.  In a Unix or Windows
     environment, set the `http_proxy', or `ftp_proxy' environment
     variables to a URL that identifies the proxy server before
     starting the Python interpreter.  For example (the `'%'' is the
     command prompt):

         % http_proxy="http://www.someproxy.com:3128"
         % export http_proxy
         % python
         ...

     The `no_proxy' environment variable can be used to specify hosts
     which shouldn’t be reached via proxy; if set, it should be a
     comma-separated list of hostname suffixes, optionally with `:port'
     appended, for example `cern.ch,ncsa.uiuc.edu,some.host:8080'.

     In a Windows environment, if no proxy environment variables are
     set, proxy settings are obtained from the registry’s Internet
     Settings section.

     In a Mac OS X  environment, *Note urlopen(): 370. will retrieve
     proxy information from the OS X System Configuration Framework,
     which can be managed with Network System Preferences panel.

     Alternatively, the optional `proxies' argument may be used to
     explicitly specify proxies.  It must be a dictionary mapping
     scheme names to proxy URLs, where an empty dictionary causes no
     proxies to be used, and `None' (the default value) causes
     environmental proxy settings to be used as discussed above.  For
     example:

         # Use http://www.someproxy.com:3128 for HTTP proxying
         proxies = {'http': 'http://www.someproxy.com:3128'}
         filehandle = urllib.urlopen(some_url, proxies=proxies)
         # Don't use any proxies
         filehandle = urllib.urlopen(some_url, proxies={})
         # Use proxies from environment - both versions are equivalent
         filehandle = urllib.urlopen(some_url, proxies=None)
         filehandle = urllib.urlopen(some_url)

     Proxies which require authentication for use are not currently
     supported; this is considered an implementation limitation.

     The `context' parameter may be set to a *Note ssl.SSLContext: 2e5.
     instance to configure the SSL settings that are used if *Note
     urlopen(): 370. makes a HTTPS connection.

     Changed in version 2.3: Added the `proxies' support.

     Changed in version 2.6: Added `getcode()' to returned object and
     support for the `no_proxy' environment variable.

     Changed in version 2.7.9: The `context' parameter was added.

     Deprecated since version 2.6: The *Note urlopen(): 370. function
     has been removed in Python 3 in favor of *Note urllib2.urlopen():
     371.


 -- Function: urllib.urlretrieve (url[, filename[, reporthook[, data]]])
     Copy a network object denoted by a URL to a local file, if
     necessary. If the URL points to a local file, or a valid cached
     copy of the object exists, the object is not copied.  Return a
     tuple `(filename, headers)' where `filename' is the local file
     name under which the object can be found, and `headers' is whatever
     the `info()' method of the object returned by *Note urlopen():
     370. returned (for a remote object, possibly cached). Exceptions
     are the same as for *Note urlopen(): 370.

     The second argument, if present, specifies the file location to
     copy to (if absent, the location will be a tempfile with a
     generated name). The third argument, if present, is a hook
     function that will be called once on establishment of the network
     connection and once after each block read thereafter.  The hook
     will be passed three arguments; a count of blocks transferred so
     far, a block size in bytes, and the total size of the file.  The
     third argument may be `-1' on older FTP servers which do not
     return a file size in response to a retrieval request.

     If the `url' uses the `http:' scheme identifier, the optional
     `data' argument may be given to specify a `POST' request (normally
     the request type is `GET').  The `data' argument must in standard
     `application/x-www-form-urlencoded' format; see the *Note
     urlencode(): 13b7.  function below.

     Changed in version 2.5: *Note urlretrieve(): 1cd7. will raise
     *Note ContentTooShortError: 1cd8. when it detects that the amount
     of data available  was less than the expected amount (which is the
     size reported by a  `Content-Length' header). This can occur, for
     example, when the  download is interrupted.

     The `Content-Length' is treated as a lower bound: if there’s
     more data  to read, *Note urlretrieve(): 1cd7. reads more data,
     but if less data is available,  it raises the exception.

     You can still retrieve the downloaded data in this case, it is
     stored  in the `content' attribute of the exception instance.

     If no `Content-Length' header was supplied, *Note urlretrieve():
     1cd7. can not check the size of the data it has downloaded, and
     just returns it.  In this case you just have to assume that the
     download was successful.


 -- Data: urllib._urlopener
     The public functions *Note urlopen(): 370. and *Note
     urlretrieve(): 1cd7. create an instance of the *Note
     FancyURLopener: 1cda. class and use it to perform their requested
     actions.  To override this functionality, programmers can create a
     subclass of *Note URLopener: 1cdb. or *Note FancyURLopener: 1cda,
     then assign an instance of that class to the `urllib._urlopener'
     variable before calling the desired function.  For example,
     applications may want to specify a different `User-Agent' header
     than *Note URLopener: 1cdb. defines.  This can be accomplished
     with the following code:

         import urllib

         class AppURLopener(urllib.FancyURLopener):
             version = "App/1.7"

         urllib._urlopener = AppURLopener()

 -- Function: urllib.urlcleanup ()
     Clear the cache that may have been built up by previous calls to
     *Note urlretrieve(): 1cd7.


File: python.info,  Node: Utility functions<2>,  Next: URL Opener objects,  Prev: High-level interface,  Up: urllib — Open arbitrary resources by URL

5.20.5.2 Utility functions
..........................

 -- Function: urllib.quote (string[, safe])
     Replace special characters in `string' using the `%xx' escape.
     Letters, digits, and the characters `'_.-'' are never quoted. By
     default, this function is intended for quoting the path section of
     the URL. The optional `safe' parameter specifies additional
     characters that should not be quoted — its default value is
     `'/''.

     Example: `quote('/~connolly/')' yields `'/%7econnolly/''.

 -- Function: urllib.quote_plus (string[, safe])
     Like *Note quote(): 1cde, but also replaces spaces by plus signs,
     as required for quoting HTML form values when building up a query
     string to go into a URL.  Plus signs in the original string are
     escaped unless they are included in `safe'.  It also does not have
     `safe' default to `'/''.

 -- Function: urllib.unquote (string)
     Replace `%xx' escapes by their single-character equivalent.

     Example: `unquote('/%7Econnolly/')' yields `'/~connolly/''.

 -- Function: urllib.unquote_plus (string)
     Like *Note unquote(): 1ce0, but also replaces plus signs by
     spaces, as required for unquoting HTML form values.

 -- Function: urllib.urlencode (query[, doseq])
     Convert a mapping object or a sequence of two-element tuples to a
     “percent-encoded” string, suitable to pass to *Note urlopen():
     370. above as the optional `data' argument.  This is useful to
     pass a dictionary of form fields to a `POST' request.  The
     resulting string is a series of `key=value' pairs separated by
     `'&'' characters, where both `key' and `value' are quoted using
     *Note quote_plus(): 1cdf. above.  When a sequence of two-element
     tuples is used as the `query' argument, the first element of each
     tuple is a key and the second is a value. The value element in
     itself can be a sequence and in that case, if the optional
     parameter `doseq' is evaluates to `True', individual `key=value'
     pairs separated by `'&'' are generated for each element of the
     value sequence for the key.  The order of parameters in the
     encoded string will match the order of parameter tuples in the
     sequence. The *Note urlparse: 18a. module provides the functions
     `parse_qs()' and `parse_qsl()' which are used to parse query
     strings into Python data structures.

 -- Function: urllib.pathname2url (path)
     Convert the pathname `path' from the local syntax for a path to
     the form used in the path component of a URL.  This does not
     produce a complete URL.  The return value will already be quoted
     using the *Note quote(): 1cde. function.

 -- Function: urllib.url2pathname (path)
     Convert the path component `path' from a percent-encoded URL to
     the local syntax for a path.  This does not accept a complete URL.
     This function uses *Note unquote(): 1ce0.  to decode `path'.

 -- Function: urllib.getproxies ()
     This helper function returns a dictionary of scheme to proxy
     server URL mappings. It scans the environment for variables named
     `<scheme>_proxy', in case insensitive way, for all operating
     systems first, and when it cannot find it, looks for proxy
     information from Mac OSX System Configuration for Mac OS X and
     Windows Systems Registry for Windows.  If both lowercase and
     uppercase environment variables exist (and disagree), lowercase is
     preferred.

               Note: If the environment variable `REQUEST_METHOD' is
               set, which usually indicates your script is running in a
               CGI environment, the environment variable `HTTP_PROXY'
               (uppercase `_PROXY') will be ignored. This is because
               that variable can be injected by a client using the
               “Proxy:” HTTP header. If you need to use an HTTP
               proxy in a CGI environment, either use `ProxyHandler'
               explicitly, or make sure the variable name is in
               lowercase (or at least the `_proxy' suffix).

     Note: urllib also exposes certain utility functions like
     splittype, splithost and others parsing URL into various
     components. But it is recommended to use *Note urlparse: 18a. for
     parsing URLs rather than using these functions directly.  Python 3
     does not expose these helper functions from `urllib.parse' module.


File: python.info,  Node: URL Opener objects,  Next: urllib Restrictions,  Prev: Utility functions<2>,  Up: urllib — Open arbitrary resources by URL

5.20.5.3 URL Opener objects
...........................

 -- Class: urllib.URLopener ([proxies[, context[, **x509]]])
     Base class for opening and reading URLs.  Unless you need to
     support opening objects using schemes other than `http:', `ftp:',
     or `file:', you probably want to use *Note FancyURLopener: 1cda.

     By default, the *Note URLopener: 1cdb. class sends a `User-Agent'
     header of `urllib/VVV', where `VVV' is the *Note urllib: 188.
     version number.  Applications can define their own `User-Agent'
     header by subclassing *Note URLopener: 1cdb. or *Note
     FancyURLopener: 1cda. and setting the class attribute *Note
     version: 1ce6. to an appropriate string value in the subclass
     definition.

     The optional `proxies' parameter should be a dictionary mapping
     scheme names to proxy URLs, where an empty dictionary turns
     proxies off completely.  Its default value is `None', in which
     case environmental proxy settings will be used if present, as
     discussed in the definition of *Note urlopen(): 370, above.

     The `context' parameter may be a *Note ssl.SSLContext: 2e5.
     instance.  If given, it defines the SSL settings the opener uses
     to make HTTPS connections.

     Additional keyword parameters, collected in `x509', may be used for
     authentication of the client when using the `https:' scheme.  The
     keywords `key_file' and `cert_file' are supported to provide an
     SSL key and certificate; both are needed to support client
     authentication.

     *Note URLopener: 1cdb. objects will raise an *Note IOError: 1fa.
     exception if the server returns an error code.

           -- Method: open (fullurl[, data])
               Open `fullurl' using the appropriate protocol.  This
               method sets up cache and proxy information, then calls
               the appropriate open method with its input arguments.
               If the scheme is not recognized, *Note open_unknown():
               1ce8. is called.  The `data' argument has the same
               meaning as the `data' argument of *Note urlopen(): 370.

           -- Method: open_unknown (fullurl[, data])
               Overridable interface to open unknown URL types.

           -- Method: retrieve (url[, filename[, reporthook[, data]]])
               Retrieves the contents of `url' and places it in
               `filename'.  The return value is a tuple consisting of a
               local filename and either a *Note mimetools.Message:
               19b0. object containing the response headers (for remote
               URLs) or `None' (for local URLs).  The caller must then
               open and read the contents of `filename'.  If `filename'
               is not given and the URL refers to a local file, the
               input filename is returned.  If the URL is non-local and
               `filename' is not given, the filename is the output of
               *Note tempfile.mktemp(): eb3.  with a suffix that
               matches the suffix of the last path component of the
               input URL.  If `reporthook' is given, it must be a
               function accepting three numeric parameters.  It will be
               called after each chunk of data is read from the
               network.  `reporthook' is ignored for local URLs.

               If the `url' uses the `http:' scheme identifier, the
               optional `data' argument may be given to specify a
               `POST' request (normally the request type is `GET').
               The `data' argument must in standard
               `application/x-www-form-urlencoded' format; see the
               *Note urlencode(): 13b7.  function below.

           -- Attribute: version
               Variable that specifies the user agent of the opener
               object.  To get *Note urllib: 188. to tell servers that
               it is a particular user agent, set this in a subclass as
               a class variable or in the constructor before calling
               the base constructor.

 -- Class: urllib.FancyURLopener (...)
     *Note FancyURLopener: 1cda. subclasses *Note URLopener: 1cdb.
     providing default handling for the following HTTP response codes:
     301, 302, 303, 307 and 401.  For the 30x response codes listed
     above, the `Location' header is used to fetch the actual URL.  For
     401 response codes (authentication required), basic HTTP
     authentication is performed.  For the 30x response codes,
     recursion is bounded by the value of the `maxtries' attribute,
     which defaults to 10.

     For all other response codes, the method `http_error_default()' is
     called which you can override in subclasses to handle the error
     appropriately.

          Note: According to the letter of RFC 2616(1), 301 and 302
          responses to POST requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a GET, and *Note urllib: 188. reproduces
          this behaviour.

     The parameters to the constructor are the same as those for *Note
     URLopener: 1cdb.

          Note:

               When performing basic authentication, a *Note
               FancyURLopener: 1cda. instance calls its *Note
               prompt_user_passwd(): 1cea. method.  The default
               implementation asks the users for the required
               information on the controlling terminal.  A subclass may
               override this method to support more appropriate
               behavior if needed.

          The *Note FancyURLopener: 1cda. class offers one additional
          method that should be overloaded to provide the appropriate
          behavior:

           -- Method: prompt_user_passwd (host, realm)
               Return information needed to authenticate the user at
               the given host in the specified security realm.  The
               return value should be a tuple, `(user, password)',
               which can be used for basic authentication.

               The implementation prompts for this information on the
               terminal; an application should override this method to
               use an appropriate interaction model in the local
               environment.

 -- Exception: urllib.ContentTooShortError (msg[, content])
     This exception is raised when the *Note urlretrieve(): 1cd7.
     function detects that the amount of the downloaded data is less
     than the  expected amount (given by the `Content-Length' header).
     The `content' attribute stores the downloaded (and supposedly
     truncated) data.

     New in version 2.5.


---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: urllib Restrictions,  Next: Examples<12>,  Prev: URL Opener objects,  Up: urllib — Open arbitrary resources by URL

5.20.5.4 `urllib' Restrictions
..............................

 
   * Currently, only the following protocols are supported: HTTP,
     (versions 0.9 and 1.0),  FTP, and local files.

   * The caching feature of *Note urlretrieve(): 1cd7. has been
     disabled until I find the time to hack proper processing of
     Expiration time headers.

   * There should be a function to query whether a particular URL is in
     the cache.

   * For backward compatibility, if a URL appears to point to a local
     file but the file can’t be opened, the URL is re-interpreted
     using the FTP protocol.  This can sometimes cause confusing error
     messages.

   * The *Note urlopen(): 370. and *Note urlretrieve(): 1cd7. functions
     can cause arbitrarily long delays while waiting for a network
     connection to be set up.  This means that it is difficult to build
     an interactive Web client using these functions without using
     threads.

   * The data returned by *Note urlopen(): 370. or *Note urlretrieve():
     1cd7. is the raw data returned by the server.  This may be binary
     data (such as an image), plain text or (for example) HTML.  The
     HTTP protocol provides type information in the reply header, which
     can be inspected by looking at the `Content-Type' header.  If the
     returned data is HTML, you can use the module *Note htmllib: ed. to
     parse it.

   * The code handling the FTP protocol cannot differentiate between a
     file and a directory.  This can lead to unexpected behavior when
     attempting to read a URL that points to a file that is not
     accessible.  If the URL ends in a `/', it is assumed to refer to a
     directory and will be handled accordingly.  But if an attempt to
     read a file leads to a 550 error (meaning the URL cannot be found
     or is not accessible, often for permission reasons), then the path
     is treated as a directory in order to handle the case when a
     directory is specified by a URL but the trailing `/' has been left
     off.  This can cause misleading results when you try to fetch a
     file whose read permissions make it inaccessible; the FTP code
     will try to read it, fail with a 550 error, and then perform a
     directory listing for the unreadable file. If fine-grained control
     is needed, consider using the *Note ftplib: d9. module,
     subclassing *Note FancyURLopener: 1cda, or changing `_urlopener'
     to meet your needs.

   * This module does not support the use of proxies which require
     authentication.  This may be implemented in the future.

   * Although the *Note urllib: 188. module contains (undocumented)
     routines to parse and unparse URL strings, the recommended
     interface for URL manipulation is in module *Note urlparse: 18a.


File: python.info,  Node: Examples<12>,  Prev: urllib Restrictions,  Up: urllib — Open arbitrary resources by URL

5.20.5.5 Examples
.................

Here is an example session that uses the `GET' method to retrieve a URL
containing parameters:

    >>> import urllib
    >>> params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
    >>> f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query?%s" % params)
    >>> print f.read()

The following example uses the `POST' method instead:

    >>> import urllib
    >>> params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
    >>> f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query", params)
    >>> print f.read()

The following example uses an explicitly specified HTTP proxy,
overriding environment settings:

    >>> import urllib
    >>> proxies = {'http': 'http://proxy.example.com:8080/'}
    >>> opener = urllib.FancyURLopener(proxies)
    >>> f = opener.open("http://www.python.org")
    >>> f.read()

The following example uses no proxies at all, overriding environment
settings:

    >>> import urllib
    >>> opener = urllib.FancyURLopener({})
    >>> f = opener.open("http://www.python.org/")
    >>> f.read()


File: python.info,  Node: urllib2 — extensible library for opening URLs,  Next: httplib — HTTP protocol client,  Prev: urllib — Open arbitrary resources by URL,  Up: Internet Protocols and Support

5.20.6 `urllib2' — extensible library for opening URLs
--------------------------------------------------------

     Note: The *Note urllib2: 189. module has been split across several
     modules in Python 3 named `urllib.request' and `urllib.error'.
     The *Note 2to3: c05. tool will automatically adapt imports when
     converting your sources to Python 3.

The *Note urllib2: 189. module defines functions and classes which help
in opening URLs (mostly HTTP) in a complex world — basic and digest
authentication, redirections, cookies and more.

See also
........

The Requests package(1) is recommended for a higher-level HTTP client
interface.

The *Note urllib2: 189. module defines the following functions:

 -- Function: urllib2.urlopen (url[, data[, timeout[, cafile[, capath[,
          cadefault[, context]]]]])
     Open the URL `url', which can be either a string or a *Note
     Request: 1cf0. object.

     `data' may be a string specifying additional data to send to the
     server, or `None' if no such data is needed.  Currently HTTP
     requests are the only ones that use `data'; the HTTP request will
     be a POST instead of a GET when the `data' parameter is provided.
     `data' should be a buffer in the standard
     `application/x-www-form-urlencoded' format.  The *Note
     urllib.urlencode(): 13b7. function takes a mapping or sequence of
     2-tuples and returns a string in this format. urllib2 module sends
     HTTP/1.1 requests with `Connection:close' header included.

     The optional `timeout' parameter specifies a timeout in seconds
     for blocking operations like the connection attempt (if not
     specified, the global default timeout setting will be used).  This
     actually only works for HTTP, HTTPS and FTP connections.

     If `context' is specified, it must be a *Note ssl.SSLContext: 2e5.
     instance describing the various SSL options. See *Note
     HTTPSConnection: 22d. for more details.

     The optional `cafile' and `capath' parameters specify a set of
     trusted CA certificates for HTTPS requests.  `cafile' should point
     to a single file containing a bundle of CA certificates, whereas
     `capath' should point to a directory of hashed certificate files.
     More information can be found in *Note
     ssl.SSLContext.load_verify_locations(): 17b6.

     The `cadefault' parameter is ignored.

     This function returns a file-like object with three additional
     methods:

        * `geturl()' — return the URL of the resource retrieved,
          commonly used to determine if a redirect was followed

        * `info()' — return the meta-information of the page, such as
          headers, in the form of an *Note mimetools.Message: 19b0.
          instance (see Quick Reference to HTTP Headers(2))

        * `getcode()' — return the HTTP status code of the response.

     Raises *Note URLError: 1cf1. on errors.

     Note that `None' may be returned if no handler handles the request
     (though the default installed global *Note OpenerDirector: 1cf2.
     uses *Note UnknownHandler: 1cf3. to ensure this never happens).

     In addition, if proxy settings are detected (for example, when a
     `*_proxy' environment variable like `http_proxy' is set), *Note
     ProxyHandler: 1cf4. is default installed and makes sure the
     requests are handled through the proxy.

     Changed in version 2.6: `timeout' was added.

     Changed in version 2.7.9: `cafile', `capath', `cadefault', and
     `context' were added.


 -- Function: urllib2.install_opener (opener)
     Install an *Note OpenerDirector: 1cf2. instance as the default
     global opener.  Installing an opener is only necessary if you want
     urlopen to use that opener; otherwise, simply call *Note
     OpenerDirector.open(): 1cf6. instead of *Note urlopen(): 371.  The
     code does not check for a real *Note OpenerDirector: 1cf2, and any
     class with the appropriate interface will work.

 -- Function: urllib2.build_opener ([handler, ...])
     Return an *Note OpenerDirector: 1cf2. instance, which chains the
     handlers in the order given. `handler's can be either instances of
     *Note BaseHandler: 1cf8, or subclasses of *Note BaseHandler: 1cf8.
     (in which case it must be possible to call the constructor without
     any parameters).  Instances of the following classes will be in
     front of the `handler's, unless the `handler's contain them,
     instances of them or subclasses of them: *Note ProxyHandler: 1cf4.
     (if proxy settings are detected), *Note UnknownHandler: 1cf3,
     *Note HTTPHandler: 1cf9, *Note HTTPDefaultErrorHandler: 1cfa,
     *Note HTTPRedirectHandler: 1cfb, *Note FTPHandler: 1cfc, *Note
     FileHandler: 1cfd, *Note HTTPErrorProcessor: 1cfe.

     If the Python installation has SSL support (i.e., if the *Note
     ssl: 160. module can be imported), *Note HTTPSHandler: 1cff. will
     also be added.

     Beginning in Python 2.3, a *Note BaseHandler: 1cf8. subclass may
     also change its `handler_order' attribute to modify its position
     in the handlers list.

The following exceptions are raised as appropriate:

 -- Exception: urllib2.URLError
     The handlers raise this exception (or derived exceptions) when
     they run into a problem.  It is a subclass of *Note IOError: 1fa.

      -- Attribute: reason
          The reason for this error.  It can be a message string or
          another exception instance (*Note socket.error: 399. for
          remote URLs, *Note OSError: 231. for local URLs).

 -- Exception: urllib2.HTTPError
     Though being an exception (a subclass of *Note URLError: 1cf1.),
     an *Note HTTPError: 1d01.  can also function as a non-exceptional
     file-like return value (the same thing that *Note urlopen(): 371.
     returns).  This is useful when handling exotic HTTP errors, such
     as requests for authentication.

      -- Attribute: code
          An HTTP status code as defined in RFC 2616(3).  This numeric
          value corresponds to a value found in the dictionary of codes
          as found in *Note
          BaseHTTPServer.BaseHTTPRequestHandler.responses: 1d03.

      -- Attribute: reason
          The reason for this error.  It can be a message string or
          another exception instance.

The following classes are provided:

 -- Class: urllib2.Request (url[, data][, headers][, origin_req_host][,
          unverifiable])
     This class is an abstraction of a URL request.

     `url' should be a string containing a valid URL.

     `data' may be a string specifying additional data to send to the
     server, or `None' if no such data is needed.  Currently HTTP
     requests are the only ones that use `data'; the HTTP request will
     be a POST instead of a GET when the `data' parameter is provided.
     `data' should be a buffer in the standard
     `application/x-www-form-urlencoded' format.  The *Note
     urllib.urlencode(): 13b7. function takes a mapping or sequence of
     2-tuples and returns a string in this format.

     `headers' should be a dictionary, and will be treated as if *Note
     add_header(): 1d05.  was called with each key and value as
     arguments.  This is often used to “spoof” the `User-Agent'
     header value, which is used by a browser to identify itself –
     some HTTP servers only allow requests coming from common browsers
     as opposed to scripts.  For example, Mozilla Firefox may identify
     itself as `"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127
     Firefox/2.0.0.11"', while *Note urllib2: 189.’s default user
     agent string is `"Python-urllib/2.6"' (on Python 2.6).

     The final two arguments are only of interest for correct handling
     of third-party HTTP cookies:

     `origin_req_host' should be the request-host of the origin
     transaction, as defined by RFC 2965(4).  It defaults to
     `cookielib.request_host(self)'.  This is the host name or IP
     address of the original request that was initiated by the user.
     For example, if the request is for an image in an HTML document,
     this should be the request-host of the request for the page
     containing the image.

     `unverifiable' should indicate whether the request is
     unverifiable, as defined by RFC 2965.  It defaults to `False'.  An
     unverifiable request is one whose URL the user did not have the
     option to approve.  For example, if the request is for an image in
     an HTML document, and the user had no option to approve the
     automatic fetching of the image, this should be true.

 -- Class: urllib2.OpenerDirector
     The *Note OpenerDirector: 1cf2. class opens URLs via *Note
     BaseHandler: 1cf8.s chained together. It manages the chaining of
     handlers, and recovery from errors.

 -- Class: urllib2.BaseHandler
     This is the base class for all registered handlers — and handles
     only the simple mechanics of registration.

 -- Class: urllib2.HTTPDefaultErrorHandler
     A class which defines a default handler for HTTP error responses;
     all responses are turned into *Note HTTPError: 1d01. exceptions.

 -- Class: urllib2.HTTPRedirectHandler
     A class to handle redirections.

 -- Class: urllib2.HTTPCookieProcessor ([cookiejar])
     A class to handle HTTP Cookies.

 -- Class: urllib2.ProxyHandler ([proxies])
     Cause requests to go through a proxy. If `proxies' is given, it
     must be a dictionary mapping protocol names to URLs of proxies.
     The default is to read the list of proxies from the environment
     variables `<protocol>_proxy'.  If no proxy environment variables
     are set, then in a Windows environment proxy settings are obtained
     from the registry’s Internet Settings section, and in a Mac OS X
     environment proxy information is retrieved from the OS X System
     Configuration Framework.

     To disable autodetected proxy pass an empty dictionary.

               Note: `HTTP_PROXY' will be ignored if a variable
               `REQUEST_METHOD' is set; see the documentation on *Note
               getproxies(): 1ce4.

 -- Class: urllib2.HTTPPasswordMgr
     Keep a database of  `(realm, uri) -> (user, password)' mappings.

 -- Class: urllib2.HTTPPasswordMgrWithDefaultRealm
     Keep a database of  `(realm, uri) -> (user, password)' mappings. A
     realm of `None' is considered a catch-all realm, which is searched
     if no other realm fits.

 -- Class: urllib2.AbstractBasicAuthHandler ([password_mgr])
     This is a mixin class that helps with HTTP authentication, both to
     the remote host and to a proxy. `password_mgr', if given, should
     be something that is compatible with *Note HTTPPasswordMgr: 1d07.;
     refer to section *Note HTTPPasswordMgr Objects: 1d0a. for
     information on the interface that must be supported.

 -- Class: urllib2.HTTPBasicAuthHandler ([password_mgr])
     Handle authentication with the remote host. `password_mgr', if
     given, should be something that is compatible with *Note
     HTTPPasswordMgr: 1d07.; refer to section *Note HTTPPasswordMgr
     Objects: 1d0a. for information on the interface that must be
     supported.

 -- Class: urllib2.ProxyBasicAuthHandler ([password_mgr])
     Handle authentication with the proxy. `password_mgr', if given,
     should be something that is compatible with *Note HTTPPasswordMgr:
     1d07.; refer to section *Note HTTPPasswordMgr Objects: 1d0a. for
     information on the interface that must be supported.

 -- Class: urllib2.AbstractDigestAuthHandler ([password_mgr])
     This is a mixin class that helps with HTTP authentication, both to
     the remote host and to a proxy. `password_mgr', if given, should
     be something that is compatible with *Note HTTPPasswordMgr: 1d07.;
     refer to section *Note HTTPPasswordMgr Objects: 1d0a. for
     information on the interface that must be supported.

 -- Class: urllib2.HTTPDigestAuthHandler ([password_mgr])
     Handle authentication with the remote host. `password_mgr', if
     given, should be something that is compatible with *Note
     HTTPPasswordMgr: 1d07.; refer to section *Note HTTPPasswordMgr
     Objects: 1d0a. for information on the interface that must be
     supported.

 -- Class: urllib2.ProxyDigestAuthHandler ([password_mgr])
     Handle authentication with the proxy. `password_mgr', if given,
     should be something that is compatible with *Note HTTPPasswordMgr:
     1d07.; refer to section *Note HTTPPasswordMgr Objects: 1d0a. for
     information on the interface that must be supported.

 -- Class: urllib2.HTTPHandler
     A class to handle opening of HTTP URLs.

 -- Class: urllib2.HTTPSHandler ([debuglevel[, context]])
     A class to handle opening of HTTPS URLs. `context' has the same
     meaning as for *Note httplib.HTTPSConnection: 22d.

     Changed in version 2.7.9: `context' added.


 -- Class: urllib2.FileHandler
     Open local files.

 -- Class: urllib2.FTPHandler
     Open FTP URLs.

 -- Class: urllib2.CacheFTPHandler
     Open FTP URLs, keeping a cache of open FTP connections to minimize
     delays.

 -- Class: urllib2.UnknownHandler
     A catch-all class to handle unknown URLs.

 -- Class: urllib2.HTTPErrorProcessor
     Process HTTP error responses.

* Menu:

* Request Objects::
* OpenerDirector Objects::
* BaseHandler Objects::
* HTTPRedirectHandler Objects::
* HTTPCookieProcessor Objects::
* ProxyHandler Objects::
* HTTPPasswordMgr Objects::
* AbstractBasicAuthHandler Objects::
* HTTPBasicAuthHandler Objects::
* ProxyBasicAuthHandler Objects::
* AbstractDigestAuthHandler Objects::
* HTTPDigestAuthHandler Objects::
* ProxyDigestAuthHandler Objects::
* HTTPHandler Objects::
* HTTPSHandler Objects::
* FileHandler Objects::
* FTPHandler Objects::
* CacheFTPHandler Objects::
* UnknownHandler Objects::
* HTTPErrorProcessor Objects::
* Examples: Examples<13>.

---------- Footnotes ----------

(1) http://requests.readthedocs.org/

(2) https://www.cs.tut.fi/~jkorpela/http.html

(3) http://www.faqs.org/rfcs/rfc2616.html

(4) https://tools.ietf.org/html/rfc2965.html


File: python.info,  Node: Request Objects,  Next: OpenerDirector Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.1 Request Objects
........................

The following methods describe all of *Note Request: 1cf0.’s public
interface, and so all must be overridden in subclasses.

 -- Method: Request.add_data (data)
     Set the *Note Request: 1cf0. data to `data'.  This is ignored by
     all handlers except HTTP handlers — and there it should be a
     byte string, and will change the request to be `POST' rather than
     `GET'.

 -- Method: Request.get_method ()
     Return a string indicating the HTTP request method.  This is only
     meaningful for HTTP requests, and currently always returns `'GET''
     or `'POST''.

 -- Method: Request.has_data ()
     Return whether the instance has a non-`None' data.

 -- Method: Request.get_data ()
     Return the instance’s data.

 -- Method: Request.add_header (key, val)
     Add another header to the request.  Headers are currently ignored
     by all handlers except HTTP handlers, where they are added to the
     list of headers sent to the server.  Note that there cannot be
     more than one header with the same name, and later calls will
     overwrite previous calls in case the `key' collides.  Currently,
     this is no loss of HTTP functionality, since all headers which have
     meaning when used more than once have a (header-specific) way of
     gaining the same functionality using only one header.

 -- Method: Request.add_unredirected_header (key, header)
     Add a header that will not be added to a redirected request.

     New in version 2.4.


 -- Method: Request.has_header (header)
     Return whether the instance has the named header (checks both
     regular and unredirected).

     New in version 2.4.


 -- Method: Request.get_full_url ()
     Return the URL given in the constructor.

 -- Method: Request.get_type ()
     Return the type of the URL — also known as the scheme.

 -- Method: Request.get_host ()
     Return the host to which a connection will be made.

 -- Method: Request.get_selector ()
     Return the selector — the part of the URL that is sent to the
     server.

 -- Method: Request.get_header (header_name, default=None)
     Return the value of the given header. If the header is not
     present, return the default value.

 -- Method: Request.header_items ()
     Return a list of tuples (header_name, header_value) of the Request
     headers.

 -- Method: Request.set_proxy (host, type)
     Prepare the request by connecting to a proxy server. The `host'
     and `type' will replace those of the instance, and the
     instance’s selector will be the original URL given in the
     constructor.

 -- Method: Request.get_origin_req_host ()
     Return the request-host of the origin transaction, as defined by RFC
     2965(1).  See the documentation for the *Note Request: 1cf0.
     constructor.

 -- Method: Request.is_unverifiable ()
     Return whether the request is unverifiable, as defined by RFC
     2965. See the documentation for the *Note Request: 1cf0.
     constructor.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2965.html


File: python.info,  Node: OpenerDirector Objects,  Next: BaseHandler Objects,  Prev: Request Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.2 OpenerDirector Objects
...............................

*Note OpenerDirector: 1cf2. instances have the following methods:

 -- Method: OpenerDirector.add_handler (handler)
     `handler' should be an instance of *Note BaseHandler: 1cf8.  The
     following methods are searched, and added to the possible chains
     (note that HTTP errors are a special case).

        * ``protocol'_open' — signal that the handler knows how to
          open `protocol' URLs.

        * `http_error_`type'' — signal that the handler knows how to
          handle HTTP errors with HTTP error code `type'.

        * ``protocol'_error' — signal that the handler knows how to
          handle errors from (non-`http') `protocol'.

        * ``protocol'_request' — signal that the handler knows how to
          pre-process `protocol' requests.

        * ``protocol'_response' — signal that the handler knows how to
          post-process `protocol' responses.

 -- Method: OpenerDirector.open (url[, data][, timeout])
     Open the given `url' (which can be a request object or a string),
     optionally passing the given `data'. Arguments, return values and
     exceptions raised are the same as those of *Note urlopen(): 371.
     (which simply calls the *Note open(): 2d9.  method on the
     currently installed global *Note OpenerDirector: 1cf2.).  The
     optional `timeout' parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used). The timeout
     feature actually works only for HTTP, HTTPS and FTP connections).

     Changed in version 2.6: `timeout' was added.


 -- Method: OpenerDirector.error (proto[, arg[, ...]])
     Handle an error of the given protocol.  This will call the
     registered error handlers for the given protocol with the given
     arguments (which are protocol specific).  The HTTP protocol is a
     special case which uses the HTTP response code to determine the
     specific error handler; refer to the `http_error_*()' methods of
     the handler classes.

     Return values and exceptions raised are the same as those of *Note
     urlopen(): 371.

OpenerDirector objects open URLs in three stages:

The order in which these methods are called within each stage is
determined by sorting the handler instances.

  1. Every handler with a method named like ``protocol'_request' has
     that method called to pre-process the request.

  2. Handlers with a method named like ``protocol'_open' are called to
     handle the request. This stage ends when a handler either returns
     a non-*Note None: 3b2.  value (ie. a response), or raises an
     exception (usually *Note URLError: 1cf1.).  Exceptions are allowed
     to propagate.

     In fact, the above algorithm is first tried for methods named
     `default_open()'.  If all such methods return *Note None: 3b2, the
     algorithm is repeated for methods named like ``protocol'_open'.
     If all such methods return *Note None: 3b2, the algorithm is
     repeated for methods named `unknown_open()'.

     Note that the implementation of these methods may involve calls of
     the parent *Note OpenerDirector: 1cf2. instance’s *Note open():
     1cf6. and *Note error(): 1d25. methods.

  3. Every handler with a method named like ``protocol'_response' has
     that method called to post-process the response.


File: python.info,  Node: BaseHandler Objects,  Next: HTTPRedirectHandler Objects,  Prev: OpenerDirector Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.3 BaseHandler Objects
............................

*Note BaseHandler: 1cf8. objects provide a couple of methods that are
directly useful, and others that are meant to be used by derived
classes.  These are intended for direct use:

 -- Method: BaseHandler.add_parent (director)
     Add a director as parent.

 -- Method: BaseHandler.close ()
     Remove any parents.

The following attributes and methods should only be used by classes
derived from *Note BaseHandler: 1cf8.

     Note: The convention has been adopted that subclasses defining
     `protocol_request()' or `protocol_response()' methods are named
     `*Processor'; all others are named `*Handler'.

 -- Attribute: BaseHandler.parent
     A valid *Note OpenerDirector: 1cf2, which can be used to open
     using a different protocol, or handle errors.

 -- Method: BaseHandler.default_open (req)
     This method is `not' defined in *Note BaseHandler: 1cf8, but
     subclasses should define it if they want to catch all URLs.

     This method, if implemented, will be called by the parent *Note
     OpenerDirector: 1cf2.  It should return a file-like object as
     described in the return value of the *Note open(): 2d9. of *Note
     OpenerDirector: 1cf2, or `None'.  It should raise *Note URLError:
     1cf1, unless a truly exceptional thing happens (for example, *Note
     MemoryError: 977. should not be mapped to *Note URLError: 1cf1.).

     This method will be called before any protocol-specific open
     method.

 -- Method: BaseHandler.protocol_open (req)
     (“protocol” is to be replaced by the protocol name.)

     This method is `not' defined in *Note BaseHandler: 1cf8, but
     subclasses should define it if they want to handle URLs with the
     given `protocol'.

     This method, if defined, will be called by the parent *Note
     OpenerDirector: 1cf2.  Return values should be the same as for
     *Note default_open(): 1d2b.

 -- Method: BaseHandler.unknown_open (req)
     This method is `not' defined in *Note BaseHandler: 1cf8, but
     subclasses should define it if they want to catch all URLs with no
     specific registered handler to open it.

     This method, if implemented, will be called by the *Note parent:
     1d2a.  *Note OpenerDirector: 1cf2.  Return values should be the
     same as for *Note default_open(): 1d2b.

 -- Method: BaseHandler.http_error_default (req, fp, code, msg, hdrs)
     This method is `not' defined in *Note BaseHandler: 1cf8, but
     subclasses should override it if they intend to provide a
     catch-all for otherwise unhandled HTTP errors.  It will be called
     automatically by the  *Note OpenerDirector: 1cf2. getting the
     error, and should not normally be called in other circumstances.

     `req' will be a *Note Request: 1cf0. object, `fp' will be a
     file-like object with the HTTP error body, `code' will be the
     three-digit code of the error, `msg' will be the user-visible
     explanation of the code and `hdrs' will be a mapping object with
     the headers of the error.

     Return values and exceptions raised should be the same as those of
     *Note urlopen(): 371.

 -- Method: BaseHandler.http_error_nnn (req, fp, code, msg, hdrs)
     `nnn' should be a three-digit HTTP error code.  This method is
     also not defined in *Note BaseHandler: 1cf8, but will be called,
     if it exists, on an instance of a subclass, when an HTTP error
     with code `nnn' occurs.

     Subclasses should override this method to handle specific HTTP
     errors.

     Arguments, return values and exceptions raised should be the same
     as for *Note http_error_default(): 1d2d.

 -- Method: BaseHandler.protocol_request (req)
     (“protocol” is to be replaced by the protocol name.)

     This method is `not' defined in *Note BaseHandler: 1cf8, but
     subclasses should define it if they want to pre-process requests
     of the given `protocol'.

     This method, if defined, will be called by the parent *Note
     OpenerDirector: 1cf2.  `req' will be a *Note Request: 1cf0.
     object. The return value should be a *Note Request: 1cf0. object.

 -- Method: BaseHandler.protocol_response (req, response)
     (“protocol” is to be replaced by the protocol name.)

     This method is `not' defined in *Note BaseHandler: 1cf8, but
     subclasses should define it if they want to post-process responses
     of the given `protocol'.

     This method, if defined, will be called by the parent *Note
     OpenerDirector: 1cf2.  `req' will be a *Note Request: 1cf0.
     object. `response' will be an object implementing the same
     interface as the return value of *Note urlopen(): 371.  The return
     value should implement the same interface as the return value of
     *Note urlopen(): 371.


File: python.info,  Node: HTTPRedirectHandler Objects,  Next: HTTPCookieProcessor Objects,  Prev: BaseHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.4 HTTPRedirectHandler Objects
....................................

     Note: Some HTTP redirections require action from this module’s
     client code.  If this is the case, *Note HTTPError: 1d01. is
     raised.  See RFC 2616(1) for details of the precise meanings of
     the various redirection codes.

 -- Method: HTTPRedirectHandler.redirect_request (req, fp, code, msg,
          hdrs, newurl)
     Return a *Note Request: 1cf0. or `None' in response to a redirect.
     This is called by the default implementations of the
     `http_error_30*()' methods when a redirection is received from the
     server.  If a redirection should take place, return a new *Note
     Request: 1cf0. to allow `http_error_30*()' to perform the redirect
     to `newurl'.  Otherwise, raise *Note HTTPError: 1d01. if no other
     handler should try to handle this URL, or return `None' if you
     can’t but another handler might.

          Note: The default implementation of this method does not
          strictly follow RFC 2616(2), which says that 301 and 302
          responses to `POST' requests must not be automatically
          redirected without confirmation by the user.  In reality,
          browsers do allow automatic redirection of these responses,
          changing the POST to a `GET', and the default implementation
          reproduces this behavior.

 -- Method: HTTPRedirectHandler.http_error_301 (req, fp, code, msg,
          hdrs)
     Redirect to the `Location:' or `URI:' URL.  This method is called
     by the parent *Note OpenerDirector: 1cf2. when getting an HTTP
     ‘moved permanently’ response.

 -- Method: HTTPRedirectHandler.http_error_302 (req, fp, code, msg,
          hdrs)
     The same as *Note http_error_301(): 1d32, but called for the
     ‘found’ response.

 -- Method: HTTPRedirectHandler.http_error_303 (req, fp, code, msg,
          hdrs)
     The same as *Note http_error_301(): 1d32, but called for the
     ‘see other’ response.

 -- Method: HTTPRedirectHandler.http_error_307 (req, fp, code, msg,
          hdrs)
     The same as *Note http_error_301(): 1d32, but called for the
     ‘temporary redirect’ response.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2616.html

(2) https://tools.ietf.org/html/rfc2616.html


File: python.info,  Node: HTTPCookieProcessor Objects,  Next: ProxyHandler Objects,  Prev: HTTPRedirectHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.5 HTTPCookieProcessor Objects
....................................

New in version 2.4.

*Note HTTPCookieProcessor: 1d06. instances have one attribute:

 -- Attribute: HTTPCookieProcessor.cookiejar
     The *Note cookielib.CookieJar: 1d39. in which cookies are stored.


File: python.info,  Node: ProxyHandler Objects,  Next: HTTPPasswordMgr Objects,  Prev: HTTPCookieProcessor Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.6 ProxyHandler Objects
.............................

 -- Method: ProxyHandler.protocol_open (request)
     (“protocol” is to be replaced by the protocol name.)

     The *Note ProxyHandler: 1cf4. will have a method ``protocol'_open'
     for every `protocol' which has a proxy in the `proxies' dictionary
     given in the constructor.  The method will modify requests to go
     through the proxy, by calling `request.set_proxy()', and call the
     next handler in the chain to actually execute the protocol.


File: python.info,  Node: HTTPPasswordMgr Objects,  Next: AbstractBasicAuthHandler Objects,  Prev: ProxyHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.7 HTTPPasswordMgr Objects
................................

These methods are available on *Note HTTPPasswordMgr: 1d07. and *Note
HTTPPasswordMgrWithDefaultRealm: 1d08. objects.

 -- Method: HTTPPasswordMgr.add_password (realm, uri, user, passwd)
     `uri' can be either a single URI, or a sequence of URIs. `realm',
     `user' and `passwd' must be strings. This causes `(user, passwd)'
     to be used as authentication tokens when authentication for
     `realm' and a super-URI of any of the given URIs is given.

 -- Method: HTTPPasswordMgr.find_user_password (realm, authuri)
     Get user/password for given realm and URI, if any.  This method
     will return `(None, None)' if there is no matching user/password.

     For *Note HTTPPasswordMgrWithDefaultRealm: 1d08. objects, the
     realm `None' will be searched if the given `realm' has no matching
     user/password.


File: python.info,  Node: AbstractBasicAuthHandler Objects,  Next: HTTPBasicAuthHandler Objects,  Prev: HTTPPasswordMgr Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.8 AbstractBasicAuthHandler Objects
.........................................

 -- Method: AbstractBasicAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)
     Handle an authentication request by getting a user/password pair,
     and re-trying the request.  `authreq' should be the name of the
     header where the information about the realm is included in the
     request, `host' specifies the URL and path to authenticate for,
     `req' should be the (failed) *Note Request: 1cf0. object, and
     `headers' should be the error headers.

     `host' is either an authority (e.g. `"python.org"') or a URL
     containing an authority component (e.g. `"http://python.org/"').
     In either case, the authority must not contain a userinfo
     component (so, `"python.org"' and `"python.org:80"' are fine,
     `"joe:password@python.org"' is not).


File: python.info,  Node: HTTPBasicAuthHandler Objects,  Next: ProxyBasicAuthHandler Objects,  Prev: AbstractBasicAuthHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.9 HTTPBasicAuthHandler Objects
.....................................

 -- Method: HTTPBasicAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyBasicAuthHandler Objects,  Next: AbstractDigestAuthHandler Objects,  Prev: HTTPBasicAuthHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.10 ProxyBasicAuthHandler Objects
.......................................

 -- Method: ProxyBasicAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: AbstractDigestAuthHandler Objects,  Next: HTTPDigestAuthHandler Objects,  Prev: ProxyBasicAuthHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.11 AbstractDigestAuthHandler Objects
...........................................

 -- Method: AbstractDigestAuthHandler.http_error_auth_reqed (authreq,
          host, req, headers)
     `authreq' should be the name of the header where the information
     about the realm is included in the request, `host' should be the
     host to authenticate to, `req' should be the (failed) *Note
     Request: 1cf0. object, and `headers' should be the error headers.


File: python.info,  Node: HTTPDigestAuthHandler Objects,  Next: ProxyDigestAuthHandler Objects,  Prev: AbstractDigestAuthHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.12 HTTPDigestAuthHandler Objects
.......................................

 -- Method: HTTPDigestAuthHandler.http_error_401 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: ProxyDigestAuthHandler Objects,  Next: HTTPHandler Objects,  Prev: HTTPDigestAuthHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.13 ProxyDigestAuthHandler Objects
........................................

 -- Method: ProxyDigestAuthHandler.http_error_407 (req, fp, code, msg,
          hdrs)
     Retry the request with authentication information, if available.


File: python.info,  Node: HTTPHandler Objects,  Next: HTTPSHandler Objects,  Prev: ProxyDigestAuthHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.14 HTTPHandler Objects
.............................

 -- Method: HTTPHandler.http_open (req)
     Send an HTTP request, which can be either GET or POST, depending on
     `req.has_data()'.


File: python.info,  Node: HTTPSHandler Objects,  Next: FileHandler Objects,  Prev: HTTPHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.15 HTTPSHandler Objects
..............................

 -- Method: HTTPSHandler.https_open (req)
     Send an HTTPS request, which can be either GET or POST, depending
     on `req.has_data()'.


File: python.info,  Node: FileHandler Objects,  Next: FTPHandler Objects,  Prev: HTTPSHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.16 FileHandler Objects
.............................

 -- Method: FileHandler.file_open (req)
     Open the file locally, if there is no host name, or the host name
     is `'localhost''. Change the protocol to `ftp' otherwise, and
     retry opening it using `parent'.


File: python.info,  Node: FTPHandler Objects,  Next: CacheFTPHandler Objects,  Prev: FileHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.17 FTPHandler Objects
............................

 -- Method: FTPHandler.ftp_open (req)
     Open the FTP file indicated by `req'. The login is always done
     with empty username and password.


File: python.info,  Node: CacheFTPHandler Objects,  Next: UnknownHandler Objects,  Prev: FTPHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.18 CacheFTPHandler Objects
.................................

*Note CacheFTPHandler: 1d10. objects are *Note FTPHandler: 1cfc.
objects with the following additional methods:

 -- Method: CacheFTPHandler.setTimeout (t)
     Set timeout of connections to `t' seconds.

 -- Method: CacheFTPHandler.setMaxConns (m)
     Set maximum number of cached connections to `m'.


File: python.info,  Node: UnknownHandler Objects,  Next: HTTPErrorProcessor Objects,  Prev: CacheFTPHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.19 UnknownHandler Objects
................................

 -- Method: UnknownHandler.unknown_open ()
     Raise a *Note URLError: 1cf1. exception.


File: python.info,  Node: HTTPErrorProcessor Objects,  Next: Examples<13>,  Prev: UnknownHandler Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.20 HTTPErrorProcessor Objects
....................................

New in version 2.4.

 -- Method: HTTPErrorProcessor.http_response ()
     Process HTTP error responses.

     For 200 error codes, the response object is returned immediately.

     For non-200 error codes, this simply passes the job on to the
     ``protocol'_error_code' handler methods, via *Note
     OpenerDirector.error(): 1d25.  Eventually, *Note
     urllib2.HTTPDefaultErrorHandler: 1cfa. will raise an *Note
     HTTPError: 1d01. if no other handler handles the error.

 -- Method: HTTPErrorProcessor.https_response ()
     Process HTTPS error responses.

     The behavior is same as *Note http_response(): 1d66.


File: python.info,  Node: Examples<13>,  Prev: HTTPErrorProcessor Objects,  Up: urllib2 — extensible library for opening URLs

5.20.6.21 Examples
..................

In addition to the examples below, more examples are given in *Note
HOWTO Fetch Internet Resources Using urllib2: 1d6a.

This example gets the python.org main page and displays the first 100
bytes of it:

    >>> import urllib2
    >>> f = urllib2.urlopen('http://www.python.org/')
    >>> print f.read(100)
    <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
    <?xml-stylesheet href="./css/ht2html

Here we are sending a data-stream to the stdin of a CGI and reading the
data it returns to us. Note that this example will only work when the
Python installation supports SSL.

    >>> import urllib2
    >>> req = urllib2.Request(url='https://localhost/cgi-bin/test.cgi',
    ...                       data='This data is passed to stdin of the CGI')
    >>> f = urllib2.urlopen(req)
    >>> print f.read()
    Got Data: "This data is passed to stdin of the CGI"

The code for the sample CGI used in the above example is:

    #!/usr/bin/env python
    import sys
    data = sys.stdin.read()
    print 'Content-type: text-plain\n\nGot Data: "%s"' % data

Use of Basic HTTP Authentication:

    import urllib2
    # Create an OpenerDirector with support for Basic HTTP Authentication...
    auth_handler = urllib2.HTTPBasicAuthHandler()
    auth_handler.add_password(realm='PDQ Application',
                              uri='https://mahler:8092/site-updates.py',
                              user='klem',
                              passwd='kadidd!ehopper')
    opener = urllib2.build_opener(auth_handler)
    # ...and install it globally so it can be used with urlopen.
    urllib2.install_opener(opener)
    urllib2.urlopen('http://www.example.com/login.html')

*Note build_opener(): 1cf7. provides many handlers by default,
including a *Note ProxyHandler: 1cf4.  By default, *Note ProxyHandler:
1cf4. uses the environment variables named `<scheme>_proxy', where
`<scheme>' is the URL scheme involved.  For example, the `http_proxy'
environment variable is read to obtain the HTTP proxy’s URL.

This example replaces the default *Note ProxyHandler: 1cf4. with one
that uses programmatically-supplied proxy URLs, and adds proxy
authorization support with *Note ProxyBasicAuthHandler: 1d0c.

    proxy_handler = urllib2.ProxyHandler({'http': 'http://www.example.com:3128/'})
    proxy_auth_handler = urllib2.ProxyBasicAuthHandler()
    proxy_auth_handler.add_password('realm', 'host', 'username', 'password')

    opener = urllib2.build_opener(proxy_handler, proxy_auth_handler)
    # This time, rather than install the OpenerDirector, we use it directly:
    opener.open('http://www.example.com/login.html')

Adding HTTP headers:

Use the `headers' argument to the *Note Request: 1cf0. constructor, or:

    import urllib2
    req = urllib2.Request('http://www.example.com/')
    req.add_header('Referer', 'http://www.python.org/')
    # Customize the default User-Agent header value:
    req.add_header('User-Agent', 'urllib-example/0.1 (Contact: . . .)')
    r = urllib2.urlopen(req)

*Note OpenerDirector: 1cf2. automatically adds a `User-Agent' header to
every *Note Request: 1cf0.  To change this:

    import urllib2
    opener = urllib2.build_opener()
    opener.addheaders = [('User-agent', 'Mozilla/5.0')]
    opener.open('http://www.example.com/')

Also, remember that a few standard headers (`Content-Length',
`Content-Type' and `Host') are added when the *Note Request: 1cf0. is
passed to *Note urlopen(): 371. (or *Note OpenerDirector.open(): 1cf6.).


File: python.info,  Node: httplib — HTTP protocol client,  Next: ftplib — FTP protocol client,  Prev: urllib2 — extensible library for opening URLs,  Up: Internet Protocols and Support

5.20.7 `httplib' — HTTP protocol client
-----------------------------------------

     Note: The *Note httplib: ef. module has been renamed to
     `http.client' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

`Source code:' Lib/httplib.py(1)

__________________________________________________________________

This module defines classes which implement the client side of the HTTP
and HTTPS protocols.  It is normally not used directly — the module
*Note urllib: 188.  uses it to handle URLs that use HTTP and HTTPS.

See also
........

The Requests package(2) is recommended for a higher-level HTTP client
interface.

     Note: HTTPS support is only available if the *Note socket: 15c.
     module was compiled with SSL support.

     Note: The public interface for this module changed substantially
     in Python 2.0.  The `HTTP' class is retained only for backward
     compatibility with 1.5.2.  It should not be used in new code.
     Refer to the online docstrings for usage.

The module provides the following classes:

 -- Class: httplib.HTTPConnection (host[, port[, strict[, timeout[,
          source_address]]]])
     An *Note HTTPConnection: 22c. instance represents one transaction
     with an HTTP server.  It should be instantiated passing it a host
     and optional port number.  If no port number is passed, the port
     is extracted from the host string if it has the form `host:port',
     else the default HTTP port (80) is used.  When true, the optional
     parameter `strict' (which defaults to a false value) causes
     `BadStatusLine' to be raised if the status line can’t be parsed
     as a valid HTTP/1.0 or 1.1 status line.  If the optional `timeout'
     parameter is given, blocking operations (like connection attempts)
     will timeout after that many seconds (if it is not given, the
     global default timeout setting is used).  The optional
     `source_address' parameter may be a tuple of a (host, port) to use
     as the source address the HTTP connection is made from.

     For example, the following calls all create instances that connect
     to the server at the same host and port:

         >>> h1 = httplib.HTTPConnection('www.cwi.nl')
         >>> h2 = httplib.HTTPConnection('www.cwi.nl:80')
         >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80)
         >>> h3 = httplib.HTTPConnection('www.cwi.nl', 80, timeout=10)

     New in version 2.0.

     Changed in version 2.6: `timeout' was added.

     Changed in version 2.7: `source_address' was added.


 -- Class: httplib.HTTPSConnection (host[, port[, key_file[,
          cert_file[, strict[, timeout[, source_address[,
          context]]]]]]])
     A subclass of *Note HTTPConnection: 22c. that uses SSL for
     communication with secure servers.  Default port is `443'.  If
     `context' is specified, it must be a *Note ssl.SSLContext: 2e5.
     instance describing the various SSL options.

     `key_file' and `cert_file' are deprecated, please use *Note
     ssl.SSLContext.load_cert_chain(): 17f7. instead, or let *Note
     ssl.create_default_context(): 17b5. select the system’s trusted
     CA certificates for you.

     Please read *Note Security considerations: 17a0. for more
     information on best practices.

     New in version 2.0.

     Changed in version 2.6: `timeout' was added.

     Changed in version 2.7: `source_address' was added.

     Changed in version 2.7.9: `context' was added.

     This class now performs all the necessary certificate and hostname
     checks by default. To revert to the previous, unverified, behavior
     `ssl._create_unverified_context()' can be passed to the `context'
     parameter.


 -- Class: httplib.HTTPResponse (sock, debuglevel=0, strict=0)
     Class whose instances are returned upon successful connection.
     Not instantiated directly by user.

     New in version 2.0.


 -- Class: httplib.HTTPMessage
     An *Note HTTPMessage: 1d6d. instance is used to hold the headers
     from an HTTP response. It is implemented using the *Note
     mimetools.Message: 19b0. class and provides utility functions to
     deal with HTTP Headers. It is not directly instantiated by the
     users.

The following exceptions are raised as appropriate:

 -- Exception: httplib.HTTPException
     The base class of the other exceptions in this module.  It is a
     subclass of *Note Exception: 34d.

     New in version 2.0.


 -- Exception: httplib.NotConnected
     A subclass of *Note HTTPException: 1d6e.

     New in version 2.0.


 -- Exception: httplib.InvalidURL
     A subclass of *Note HTTPException: 1d6e, raised if a port is given
     and is either non-numeric or empty.

     New in version 2.3.


 -- Exception: httplib.UnknownProtocol
     A subclass of *Note HTTPException: 1d6e.

     New in version 2.0.


 -- Exception: httplib.UnknownTransferEncoding
     A subclass of *Note HTTPException: 1d6e.

     New in version 2.0.


 -- Exception: httplib.UnimplementedFileMode
     A subclass of *Note HTTPException: 1d6e.

     New in version 2.0.


 -- Exception: httplib.IncompleteRead
     A subclass of *Note HTTPException: 1d6e.

     New in version 2.0.


 -- Exception: httplib.ImproperConnectionState
     A subclass of *Note HTTPException: 1d6e.

     New in version 2.0.


 -- Exception: httplib.CannotSendRequest
     A subclass of *Note ImproperConnectionState: 1d75.

     New in version 2.0.


 -- Exception: httplib.CannotSendHeader
     A subclass of *Note ImproperConnectionState: 1d75.

     New in version 2.0.


 -- Exception: httplib.ResponseNotReady
     A subclass of *Note ImproperConnectionState: 1d75.

     New in version 2.0.


 -- Exception: httplib.BadStatusLine
     A subclass of *Note HTTPException: 1d6e.  Raised if a server
     responds with a HTTP status code that we don’t understand.

     New in version 2.0.


The constants defined in this module are:

 -- Data: httplib.HTTP_PORT
     The default port for the HTTP protocol (always `80').

 -- Data: httplib.HTTPS_PORT
     The default port for the HTTPS protocol (always `443').

and also the following constants for integer status codes:

Constant                                       Value         Definition
----------------------------------------------------------------------------------------------------------------------------------------- 
`CONTINUE'                                     `100'         HTTP/1.1, RFC 2616, Section 10.1.1(3)
`SWITCHING_PROTOCOLS'                          `101'         HTTP/1.1, RFC 2616, Section 10.1.2(4)
`PROCESSING'                                   `102'         WEBDAV, RFC 2518, Section 10.1(5)
`OK'                                           `200'         HTTP/1.1, RFC 2616, Section 10.2.1(6)
`CREATED'                                      `201'         HTTP/1.1, RFC 2616, Section 10.2.2(7)
`ACCEPTED'                                     `202'         HTTP/1.1, RFC 2616, Section 10.2.3(8)
`NON_AUTHORITATIVE_INFORMATION'                `203'         HTTP/1.1, RFC 2616, Section 10.2.4(9)
`NO_CONTENT'                                   `204'         HTTP/1.1, RFC 2616, Section 10.2.5(10)
`RESET_CONTENT'                                `205'         HTTP/1.1, RFC 2616, Section 10.2.6(11)
`PARTIAL_CONTENT'                              `206'         HTTP/1.1, RFC 2616, Section 10.2.7(12)
`MULTI_STATUS'                                 `207'         WEBDAV RFC 2518, Section 10.2(13)
`IM_USED'                                      `226'         Delta encoding in HTTP, RFC 3229(14), Section 10.4.1
`MULTIPLE_CHOICES'                             `300'         HTTP/1.1, RFC 2616, Section 10.3.1(15)
`MOVED_PERMANENTLY'                            `301'         HTTP/1.1, RFC 2616, Section 10.3.2(16)
`FOUND'                                        `302'         HTTP/1.1, RFC 2616, Section 10.3.3(17)
`SEE_OTHER'                                    `303'         HTTP/1.1, RFC 2616, Section 10.3.4(18)
`NOT_MODIFIED'                                 `304'         HTTP/1.1, RFC 2616, Section 10.3.5(19)
`USE_PROXY'                                    `305'         HTTP/1.1, RFC 2616, Section 10.3.6(20)
`TEMPORARY_REDIRECT'                           `307'         HTTP/1.1, RFC 2616, Section 10.3.8(21)
`BAD_REQUEST'                                  `400'         HTTP/1.1, RFC 2616, Section 10.4.1(22)
`UNAUTHORIZED'                                 `401'         HTTP/1.1, RFC 2616, Section 10.4.2(23)
`PAYMENT_REQUIRED'                             `402'         HTTP/1.1, RFC 2616, Section 10.4.3(24)
`FORBIDDEN'                                    `403'         HTTP/1.1, RFC 2616, Section 10.4.4(25)
`NOT_FOUND'                                    `404'         HTTP/1.1, RFC 2616, Section 10.4.5(26)
`METHOD_NOT_ALLOWED'                           `405'         HTTP/1.1, RFC 2616, Section 10.4.6(27)
`NOT_ACCEPTABLE'                               `406'         HTTP/1.1, RFC 2616, Section 10.4.7(28)
`PROXY_AUTHENTICATION_REQUIRED'                `407'         HTTP/1.1, RFC 2616, Section 10.4.8(29)
`REQUEST_TIMEOUT'                              `408'         HTTP/1.1, RFC 2616, Section 10.4.9(30)
`CONFLICT'                                     `409'         HTTP/1.1, RFC 2616, Section 10.4.10(31)
`GONE'                                         `410'         HTTP/1.1, RFC 2616, Section 10.4.11(32)
`LENGTH_REQUIRED'                              `411'         HTTP/1.1, RFC 2616, Section 10.4.12(33)
`PRECONDITION_FAILED'                          `412'         HTTP/1.1, RFC 2616, Section 10.4.13(34)
`REQUEST_ENTITY_TOO_LARGE'                     `413'         HTTP/1.1, RFC 2616, Section 10.4.14(35)
`REQUEST_URI_TOO_LONG'                         `414'         HTTP/1.1, RFC 2616, Section 10.4.15(36)
`UNSUPPORTED_MEDIA_TYPE'                       `415'         HTTP/1.1, RFC 2616, Section 10.4.16(37)
`REQUESTED_RANGE_NOT_SATISFIABLE'              `416'         HTTP/1.1, RFC 2616, Section 10.4.17(38)
`EXPECTATION_FAILED'                           `417'         HTTP/1.1, RFC 2616, Section 10.4.18(39)
`UNPROCESSABLE_ENTITY'                         `422'         WEBDAV, RFC 2518, Section 10.3(40)
`LOCKED'                                       `423'         WEBDAV RFC 2518, Section 10.4(41)
`FAILED_DEPENDENCY'                            `424'         WEBDAV, RFC 2518, Section 10.5(42)
`UPGRADE_REQUIRED'                             `426'         HTTP Upgrade to TLS, RFC 2817(43), Section 6
`INTERNAL_SERVER_ERROR'                        `500'         HTTP/1.1, RFC 2616, Section 10.5.1(44)
`NOT_IMPLEMENTED'                              `501'         HTTP/1.1, RFC 2616, Section 10.5.2(45)
`BAD_GATEWAY'                                  `502'         HTTP/1.1 RFC 2616, Section 10.5.3(46)
`SERVICE_UNAVAILABLE'                          `503'         HTTP/1.1, RFC 2616, Section 10.5.4(47)
`GATEWAY_TIMEOUT'                              `504'         HTTP/1.1 RFC 2616, Section 10.5.5(48)
`HTTP_VERSION_NOT_SUPPORTED'                   `505'         HTTP/1.1, RFC 2616, Section 10.5.6(49)
`INSUFFICIENT_STORAGE'                         `507'         WEBDAV, RFC 2518, Section 10.6(50)
`NOT_EXTENDED'                                 `510'         An HTTP Extension Framework, RFC 2774(51), Section 7

 -- Data: httplib.responses
     This dictionary maps the HTTP 1.1 status codes to the W3C names.

     Example: `httplib.responses[httplib.NOT_FOUND]' is `'Not Found''.

     New in version 2.5.


* Menu:

* HTTPConnection Objects::
* HTTPResponse Objects::
* Examples: Examples<14>.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/httplib.py

(2) http://requests.readthedocs.org/

(3) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.1

(4) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.1.2

(5) http://www.webdav.org/specs/rfc2518.html#STATUS_102

(6) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1

(7) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.2

(8) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.3

(9) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.4

(10) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5

(11) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.6

(12) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.7

(13) http://www.webdav.org/specs/rfc2518.html#STATUS_207

(14) https://tools.ietf.org/html/rfc3229.html

(15) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.1

(16) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.2

(17) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.3

(18) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4

(19) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.5

(20) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.6

(21) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.8

(22) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1

(23) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2

(24) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.3

(25) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.4

(26) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.5

(27) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.6

(28) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.7

(29) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.8

(30) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.9

(31) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.10

(32) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.11

(33) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.12

(34) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.13

(35) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.14

(36) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.15

(37) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.16

(38) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.17

(39) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.18

(40) http://www.webdav.org/specs/rfc2518.html#STATUS_422

(41) http://www.webdav.org/specs/rfc2518.html#STATUS_423

(42) http://www.webdav.org/specs/rfc2518.html#STATUS_424

(43) https://tools.ietf.org/html/rfc2817.html

(44) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.1

(45) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.2

(46) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.3

(47) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.4

(48) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.5

(49) http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5.6

(50) http://www.webdav.org/specs/rfc2518.html#STATUS_507

(51) https://tools.ietf.org/html/rfc2774.html


File: python.info,  Node: HTTPConnection Objects,  Next: HTTPResponse Objects,  Up: httplib — HTTP protocol client

5.20.7.1 HTTPConnection Objects
...............................

*Note HTTPConnection: 22c. instances have the following methods:

 -- Method: HTTPConnection.request (method, url[, body[, headers]])
     This will send a request to the server using the HTTP request
     method `method' and the selector `url'.  If the `body' argument is
     present, it should be a string of data to send after the headers
     are finished. Alternatively, it may be an open file object, in
     which case the contents of the file is sent; this file object
     should support `fileno()' and `read()' methods. The `headers'
     argument should be a mapping of extra HTTP headers to send with
     the request.

     If one is not provided in `headers', a `Content-Length' header is
     added automatically for all methods if the length of the body can
     be determined, either from the length of the `str' representation,
     or from the reported size of the file on disk. If `body' is `None'
     the header is not set except for methods that expect a body
     (`PUT', `POST', and `PATCH') in which case it is set to `0'.

     Changed in version 2.6: `body' can be a file object.


 -- Method: HTTPConnection.getresponse ()
     Should be called after a request is sent to get the response from
     the server.  Returns an *Note HTTPResponse: 22b. instance.

          Note: Note that you must have read the whole response before
          you can send a new request to the server.

 -- Method: HTTPConnection.set_debuglevel (level)
     Set the debugging level (the amount of debugging output printed).
     The default debug level is `0', meaning no debugging output is
     printed.

 -- Method: HTTPConnection.set_tunnel (host, port=None, headers=None)
     Set the host and the port for HTTP Connect Tunnelling. Normally
     used when it is required to do HTTPS Conection through a proxy
     server.

     The headers argument should be a mapping of extra HTTP headers to
     send with the CONNECT request.

     New in version 2.7.


 -- Method: HTTPConnection.connect ()
     Connect to the server specified when the object was created.

 -- Method: HTTPConnection.close ()
     Close the connection to the server.

As an alternative to using the `request()' method described above, you
can also send your request step by step, by using the four functions
below.

 -- Method: HTTPConnection.putrequest (request, selector[, skip_host[,
          skip_accept_encoding]])
     This should be the first call after the connection to the server
     has been made.  It sends a line to the server consisting of the
     `request' string, the `selector' string, and the HTTP version
     (`HTTP/1.1').  To disable automatic sending of `Host:' or
     `Accept-Encoding:' headers (for example to accept additional
     content encodings), specify `skip_host' or `skip_accept_encoding'
     with non-False values.

     Changed in version 2.4: `skip_accept_encoding' argument added.


 -- Method: HTTPConnection.putheader (header, argument[, ...])
     Send an RFC 822(1)-style header to the server.  It sends a line to
     the server consisting of the header, a colon and a space, and the
     first argument.  If more arguments are given, continuation lines
     are sent, each consisting of a tab and an argument.

 -- Method: HTTPConnection.endheaders (message_body=None)
     Send a blank line to the server, signalling the end of the
     headers. The optional `message_body' argument can be used to pass
     a message body associated with the request.  The message body will
     be sent in the same packet as the message headers if it is string,
     otherwise it is sent in a separate packet.

     Changed in version 2.7: `message_body' was added.


 -- Method: HTTPConnection.send (data)
     Send data to the server.  This should be used directly only after
     the *Note endheaders(): 1d87. method has been called and before
     *Note getresponse(): 1d80. is called.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: HTTPResponse Objects,  Next: Examples<14>,  Prev: HTTPConnection Objects,  Up: httplib — HTTP protocol client

5.20.7.2 HTTPResponse Objects
.............................

*Note HTTPResponse: 22b. instances have the following methods and
attributes:

 -- Method: HTTPResponse.read ([amt])
     Reads and returns the response body, or up to the next `amt' bytes.

 -- Method: HTTPResponse.getheader (name[, default])
     Get the contents of the header `name', or `default' if there is no
     matching header.

 -- Method: HTTPResponse.getheaders ()
     Return a list of (header, value) tuples.

     New in version 2.4.


 -- Method: HTTPResponse.fileno ()
     Returns the `fileno' of the underlying socket.

 -- Attribute: HTTPResponse.msg
     A *Note mimetools.Message: 19b0. instance containing the response
     headers.

 -- Attribute: HTTPResponse.version
     HTTP protocol version used by server.  10 for HTTP/1.0, 11 for
     HTTP/1.1.

 -- Attribute: HTTPResponse.status
     Status code returned by server.

 -- Attribute: HTTPResponse.reason
     Reason phrase returned by server.


File: python.info,  Node: Examples<14>,  Prev: HTTPResponse Objects,  Up: httplib — HTTP protocol client

5.20.7.3 Examples
.................

Here is an example session that uses the `GET' method:

    >>> import httplib
    >>> conn = httplib.HTTPSConnection("www.python.org")
    >>> conn.request("GET", "/")
    >>> r1 = conn.getresponse()
    >>> print r1.status, r1.reason
    200 OK
    >>> data1 = r1.read()
    >>> conn.request("GET", "/")
    >>> r2 = conn.getresponse()
    >>> print r2.status, r2.reason
    404 Not Found
    >>> data2 = r2.read()
    >>> conn.close()

Here is an example session that uses the `HEAD' method.  Note that the
`HEAD' method never returns any data.

    >>> import httplib
    >>> conn = httplib.HTTPSConnection("www.python.org")
    >>> conn.request("HEAD","/")
    >>> res = conn.getresponse()
    >>> print res.status, res.reason
    200 OK
    >>> data = res.read()
    >>> print len(data)
    0
    >>> data == ''
    True

Here is an example session that shows how to `POST' requests:

    >>> import httplib, urllib
    >>> params = urllib.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})
    >>> headers = {"Content-type": "application/x-www-form-urlencoded",
    ...            "Accept": "text/plain"}
    >>> conn = httplib.HTTPConnection("bugs.python.org")
    >>> conn.request("POST", "", params, headers)
    >>> response = conn.getresponse()
    >>> print response.status, response.reason
    302 Found
    >>> data = response.read()
    >>> data
    'Redirecting to <a href="http://bugs.python.org/issue12524">http://bugs.python.org/issue12524</a>'
    >>> conn.close()

Client side `HTTP PUT' requests are very similar to `POST' requests. The
difference lies only the server side where HTTP server will allow
resources to be created via `PUT' request. Here is an example session
that shows how to do `PUT' request using httplib:

    >>> # This creates an HTTP message
    >>> # with the content of BODY as the enclosed representation
    >>> # for the resource http://localhost:8080/foobar
    ...
    >>> import httplib
    >>> BODY = "***filecontents***"
    >>> conn = httplib.HTTPConnection("localhost", 8080)
    >>> conn.request("PUT", "/file", BODY)
    >>> response = conn.getresponse()
    >>> print response.status, response.reason
    200, OK


File: python.info,  Node: ftplib — FTP protocol client,  Next: poplib — POP3 protocol client,  Prev: httplib — HTTP protocol client,  Up: Internet Protocols and Support

5.20.8 `ftplib' — FTP protocol client
---------------------------------------

`Source code:' Lib/ftplib.py(1)

__________________________________________________________________

This module defines the class *Note FTP: 35b. and a few related items.
The *Note FTP: 35b. class implements the client side of the FTP
protocol.  You can use this to write Python programs that perform a
variety of automated FTP jobs, such as mirroring other FTP servers.  It
is also used by the module *Note urllib: 188. to handle URLs that use
FTP.  For more information on FTP (File Transfer Protocol), see Internet RFC
959(2).

Here’s a sample session using the *Note ftplib: d9. module:

    >>> from ftplib import FTP
    >>> ftp = FTP('ftp.debian.org')     # connect to host, default port
    >>> ftp.login()                     # user anonymous, passwd anonymous@
    '230 Login successful.'
    >>> ftp.cwd('debian')               # change into "debian" directory
    >>> ftp.retrlines('LIST')           # list directory contents
    -rw-rw-r--    1 1176     1176         1063 Jun 15 10:18 README
    ...
    drwxr-sr-x    5 1176     1176         4096 Dec 19  2000 pool
    drwxr-sr-x    4 1176     1176         4096 Nov 17  2008 project
    drwxr-xr-x    3 1176     1176         4096 Oct 10  2012 tools
    '226 Directory send OK.'
    >>> ftp.retrbinary('RETR README', open('README', 'wb').write)
    '226 Transfer complete.'
    >>> ftp.quit()

The module defines the following items:

 -- Class: ftplib.FTP ([host[, user[, passwd[, acct[, timeout]]]]])
     Return a new instance of the *Note FTP: 35b. class.  When `host'
     is given, the method call `connect(host)' is made.  When `user' is
     given, additionally the method call `login(user, passwd, acct)' is
     made (where `passwd' and `acct' default to the empty string when
     not given).  The optional `timeout' parameter specifies a timeout
     in seconds for blocking operations like the connection attempt (if
     is not specified, the global default timeout setting will be used).

     Changed in version 2.6: `timeout' was added.


 -- Class: ftplib.FTP_TLS ([host[, user[, passwd[, acct[, keyfile[,
          certfile[, context[, timeout]]]]]]]])
     A *Note FTP: 35b. subclass which adds TLS support to FTP as
     described in RFC 4217(3).  Connect as usual to port 21 implicitly
     securing the FTP control connection before authenticating.
     Securing the data connection requires the user to explicitly ask
     for it by calling the *Note prot_p(): 1d97. method.  `context' is
     a *Note ssl.SSLContext: 2e5. object which allows bundling SSL
     configuration options, certificates and private keys into a single
     (potentially long-lived) structure.  Please read *Note Security
     considerations: 17a0. for best practices.

     `keyfile' and `certfile' are a legacy alternative to `context' –
     they can point to PEM-formatted private key and certificate chain
     files (respectively) for the SSL connection.

     New in version 2.7.

     Changed in version 2.7.10: The `context' parameter was added.

     Here’s a sample session using the *Note FTP_TLS: 219. class:

         >>> from ftplib import FTP_TLS
         >>> ftps = FTP_TLS('ftp.python.org')
         >>> ftps.login()           # login anonymously before securing control channel
         >>> ftps.prot_p()          # switch to secure data connection
         >>> ftps.retrlines('LIST') # list directory content securely
         total 9
         drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .
         drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..
         drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin
         drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc
         d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming
         drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib
         drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub
         drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr
         -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg
         '226 Transfer complete.'
         >>> ftps.quit()
         >>>

 -- Exception: ftplib.error_reply
     Exception raised when an unexpected reply is received from the
     server.

 -- Exception: ftplib.error_temp
     Exception raised when an error code signifying a temporary error
     (response codes in the range 400–499) is received.

 -- Exception: ftplib.error_perm
     Exception raised when an error code signifying a permanent error
     (response codes in the range 500–599) is received.

 -- Exception: ftplib.error_proto
     Exception raised when a reply is received from the server that
     does not fit the response specifications of the File Transfer
     Protocol, i.e. begin with a digit in the range 1–5.

 -- Data: ftplib.all_errors
     The set of all exceptions (as a tuple) that methods of *Note FTP:
     35b.  instances may raise as a result of problems with the FTP
     connection (as opposed to programming errors made by the caller).
     This set includes the four exceptions listed above as well as
     *Note socket.error: 399. and *Note IOError: 1fa.

See also
........

Module *Note netrc: 122.
     Parser for the `.netrc' file format.  The file `.netrc' is
     typically used by FTP clients to load user authentication
     information before prompting the user.

The file `Tools/scripts/ftpmirror.py' in the Python source distribution
is a script that can mirror FTP sites, or portions thereof, using the
*Note ftplib: d9.  module. It can be used as an extended example that
applies this module.

* Menu:

* FTP Objects::
* FTP_TLS Objects::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/ftplib.py

(2) https://tools.ietf.org/html/rfc959.html

(3) https://tools.ietf.org/html/rfc4217.html


File: python.info,  Node: FTP Objects,  Next: FTP_TLS Objects,  Up: ftplib — FTP protocol client

5.20.8.1 FTP Objects
....................

Several methods are available in two flavors: one for handling text
files and another for binary files.  These are named for the command
which is used followed by `lines' for the text version or `binary' for
the binary version.

*Note FTP: 35b. instances have the following methods:

 -- Method: FTP.set_debuglevel (level)
     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, `0', produces no debugging
     output.  A value of `1' produces a moderate amount of debugging
     output, generally a single line per request.  A value of `2' or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: FTP.connect (host[, port[, timeout]])
     Connect to the given host and port.  The default port number is
     `21', as specified by the FTP protocol specification.  It is
     rarely needed to specify a different port number.  This function
     should be called only once for each instance; it should not be
     called at all if a host was given when the instance was created.
     All other methods can only be used after a connection has been
     made.

     The optional `timeout' parameter specifies a timeout in seconds
     for the connection attempt. If no `timeout' is passed, the global
     default timeout setting will be used.

     Changed in version 2.6: `timeout' was added.


 -- Method: FTP.getwelcome ()
     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: FTP.login ([user[, passwd[, acct]]])
     Log in as the given `user'.  The `passwd' and `acct' parameters
     are optional and default to the empty string.  If no `user' is
     specified, it defaults to `'anonymous''.  If `user' is
     `'anonymous'', the default `passwd' is `'anonymous@''.  This
     function should be called only once for each instance, after a
     connection has been established; it should not be called at all if
     a host and user were given when the instance was created.  Most
     FTP commands are only allowed after the client has logged in.  The
     `acct' parameter supplies “accounting information”; few
     systems implement this.

 -- Method: FTP.abort ()
     Abort a file transfer that is in progress.  Using this does not
     always work, but it’s worth a try.

 -- Method: FTP.sendcmd (command)
     Send a simple command string to the server and return the response
     string.

 -- Method: FTP.voidcmd (command)
     Send a simple command string to the server and handle the
     response.  Return nothing if a response code corresponding to
     success (codes in the range 200–299) is received.  Raise *Note
     error_reply: 1d98. otherwise.

 -- Method: FTP.retrbinary (command, callback[, maxblocksize[, rest]])
     Retrieve a file in binary transfer mode.  `command' should be an
     appropriate `RETR' command: `'RETR filename''. The `callback'
     function is called for each block of data received, with a single
     string argument giving the data block. The optional `maxblocksize'
     argument specifies the maximum chunk size to read on the low-level
     socket object created to do the actual transfer (which will also
     be the largest size of the data blocks passed to `callback').  A
     reasonable default is chosen. `rest' means the same thing as in the
     *Note transfercmd(): 1da7. method.

 -- Method: FTP.retrlines (command[, callback])
     Retrieve a file or directory listing in ASCII transfer mode.
     `command' should be an appropriate `RETR' command (see *Note
     retrbinary(): 1da6.) or a command such as `LIST', `NLST' or `MLSD'
     (usually just the string `'LIST'').  `LIST' retrieves a list of
     files and information about those files.  `NLST' retrieves a list
     of file names.  On some servers, `MLSD' retrieves a machine
     readable list of files and information about those files.  The
     `callback' function is called for each line with a string argument
     containing the line with the trailing CRLF stripped.  The default
     `callback' prints the line to `sys.stdout'.

 -- Method: FTP.set_pasv (boolean)
     Enable “passive” mode if `boolean' is true, other disable
     passive mode.  (In Python 2.0 and before, passive mode was off by
     default; in Python 2.1 and later, it is on by default.)

 -- Method: FTP.storbinary (command, file[, blocksize, callback, rest])
     Store a file in binary transfer mode.  `command' should be an
     appropriate `STOR' command: `"STOR filename"'. `file' is an open
     file object which is read until EOF using its `read()' method in
     blocks of size `blocksize' to provide the data to be stored.  The
     `blocksize' argument defaults to 8192.  `callback' is an optional
     single parameter callable that is called on each block of data
     after it is sent. `rest' means the same thing as in the *Note
     transfercmd(): 1da7. method.

     Changed in version 2.1: default for `blocksize' added.

     Changed in version 2.6: `callback' parameter added.

     Changed in version 2.7: `rest' parameter added.


 -- Method: FTP.storlines (command, file[, callback])
     Store a file in ASCII transfer mode.  `command' should be an
     appropriate `STOR' command (see *Note storbinary(): 21a.).  Lines
     are read until EOF from the open file object `file' using its
     *Note readline(): 66f. method to provide the data to be stored.
     `callback' is an optional single parameter callable that is called
     on each line after it is sent.

     Changed in version 2.6: `callback' parameter added.


 -- Method: FTP.transfercmd (cmd[, rest])
     Initiate a transfer over the data connection.  If the transfer is
     active, send an `EPRT' or  `PORT' command and the transfer command
     specified by `cmd', and accept the connection.  If the server is
     passive, send an `EPSV' or `PASV' command, connect to it, and
     start the transfer command.  Either way, return the socket for the
     connection.

     If optional `rest' is given, a `REST' command is sent to the
     server, passing `rest' as an argument.  `rest' is usually a byte
     offset into the requested file, telling the server to restart
     sending the file’s bytes at the requested offset, skipping over
     the initial bytes.  Note however that RFC 959 requires only that
     `rest' be a string containing characters in the printable range
     from ASCII code 33 to ASCII code 126.  The *Note transfercmd():
     1da7. method, therefore, converts `rest' to a string, but no check
     is performed on the string’s contents.  If the server does not
     recognize the `REST' command, an *Note error_reply: 1d98. exception
     will be raised.  If this happens, simply call *Note transfercmd():
     1da7. without a `rest' argument.

 -- Method: FTP.ntransfercmd (cmd[, rest])
     Like *Note transfercmd(): 1da7, but returns a tuple of the data
     connection and the expected size of the data.  If the expected
     size could not be computed, `None' will be returned as the
     expected size.  `cmd' and `rest' means the same thing as in *Note
     transfercmd(): 1da7.

 -- Method: FTP.nlst (argument[, ...])
     Return a list of file names as returned by the `NLST' command.  The
     optional `argument' is a directory to list (default is the current
     server directory).  Multiple arguments can be used to pass
     non-standard options to the `NLST' command.

 -- Method: FTP.dir (argument[, ...])
     Produce a directory listing as returned by the `LIST' command,
     printing it to standard output.  The optional `argument' is a
     directory to list (default is the current server directory).
     Multiple arguments can be used to pass non-standard options to the
     `LIST' command.  If the last argument is a function, it is used as
     a `callback' function as for *Note retrlines(): 1da8.; the default
     prints to `sys.stdout'.  This method returns `None'.

 -- Method: FTP.rename (fromname, toname)
     Rename file `fromname' on the server to `toname'.

 -- Method: FTP.delete (filename)
     Remove the file named `filename' from the server.  If successful,
     returns the text of the response, otherwise raises *Note
     error_perm: 1d9a. on permission errors or *Note error_reply: 1d98.
     on other errors.

 -- Method: FTP.cwd (pathname)
     Set the current directory on the server.

 -- Method: FTP.mkd (pathname)
     Create a new directory on the server.

 -- Method: FTP.pwd ()
     Return the pathname of the current directory on the server.

 -- Method: FTP.rmd (dirname)
     Remove the directory named `dirname' on the server.

 -- Method: FTP.size (filename)
     Request the size of the file named `filename' on the server.  On
     success, the size of the file is returned as an integer, otherwise
     `None' is returned.  Note that the `SIZE' command is not
     standardized, but is supported by many common server
     implementations.

 -- Method: FTP.quit ()
     Send a `QUIT' command to the server and close the connection. This
     is the “polite” way to close a connection, but it may raise an
     exception if the server responds with an error to the `QUIT'
     command.  This implies a call to the *Note close(): 1db6. method
     which renders the *Note FTP: 35b. instance useless for subsequent
     calls (see below).

 -- Method: FTP.close ()
     Close the connection unilaterally.  This should not be applied to
     an already closed connection such as after a successful call to
     *Note quit(): 1db5.  After this call the *Note FTP: 35b. instance
     should not be used any more (after a call to *Note close(): 1db6.
     or *Note quit(): 1db5. you cannot reopen the connection by issuing
     another *Note login(): 1da2. method).


File: python.info,  Node: FTP_TLS Objects,  Prev: FTP Objects,  Up: ftplib — FTP protocol client

5.20.8.2 FTP_TLS Objects
........................

*Note FTP_TLS: 219. class inherits from *Note FTP: 35b, defining these
additional objects:

 -- Attribute: FTP_TLS.ssl_version
     The SSL version to use (defaults to *Note ssl.PROTOCOL_SSLv23:
     17b2.).

 -- Method: FTP_TLS.auth ()
     Set up secure control connection by using TLS or SSL, depending on
     what specified in *Note ssl_version(): 1db8. attribute.

 -- Method: FTP_TLS.prot_p ()
     Set up secure data connection.

 -- Method: FTP_TLS.prot_c ()
     Set up clear text data connection.


File: python.info,  Node: poplib — POP3 protocol client,  Next: imaplib — IMAP4 protocol client,  Prev: ftplib — FTP protocol client,  Up: Internet Protocols and Support

5.20.9 `poplib' — POP3 protocol client
----------------------------------------

`Source code:' Lib/poplib.py(1)

__________________________________________________________________

This module defines a class, *Note POP3: 1dbd, which encapsulates a
connection to a POP3 server and implements the protocol as defined in RFC
1725(2).  The *Note POP3: 1dbd. class supports both the minimal and
optional command sets.  Additionally, this module provides a class
*Note POP3_SSL: 1dbe, which provides support for connecting to POP3
servers that use SSL as an underlying protocol layer.

Note that POP3, though widely supported, is obsolescent.  The
implementation quality of POP3 servers varies widely, and too many are
quite poor. If your mailserver supports IMAP, you would be better off
using the *Note imaplib.IMAP4: 1dbf. class, as IMAP servers tend to be
better implemented.

The *Note poplib: 136. module provides two classes:

 -- Class: poplib.POP3 (host[, port[, timeout]])
     This class implements the actual POP3 protocol.  The connection is
     created when the instance is initialized. If `port' is omitted,
     the standard POP3 port (110) is used. The optional `timeout'
     parameter specifies a timeout in seconds for the connection
     attempt (if not specified, the global default timeout setting will
     be used).

     Changed in version 2.6: `timeout' was added.


 -- Class: poplib.POP3_SSL (host[, port[, keyfile[, certfile]]])
     This is a subclass of *Note POP3: 1dbd. that connects to the
     server over an SSL encrypted socket.  If `port' is not specified,
     995, the standard POP3-over-SSL port is used.  `keyfile' and
     `certfile' are also optional - they can contain a PEM formatted
     private key and certificate chain file for the SSL connection.

     New in version 2.4.


One exception is defined as an attribute of the *Note poplib: 136.
module:

 -- Exception: poplib.error_proto
     Exception raised on any errors from this module (errors from *Note
     socket: 15c.  module are not caught). The reason for the exception
     is passed to the constructor as a string.

See also
........

Module *Note imaplib: f3.
     The standard Python IMAP module.

Frequently Asked Questions About Fetchmail(3)
     The FAQ for the `fetchmail' POP/IMAP client collects information on
     POP3 server variations and RFC noncompliance that may be useful if
     you need to write an application based on the POP protocol.

* Menu:

* POP3 Objects::
* POP3 Example::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/poplib.py

(2) https://tools.ietf.org/html/rfc1725.html

(3) http://www.catb.org/~esr/fetchmail/fetchmail-FAQ.html


File: python.info,  Node: POP3 Objects,  Next: POP3 Example,  Up: poplib — POP3 protocol client

5.20.9.1 POP3 Objects
.....................

All POP3 commands are represented by methods of the same name, in
lower-case; most return the response text sent by the server.

An *Note POP3: 1dbd. instance has the following methods:

 -- Method: POP3.set_debuglevel (level)
     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, `0', produces no debugging
     output.  A value of `1' produces a moderate amount of debugging
     output, generally a single line per request.  A value of `2' or
     higher produces the maximum amount of debugging output, logging
     each line sent and received on the control connection.

 -- Method: POP3.getwelcome ()
     Returns the greeting string sent by the POP3 server.

 -- Method: POP3.user (username)
     Send user command, response should indicate that a password is
     required.

 -- Method: POP3.pass_ (password)
     Send password, response includes message count and mailbox size.
     Note: the mailbox on the server is locked until `quit()' is called.

 -- Method: POP3.apop (user, secret)
     Use the more secure APOP authentication to log into the POP3
     server.

 -- Method: POP3.rpop (user)
     Use RPOP authentication (similar to UNIX r-commands) to log into
     POP3 server.

 -- Method: POP3.stat ()
     Get mailbox status.  The result is a tuple of 2 integers:
     `(message count, mailbox size)'.

 -- Method: POP3.list ([which])
     Request message list, result is in the form `(response, ['mesg_num
     octets', ...], octets)'. If `which' is set, it is the message to
     list.

 -- Method: POP3.retr (which)
     Retrieve whole message number `which', and set its seen flag.
     Result is in form `(response, ['line', ...], octets)'.

 -- Method: POP3.dele (which)
     Flag message number `which' for deletion.  On most servers
     deletions are not actually performed until QUIT (the major
     exception is Eudora QPOP, which deliberately violates the RFCs by
     doing pending deletes on any disconnect).

 -- Method: POP3.rset ()
     Remove any deletion marks for the mailbox.

 -- Method: POP3.noop ()
     Do nothing.  Might be used as a keep-alive.

 -- Method: POP3.quit ()
     Signoff:  commit changes, unlock mailbox, drop connection.

 -- Method: POP3.top (which, howmuch)
     Retrieves the message header plus `howmuch' lines of the message
     after the header of message number `which'. Result is in form
     `(response, ['line', ...], octets)'.

     The POP3 TOP command this method uses, unlike the RETR command,
     doesn’t set the message’s seen flag; unfortunately, TOP is
     poorly specified in the RFCs and is frequently broken in off-brand
     servers. Test this method by hand against the POP3 servers you
     will use before trusting it.

 -- Method: POP3.uidl ([which])
     Return message digest (unique id) list. If `which' is specified,
     result contains the unique id for that message in the form
     `'response mesgnum uid', otherwise result is list `(response,
     ['mesgnum uid', ...], octets)'.

Instances of *Note POP3_SSL: 1dbe. have no additional methods. The
interface of this subclass is identical to its parent.


File: python.info,  Node: POP3 Example,  Prev: POP3 Objects,  Up: poplib — POP3 protocol client

5.20.9.2 POP3 Example
.....................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

    import getpass, poplib

    M = poplib.POP3('localhost')
    M.user(getpass.getuser())
    M.pass_(getpass.getpass())
    numMessages = len(M.list()[1])
    for i in range(numMessages):
        for j in M.retr(i+1)[1]:
            print j

At the end of the module, there is a test section that contains a more
extensive example of usage.


File: python.info,  Node: imaplib — IMAP4 protocol client,  Next: nntplib — NNTP protocol client,  Prev: poplib — POP3 protocol client,  Up: Internet Protocols and Support

5.20.10 `imaplib' — IMAP4 protocol client
-------------------------------------------

`Source code:' Lib/imaplib.py(1)

__________________________________________________________________

This module defines three classes, *Note IMAP4: 1dbf, *Note IMAP4_SSL:
1dd6. and *Note IMAP4_stream: 1dd7, which encapsulate a connection to
an IMAP4 server and implement a large subset of the IMAP4rev1 client
protocol as defined in RFC 2060(2). It is backward compatible with
IMAP4 ( RFC 1730(3)) servers, but note that the `STATUS' command is not
supported in IMAP4.

Three classes are provided by the *Note imaplib: f3. module, *Note
IMAP4: 1dbf. is the base class:

 -- Class: imaplib.IMAP4 ([host[, port]])
     This class implements the actual IMAP4 protocol.  The connection
     is created and protocol version (IMAP4 or IMAP4rev1) is determined
     when the instance is initialized. If `host' is not specified, `'''
     (the local host) is used. If `port' is omitted, the standard IMAP4
     port (143) is used.

Three exceptions are defined as attributes of the *Note IMAP4: 1dbf.
class:

 -- Exception: IMAP4.error
     Exception raised on any errors.  The reason for the exception is
     passed to the constructor as a string.

 -- Exception: IMAP4.abort
     IMAP4 server errors cause this exception to be raised.  This is a
     sub-class of *Note IMAP4.error: 1dd8.  Note that closing the
     instance and instantiating a new one will usually allow recovery
     from this exception.

 -- Exception: IMAP4.readonly
     This exception is raised when a writable mailbox has its status
     changed by the server.  This is a sub-class of *Note IMAP4.error:
     1dd8.  Some other client now has write permission, and the mailbox
     will need to be re-opened to re-obtain write permission.

There’s also a subclass for secure connections:

 -- Class: imaplib.IMAP4_SSL ([host[, port[, keyfile[, certfile]]]])
     This is a subclass derived from *Note IMAP4: 1dbf. that connects
     over an SSL encrypted socket (to use this class you need a socket
     module that was compiled with SSL support).  If `host' is not
     specified, `''' (the local host) is used.  If `port' is omitted,
     the standard IMAP4-over-SSL port (993) is used.  `keyfile' and
     `certfile' are also optional - they can contain a PEM formatted
     private key and certificate chain file for the SSL connection.

The second subclass allows for connections created by a child process:

 -- Class: imaplib.IMAP4_stream (command)
     This is a subclass derived from *Note IMAP4: 1dbf. that connects
     to the `stdin/stdout' file descriptors created by passing
     `command' to `os.popen2()'.

     New in version 2.3.


The following utility functions are defined:

 -- Function: imaplib.Internaldate2tuple (datestr)
     Parse an IMAP4 `INTERNALDATE' string and return corresponding local
     time.  The return value is a *Note time.struct_time: b18. instance
     or `None' if the string has wrong format.

 -- Function: imaplib.Int2AP (num)
     Converts an integer into a string representation using characters
     from the set [`A' .. `P'].

 -- Function: imaplib.ParseFlags (flagstr)
     Converts an IMAP4 `FLAGS' response to a tuple of individual flags.

 -- Function: imaplib.Time2Internaldate (date_time)
     Convert `date_time' to an IMAP4 `INTERNALDATE' representation.  The
     return value is a string in the form: `"DD-Mmm-YYYY HH:MM:SS
     +HHMM"' (including double-quotes).  The `date_time' argument can
     be a number (int or float) representing seconds since epoch (as
     returned by *Note time.time(): 47d.), a 9-tuple representing local
     time (as returned by *Note time.localtime(): b19.), or a
     double-quoted string.  In the last case, it is assumed to already
     be in the correct format.

Note that IMAP4 message numbers change as the mailbox changes; in
particular, after an `EXPUNGE' command performs deletions the remaining
messages are renumbered. So it is highly advisable to use UIDs instead,
with the UID command.

At the end of the module, there is a test section that contains a more
extensive example of usage.

See also
........

Documents describing the protocol, and sources and binaries  for servers
implementing it, can all be found at the University of Washington’s
`IMAP Information Center' (<https://www.washington.edu/imap/>).

* Menu:

* IMAP4 Objects::
* IMAP4 Example::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/imaplib.py

(2) https://tools.ietf.org/html/rfc2060.html

(3) https://tools.ietf.org/html/rfc1730.html


File: python.info,  Node: IMAP4 Objects,  Next: IMAP4 Example,  Up: imaplib — IMAP4 protocol client

5.20.10.1 IMAP4 Objects
.......................

All IMAP4rev1 commands are represented by methods of the same name,
either upper-case or lower-case.

All arguments to commands are converted to strings, except for
`AUTHENTICATE', and the last argument to `APPEND' which is passed as an
IMAP4 literal.  If necessary (the string contains IMAP4
protocol-sensitive characters and isn’t enclosed with either
parentheses or double quotes) each string is quoted.  However, the
`password' argument to the `LOGIN' command is always quoted. If you
want to avoid having an argument string quoted (eg: the `flags'
argument to `STORE') then enclose the string in parentheses (eg:
`r'(\Deleted)'').

Each command returns a tuple: `(type, [data, ...])' where `type' is
usually `'OK'' or `'NO'', and `data' is either the text from the
command response, or mandated results from the command. Each `data' is
either a string, or a tuple. If a tuple, then the first part is the
header of the response, and the second part contains the data (ie:
‘literal’ value).

The `message_set' options to commands below is a string specifying one
or more messages to be acted upon.  It may be a simple message number
(`'1''), a range of message numbers (`'2:4''), or a group of
non-contiguous ranges separated by commas (`'1:3,6:9'').  A range can
contain an asterisk to indicate an infinite upper bound (`'3:*'').

An *Note IMAP4: 1dbf. instance has the following methods:

 -- Method: IMAP4.append (mailbox, flags, date_time, message)
     Append `message' to named mailbox.

 -- Method: IMAP4.authenticate (mechanism, authobject)
     Authenticate command — requires response processing.

     `mechanism' specifies which authentication mechanism is to be used
     - it should appear in the instance variable `capabilities' in the
     form `AUTH=mechanism'.

     `authobject' must be a callable object:

         data = authobject(response)

     It will be called to process server continuation responses. It
     should return `data' that will be encoded and sent to server. It
     should return `None' if the client abort response `*' should be
     sent instead.

 -- Method: IMAP4.check ()
     Checkpoint mailbox on server.

 -- Method: IMAP4.close ()
     Close currently selected mailbox. Deleted messages are removed
     from writable mailbox. This is the recommended command before
     `LOGOUT'.

 -- Method: IMAP4.copy (message_set, new_mailbox)
     Copy `message_set' messages onto end of `new_mailbox'.

 -- Method: IMAP4.create (mailbox)
     Create new mailbox named `mailbox'.

 -- Method: IMAP4.delete (mailbox)
     Delete old mailbox named `mailbox'.

 -- Method: IMAP4.deleteacl (mailbox, who)
     Delete the ACLs (remove any rights) set for who on mailbox.

     New in version 2.4.


 -- Method: IMAP4.expunge ()
     Permanently remove deleted items from selected mailbox. Generates
     an `EXPUNGE' response for each deleted message. Returned data
     contains a list of `EXPUNGE' message numbers in order received.

 -- Method: IMAP4.fetch (message_set, message_parts)
     Fetch (parts of) messages.  `message_parts' should be a string of
     message part names enclosed within parentheses, eg: `"(UID
     BODY[TEXT])"'.  Returned data are tuples of message part envelope
     and data.

 -- Method: IMAP4.getacl (mailbox)
     Get the `ACL's for `mailbox'. The method is non-standard, but is
     supported by the `Cyrus' server.

 -- Method: IMAP4.getannotation (mailbox, entry, attribute)
     Retrieve the specified `ANNOTATION's for `mailbox'. The method is
     non-standard, but is supported by the `Cyrus' server.

     New in version 2.5.


 -- Method: IMAP4.getquota (root)
     Get the `quota' `root'’s resource usage and limits. This method
     is part of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.


 -- Method: IMAP4.getquotaroot (mailbox)
     Get the list of `quota' `roots' for the named `mailbox'. This
     method is part of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.


 -- Method: IMAP4.list ([directory[, pattern]])
     List mailbox names in `directory' matching `pattern'.  `directory'
     defaults to the top-level mail folder, and `pattern' defaults to
     match anything.  Returned data contains a list of `LIST' responses.

 -- Method: IMAP4.login (user, password)
     Identify the client using a plaintext password. The `password'
     will be quoted.

 -- Method: IMAP4.login_cram_md5 (user, password)
     Force use of `CRAM-MD5' authentication when identifying the client
     to protect the password.  Will only work if the server
     `CAPABILITY' response includes the phrase `AUTH=CRAM-MD5'.

     New in version 2.3.


 -- Method: IMAP4.logout ()
     Shutdown connection to server. Returns server `BYE' response.

 -- Method: IMAP4.lsub ([directory[, pattern]])
     List subscribed mailbox names in directory matching pattern.
     `directory' defaults to the top level directory and `pattern'
     defaults to match any mailbox.  Returned data are tuples of
     message part envelope and data.

 -- Method: IMAP4.myrights (mailbox)
     Show my ACLs for a mailbox (i.e. the rights that I have on
     mailbox).

     New in version 2.4.


 -- Method: IMAP4.namespace ()
     Returns IMAP namespaces as defined in RFC2342.

     New in version 2.3.


 -- Method: IMAP4.noop ()
     Send `NOOP' to server.

 -- Method: IMAP4.open (host, port)
     Opens socket to `port' at `host'.  This method is implicitly
     called by the *Note IMAP4: 1dbf. constructor.  The connection
     objects established by this method will be used in the *Note
     IMAP4.read(): 1df8, *Note IMAP4.readline(): 1df9, *Note
     IMAP4.send(): 1dfa, and *Note IMAP4.shutdown(): 1dfb. methods.
     You may override this method.

 -- Method: IMAP4.partial (message_num, message_part, start, length)
     Fetch truncated part of a message. Returned data is a tuple of
     message part envelope and data.

 -- Method: IMAP4.proxyauth (user)
     Assume authentication as `user'. Allows an authorised
     administrator to proxy into any user’s mailbox.

     New in version 2.3.


 -- Method: IMAP4.read (size)
     Reads `size' bytes from the remote server. You may override this
     method.

 -- Method: IMAP4.readline ()
     Reads one line from the remote server. You may override this
     method.

 -- Method: IMAP4.recent ()
     Prompt server for an update. Returned data is `None' if no new
     messages, else value of `RECENT' response.

 -- Method: IMAP4.rename (oldmailbox, newmailbox)
     Rename mailbox named `oldmailbox' to `newmailbox'.

 -- Method: IMAP4.response (code)
     Return data for response `code' if received, or `None'. Returns
     the given code, instead of the usual type.

 -- Method: IMAP4.search (charset, criterion[, ...])
     Search mailbox for matching messages.  `charset' may be `None', in
     which case no `CHARSET' will be specified in the request to the
     server.  The IMAP protocol requires that at least one criterion be
     specified; an exception will be raised when the server returns an
     error.

     Example:

         # M is a connected IMAP4 instance...
         typ, msgnums = M.search(None, 'FROM', '"LDJ"')

         # or:
         typ, msgnums = M.search(None, '(FROM "LDJ")')

 -- Method: IMAP4.select ([mailbox[, readonly]])
     Select a mailbox. Returned data is the count of messages in
     `mailbox' (`EXISTS' response).  The default `mailbox' is
     `'INBOX''.  If the `readonly' flag is set, modifications to the
     mailbox are not allowed.

 -- Method: IMAP4.send (data)
     Sends `data' to the remote server. You may override this method.

 -- Method: IMAP4.setacl (mailbox, who, what)
     Set an `ACL' for `mailbox'. The method is non-standard, but is
     supported by the `Cyrus' server.

 -- Method: IMAP4.setannotation (mailbox, entry, attribute[, ...])
     Set `ANNOTATION's for `mailbox'. The method is non-standard, but is
     supported by the `Cyrus' server.

     New in version 2.5.


 -- Method: IMAP4.setquota (root, limits)
     Set the `quota' `root'’s resource `limits'. This method is part
     of the IMAP4 QUOTA extension defined in rfc2087.

     New in version 2.3.


 -- Method: IMAP4.shutdown ()
     Close connection established in `open'.  This method is implicitly
     called by *Note IMAP4.logout(): 1df2.  You may override this
     method.

 -- Method: IMAP4.socket ()
     Returns socket instance used to connect to server.

 -- Method: IMAP4.sort (sort_criteria, charset, search_criterion[, ...])
     The `sort' command is a variant of `search' with sorting semantics
     for the results.  Returned data contains a space separated list of
     matching message numbers.

     Sort has two arguments before the `search_criterion' argument(s); a
     parenthesized list of `sort_criteria', and the searching
     `charset'.  Note that unlike `search', the searching `charset'
     argument is mandatory.  There is also a `uid sort' command which
     corresponds to `sort' the way that `uid search' corresponds to
     `search'.  The `sort' command first searches the mailbox for
     messages that match the given searching criteria using the charset
     argument for the interpretation of strings in the searching
     criteria.  It then returns the numbers of matching messages.

     This is an `IMAP4rev1' extension command.

 -- Method: IMAP4.status (mailbox, names)
     Request named status conditions for `mailbox'.

 -- Method: IMAP4.store (message_set, command, flag_list)
     Alters flag dispositions for messages in mailbox.  `command' is
     specified by section 6.4.6 of RFC 2060(1) as being one of
     “FLAGS”, “+FLAGS”, or “-FLAGS”, optionally with a
     suffix of “.SILENT”.

     For example, to set the delete flag on all messages:

         typ, data = M.search(None, 'ALL')
         for num in data[0].split():
            M.store(num, '+FLAGS', '\\Deleted')
         M.expunge()

 -- Method: IMAP4.subscribe (mailbox)
     Subscribe to new mailbox.

 -- Method: IMAP4.thread (threading_algorithm, charset,
          search_criterion[, ...])
     The `thread' command is a variant of `search' with threading
     semantics for the results.  Returned data contains a space
     separated list of thread members.

     Thread members consist of zero or more messages numbers, delimited
     by spaces, indicating successive parent and child.

     Thread has two arguments before the `search_criterion'
     argument(s); a `threading_algorithm', and the searching `charset'.
     Note that unlike `search', the searching `charset' argument is
     mandatory.  There is also a `uid thread' command which corresponds
     to `thread' the way that `uid search' corresponds to `search'.
     The `thread' command first searches the mailbox for messages that
     match the given searching criteria using the charset argument for
     the interpretation of strings in the searching criteria. It then
     returns the matching messages threaded according to the specified
     threading algorithm.

     This is an `IMAP4rev1' extension command.

     New in version 2.4.


 -- Method: IMAP4.uid (command, arg[, ...])
     Execute command args with messages identified by UID, rather than
     message number.  Returns response appropriate to command.  At
     least one argument must be supplied; if none are provided, the
     server will return an error and an exception will be raised.

 -- Method: IMAP4.unsubscribe (mailbox)
     Unsubscribe from old mailbox.

 -- Method: IMAP4.xatom (name[, arg[, ...]])
     Allow simple extension commands notified by server in `CAPABILITY'
     response.

Instances of *Note IMAP4_SSL: 1dd6. have just one additional method:

 -- Method: IMAP4_SSL.ssl ()
     Returns SSLObject instance used for the secure connection with the
     server.

The following attributes are defined on instances of *Note IMAP4: 1dbf.:

 -- Attribute: IMAP4.PROTOCOL_VERSION
     The most recent supported protocol in the `CAPABILITY' response
     from the server.

 -- Attribute: IMAP4.debug
     Integer value to control debugging output.  The initialize value
     is taken from the module variable `Debug'.  Values greater than
     three trace each command.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2060.html


File: python.info,  Node: IMAP4 Example,  Prev: IMAP4 Objects,  Up: imaplib — IMAP4 protocol client

5.20.10.2 IMAP4 Example
.......................

Here is a minimal example (without error checking) that opens a mailbox
and retrieves and prints all messages:

    import getpass, imaplib

    M = imaplib.IMAP4()
    M.login(getpass.getuser(), getpass.getpass())
    M.select()
    typ, data = M.search(None, 'ALL')
    for num in data[0].split():
        typ, data = M.fetch(num, '(RFC822)')
        print 'Message %s\n%s\n' % (num, data[0][1])
    M.close()
    M.logout()


File: python.info,  Node: nntplib — NNTP protocol client,  Next: smtplib — SMTP protocol client,  Prev: imaplib — IMAP4 protocol client,  Up: Internet Protocols and Support

5.20.11 `nntplib' — NNTP protocol client
------------------------------------------

`Source code:' Lib/nntplib.py(1)

__________________________________________________________________

This module defines the class *Note NNTP: 1e16. which implements the
client side of the NNTP protocol.  It can be used to implement a news
reader or poster, or automated news processors.  For more information
on NNTP (Network News Transfer Protocol), see Internet RFC 977(2).

Here are two small examples of how it can be used.  To list some
statistics about a newsgroup and print the subjects of the last 10
articles:

    >>> s = NNTP('news.gmane.org')
    >>> resp, count, first, last, name = s.group('gmane.comp.python.committers')
    >>> print 'Group', name, 'has', count, 'articles, range', first, 'to', last
    Group gmane.comp.python.committers has 1071 articles, range 1 to 1071
    >>> resp, subs = s.xhdr('subject', first + '-' + last)
    >>> for id, sub in subs[-10:]: print id, sub
    ...
    1062 Re: Mercurial Status?
    1063 Re: [python-committers]  (Windows) buildbots on 3.x
    1064 Re: Mercurial Status?
    1065 Re: Mercurial Status?
    1066 Python 2.6.6 status
    1067 Commit Privileges for Ask Solem
    1068 Re: Commit Privileges for Ask Solem
    1069 Re: Commit Privileges for Ask Solem
    1070 Re: Commit Privileges for Ask Solem
    1071 2.6.6 rc 2
    >>> s.quit()
    '205 Bye!'

To post an article from a file (this assumes that the article has valid
headers, and that you have right to post on the particular newsgroup):

    >>> s = NNTP('news.gmane.org')
    >>> f = open('articlefile')
    >>> s.post(f)
    '240 Article posted successfully.'
    >>> s.quit()
    '205 Bye!'

The module itself defines the following items:

 -- Class: nntplib.NNTP (host[, port [, user[, password [, readermode]
          [, usenetrc]]]])
     Return a new instance of the *Note NNTP: 1e16. class, representing
     a connection to the NNTP server running on host `host', listening
     at port `port'.  The default `port' is 119.  If the optional
     `user' and `password' are provided, or if suitable credentials are
     present in `/.netrc' and the optional flag `usenetrc' is true (the
     default), the `AUTHINFO USER' and `AUTHINFO PASS' commands are
     used to identify and authenticate the user to the server.  If the
     optional flag `readermode' is true, then a `mode reader' command is
     sent before authentication is performed.  Reader mode is sometimes
     necessary if you are connecting to an NNTP server on the local
     machine and intend to call reader-specific commands, such as
     `group'.  If you get unexpected *Note NNTPPermanentError: 1e17.s,
     you might need to set `readermode'.  `readermode' defaults to
     `None'. `usenetrc' defaults to `True'.

     Changed in version 2.4: `usenetrc' argument added.


 -- Exception: nntplib.NNTPError
     Derived from the standard exception *Note Exception: 34d, this is
     the base class for all exceptions raised by the *Note nntplib:
     125. module.

 -- Exception: nntplib.NNTPReplyError
     Exception raised when an unexpected reply is received from the
     server.  For backwards compatibility, the exception `error_reply'
     is equivalent to this class.

 -- Exception: nntplib.NNTPTemporaryError
     Exception raised when an error code in the range 400–499 is
     received.  For backwards compatibility, the exception `error_temp'
     is equivalent to this class.

 -- Exception: nntplib.NNTPPermanentError
     Exception raised when an error code in the range 500–599 is
     received.  For backwards compatibility, the exception `error_perm'
     is equivalent to this class.

 -- Exception: nntplib.NNTPProtocolError
     Exception raised when a reply is received from the server that
     does not begin with a digit in the range 1–5.  For backwards
     compatibility, the exception `error_proto' is equivalent to this
     class.

 -- Exception: nntplib.NNTPDataError
     Exception raised when there is some error in the response data.
     For backwards compatibility, the exception `error_data' is
     equivalent to this class.

* Menu:

* NNTP Objects::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/nntplib.py

(2) https://tools.ietf.org/html/rfc977.html


File: python.info,  Node: NNTP Objects,  Up: nntplib — NNTP protocol client

5.20.11.1 NNTP Objects
......................

NNTP instances have the following methods.  The `response' that is
returned as the first item in the return tuple of almost all methods is
the server’s response: a string beginning with a three-digit code. If
the server’s response indicates an error, the method raises one of
the above exceptions.

 -- Method: NNTP.getwelcome ()
     Return the welcome message sent by the server in reply to the
     initial connection.  (This message sometimes contains disclaimers
     or help information that may be relevant to the user.)

 -- Method: NNTP.set_debuglevel (level)
     Set the instance’s debugging level.  This controls the amount of
     debugging output printed.  The default, `0', produces no debugging
     output.  A value of `1' produces a moderate amount of debugging
     output, generally a single line per request or response.  A value
     of `2' or higher produces the maximum amount of debugging output,
     logging each line sent and received on the connection (including
     message text).

 -- Method: NNTP.newgroups (date, time[, file])
     Send a `NEWGROUPS' command.  The `date' argument should be a
     string of the form `'yymmdd'' indicating the date, and `time'
     should be a string of the form `'hhmmss'' indicating the time.
     Return a pair `(response, groups)' where `groups' is a list of
     group names that are new since the given date and time. If the
     `file' parameter is supplied, then the output of the  `NEWGROUPS'
     command is stored in a file.  If `file' is a string,  then the
     method will open a file object with that name, write to it  then
     close it.  If `file' is a file object, then it will start calling
     `write()' on it to store the lines of the command output. If
     `file' is supplied, then the returned `list' is an empty list.

 -- Method: NNTP.newnews (group, date, time[, file])
     Send a `NEWNEWS' command.  Here, `group' is a group name or `'*'',
     and `date' and `time' have the same meaning as for *Note
     newgroups(): 1e21.  Return a pair `(response, articles)' where
     `articles' is a list of message ids. If the `file' parameter is
     supplied, then the output of the  `NEWNEWS' command is stored in a
     file.  If `file' is a string,  then the method will open a file
     object with that name, write to it  then close it.  If `file' is a
     file object, then it will start calling `write()' on it to store
     the lines of the command output. If `file' is supplied, then the
     returned `list' is an empty list.

 -- Method: NNTP.list ([file])
     Send a `LIST' command.  Return a pair `(response, list)' where
     `list' is a list of tuples.  Each tuple has the form `(group,
     last, first, flag)', where `group' is a group name, `last' and
     `first' are the last and first article numbers (as strings), and
     `flag' is `'y'' if posting is allowed, `'n'' if not, and `'m'' if
     the newsgroup is moderated.  (Note the ordering: `last', `first'.)
     If the `file' parameter is supplied, then the output of the  `LIST'
     command is stored in a file.  If `file' is a string,  then the
     method will open a file object with that name, write to it  then
     close it.  If `file' is a file object, then it will start calling
     `write()' on it to store the lines of the command output. If
     `file' is supplied, then the returned `list' is an empty list.

 -- Method: NNTP.descriptions (grouppattern)
     Send a `LIST NEWSGROUPS' command, where `grouppattern' is a
     wildmat string as specified in RFC2980 (it’s essentially the
     same as DOS or UNIX shell wildcard strings).  Return a pair
     `(response, list)', where `list' is a list of tuples containing
     `(name, title)'.

     New in version 2.4.


 -- Method: NNTP.description (group)
     Get a description for a single group `group'.  If more than one
     group matches (if ‘group’ is a real wildmat string), return
     the first match.   If no group matches, return an empty string.

     This elides the response code from the server.  If the response
     code is needed, use *Note descriptions(): 1e24.

     New in version 2.4.


 -- Method: NNTP.group (name)
     Send a `GROUP' command, where `name' is the group name. Return a
     tuple `(response, count, first, last, name)' where `count' is the
     (estimated) number of articles in the group, `first' is the first
     article number in the group, `last' is the last article number in
     the group, and `name' is the group name.  The numbers are returned
     as strings.

 -- Method: NNTP.help ([file])
     Send a `HELP' command.  Return a pair `(response, list)' where
     `list' is a list of help strings. If the `file' parameter is
     supplied, then the output of the  `HELP' command is stored in a
     file.  If `file' is a string,  then the method will open a file
     object with that name, write to it  then close it.  If `file' is a
     file object, then it will start calling `write()' on it to store
     the lines of the command output. If `file' is supplied, then the
     returned `list' is an empty list.

 -- Method: NNTP.stat (id)
     Send a `STAT' command, where `id' is the message id (enclosed in
     `'<'' and `'>'') or an article number (as a string). Return a
     triple `(response, number, id)' where `number' is the article
     number (as a string) and `id' is the message id  (enclosed in
     `'<'' and `'>'').

 -- Method: NNTP.next ()
     Send a `NEXT' command.  Return as for *Note stat(): 1e28.

 -- Method: NNTP.last ()
     Send a `LAST' command.  Return as for *Note stat(): 1e28.

 -- Method: NNTP.head (id)
     Send a `HEAD' command, where `id' has the same meaning as for
     *Note stat(): 1e28.  Return a tuple `(response, number, id, list)'
     where the first three are the same as for *Note stat(): 1e28, and
     `list' is a list of the article’s headers (an uninterpreted list
     of lines, without trailing newlines).

 -- Method: NNTP.body (id[, file])
     Send a `BODY' command, where `id' has the same meaning as for
     *Note stat(): 1e28.  If the `file' parameter is supplied, then the
     body is stored in a file.  If `file' is a string, then the method
     will open a file object with that name, write to it then close it.
     If `file' is a file object, then it will start calling `write()'
     on it to store the lines of the body. Return as for *Note head():
     1e2b.  If `file' is supplied, then the returned `list' is an empty
     list.

 -- Method: NNTP.article (id)
     Send an `ARTICLE' command, where `id' has the same meaning as for
     *Note stat(): 1e28.  Return as for *Note head(): 1e2b.

 -- Method: NNTP.slave ()
     Send a `SLAVE' command.  Return the server’s `response'.

 -- Method: NNTP.xhdr (header, string[, file])
     Send an `XHDR' command.  This command is not defined in the RFC
     but is a common extension.  The `header' argument is a header
     keyword, e.g.  `'subject''.  The `string' argument should have the
     form `'first-last'' where `first' and `last' are the first and
     last article numbers to search.  Return a pair `(response, list)',
     where `list' is a list of pairs `(id, text)', where `id' is an
     article number (as a string) and `text' is the text of the
     requested header for that article. If the `file' parameter is
     supplied, then the output of the  `XHDR' command is stored in a
     file.  If `file' is a string, then the method will open a file
     object with that name, write to it  then close it.  If `file' is a
     file object, then it will start calling `write()' on it to store
     the lines of the command output. If `file' is supplied, then the
     returned `list' is an empty list.

 -- Method: NNTP.post (file)
     Post an article using the `POST' command.  The `file' argument is
     an open file object which is read until EOF using its *Note
     readline(): 66f. method.  It should be a well-formed news article,
     including the required headers.  The *Note post(): 1e30.  method
     automatically escapes lines beginning with `.'.

 -- Method: NNTP.ihave (id, file)
     Send an `IHAVE' command. `id' is a message id (enclosed in  `'<''
     and `'>''). If the response is not an error, treat `file' exactly
     as for the *Note post(): 1e30. method.

 -- Method: NNTP.date ()
     Return a triple `(response, date, time)', containing the current
     date and time in a form suitable for the *Note newnews(): 1e22.
     and *Note newgroups(): 1e21. methods. This is an optional NNTP
     extension, and may not be supported by all servers.

 -- Method: NNTP.xgtitle (name[, file])
     Process an `XGTITLE' command, returning a pair `(response, list)',
     where `list' is a list of tuples containing `(name, title)'. If
     the `file' parameter is supplied, then the output of the
     `XGTITLE' command is stored in a file.  If `file' is a string,
     then the method will open a file object with that name, write to
     it  then close it.  If `file' is a file object, then it will start
     calling `write()' on it to store the lines of the command output.
     If `file' is supplied, then the returned `list' is an empty list.
     This is an optional NNTP extension, and may not be supported by
     all servers.

     RFC2980 says “It is suggested that this extension be
     deprecated”.  Use *Note descriptions(): 1e24. or *Note
     description(): 1e25. instead.

 -- Method: NNTP.xover (start, end[, file])
     Return a pair `(resp, list)'.  `list' is a list of tuples, one for
     each article in the range delimited by the `start' and `end'
     article numbers.  Each tuple is of the form `(article number,
     subject, poster, date, id, references, size, lines)'. If the
     `file' parameter is supplied, then the output of the `XOVER'
     command is stored in a file.  If `file' is a string,  then the
     method will open a file object with that name, write to it  then
     close it.  If `file' is a file object, then it will start calling
     `write()' on it to store the lines of the command output. If
     `file' is supplied, then the returned `list' is an empty list.
     This is an optional NNTP extension, and may not be supported by
     all servers.

 -- Method: NNTP.xpath (id)
     Return a pair `(resp, path)', where `path' is the directory path
     to the article with message ID `id'.  This is an optional NNTP
     extension, and may not be supported by all servers.

 -- Method: NNTP.quit ()
     Send a `QUIT' command and close the connection.  Once this method
     has been called, no other methods of the NNTP object should be
     called.


File: python.info,  Node: smtplib — SMTP protocol client,  Next: smtpd — SMTP Server,  Prev: nntplib — NNTP protocol client,  Up: Internet Protocols and Support

5.20.12 `smtplib' — SMTP protocol client
------------------------------------------

`Source code:' Lib/smtplib.py(1)

__________________________________________________________________

The *Note smtplib: 15a. module defines an SMTP client session object
that can be used to send mail to any Internet machine with an SMTP or
ESMTP listener daemon.  For details of SMTP and ESMTP operation, consult RFC
821(2) (Simple Mail Transfer Protocol) and RFC 1869(3) (SMTP Service
Extensions).

 -- Class: smtplib.SMTP ([host[, port[, local_hostname[, timeout]]]])
     An *Note SMTP: 1e39. instance encapsulates an SMTP connection.  It
     has methods that support a full repertoire of SMTP and ESMTP
     operations. If the optional host and port parameters are given,
     the SMTP *Note connect(): 1e3a. method is called with those
     parameters during initialization.  If specified, `local_hostname'
     is used as the FQDN of the local host in the HELO/EHLO command.
     Otherwise, the local hostname is found using *Note
     socket.getfqdn(): 1773.  If the *Note connect(): 1e3a. call
     returns anything other than a success code, an *Note
     SMTPConnectError: 1e3b. is raised. The optional `timeout'
     parameter specifies a timeout in seconds for blocking operations
     like the connection attempt (if not specified, the global default
     timeout setting will be used).  If the timeout expires, *Note
     socket.timeout: 47f.  is raised.

     For normal use, you should only require the initialization/connect,
     *Note sendmail(): 1e3c, and `quit()' methods.  An example is
     included below.

     Changed in version 2.6: `timeout' was added.


 -- Class: smtplib.SMTP_SSL ([host[, port[, local_hostname[, keyfile[,
          certfile[, timeout]]]]]])
     An *Note SMTP_SSL: 1e3d. instance behaves exactly the same as
     instances of *Note SMTP: 1e39. *Note SMTP_SSL: 1e3d. should be
     used for situations where SSL is required from the beginning of
     the connection and using `starttls()' is not appropriate. If
     `host' is not specified, the local host is used. If `port' is
     omitted, the standard SMTP-over-SSL port (465) is used.
     `local_hostname' has the same meaning as it does for the *Note
     SMTP: 1e39.  class.  `keyfile' and `certfile' are also optional,
     and can contain a PEM formatted private key and certificate chain
     file for the SSL connection. The optional `timeout' parameter
     specifies a timeout in seconds for blocking operations like the
     connection attempt (if not specified, the global default timeout
     setting will be used).  If the timeout expires, *Note
     socket.timeout: 47f.  is raised.

     New in version 2.6.


 -- Class: smtplib.LMTP ([host[, port[, local_hostname]]])
     The LMTP protocol, which is very similar to ESMTP, is heavily
     based on the standard SMTP client. It’s common to use Unix
     sockets for LMTP, so our `connect()' method must support that as
     well as a regular host:port server.  `local_hostname' has the same
     meaning as it does for the *Note SMTP: 1e39. class.  To specify a
     Unix socket, you must use an absolute path for `host', starting
     with a ‘/’.

     Authentication is supported, using the regular SMTP mechanism.
     When using a Unix socket, LMTP generally don’t support or
     require any authentication, but your mileage might vary.

     New in version 2.6.


A nice selection of exceptions is defined as well:

 -- Exception: smtplib.SMTPException
     The base exception class for all the other exceptions provided by
     this module.

 -- Exception: smtplib.SMTPServerDisconnected
     This exception is raised when the server unexpectedly disconnects,
     or when an attempt is made to use the *Note SMTP: 1e39. instance
     before connecting it to a server.

 -- Exception: smtplib.SMTPResponseException
     Base class for all exceptions that include an SMTP error code.
     These exceptions are generated in some instances when the SMTP
     server returns an error code.  The error code is stored in the
     `smtp_code' attribute of the error, and the `smtp_error' attribute
     is set to the error message.

 -- Exception: smtplib.SMTPSenderRefused
     Sender address refused.  In addition to the attributes set by on
     all *Note SMTPResponseException: 1e41. exceptions, this sets
     ‘sender’ to the string that the SMTP server refused.

 -- Exception: smtplib.SMTPRecipientsRefused
     All recipient addresses refused.  The errors for each recipient
     are accessible through the attribute `recipients', which is a
     dictionary of exactly the same sort as *Note SMTP.sendmail():
     1e3c. returns.

 -- Exception: smtplib.SMTPDataError
     The SMTP server refused to accept the message data.

 -- Exception: smtplib.SMTPConnectError
     Error occurred during establishment of a connection  with the
     server.

 -- Exception: smtplib.SMTPHeloError
     The server refused our `HELO' message.

 -- Exception: smtplib.SMTPAuthenticationError
     SMTP authentication went wrong.  Most probably the server didn’t
     accept the username/password combination provided.

See also
........

RFC 821(4) - Simple Mail Transfer Protocol
     Protocol definition for SMTP.  This document covers the model,
     operating procedure, and protocol details for SMTP.

RFC 1869(5) - SMTP Service Extensions
     Definition of the ESMTP extensions for SMTP.  This describes a
     framework for extending SMTP with new commands, supporting dynamic
     discovery of the commands provided by the server, and defines a
     few additional commands.

* Menu:

* SMTP Objects::
* SMTP Example::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/smtplib.py

(2) https://tools.ietf.org/html/rfc821.html

(3) https://tools.ietf.org/html/rfc1869.html

(4) https://tools.ietf.org/html/rfc821.html

(5) https://tools.ietf.org/html/rfc1869.html


File: python.info,  Node: SMTP Objects,  Next: SMTP Example,  Up: smtplib — SMTP protocol client

5.20.12.1 SMTP Objects
......................

An *Note SMTP: 1e39. instance has the following methods:

 -- Method: SMTP.set_debuglevel (level)
     Set the debug output level.  A true value for `level' results in
     debug messages for connection and for all messages sent to and
     received from the server.

 -- Method: SMTP.docmd (cmd[, argstring])
     Send a command `cmd' to the server.  The optional argument
     `argstring' is simply concatenated to the command, separated by a
     space.

     This returns a 2-tuple composed of a numeric response code and the
     actual response line (multiline responses are joined into one long
     line.)

     In normal operation it should not be necessary to call this method
     explicitly.  It is used to implement other methods and may be
     useful for testing private extensions.

     If the connection to the server is lost while waiting for the
     reply, *Note SMTPServerDisconnected: 1e40. will be raised.

 -- Method: SMTP.connect ([host[, port]])
     Connect to a host on a given port.  The defaults are to connect to
     the local host at the standard SMTP port (25). If the hostname
     ends with a colon (`':'') followed by a number, that suffix will
     be stripped off and the number interpreted as the port number to
     use. This method is automatically invoked by the constructor if a
     host is specified during instantiation.  Returns a 2-tuple of the
     response code and message sent by the server in its connection
     response.

 -- Method: SMTP.helo ([hostname])
     Identify yourself to the SMTP server using `HELO'.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  The message returned by the server is stored as the
     `helo_resp' attribute of the object.

     In normal operation it should not be necessary to call this method
     explicitly.  It will be implicitly called by the *Note sendmail():
     1e3c. when necessary.

 -- Method: SMTP.ehlo ([hostname])
     Identify yourself to an ESMTP server using `EHLO'.  The hostname
     argument defaults to the fully qualified domain name of the local
     host.  Examine the response for ESMTP option and store them for
     use by *Note has_extn(): 1e4d.  Also sets several informational
     attributes: the message returned by the server is stored as the
     `ehlo_resp' attribute, `does_esmtp' is set to true or false
     depending on whether the server supports ESMTP, and
     `esmtp_features' will be a dictionary containing the names of the
     SMTP service extensions this server supports, and their parameters
     (if any).

     Unless you wish to use *Note has_extn(): 1e4d. before sending
     mail, it should not be necessary to call this method explicitly.
     It will be implicitly called by *Note sendmail(): 1e3c. when
     necessary.

 -- Method: SMTP.ehlo_or_helo_if_needed ()
     This method call *Note ehlo(): 1e4c. and or *Note helo(): 1e4b. if
     there has been no previous `EHLO' or `HELO' command this session.
     It tries ESMTP `EHLO' first.

    *Note SMTPHeloError: 1e45.
          The server didn’t reply properly to the `HELO' greeting.

     New in version 2.6.


 -- Method: SMTP.has_extn (name)
     Return *Note True: 3c8. if `name' is in the set of SMTP service
     extensions returned by the server, *Note False: 3c9. otherwise.
     Case is ignored.

 -- Method: SMTP.verify (address)
     Check the validity of an address on this server using SMTP `VRFY'.
     Returns a tuple consisting of code 250 and a full RFC 822(1)
     address (including human name) if the user address is valid.
     Otherwise returns an SMTP error code of 400 or greater and an
     error string.

          Note: Many sites disable SMTP `VRFY' in order to foil
          spammers.

 -- Method: SMTP.login (user, password)
     Log in on an SMTP server that requires authentication. The
     arguments are the username and the password to authenticate with.
     If there has been no previous `EHLO' or `HELO' command this
     session, this method tries ESMTP `EHLO' first. This method will
     return normally if the authentication was successful, or may raise
     the following exceptions:

    *Note SMTPHeloError: 1e45.
          The server didn’t reply properly to the `HELO' greeting.

    *Note SMTPAuthenticationError: 1e46.
          The server didn’t accept the username/password combination.

    *Note SMTPException: 1e3f.
          No suitable authentication method was found.

 -- Method: SMTP.starttls ([keyfile[, certfile]])
     Put the SMTP connection in TLS (Transport Layer Security) mode.
     All SMTP commands that follow will be encrypted.  You should then
     call *Note ehlo(): 1e4c.  again.

     If `keyfile' and `certfile' are provided, these are passed to the
     *Note socket: 15c.  module’s *Note ssl(): 160. function.

     If there has been no previous `EHLO' or `HELO' command this
     session, this method tries ESMTP `EHLO' first.

     Changed in version 2.6.

    *Note SMTPHeloError: 1e45.
          The server didn’t reply properly to the `HELO' greeting.

    *Note SMTPException: 1e3f.
          The server does not support the STARTTLS extension.

     Changed in version 2.6.

    *Note RuntimeError: 3b3.
          SSL/TLS support is not available to your Python interpreter.

 -- Method: SMTP.sendmail (from_addr, to_addrs, msg[, mail_options,
          rcpt_options])
     Send mail.  The required arguments are an RFC 822(2) from-address
     string, a list of RFC 822(3) to-address strings (a bare string
     will be treated as a list with 1 address), and a message string.
     The caller may pass a list of ESMTP options (such as `8bitmime')
     to be used in `MAIL FROM' commands as `mail_options'.  ESMTP
     options (such as `DSN' commands) that should be used with all
     `RCPT' commands can be passed as `rcpt_options'.  (If you need to
     use different ESMTP options to different recipients you have to
     use the low-level methods such as `mail()', `rcpt()' and `data()'
     to send the message.)

          Note: The `from_addr' and `to_addrs' parameters are used to
          construct the message envelope used by the transport agents.
          The *Note SMTP: 1e39. does not modify the message headers in
          any way.

     If there has been no previous `EHLO' or `HELO' command this
     session, this method tries ESMTP `EHLO' first. If the server does
     ESMTP, message size and each of the specified options will be
     passed to it (if the option is in the feature set the server
     advertises).  If `EHLO' fails, `HELO' will be tried and ESMTP
     options suppressed.

     This method will return normally if the mail is accepted for at
     least one recipient. Otherwise it will raise an exception.  That
     is, if this method does not raise an exception, then someone
     should get your mail. If this method does not raise an exception,
     it returns a dictionary, with one entry for each recipient that
     was refused.  Each entry contains a tuple of the SMTP error code
     and the accompanying error message sent by the server.

     This method may raise the following exceptions:

    *Note SMTPRecipientsRefused: 1e43.
          All recipients were refused.  Nobody got the mail.  The
          `recipients' attribute of the exception object is a
          dictionary with information about the refused recipients
          (like the one returned when at least one recipient was
          accepted).

    *Note SMTPHeloError: 1e45.
          The server didn’t reply properly to the `HELO' greeting.

    *Note SMTPSenderRefused: 1e42.
          The server didn’t accept the `from_addr'.

    *Note SMTPDataError: 1e44.
          The server replied with an unexpected error code (other than
          a refusal of a recipient).

     Unless otherwise noted, the connection will be open even after an
     exception is raised.

 -- Method: SMTP.quit ()
     Terminate the SMTP session and close the connection.  Return the
     result of the SMTP `QUIT' command.

     Changed in version 2.6: Return a value.


Low-level methods corresponding to the standard SMTP/ESMTP commands
`HELP', `RSET', `NOOP', `MAIL', `RCPT', and `DATA' are also supported.
Normally these do not need to be called directly, so they are not
documented here.  For details, consult the module code.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc822.html

(2) https://tools.ietf.org/html/rfc822.html

(3) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: SMTP Example,  Prev: SMTP Objects,  Up: smtplib — SMTP protocol client

5.20.12.2 SMTP Example
......................

This example prompts the user for addresses needed in the message
envelope (‘To’ and ‘From’ addresses), and the message to be
delivered.  Note that the headers to be included with the message must
be included in the message as entered; this example doesn’t do any
processing of the RFC 822(1) headers.  In particular, the ‘To’ and
‘From’ addresses must be included in the message headers explicitly.

    import smtplib

    def prompt(prompt):
        return raw_input(prompt).strip()

    fromaddr = prompt("From: ")
    toaddrs  = prompt("To: ").split()
    print "Enter message, end with ^D (Unix) or ^Z (Windows):"

    # Add the From: and To: headers at the start!
    msg = ("From: %s\r\nTo: %s\r\n\r\n"
           % (fromaddr, ", ".join(toaddrs)))
    while 1:
        try:
            line = raw_input()
        except EOFError:
            break
        if not line:
            break
        msg = msg + line

    print "Message length is " + repr(len(msg))

    server = smtplib.SMTP('localhost')
    server.set_debuglevel(1)
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()

     Note: In general, you will want to use the *Note email: bb.
     package’s features to construct an email message, which you can
     then convert to a string and send via `sendmail()'; see *Note
     email; Examples: 18f4.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc822.html


File: python.info,  Node: smtpd — SMTP Server,  Next: telnetlib — Telnet client,  Prev: smtplib — SMTP protocol client,  Up: Internet Protocols and Support

5.20.13 `smtpd' — SMTP Server
-------------------------------

`Source code:' Lib/smtpd.py(1)

__________________________________________________________________

This module offers several classes to implement SMTP servers.  One is a
generic do-nothing implementation, which can be overridden, while the
other two offer specific mail-sending strategies.

* Menu:

* SMTPServer Objects::
* DebuggingServer Objects::
* PureProxy Objects::
* MailmanProxy Objects::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/smtpd.py


File: python.info,  Node: SMTPServer Objects,  Next: DebuggingServer Objects,  Up: smtpd — SMTP Server

5.20.13.1 SMTPServer Objects
............................

 -- Class: smtpd.SMTPServer (localaddr, remoteaddr)
     Create a new *Note SMTPServer: 1e57. object, which binds to local
     address `localaddr'.  It will treat `remoteaddr' as an upstream
     SMTP relayer.  Both `localaddr' and `remoteaddr' should be a *Note
     (host, port): 175f.  tuple.  The object inherits from *Note
     asyncore.dispatcher: 1832, and so will insert itself into *Note
     asyncore: 11.’s event loop on instantiation.

      -- Method: process_message (peer, mailfrom, rcpttos, data)
          Raise *Note NotImplementedError: 978. exception. Override
          this in subclasses to do something useful with this message.
          Whatever was passed in the constructor as `remoteaddr' will
          be available as the `_remoteaddr' attribute. `peer' is the
          remote host’s address, `mailfrom' is the envelope
          originator, `rcpttos' are the envelope recipients and `data'
          is a string containing the contents of the e-mail (which
          should be in RFC 2822(1) format).

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc2822.html


File: python.info,  Node: DebuggingServer Objects,  Next: PureProxy Objects,  Prev: SMTPServer Objects,  Up: smtpd — SMTP Server

5.20.13.2 DebuggingServer Objects
.................................

 -- Class: smtpd.DebuggingServer (localaddr, remoteaddr)
     Create a new debugging server.  Arguments are as per *Note
     SMTPServer: 1e57.  Messages will be discarded, and printed on
     stdout.


File: python.info,  Node: PureProxy Objects,  Next: MailmanProxy Objects,  Prev: DebuggingServer Objects,  Up: smtpd — SMTP Server

5.20.13.3 PureProxy Objects
...........................

 -- Class: smtpd.PureProxy (localaddr, remoteaddr)
     Create a new pure proxy server. Arguments are as per *Note
     SMTPServer: 1e57.  Everything will be relayed to `remoteaddr'.
     Note that running this has a good chance to make you into an open
     relay, so please be careful.


File: python.info,  Node: MailmanProxy Objects,  Prev: PureProxy Objects,  Up: smtpd — SMTP Server

5.20.13.4 MailmanProxy Objects
..............................

 -- Class: smtpd.MailmanProxy (localaddr, remoteaddr)
     Create a new pure proxy server. Arguments are as per *Note
     SMTPServer: 1e57.  Everything will be relayed to `remoteaddr',
     unless local mailman configurations knows about an address, in
     which case it will be handled via mailman.  Note that running this
     has a good chance to make you into an open relay, so please be
     careful.


File: python.info,  Node: telnetlib — Telnet client,  Next: uuid — UUID objects according to RFC 4122,  Prev: smtpd — SMTP Server,  Up: Internet Protocols and Support

5.20.14 `telnetlib' — Telnet client
-------------------------------------

`Source code:' Lib/telnetlib.py(1)

__________________________________________________________________

The *Note telnetlib: 172. module provides a *Note Telnet: 36e. class
that implements the Telnet protocol.  See RFC 854(2) for details about
the protocol. In addition, it provides symbolic constants for the
protocol characters (see below), and for the telnet options. The
symbolic names of the telnet options follow the definitions in
`arpa/telnet.h', with the leading `TELOPT_' removed. For symbolic names
of options which are traditionally not included in `arpa/telnet.h', see
the module source itself.

The symbolic constants for the telnet commands are: IAC, DONT, DO,
WONT, WILL, SE (Subnegotiation End), NOP (No Operation), DM (Data
Mark), BRK (Break), IP (Interrupt process), AO (Abort output), AYT (Are
You There), EC (Erase Character), EL (Erase Line), GA (Go Ahead), SB
(Subnegotiation Begin).

 -- Class: telnetlib.Telnet ([host[, port[, timeout]]])
     *Note Telnet: 36e. represents a connection to a Telnet server. The
     instance is initially not connected by default; the *Note open():
     2d9. method must be used to establish a connection.
     Alternatively, the host name and optional port number can be
     passed to the constructor, to, in which case the connection to the
     server will be established before the constructor returns.  The
     optional `timeout' parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     Do not reopen an already connected instance.

     This class has many `read_*()' methods.  Note that some of them
     raise *Note EOFError: 8b3. when the end of the connection is read,
     because they can return an empty string for other reasons.  See
     the individual descriptions below.

     Changed in version 2.6: `timeout' was added.


See also
........

RFC 854(3) - Telnet Protocol Specification
     Definition of the Telnet protocol.

* Menu:

* Telnet Objects::
* Telnet Example::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/telnetlib.py

(2) https://tools.ietf.org/html/rfc854.html

(3) https://tools.ietf.org/html/rfc854.html


File: python.info,  Node: Telnet Objects,  Next: Telnet Example,  Up: telnetlib — Telnet client

5.20.14.1 Telnet Objects
........................

*Note Telnet: 36e. instances have the following methods:

 -- Method: Telnet.read_until (expected[, timeout])
     Read until a given string, `expected', is encountered or until
     `timeout' seconds have passed.

     When no match is found, return whatever is available instead,
     possibly the empty string.  Raise *Note EOFError: 8b3. if the
     connection is closed and no cooked data is available.

 -- Method: Telnet.read_all ()
     Read all data until EOF; block until connection closed.

 -- Method: Telnet.read_some ()
     Read at least one byte of cooked data unless EOF is hit. Return
     `''' if EOF is hit.  Block if no data is immediately available.

 -- Method: Telnet.read_very_eager ()
     Read everything that can be without blocking in I/O (eager).

     Raise *Note EOFError: 8b3. if connection closed and no cooked data
     available.  Return `''' if no cooked data available otherwise. Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_eager ()
     Read readily available data.

     Raise *Note EOFError: 8b3. if connection closed and no cooked data
     available.  Return `''' if no cooked data available otherwise. Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_lazy ()
     Process and return data already in the queues (lazy).

     Raise *Note EOFError: 8b3. if connection closed and no data
     available. Return `''' if no cooked data available otherwise.  Do
     not block unless in the midst of an IAC sequence.

 -- Method: Telnet.read_very_lazy ()
     Return any data available in the cooked queue (very lazy).

     Raise *Note EOFError: 8b3. if connection closed and no data
     available. Return `''' if no cooked data available otherwise.
     This method never blocks.

 -- Method: Telnet.read_sb_data ()
     Return the data collected between a SB/SE pair (suboption
     begin/end). The callback should access these data when it was
     invoked with a `SE' command.  This method never blocks.

     New in version 2.3.


 -- Method: Telnet.open (host[, port[, timeout]])
     Connect to a host. The optional second argument is the port
     number, which defaults to the standard Telnet port (23). The
     optional `timeout' parameter specifies a timeout in seconds for
     blocking operations like the connection attempt (if not specified,
     the global default timeout setting will be used).

     Do not try to reopen an already connected instance.

     Changed in version 2.6: `timeout' was added.


 -- Method: Telnet.msg (msg[, *args])
     Print a debug message when the debug level is `>' 0. If extra
     arguments are present, they are substituted in the message using
     the standard string formatting operator.

 -- Method: Telnet.set_debuglevel (debuglevel)
     Set the debug level.  The higher the value of `debuglevel', the
     more debug output you get (on `sys.stdout').

 -- Method: Telnet.close ()
     Close the connection.

 -- Method: Telnet.get_socket ()
     Return the socket object used internally.

 -- Method: Telnet.fileno ()
     Return the file descriptor of the socket object used internally.

 -- Method: Telnet.write (buffer)
     Write a string to the socket, doubling any IAC characters. This
     can block if the connection is blocked.  May raise *Note
     socket.error: 399. if the connection is closed.

 -- Method: Telnet.interact ()
     Interaction function, emulates a very dumb Telnet client.

 -- Method: Telnet.mt_interact ()
     Multithreaded version of *Note interact(): 1e72.

 -- Method: Telnet.expect (list[, timeout])
     Read until one from a list of a regular expressions matches.

     The first argument is a list of regular expressions, either
     compiled (`regex objects') or uncompiled (strings). The optional
     second argument is a timeout, in seconds; the default is to block
     indefinitely.

     Return a tuple of three items: the index in the list of the first
     regular expression that matches; the match object returned; and
     the text read up till and including the match.

     If end of file is found and no text was read, raise *Note
     EOFError: 8b3.  Otherwise, when nothing matches, return `(-1,
     None, text)' where `text' is the text received so far (may be the
     empty string if a timeout happened).

     If a regular expression ends with a greedy match (such as `.*') or
     if more than one expression can match the same input, the results
     are non-deterministic, and may depend on the I/O timing.

 -- Method: Telnet.set_option_negotiation_callback (callback)
     Each time a telnet option is read on the input flow, this
     `callback' (if set) is called with the following parameters:
     callback(telnet socket, command (DO/DONT/WILL/WONT), option).  No
     other action is done afterwards by telnetlib.


File: python.info,  Node: Telnet Example,  Prev: Telnet Objects,  Up: telnetlib — Telnet client

5.20.14.2 Telnet Example
........................

A simple example illustrating typical use:

    import getpass
    import sys
    import telnetlib

    HOST = "localhost"
    user = raw_input("Enter your remote account: ")
    password = getpass.getpass()

    tn = telnetlib.Telnet(HOST)

    tn.read_until("login: ")
    tn.write(user + "\n")
    if password:
        tn.read_until("Password: ")
        tn.write(password + "\n")

    tn.write("ls\n")
    tn.write("exit\n")

    print tn.read_all()


File: python.info,  Node: uuid — UUID objects according to RFC 4122,  Next: urlparse — Parse URLs into components,  Prev: telnetlib — Telnet client,  Up: Internet Protocols and Support

5.20.15 `uuid' — UUID objects according to RFC 4122
-----------------------------------------------------

New in version 2.5.

This module provides immutable *Note UUID: 1e7a. objects (the *Note
UUID: 1e7a. class) and the functions *Note uuid1(): 1e7b, *Note
uuid3(): 1e7c, *Note uuid4(): 1e7d, *Note uuid5(): 1e7e. for generating
version 1, 3, 4, and 5 UUIDs as specified in RFC 4122(1).

If all you want is a unique ID, you should probably call *Note uuid1():
1e7b. or *Note uuid4(): 1e7d.  Note that *Note uuid1(): 1e7b. may
compromise privacy since it creates a UUID containing the computer’s
network address.  *Note uuid4(): 1e7d. creates a random UUID.

 -- Class: uuid.UUID ([hex[, bytes[, bytes_le[, fields[, int[,
          version]]]]]])
     Create a UUID from either a string of 32 hexadecimal digits, a
     string of 16 bytes as the `bytes' argument, a string of 16 bytes
     in little-endian order as the `bytes_le' argument, a tuple of six
     integers (32-bit `time_low', 16-bit `time_mid', 16-bit
     `time_hi_version', 8-bit `clock_seq_hi_variant', 8-bit
     `clock_seq_low', 48-bit `node') as the `fields' argument, or a
     single 128-bit integer as the `int' argument.  When a string of
     hex digits is given, curly braces, hyphens, and a URN prefix are
     all optional.  For example, these expressions all yield the same
     UUID:

         UUID('{12345678-1234-5678-1234-567812345678}')
         UUID('12345678123456781234567812345678')
         UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
         UUID(bytes='\x12\x34\x56\x78'*4)
         UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                       '\x12\x34\x56\x78\x12\x34\x56\x78')
         UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
         UUID(int=0x12345678123456781234567812345678)

     Exactly one of `hex', `bytes', `bytes_le', `fields', or `int' must
     be given.  The `version' argument is optional; if given, the
     resulting UUID will have its variant and version number set
     according to RFC 4122, overriding bits in the given `hex',
     `bytes', `bytes_le', `fields', or `int'.

*Note UUID: 1e7a. instances have these read-only attributes:

 -- Attribute: UUID.bytes
     The UUID as a 16-byte string (containing the six integer fields in
     big-endian byte order).

 -- Attribute: UUID.bytes_le
     The UUID as a 16-byte string (with `time_low', `time_mid', and
     `time_hi_version' in little-endian byte order).

 -- Attribute: UUID.fields
     A tuple of the six integer fields of the UUID, which are also
     available as six individual attributes and two derived attributes:

     Field                              Meaning
     ----------------------------------------------------------------------- 
     `time_low'                         the first 32 bits of the UUID
     `time_mid'                         the next 16 bits of the UUID
     `time_hi_version'                  the next 16 bits of the UUID
     `clock_seq_hi_variant'             the next 8 bits of the UUID
     `clock_seq_low'                    the next 8 bits of the UUID
     `node'                             the last 48 bits of the UUID
     *Note time: 17a.                   the 60-bit timestamp
     `clock_seq'                        the 14-bit sequence number


 -- Attribute: UUID.hex
     The UUID as a 32-character hexadecimal string.

 -- Attribute: UUID.int
     The UUID as a 128-bit integer.

 -- Attribute: UUID.urn
     The UUID as a URN as specified in RFC 4122.

 -- Attribute: UUID.variant
     The UUID variant, which determines the internal layout of the
     UUID. This will be one of the integer constants *Note
     RESERVED_NCS: 1e86, *Note RFC_4122: 1e87, *Note
     RESERVED_MICROSOFT: 1e88, or *Note RESERVED_FUTURE: 1e89.

 -- Attribute: UUID.version
     The UUID version number (1 through 5, meaningful only when the
     variant is *Note RFC_4122: 1e87.).

The *Note uuid: 190. module defines the following functions:

 -- Function: uuid.getnode ()
     Get the hardware address as a 48-bit positive integer.  The first
     time this runs, it may launch a separate program, which could be
     quite slow.  If all attempts to obtain the hardware address fail,
     we choose a random 48-bit number with its eighth bit set to 1 as
     recommended in RFC 4122.  “Hardware address” means the MAC
     address of a network interface, and on a machine with multiple
     network interfaces the MAC address of any one of them may be
     returned.

 -- Function: uuid.uuid1 ([node[, clock_seq]])
     Generate a UUID from a host ID, sequence number, and the current
     time. If `node' is not given, *Note getnode(): 1e8b. is used to
     obtain the hardware address. If `clock_seq' is given, it is used
     as the sequence number; otherwise a random 14-bit sequence number
     is chosen.

 -- Function: uuid.uuid3 (namespace, name)
     Generate a UUID based on the MD5 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

 -- Function: uuid.uuid4 ()
     Generate a random UUID.

 -- Function: uuid.uuid5 (namespace, name)
     Generate a UUID based on the SHA-1 hash of a namespace identifier
     (which is a UUID) and a name (which is a string).

The *Note uuid: 190. module defines the following namespace identifiers
for use with *Note uuid3(): 1e7c. or *Note uuid5(): 1e7e.

 -- Data: uuid.NAMESPACE_DNS
     When this namespace is specified, the `name' string is a
     fully-qualified domain name.

 -- Data: uuid.NAMESPACE_URL
     When this namespace is specified, the `name' string is a URL.

 -- Data: uuid.NAMESPACE_OID
     When this namespace is specified, the `name' string is an ISO OID.

 -- Data: uuid.NAMESPACE_X500
     When this namespace is specified, the `name' string is an X.500 DN
     in DER or a text output format.

The *Note uuid: 190. module defines the following constants for the
possible values of the `variant' attribute:

 -- Data: uuid.RESERVED_NCS
     Reserved for NCS compatibility.

 -- Data: uuid.RFC_4122
     Specifies the UUID layout given in RFC 4122(2).

 -- Data: uuid.RESERVED_MICROSOFT
     Reserved for Microsoft compatibility.

 -- Data: uuid.RESERVED_FUTURE
     Reserved for future definition.

See also
........

RFC 4122(3) - A Universally Unique IDentifier (UUID) URN Namespace
     This specification defines a Uniform Resource Name namespace for
     UUIDs, the internal format of UUIDs, and methods of generating
     UUIDs.

* Menu:

* Example: Example<12>.

---------- Footnotes ----------

(1) https://tools.ietf.org/html/rfc4122.html

(2) https://tools.ietf.org/html/rfc4122.html

(3) https://tools.ietf.org/html/rfc4122.html


File: python.info,  Node: Example<12>,  Up: uuid — UUID objects according to RFC 4122

5.20.15.1 Example
.................

Here are some examples of typical usage of the *Note uuid: 190. module:

    >>> import uuid

    >>> # make a UUID based on the host ID and current time
    >>> uuid.uuid1()
    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

    >>> # make a UUID using an MD5 hash of a namespace UUID and a name
    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

    >>> # make a random UUID
    >>> uuid.uuid4()
    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

    >>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

    >>> # make a UUID from a string of hex digits (braces and hyphens ignored)
    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

    >>> # convert a UUID to a string of hex digits in standard form
    >>> str(x)
    '00010203-0405-0607-0809-0a0b0c0d0e0f'

    >>> # get the raw 16 bytes of the UUID
    >>> x.bytes
    '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'

    >>> # make a UUID from a 16-byte string
    >>> uuid.UUID(bytes=x.bytes)
    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')


File: python.info,  Node: urlparse — Parse URLs into components,  Next: SocketServer — A framework for network servers,  Prev: uuid — UUID objects according to RFC 4122,  Up: Internet Protocols and Support

5.20.16 `urlparse' — Parse URLs into components
-------------------------------------------------

     Note: The *Note urlparse: 18a. module is renamed to `urllib.parse'
     in Python 3.  The *Note 2to3: c05. tool will automatically adapt
     imports when converting your sources to Python 3.

`Source code:' Lib/urlparse.py(1)

__________________________________________________________________

This module defines a standard interface to break Uniform Resource
Locator (URL) strings up in components (addressing scheme, network
location, path etc.), to combine the components back into a URL string,
and to convert a “relative URL” to an absolute URL given a “base
URL.”

The module has been designed to match the Internet RFC on Relative
Uniform Resource Locators. It supports the following URL schemes:
`file', `ftp', `gopher', `hdl', `http', `https', `imap', `mailto',
`mms', `news',  `nntp', `prospero', `rsync', `rtsp', `rtspu',  `sftp',
`shttp', `sip', `sips', `snews', `svn',  `svn+ssh', `telnet', `wais'.

New in version 2.5: Support for the `sftp' and `sips' schemes.

The *Note urlparse: 18a. module defines the following functions:

 -- Function: urlparse.urlparse (urlstring[, scheme[, allow_fragments]])
     Parse a URL into six components, returning a 6-tuple.  This
     corresponds to the general structure of a URL:
     `scheme://netloc/path;parameters?query#fragment'.  Each tuple item
     is a string, possibly empty. The components are not broken up in
     smaller parts (for example, the network location is a single
     string), and % escapes are not expanded. The delimiters as shown
     above are not part of the result, except for a leading slash in
     the `path' component, which is retained if present.  For example:

         >>> from urlparse import urlparse
         >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
         >>> o   # doctest: +NORMALIZE_WHITESPACE
         ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                     params='', query='', fragment='')
         >>> o.scheme
         'http'
         >>> o.port
         80
         >>> o.geturl()
         'http://www.cwi.nl:80/%7Eguido/Python.html'

     Following the syntax specifications in RFC 1808(2), urlparse
     recognizes a netloc only if it is properly introduced by ‘//’.
     Otherwise the input is presumed to be a relative URL and thus to
     start with a path component.

         >>> from urlparse import urlparse
         >>> urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
         ParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
                    params='', query='', fragment='')
         >>> urlparse('www.cwi.nl/%7Eguido/Python.html')
         ParseResult(scheme='', netloc='', path='www.cwi.nl/%7Eguido/Python.html',
                    params='', query='', fragment='')
         >>> urlparse('help/Python.html')
         ParseResult(scheme='', netloc='', path='help/Python.html', params='',
                    query='', fragment='')

     If the `scheme' argument is specified, it gives the default
     addressing scheme, to be used only if the URL does not specify
     one.  The default value for this argument is the empty string.

     If the `allow_fragments' argument is false, fragment identifiers
     are not recognized and parsed as part of the preceding component,
     even if the URL’s addressing scheme normally does support them.
     The default value for this argument is *Note True: 3c8.

     The return value is actually an instance of a subclass of *Note
     tuple: 421.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                          Value if not present
     --------------------------------------------------------------------------------------------- 
     `scheme'               0           URL scheme specifier           `scheme' parameter
     `netloc'               1           Network location part          empty string
     `path'                 2           Hierarchical path              empty string
     `params'               3           Parameters for last path       empty string
                                        element                        
     `query'                4           Query component                empty string
     `fragment'             5           Fragment identifier            empty string
     `username'                         User name                      *Note None: 3b2.
     `password'                         Password                       *Note None: 3b2.
     `hostname'                         Host name (lower case)         *Note None: 3b2.
     `port'                             Port number as integer, if     *Note None: 3b2.
                                        present                        

     See section *Note Results of urlparse() and urlsplit(): 1e95. for
     more information on the result object.

     Changed in version 2.5: Added attributes to return value.

     Changed in version 2.7: Added IPv6 URL parsing capabilities.


 -- Function: urlparse.parse_qs (qs[, keep_blank_values[,
          strict_parsing]])
     Parse a query string given as a string argument (data of type
     `application/x-www-form-urlencoded').  Data are returned as a
     dictionary.  The dictionary keys are the unique query variable
     names and the values are lists of values for each name.

     The optional argument `keep_blank_values' is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.   A true value indicates that blanks should be
     retained as  blank strings.  The default false value indicates
     that blank values are to be ignored and treated as if they were
     not included.

     The optional argument `strict_parsing' is a flag indicating what
     to do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *Note ValueError: 236.
     exception.

     Use the *Note urllib.urlencode(): 13b7. function to convert such
     dictionaries into query strings.

     New in version 2.6: Copied from the *Note cgi: 5c. module.


 -- Function: urlparse.parse_qsl (qs[, keep_blank_values[,
          strict_parsing]])
     Parse a query string given as a string argument (data of type
     `application/x-www-form-urlencoded').  Data are returned as a list
     of name, value pairs.

     The optional argument `keep_blank_values' is a flag indicating
     whether blank values in percent-encoded queries should be treated
     as blank strings.   A true value indicates that blanks should be
     retained as  blank strings.  The default false value indicates
     that blank values are to be ignored and treated as if they were
     not included.

     The optional argument `strict_parsing' is a flag indicating what
     to do with parsing errors.  If false (the default), errors are
     silently ignored.  If true, errors raise a *Note ValueError: 236.
     exception.

     Use the *Note urllib.urlencode(): 13b7. function to convert such
     lists of pairs into query strings.

     New in version 2.6: Copied from the *Note cgi: 5c. module.


 -- Function: urlparse.urlunparse (parts)
     Construct a URL from a tuple as returned by `urlparse()'. The
     `parts' argument can be any six-item iterable. This may result in
     a slightly different, but equivalent URL, if the URL that was
     parsed originally had unnecessary delimiters (for example, a ?
     with an empty query; the RFC states that these are equivalent).

 -- Function: urlparse.urlsplit (urlstring[, scheme[, allow_fragments]])
     This is similar to *Note urlparse(): 18a, but does not split the
     params from the URL.  This should generally be used instead of
     *Note urlparse(): 18a. if the more recent URL syntax allowing
     parameters to be applied to each segment of the `path' portion of
     the URL (see RFC 2396(3)) is wanted.  A separate function is
     needed to separate the path segments and parameters.  This
     function returns a 5-tuple: (addressing scheme, network location,
     path, query, fragment identifier).

     The return value is actually an instance of a subclass of *Note
     tuple: 421.  This class has the following additional read-only
     convenience attributes:

     Attribute              Index       Value                         Value if not present
     -------------------------------------------------------------------------------------------- 
     `scheme'               0           URL scheme specifier          `scheme' parameter
     `netloc'               1           Network location part         empty string
     `path'                 2           Hierarchical path             empty string
     `query'                3           Query component               empty string
     `fragment'             4           Fragment identifier           empty string
     `username'                         User name                     *Note None: 3b2.
     `password'                         Password                      *Note None: 3b2.
     `hostname'                         Host name (lower case)        *Note None: 3b2.
     `port'                             Port number as integer, if    *Note None: 3b2.
                                        present                       

     See section *Note Results of urlparse() and urlsplit(): 1e95. for
     more information on the result object.

     New in version 2.2.

     Changed in version 2.5: Added attributes to return value.


 -- Function: urlparse.urlunsplit (parts)
     Combine the elements of a tuple as returned by *Note urlsplit():
     26b. into a complete URL as a string. The `parts' argument can be
     any five-item iterable. This may result in a slightly different,
     but equivalent URL, if the URL that was parsed originally had
     unnecessary delimiters (for example, a ? with an empty query; the
     RFC states that these are equivalent).

     New in version 2.2.


 -- Function: urlparse.urljoin (base, url[, allow_fragments])
     Construct a full (“absolute”) URL by combining a “base
     URL” (`base') with another URL (`url').  Informally, this uses
     components of the base URL, in particular the addressing scheme,
     the network location and (part of) the path, to provide missing
     components in the relative URL.  For example:

         >>> from urlparse import urljoin
         >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
         'http://www.cwi.nl/%7Eguido/FAQ.html'

     The `allow_fragments' argument has the same meaning and default as
     for *Note urlparse(): 18a.

          Note: If `url' is an absolute URL (that is, starting with
          `//' or `scheme://'), the `url'’s host name and/or scheme
          will be present in the result.  For example:

         >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html',
         ...         '//www.python.org/%7Eguido')
         'http://www.python.org/%7Eguido'

     If you do not want that behavior, preprocess the `url' with *Note
     urlsplit(): 26b. and *Note urlunsplit(): 1e97, removing possible
     `scheme' and `netloc' parts.

 -- Function: urlparse.urldefrag (url)
     If `url' contains a fragment identifier, returns a modified
     version of `url' with no fragment identifier, and the fragment
     identifier as a separate string.  If there is no fragment
     identifier in `url', returns `url' unmodified and an empty string.

See also
........

RFC 3986(4) - Uniform Resource Identifiers
     This is the current standard (STD66). Any changes to urlparse
     module should conform to this. Certain deviations could be
     observed, which are mostly for backward compatibility purposes and
     for certain de-facto parsing requirements as commonly observed in
     major browsers.

RFC 2732(5) - Format for Literal IPv6 Addresses in URL’s.
     This specifies the parsing requirements of IPv6 URLs.

RFC 2396(6) - Uniform Resource Identifiers (URI): Generic Syntax
     Document describing the generic syntactic requirements for both
     Uniform Resource Names (URNs) and Uniform Resource Locators (URLs).

RFC 2368(7) - The mailto URL scheme.
     Parsing requirements for mailto URL schemes.

RFC 1808(8) - Relative Uniform Resource Locators
     This Request For Comments includes the rules for joining an
     absolute and a relative URL, including a fair number of
     “Abnormal Examples” which govern the treatment of border cases.

RFC 1738(9) - Uniform Resource Locators (URL)
     This specifies the formal syntax and semantics of absolute URLs.

* Menu:

* Results of urlparse() and urlsplit(): Results of urlparse and urlsplit.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/urlparse.py

(2) https://tools.ietf.org/html/rfc1808.html

(3) https://tools.ietf.org/html/rfc2396.html

(4) https://tools.ietf.org/html/rfc3986.html

(5) https://tools.ietf.org/html/rfc2732.html

(6) https://tools.ietf.org/html/rfc2396.html

(7) https://tools.ietf.org/html/rfc2368.html

(8) https://tools.ietf.org/html/rfc1808.html

(9) https://tools.ietf.org/html/rfc1738.html


File: python.info,  Node: Results of urlparse and urlsplit,  Up: urlparse — Parse URLs into components

5.20.16.1 Results of `urlparse()' and `urlsplit()'
..................................................

The result objects from the *Note urlparse(): 18a. and *Note
urlsplit(): 26b. functions are subclasses of the *Note tuple: 421.
type.  These subclasses add the attributes described in those
functions, as well as provide an additional method:

 -- Method: ParseResult.geturl ()
     Return the re-combined version of the original URL as a string.
     This may differ from the original URL in that the scheme will
     always be normalized to lower case and empty components may be
     dropped. Specifically, empty parameters, queries, and fragment
     identifiers will be removed.

     The result of this method is a fixpoint if passed back through the
     original parsing function:

         >>> import urlparse
         >>> url = 'HTTP://www.Python.org/doc/#'

         >>> r1 = urlparse.urlsplit(url)
         >>> r1.geturl()
         'http://www.Python.org/doc/'

         >>> r2 = urlparse.urlsplit(r1.geturl())
         >>> r2.geturl()
         'http://www.Python.org/doc/'

     New in version 2.5.


The following classes provide the implementations of the parse results:

 -- Class: urlparse.ParseResult (scheme, netloc, path, params, query,
          fragment)
     Concrete class for *Note urlparse(): 18a. results.

 -- Class: urlparse.SplitResult (scheme, netloc, path, query, fragment)
     Concrete class for *Note urlsplit(): 26b. results.


File: python.info,  Node: SocketServer — A framework for network servers,  Next: BaseHTTPServer — Basic HTTP server,  Prev: urlparse — Parse URLs into components,  Up: Internet Protocols and Support

5.20.17 `SocketServer' — A framework for network servers
----------------------------------------------------------

     Note: The *Note SocketServer: 15d. module has been renamed to
     `socketserver' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

`Source code:' Lib/SocketServer.py(1)

__________________________________________________________________

The *Note SocketServer: 15d. module simplifies the task of writing
network servers.

There are four basic concrete server classes:

 -- Class: SocketServer.TCPServer (server_address, RequestHandlerClass,
          bind_and_activate=True)
     This uses the Internet TCP protocol, which provides for continuous
     streams of data between the client and server.  If
     `bind_and_activate' is true, the constructor automatically
     attempts to invoke *Note server_bind(): 1ea0. and *Note
     server_activate(): 1ea1.  The other parameters are passed to the
     *Note BaseServer: 1ea2. base class.

 -- Class: SocketServer.UDPServer (server_address, RequestHandlerClass,
          bind_and_activate=True)
     This uses datagrams, which are discrete packets of information
     that may arrive out of order or be lost while in transit.  The
     parameters are the same as for *Note TCPServer: 255.

 -- Class: SocketServer.UnixStreamServer (server_address,
          RequestHandlerClass, bind_and_activate=True)
 -- Class: SocketServer.UnixDatagramServer (server_address,
          RequestHandlerClass, bind_and_activate=True)
     These more infrequently used classes are similar to the TCP and
     UDP classes, but use Unix domain sockets; they’re not available
     on non-Unix platforms.  The parameters are the same as for *Note
     TCPServer: 255.

These four classes process requests `synchronously'; each request must
be completed before the next request can be started.  This isn’t
suitable if each request takes a long time to complete, because it
requires a lot of computation, or because it returns a lot of data
which the client is slow to process.  The solution is to create a
separate process or thread to handle each request; the *Note
ForkingMixIn: 1ea6. and *Note ThreadingMixIn: 1ea7. mix-in classes can
be used to support asynchronous behaviour.

Creating a server requires several steps.  First, you must create a
request handler class by subclassing the *Note BaseRequestHandler:
1ea8. class and overriding its *Note handle(): 1ea9. method; this
method will process incoming requests.  Second, you must instantiate
one of the server classes, passing it the server’s address and the
request handler class.  Then call the *Note handle_request(): 258. or
*Note serve_forever(): 1eaa. method of the server object to process one
or many requests.  Finally, call *Note server_close(): 1eab.  to close
the socket.

When inheriting from *Note ThreadingMixIn: 1ea7. for threaded
connection behavior, you should explicitly declare how you want your
threads to behave on an abrupt shutdown. The *Note ThreadingMixIn:
1ea7. class defines an attribute `daemon_threads', which indicates
whether or not the server should wait for thread termination. You
should set the flag explicitly if you would like threads to behave
autonomously; the default is *Note False: 3c9, meaning that Python will
not exit until all threads created by *Note ThreadingMixIn: 1ea7. have
exited.

Server classes have the same external methods and attributes, no matter
what network protocol they use.

* Menu:

* Server Creation Notes::
* Server Objects::
* Request Handler Objects::
* Examples: Examples<15>.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/SocketServer.py


File: python.info,  Node: Server Creation Notes,  Next: Server Objects,  Up: SocketServer — A framework for network servers

5.20.17.1 Server Creation Notes
...............................

There are five classes in an inheritance diagram, four of which
represent synchronous servers of four types:

    +------------+
    | BaseServer |
    +------------+
          |
          v
    +-----------+        +------------------+
    | TCPServer |------->| UnixStreamServer |
    +-----------+        +------------------+
          |
          v
    +-----------+        +--------------------+
    | UDPServer |------->| UnixDatagramServer |
    +-----------+        +--------------------+

Note that *Note UnixDatagramServer: 1ea5. derives from *Note UDPServer:
1ea3, not from *Note UnixStreamServer: 1ea4. — the only difference
between an IP and a Unix stream server is the address family, which is
simply repeated in both Unix server classes.

 -- Class: SocketServer.ForkingMixIn
 -- Class: SocketServer.ThreadingMixIn
     Forking and threading versions of each type of server can be
     created using these mix-in classes.  For instance, *Note
     ThreadingUDPServer: 1ead.  is created as follows:

         class ThreadingUDPServer(ThreadingMixIn, UDPServer):
             pass

     The mix-in class comes first, since it overrides a method defined
     in *Note UDPServer: 1ea3.  Setting the various attributes also
     changes the behavior of the underlying server mechanism.

     *Note ForkingMixIn: 1ea6. and the Forking classes mentioned below
     are only available on POSIX platforms that support *Note fork():
     244.

 -- Class: SocketServer.ForkingTCPServer
 -- Class: SocketServer.ForkingUDPServer
 -- Class: SocketServer.ThreadingTCPServer
 -- Class: SocketServer.ThreadingUDPServer
     These classes are pre-defined using the mix-in classes.

To implement a service, you must derive a class from *Note
BaseRequestHandler: 1ea8.  and redefine its *Note handle(): 1ea9.
method.  You can then run various versions of the service by combining
one of the server classes with your request handler class.  The request
handler class must be different for datagram or stream services.  This
can be hidden by using the handler subclasses *Note
StreamRequestHandler: 1eb1. or *Note DatagramRequestHandler: 1eb2.

Of course, you still have to use your head!  For instance, it makes no
sense to use a forking server if the service contains state in memory
that can be modified by different requests, since the modifications in
the child process would never reach the initial state kept in the
parent process and passed to each child.  In this case, you can use a
threading server, but you will probably have to use locks to protect
the integrity of the shared data.

On the other hand, if you are building an HTTP server where all data is
stored externally (for instance, in the file system), a synchronous
class will essentially render the service “deaf” while one request
is being handled – which may be for a very long time if a client is
slow to receive all the data it has requested.  Here a threading or
forking server is appropriate.

In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data.  This can be implemented by using a synchronous
server and doing an explicit fork in the request handler class *Note
handle(): 1ea9. method.

Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor *Note fork(): 244. (or
where these are too expensive or inappropriate for the service) is to
maintain an explicit table of partially finished requests and to use
*Note select(): 15de. to decide which request to work on next (or
whether to handle a new incoming request).  This is particularly
important for stream services where each client can potentially be
connected for a long time (if threads or subprocesses cannot be used).
See *Note asyncore: 11. for another way to manage this.


File: python.info,  Node: Server Objects,  Next: Request Handler Objects,  Prev: Server Creation Notes,  Up: SocketServer — A framework for network servers

5.20.17.2 Server Objects
........................

 -- Class: SocketServer.BaseServer (server_address, RequestHandlerClass)
     This is the superclass of all Server objects in the module.  It
     defines the interface, given below, but does not implement most of
     the methods, which is done in subclasses.  The two parameters are
     stored in the respective *Note server_address: 1eb4. and *Note
     RequestHandlerClass: 1eb5. attributes.

      -- Method: fileno ()
          Return an integer file descriptor for the socket on which the
          server is listening.  This function is most commonly passed
          to *Note select.select(): 15de, to allow monitoring multiple
          servers in the same process.

      -- Method: handle_request ()
          Process a single request.  This function calls the following
          methods in order: *Note get_request(): 1eb7, *Note
          verify_request(): 1eb8, and *Note process_request(): 1eb9.
          If the user-provided *Note handle(): 1ea9. method of the
          handler class raises an exception, the server’s *Note
          handle_error(): 1eba. method will be called.  If no request
          is received within *Note timeout: 256.  seconds, *Note
          handle_timeout(): 257. will be called and *Note
          handle_request(): 258.  will return.

      -- Method: serve_forever (poll_interval=0.5)
          Handle requests until an explicit *Note shutdown(): 1ebb.
          request.  Poll for shutdown every `poll_interval' seconds.
          Ignores the *Note timeout: 256. attribute.  If you need to do
          periodic tasks, do them in another thread.

      -- Method: shutdown ()
          Tell the *Note serve_forever(): 1eaa. loop to stop and wait
          until it does.

          New in version 2.6.


      -- Method: server_close ()
          Clean up the server. May be overridden.

          New in version 2.6.


      -- Attribute: address_family
          The family of protocols to which the server’s socket
          belongs.  Common examples are *Note socket.AF_INET: 1761. and
          *Note socket.AF_UNIX: 1760.

      -- Attribute: RequestHandlerClass
          The user-provided request handler class; an instance of this
          class is created for each request.

      -- Attribute: server_address
          The address on which the server is listening.  The format of
          addresses varies depending on the protocol family; see the
          documentation for the *Note socket: 15c. module for details.
          For Internet protocols, this is a tuple containing a string
          giving the address, and an integer port number:
          `('127.0.0.1', 80)', for example.

      -- Attribute: socket
          The socket object on which the server will listen for
          incoming requests.

     The server classes support the following class variables:

      -- Attribute: allow_reuse_address
          Whether the server will allow the reuse of an address. This
          defaults to *Note False: 3c9, and can be set in subclasses to
          change the policy.

      -- Attribute: request_queue_size
          The size of the request queue.  If it takes a long time to
          process a single request, any requests that arrive while the
          server is busy are placed into a queue, up to *Note
          request_queue_size: 1ebf. requests.  Once the queue is full,
          further requests from clients will get a “Connection
          denied” error.  The default value is usually 5, but this
          can be overridden by subclasses.

      -- Attribute: socket_type
          The type of socket used by the server; *Note
          socket.SOCK_STREAM: 1dc. and *Note socket.SOCK_DGRAM: 1db.
          are two common values.

      -- Attribute: timeout
          Timeout duration, measured in seconds, or *Note None: 3b2. if
          no timeout is desired.  If *Note handle_request(): 258.
          receives no incoming requests within the timeout period, the
          *Note handle_timeout(): 257. method is called.

     There are various server methods that can be overridden by
     subclasses of base server classes like *Note TCPServer: 255.;
     these methods aren’t useful to external users of the server
     object.

      -- Method: finish_request ()
          Actually processes the request by instantiating *Note
          RequestHandlerClass: 1eb5. and calling its *Note handle():
          1ea9. method.

      -- Method: get_request ()
          Must accept a request from the socket, and return a 2-tuple
          containing the `new' socket object to be used to communicate
          with the client, and the client’s address.

      -- Method: handle_error (request, client_address)
          This function is called if the *Note handle(): 1ea9.  method
          of a *Note RequestHandlerClass: 1eb5. instance raises an
          exception.  The default action is to print the traceback to
          standard output and continue handling further requests.

      -- Method: handle_timeout ()
          This function is called when the *Note timeout: 256.
          attribute has been set to a value other than *Note None: 3b2.
          and the timeout period has passed with no requests being
          received.  The default action for forking servers is to
          collect the status of any child processes that have exited,
          while in threading servers this method does nothing.

      -- Method: process_request (request, client_address)
          Calls *Note finish_request(): 1ec1. to create an instance of
          the *Note RequestHandlerClass: 1eb5.  If desired, this
          function can create a new process or thread to handle the
          request; the *Note ForkingMixIn: 1ea6. and *Note
          ThreadingMixIn: 1ea7. classes do this.

      -- Method: server_activate ()
          Called by the server’s constructor to activate the server.
          The default behavior for a TCP server just invokes *Note
          listen(): 16d7.  on the server’s socket. May be overridden.

      -- Method: server_bind ()
          Called by the server’s constructor to bind the socket to
          the desired address.  May be overridden.

      -- Method: verify_request (request, client_address)
          Must return a Boolean value; if the value is *Note True: 3c8,
          the request will be processed, and if it’s *Note False:
          3c9, the request will be denied. This function can be
          overridden to implement access controls for a server. The
          default implementation always returns *Note True: 3c8.


File: python.info,  Node: Request Handler Objects,  Next: Examples<15>,  Prev: Server Objects,  Up: SocketServer — A framework for network servers

5.20.17.3 Request Handler Objects
.................................

 -- Class: SocketServer.BaseRequestHandler
     This is the superclass of all request handler objects.  It defines
     the interface, given below.  A concrete request handler subclass
     must define a new *Note handle(): 1ea9. method, and can override
     any of the other methods.  A new instance of the subclass is
     created for each request.

      -- Method: setup ()
          Called before the *Note handle(): 1ea9. method to perform any
          initialization actions required.  The default implementation
          does nothing.

      -- Method: handle ()
          This function must do all the work required to service a
          request.  The default implementation does nothing.  Several
          instance attributes are available to it; the request is
          available as `self.request'; the client address as
          `self.client_address'; and the server instance as
          `self.server', in case it needs access to per-server
          information.

          The type of `self.request' is different for datagram or stream
          services.  For stream services, `self.request' is a socket
          object; for datagram services, `self.request' is a pair of
          string and socket.

      -- Method: finish ()
          Called after the *Note handle(): 1ea9. method to perform any
          clean-up actions required.  The default implementation does
          nothing.  If *Note setup(): 1ec3.  raises an exception, this
          function will not be called.

 -- Class: SocketServer.StreamRequestHandler
 -- Class: SocketServer.DatagramRequestHandler
     These *Note BaseRequestHandler: 1ea8. subclasses override the
     *Note setup(): 1ec3. and *Note finish(): 1ec4.  methods, and
     provide `self.rfile' and `self.wfile' attributes.  The
     `self.rfile' and `self.wfile' attributes can be read or written,
     respectively, to get the request data or return data to the client.


File: python.info,  Node: Examples<15>,  Prev: Request Handler Objects,  Up: SocketServer — A framework for network servers

5.20.17.4 Examples
..................

* Menu:

* SocketServer.TCPServer Example: SocketServer TCPServer Example.
* SocketServer.UDPServer Example: SocketServer UDPServer Example.
* Asynchronous Mixins::


File: python.info,  Node: SocketServer TCPServer Example,  Next: SocketServer UDPServer Example,  Up: Examples<15>

5.20.17.5 `SocketServer.TCPServer' Example
..........................................

This is the server side:

    import SocketServer

    class MyTCPHandler(SocketServer.BaseRequestHandler):
        """
        The request handler class for our server.

        It is instantiated once per connection to the server, and must
        override the handle() method to implement communication to the
        client.
        """

        def handle(self):
            # self.request is the TCP socket connected to the client
            self.data = self.request.recv(1024).strip()
            print "{} wrote:".format(self.client_address[0])
            print self.data
            # just send back the same data, but upper-cased
            self.request.sendall(self.data.upper())

    if __name__ == "__main__":
        HOST, PORT = "localhost", 9999

        # Create the server, binding to localhost on port 9999
        server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

        # Activate the server; this will keep running until you
        # interrupt the program with Ctrl-C
        server.serve_forever()

An alternative request handler class that makes use of streams
(file-like objects that simplify communication by providing the
standard file interface):

    class MyTCPHandler(SocketServer.StreamRequestHandler):

        def handle(self):
            # self.rfile is a file-like object created by the handler;
            # we can now use e.g. readline() instead of raw recv() calls
            self.data = self.rfile.readline().strip()
            print "{} wrote:".format(self.client_address[0])
            print self.data
            # Likewise, self.wfile is a file-like object used to write back
            # to the client
            self.wfile.write(self.data.upper())

The difference is that the `readline()' call in the second handler will
call `recv()' multiple times until it encounters a newline character,
while the single `recv()' call in the first handler will just return
what has been sent from the client in one `sendall()' call.

This is the client side:

    import socket
    import sys

    HOST, PORT = "localhost", 9999
    data = " ".join(sys.argv[1:])

    # Create a socket (SOCK_STREAM means a TCP socket)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        # Connect to server and send data
        sock.connect((HOST, PORT))
        sock.sendall(data + "\n")

        # Receive data from the server and shut down
        received = sock.recv(1024)
    finally:
        sock.close()

    print "Sent:     {}".format(data)
    print "Received: {}".format(received)

The output of the example should look something like this:

Server:

    $ python TCPServer.py
    127.0.0.1 wrote:
    hello world with TCP
    127.0.0.1 wrote:
    python is nice

Client:

    $ python TCPClient.py hello world with TCP
    Sent:     hello world with TCP
    Received: HELLO WORLD WITH TCP
    $ python TCPClient.py python is nice
    Sent:     python is nice
    Received: PYTHON IS NICE


File: python.info,  Node: SocketServer UDPServer Example,  Next: Asynchronous Mixins,  Prev: SocketServer TCPServer Example,  Up: Examples<15>

5.20.17.6 `SocketServer.UDPServer' Example
..........................................

This is the server side:

    import SocketServer

    class MyUDPHandler(SocketServer.BaseRequestHandler):
        """
        This class works similar to the TCP handler class, except that
        self.request consists of a pair of data and client socket, and since
        there is no connection the client address must be given explicitly
        when sending data back via sendto().
        """

        def handle(self):
            data = self.request[0].strip()
            socket = self.request[1]
            print "{} wrote:".format(self.client_address[0])
            print data
            socket.sendto(data.upper(), self.client_address)

    if __name__ == "__main__":
        HOST, PORT = "localhost", 9999
        server = SocketServer.UDPServer((HOST, PORT), MyUDPHandler)
        server.serve_forever()

This is the client side:

    import socket
    import sys

    HOST, PORT = "localhost", 9999
    data = " ".join(sys.argv[1:])

    # SOCK_DGRAM is the socket type to use for UDP sockets
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    # As you can see, there is no connect() call; UDP has no connections.
    # Instead, data is directly sent to the recipient via sendto().
    sock.sendto(data + "\n", (HOST, PORT))
    received = sock.recv(1024)

    print "Sent:     {}".format(data)
    print "Received: {}".format(received)

The output of the example should look exactly like for the TCP server
example.


File: python.info,  Node: Asynchronous Mixins,  Prev: SocketServer UDPServer Example,  Up: Examples<15>

5.20.17.7 Asynchronous Mixins
.............................

To build asynchronous handlers, use the *Note ThreadingMixIn: 1ea7. and
*Note ForkingMixIn: 1ea6. classes.

An example for the *Note ThreadingMixIn: 1ea7. class:

    import socket
    import threading
    import SocketServer

    class ThreadedTCPRequestHandler(SocketServer.BaseRequestHandler):

        def handle(self):
            data = self.request.recv(1024)
            cur_thread = threading.current_thread()
            response = "{}: {}".format(cur_thread.name, data)
            self.request.sendall(response)

    class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
        pass

    def client(ip, port, message):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((ip, port))
        try:
            sock.sendall(message)
            response = sock.recv(1024)
            print "Received: {}".format(response)
        finally:
            sock.close()

    if __name__ == "__main__":
        # Port 0 means to select an arbitrary unused port
        HOST, PORT = "localhost", 0

        server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
        ip, port = server.server_address

        # Start a thread with the server -- that thread will then start one
        # more thread for each request
        server_thread = threading.Thread(target=server.serve_forever)
        # Exit the server thread when the main thread terminates
        server_thread.daemon = True
        server_thread.start()
        print "Server loop running in thread:", server_thread.name

        client(ip, port, "Hello World 1")
        client(ip, port, "Hello World 2")
        client(ip, port, "Hello World 3")

        server.shutdown()
        server.server_close()

The output of the example should look something like this:

    $ python ThreadedTCPServer.py
    Server loop running in thread: Thread-1
    Received: Thread-2: Hello World 1
    Received: Thread-3: Hello World 2
    Received: Thread-4: Hello World 3

The *Note ForkingMixIn: 1ea6. class is used in the same way, except
that the server will spawn a new process for each request.  Available
only on POSIX platforms that support *Note fork(): 244.


File: python.info,  Node: BaseHTTPServer — Basic HTTP server,  Next: SimpleHTTPServer — Simple HTTP request handler,  Prev: SocketServer — A framework for network servers,  Up: Internet Protocols and Support

5.20.18 `BaseHTTPServer' — Basic HTTP server
----------------------------------------------

     Note: The *Note BaseHTTPServer: 16. module has been merged into
     `http.server' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

`Source code:' Lib/BaseHTTPServer.py(1)

__________________________________________________________________

This module defines two classes for implementing HTTP servers (Web
servers).  Usually, this module isn’t used directly, but is used as a
basis for building functioning Web servers. See the *Note
SimpleHTTPServer: 156. and *Note CGIHTTPServer: 5d. modules.

The first class, *Note HTTPServer: 1cae, is a *Note
SocketServer.TCPServer: 255.  subclass, and therefore implements the
*Note SocketServer.BaseServer: 1ea2.  interface.  It creates and
listens at the HTTP socket, dispatching the requests to a handler.
Code to create and run the server looks like this:

    def run(server_class=BaseHTTPServer.HTTPServer,
            handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
        server_address = ('', 8000)
        httpd = server_class(server_address, handler_class)
        httpd.serve_forever()

 -- Class: BaseHTTPServer.HTTPServer (server_address,
          RequestHandlerClass)
     This class builds on the `TCPServer' class by storing the server
     address as instance variables named `server_name' and
     `server_port'. The server is accessible by the handler, typically
     through the handler’s `server' instance variable.

 -- Class: BaseHTTPServer.BaseHTTPRequestHandler (request,
          client_address, server)
     This class is used to handle the HTTP requests that arrive at the
     server. By itself, it cannot respond to any actual HTTP requests;
     it must be subclassed to handle each request method (e.g. GET or
     POST). *Note BaseHTTPRequestHandler: 1cad. provides a number of
     class and instance variables, and methods for use by subclasses.

     The handler will parse the request and the headers, then call a
     method specific to the request type. The method name is
     constructed from the request. For example, for the request method
     `SPAM', the `do_SPAM()' method will be called with no arguments.
     All of the relevant information is stored in instance variables of
     the handler.  Subclasses should not need to override or extend the
     *Note __init__(): 394. method.

     *Note BaseHTTPRequestHandler: 1cad. has the following instance
     variables:

      -- Attribute: client_address
          Contains a tuple of the form `(host, port)' referring to the
          client’s address.

      -- Attribute: server
          Contains the server instance.

      -- Attribute: command
          Contains the command (request type). For example, `'GET''.

      -- Attribute: path
          Contains the request path.

      -- Attribute: request_version
          Contains the version string from the request. For example,
          `'HTTP/1.0''.

      -- Attribute: headers
          Holds an instance of the class specified by the *Note
          MessageClass: 1ed1. class variable. This instance parses and
          manages the headers in the HTTP request.

      -- Attribute: rfile
          Contains an input stream, positioned at the start of the
          optional input data.

      -- Attribute: wfile
          Contains the output stream for writing a response back to the
          client. Proper adherence to the HTTP protocol must be used
          when writing to this stream.

     *Note BaseHTTPRequestHandler: 1cad. has the following class
     variables:

      -- Attribute: server_version
          Specifies the server software version.  You may want to
          override this. The format is multiple whitespace-separated
          strings, where each string is of the form name[/version]. For
          example, `'BaseHTTP/0.2''.

      -- Attribute: sys_version
          Contains the Python system version, in a form usable by the
          *Note version_string: 1ed6. method and the *Note
          server_version: 1ed4. class variable. For example,
          `'Python/1.4''.

      -- Attribute: error_message_format
          Specifies a format string for building an error response to
          the client. It uses parenthesized, keyed format specifiers,
          so the format operand must be a dictionary. The `code' key
          should be an integer, specifying the numeric HTTP error code
          value. `message' should be a string containing a (detailed)
          error message of what occurred, and `explain' should be an
          explanation of the error code number. Default `message' and
          `explain' values can found in the `responses' class variable.

      -- Attribute: error_content_type
          Specifies the Content-Type HTTP header of error responses
          sent to the client.  The default value is `'text/html''.

          New in version 2.6: Previously, the content type was always
          `'text/html''.


      -- Attribute: protocol_version
          This specifies the HTTP protocol version used in responses.
          If set to `'HTTP/1.1'', the server will permit HTTP
          persistent connections; however, your server `must' then
          include an accurate `Content-Length' header (using *Note
          send_header(): 1eda.) in all of its responses to clients.
          For backwards compatibility, the setting defaults to
          `'HTTP/1.0''.

      -- Attribute: MessageClass
          Specifies a *Note rfc822.Message: 193a.-like class to parse
          HTTP headers.  Typically, this is not overridden, and it
          defaults to *Note mimetools.Message: 19b0.

      -- Attribute: responses
          This variable contains a mapping of error code integers to
          two-element tuples containing a short and long message. For
          example, `{code: (shortmessage, longmessage)}'. The
          `shortmessage' is usually used as the `message' key in an
          error response, and `longmessage' as the `explain' key (see
          the *Note error_message_format: 1ed7. class variable).

     A *Note BaseHTTPRequestHandler: 1cad. instance has the following
     methods:

      -- Method: handle ()
          Calls *Note handle_one_request(): 1edc. once (or, if
          persistent connections are enabled, multiple times) to handle
          incoming HTTP requests. You should never need to override it;
          instead, implement appropriate `do_*()' methods.

      -- Method: handle_one_request ()
          This method will parse and dispatch the request to the
          appropriate `do_*()' method.  You should never need to
          override it.

      -- Method: send_error (code[, message])
          Sends and logs a complete error reply to the client. The
          numeric `code' specifies the HTTP error code, with `message'
          as optional, more specific text. A complete set of headers is
          sent, followed by text composed using the *Note
          error_message_format: 1ed7. class variable. The body will be
          empty if the method is HEAD or the response code is one of
          the following: `1xx', `204 No Content', `205 Reset Content',
          `304 Not Modified'.

      -- Method: send_response (code[, message])
          Sends a response header and logs the accepted request. The
          HTTP response line is sent, followed by `Server' and `Date'
          headers. The values for these two headers are picked up from
          the *Note version_string(): 1ed6. and *Note
          date_time_string(): 1edf. methods, respectively.

      -- Method: send_header (keyword, value)
          Writes a specific HTTP header to the output stream. `keyword'
          should specify the header keyword, with `value' specifying
          its value.

      -- Method: end_headers ()
          Sends a blank line, indicating the end of the HTTP headers in
          the response.

      -- Method: log_request ([code[, size]])
          Logs an accepted (successful) request. `code' should specify
          the numeric HTTP code associated with the response. If a size
          of the response is available, then it should be passed as the
          `size' parameter.

      -- Method: log_error (...)
          Logs an error when a request cannot be fulfilled. By default,
          it passes the message to *Note log_message(): 1ee3, so it
          takes the same arguments (`format' and additional values).

      -- Method: log_message (format, ...)
          Logs an arbitrary message to `sys.stderr'. This is typically
          overridden to create custom error logging mechanisms. The
          `format' argument is a standard printf-style format string,
          where the additional arguments to *Note log_message(): 1ee3.
          are applied as inputs to the formatting. The client ip
          address and current date and time are prefixed to every
          message logged.

      -- Method: version_string ()
          Returns the server software’s version string. This is a
          combination of the *Note server_version: 1ed4. and *Note
          sys_version: 1ed5. class variables.

      -- Method: date_time_string ([timestamp])
          Returns the date and time given by `timestamp' (which must be
          in the format returned by *Note time.time(): 47d.), formatted
          for a message header. If `timestamp' is omitted, it uses the
          current date and time.

          The result looks like `'Sun, 06 Nov 1994 08:49:37 GMT''.

          New in version 2.5: The `timestamp' parameter.


      -- Method: log_date_time_string ()
          Returns the current date and time, formatted for logging.

      -- Method: address_string ()
          Returns the client address, formatted for logging. A name
          lookup is performed on the client’s IP address.

* Menu:

* More examples::

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/BaseHTTPServer.py


File: python.info,  Node: More examples,  Up: BaseHTTPServer — Basic HTTP server

5.20.18.1 More examples
.......................

To create a server that doesn’t run forever, but until some condition
is fulfilled:

    def run_while_true(server_class=BaseHTTPServer.HTTPServer,
                       handler_class=BaseHTTPServer.BaseHTTPRequestHandler):
        """
        This assumes that keep_running() is a function of no arguments which
        is tested initially and after each request.  If its return value
        is true, the server continues.
        """
        server_address = ('', 8000)
        httpd = server_class(server_address, handler_class)
        while keep_running():
            httpd.handle_request()

See also
........

Module *Note CGIHTTPServer: 5d.
     Extended request handler that supports CGI scripts.

Module *Note SimpleHTTPServer: 156.
     Basic request handler that limits response to files actually under
     the document root.


File: python.info,  Node: SimpleHTTPServer — Simple HTTP request handler,  Next: CGIHTTPServer — CGI-capable HTTP request handler,  Prev: BaseHTTPServer — Basic HTTP server,  Up: Internet Protocols and Support

5.20.19 `SimpleHTTPServer' — Simple HTTP request handler
----------------------------------------------------------

     Note: The *Note SimpleHTTPServer: 156. module has been merged into
     `http.server' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

The *Note SimpleHTTPServer: 156. module defines a single class, *Note
SimpleHTTPRequestHandler: 1ee9, which is interface-compatible with
*Note BaseHTTPServer.BaseHTTPRequestHandler: 1cad.

The *Note SimpleHTTPServer: 156. module defines the following class:

 -- Class: SimpleHTTPServer.SimpleHTTPRequestHandler (request,
          client_address, server)
     This class serves files from the current directory and below,
     directly mapping the directory structure to HTTP requests.

     A lot of the work, such as parsing the request, is done by the
     base class *Note BaseHTTPServer.BaseHTTPRequestHandler: 1cad.
     This class implements the *Note do_GET(): 1eea. and *Note
     do_HEAD(): 1eeb. functions.

     The following are defined as class-level attributes of *Note
     SimpleHTTPRequestHandler: 1ee9.:

      -- Attribute: server_version

     This will be `"SimpleHTTP/" + __version__', where `__version__' is
     defined at the module level.

      -- Attribute: extensions_map
          A dictionary mapping suffixes into MIME types. The default is
          signified by an empty string, and is considered to be
          `application/octet-stream'. The mapping is used
          case-insensitively, and so should contain only lower-cased
          keys.

     The *Note SimpleHTTPRequestHandler: 1ee9. class defines the
     following methods:

      -- Method: do_HEAD ()
          This method serves the `'HEAD'' request type: it sends the
          headers it would send for the equivalent `GET' request. See
          the *Note do_GET(): 1eea.  method for a more complete
          explanation of the possible headers.

      -- Method: do_GET ()
          The request is mapped to a local file by interpreting the
          request as a path relative to the current working directory.

          If the request was mapped to a directory, the directory is
          checked for a file named `index.html' or `index.htm' (in that
          order). If found, the file’s contents are returned;
          otherwise a directory listing is generated by calling the
          `list_directory()' method. This method uses *Note
          os.listdir(): 2d5. to scan the directory, and returns a `404'
          error response if the `listdir()' fails.

          If the request was mapped to a file, it is opened and the
          contents are returned.  Any *Note IOError: 1fa. exception in
          opening the requested file is mapped to a `404', `'File not
          found'' error. Otherwise, the content type is guessed by
          calling the `guess_type()' method, which in turn uses the
          `extensions_map' variable.

          A `'Content-type:'' header with the guessed content type is
          output, followed by a `'Content-Length:'' header with the
          file’s size and a `'Last-Modified:'' header with the
          file’s modification time.

          Then follows a blank line signifying the end of the headers,
          and then the contents of the file are output. If the file’s
          MIME type starts with `text/' the file is opened in text
          mode; otherwise binary mode is used.

          The *Note test(): 175. function in the *Note
          SimpleHTTPServer: 156. module is an example which creates a
          server using the *Note SimpleHTTPRequestHandler: 1ee9.  as
          the Handler.

          New in version 2.5: The `'Last-Modified'' header.


The *Note SimpleHTTPServer: 156. module can be used in the following
manner in order to set up a very basic web server serving files
relative to the current directory.

    import SimpleHTTPServer
    import SocketServer

    PORT = 8000

    Handler = SimpleHTTPServer.SimpleHTTPRequestHandler

    httpd = SocketServer.TCPServer(("", PORT), Handler)

    print "serving at port", PORT
    httpd.serve_forever()

The *Note SimpleHTTPServer: 156. module can also be invoked directly
using the *Note -m: 30e. switch of the interpreter with a `port number'
argument.  Similar to the previous example, this serves the files
relative to the current directory.

    python -m SimpleHTTPServer 8000

See also
........

Module *Note BaseHTTPServer: 16.
     Base class implementation for Web server and request handler.


File: python.info,  Node: CGIHTTPServer — CGI-capable HTTP request handler,  Next: cookielib — Cookie handling for HTTP clients,  Prev: SimpleHTTPServer — Simple HTTP request handler,  Up: Internet Protocols and Support

5.20.20 `CGIHTTPServer' — CGI-capable HTTP request handler
------------------------------------------------------------

     Note: The *Note CGIHTTPServer: 5d. module has been merged into
     `http.server' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

The *Note CGIHTTPServer: 5d. module defines a request-handler class,
interface compatible with *Note BaseHTTPServer.BaseHTTPRequestHandler:
1cad. and inherits behavior from *Note
SimpleHTTPServer.SimpleHTTPRequestHandler: 1ee9. but can also run CGI
scripts.

     Note: This module can run CGI scripts on Unix and Windows systems.

     Note: CGI scripts run by the *Note CGIHTTPRequestHandler: 1ef0.
     class cannot execute redirects (HTTP code 302), because code 200
     (script output follows) is sent prior to execution of the CGI
     script.  This pre-empts the status code.

The *Note CGIHTTPServer: 5d. module defines the following class:

 -- Class: CGIHTTPServer.CGIHTTPRequestHandler (request,
          client_address, server)
     This class is used to serve either files or output of CGI scripts
     from  the current directory and below. Note that mapping HTTP
     hierarchic structure to local directory structure is exactly as in
     *Note SimpleHTTPServer.SimpleHTTPRequestHandler: 1ee9.

     The class will however, run the CGI script, instead of serving it
     as a file, if it guesses it to be a CGI script. Only
     directory-based CGI are used — the other common server
     configuration is to treat special extensions as denoting CGI
     scripts.

     The `do_GET()' and `do_HEAD()' functions are modified to run CGI
     scripts and serve the output, instead of serving files, if the
     request leads to somewhere below the `cgi_directories' path.

     The *Note CGIHTTPRequestHandler: 1ef0. defines the following data
     member:

      -- Attribute: cgi_directories
          This defaults to `['/cgi-bin', '/htbin']' and describes
          directories to treat as containing CGI scripts.

     The *Note CGIHTTPRequestHandler: 1ef0. defines the following
     methods:

      -- Method: do_POST ()
          This method serves the `'POST'' request type, only allowed
          for CGI scripts.  Error 501, “Can only POST to CGI
          scripts”, is output when trying to POST to a non-CGI url.

Note that CGI scripts will be run with UID of user nobody, for security
reasons.  Problems with the CGI script will be translated to error 403.

For example usage, see the implementation of the *Note test(): 175.
function.

See also
........

Module *Note BaseHTTPServer: 16.
     Base class implementation for Web server and request handler.


File: python.info,  Node: cookielib — Cookie handling for HTTP clients,  Next: Cookie — HTTP state management,  Prev: CGIHTTPServer — CGI-capable HTTP request handler,  Up: Internet Protocols and Support

5.20.21 `cookielib' — Cookie handling for HTTP clients
--------------------------------------------------------

     Note: The *Note cookielib: 70. module has been renamed to
     `http.cookiejar' in Python 3.  The *Note 2to3: c05. tool will
     automatically adapt imports when converting your sources to Python
     3.

New in version 2.4.

`Source code:' Lib/cookielib.py(1)

__________________________________________________________________

The *Note cookielib: 70. module defines classes for automatic handling
of HTTP cookies.  It is useful for accessing web sites that require
small pieces of data – `cookies' – to be set on the client machine
by an HTTP response from a web server, and then returned to the server
in later HTTP requests.

Both the regular Netscape cookie protocol and the protocol defined by RFC
2965(2) are handled.  RFC 2965 handling is switched off by default.  RFC
2109(3) cookies are parsed as Netscape cookies and subsequently treated
either as Netscape or RFC 2965 cookies according to the ‘policy’ in
effect.  Note that the great majority of cookies on the Internet are
Netscape cookies.  *Note cookielib: 70. attempts to follow the de-facto
Netscape cookie protocol (which differs substantially from that set out
in the original Netscape specification), including taking note of the
`max-age' and `port' cookie-attributes introduced with RFC 2965.

     Note: The various named parameters found in `Set-Cookie' and
     `Set-Cookie2' headers (eg. `domain' and `expires') are
     conventionally referred to as `attributes'.  To distinguish them
     from Python attributes, the documentation for this module uses the
     term `cookie-attribute' instead.

The module defines the following exception:

 -- Exception: cookielib.LoadError
     Instances of *Note FileCookieJar: 1ef6. raise this exception on
     failure to load cookies from a file.

          Note: For backwards-compatibility with Python 2.4 (which
          raised an *Note IOError: 1fa.), *Note LoadError: 1ef5. is a
          subclass of *Note IOError: 1fa.

The following classes are provided:

 -- Class: cookielib.CookieJar (policy=None)
     `policy' is an object implementing the *Note CookiePolicy: 1ef7.
     interface.

     The *Note CookieJar: 1d39. class stores HTTP cookies.  It extracts
     cookies from HTTP requests, and returns them in HTTP responses.
     *Note CookieJar: 1d39. instances automatically expire contained
     cookies when necessary.  Subclasses are also responsible for
     storing and retrieving cookies from a file or database.

 -- Class: cookielib.FileCookieJar (filename, delayload=None,
          policy=None)
     `policy' is an object implementing the *Note CookiePolicy: 1ef7.
     interface.  For the other arguments, see the documentation for the
     corresponding attributes.

     A *Note CookieJar: 1d39. which can load cookies from, and perhaps
     save cookies to, a file on disk.  Cookies are `NOT' loaded from
     the named file until either the *Note load(): 1ef8. or *Note
     revert(): 1ef9. method is called.  Subclasses of this class are
     documented in section *Note FileCookieJar subclasses and
     co-operation with web browsers: 1efa.

 -- Class: cookielib.CookiePolicy
     This class is responsible for deciding whether each cookie should
     be accepted from / returned to the server.

 -- Class: cookielib.DefaultCookiePolicy (blocked_domains=None,
          allowed_domains=None, netscape=True, rfc2965=False,
          rfc2109_as_netscape=None, hide_cookie2=False,
          strict_domain=False, strict_rfc2965_unverifiable=True,
          strict_ns_unverifiable=False,
          strict_ns_domain=DefaultCookiePolicy.DomainLiberal,
          strict_ns_set_initial_dollar=False, strict_ns_set_path=False)
     Constructor arguments should be passed as keyword arguments only.
     `blocked_domains' is a sequence of domain names that we never
     accept cookies from, nor return cookies to. `allowed_domains' if
     not *Note None: 3b2, this is a sequence of the only domains for
     which we accept and return cookies.  For all other arguments, see
     the documentation for *Note CookiePolicy: 1ef7. and *Note
     DefaultCookiePolicy: 1efb. objects.

     *Note DefaultCookiePolicy: 1efb. implements the standard accept /
     reject rules for Netscape and RFC 2965 cookies.  By default, RFC
     2109 cookies (ie. cookies received in a `Set-Cookie' header with a
     version cookie-attribute of 1) are treated according to the RFC
     2965 rules.  However, if RFC 2965 handling is turned off or *Note
     rfc2109_as_netscape: 1efc. is `True', RFC 2109 cookies are
     ‘downgraded’ by the *Note CookieJar: 1d39. instance to
     Netscape cookies, by setting the `version' attribute of the *Note
     Cookie: 1efd. instance to 0.  *Note DefaultCookiePolicy: 1efb.
     also provides some parameters to allow some fine-tuning of policy.

 -- Class: cookielib.Cookie
     This class represents Netscape, RFC 2109 and RFC 2965 cookies.  It
     is not expected that users of *Note cookielib: 70. construct their
     own *Note Cookie: 1efd.  instances.  Instead, if necessary, call
     `make_cookies()' on a *Note CookieJar: 1d39. instance.

See also
........

Module *Note urllib2: 189.
     URL opening with automatic cookie handling.

Module *Note Cookie: 6f.
     HTTP cookie classes, principally useful for server-side code.  The
     *Note cookielib: 70. and *Note Cookie: 6f. modules do not depend
     on each other.

<https://curl.haxx.se/rfc/cookie_spec.html>
     The specification of the original Netscape cookie protocol.
     Though this is still the dominant protocol, the ‘Netscape cookie
     protocol’ implemented by all the major browsers (and *Note
     cookielib: 70.) only bears a passing resemblance to the one
     sketched out in `cookie_spec.html'.

RFC 2109(4) - HTTP State Management Mechanism
     Obsoleted by RFC 2965. Uses `Set-Cookie' with version=1.

RFC 2965(5) - HTTP State Management Mechanism
     The Netscape protocol with the bugs fixed.  Uses `Set-Cookie2' in
     place of `Set-Cookie'.  Not widely used.

<http://kristol.org/cookie/errata.html>
     Unfinished errata to RFC 2965.

RFC 2964(6) - Use of HTTP State Management

* Menu:

* CookieJar and FileCookieJar Objects::
* FileCookieJar subclasses and co-operation with web browsers::
* CookiePolicy Objects::
* DefaultCookiePolicy Objects::
* Cookie Objects::
* Examples: Examples<16>.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/cookielib.py

(2) https://tools.ietf.org/html/rfc2965.html

(3) https://tools.ietf.org/html/rfc2109.html

(4) https://tools.ietf.org/html/rfc2109.html

(5) https://tools.ietf.org/html/rfc2965.html

(6) https://tools.ietf.org/html/rfc2964.html


File: python.info,  Node: CookieJar and FileCookieJar Objects,  Next: FileCookieJar subclasses and co-operation with web browsers,  Up: cookielib — Cookie handling for HTTP clients

5.20.21.1 CookieJar and FileCookieJar Objects
.............................................

*Note CookieJar: 1d39. objects support the *Note iterator: 8a8.
protocol for iterating over contained *Note Cookie: 1efd. objects.

*Note CookieJar: 1d39. has the following methods:

 -- Method: CookieJar.add_cookie_header (request)
     Add correct `Cookie' header to `request'.

     If policy allows (ie. the `rfc2965' and `hide_cookie2' attributes
     of the *Note CookieJar: 1d39.’s *Note CookiePolicy: 1ef7.
     instance are true and false respectively), the `Cookie2' header is
     also added when appropriate.

     The `request' object (usually a *Note urllib2.Request: 1cf0.
     instance) must support the methods `get_full_url()', `get_host()',
     `get_type()', `unverifiable()', `get_origin_req_host()',
     `has_header()', `get_header()', `header_items()', and
     `add_unredirected_header()',as documented by *Note urllib2: 189.

 -- Method: CookieJar.extract_cookies (response, request)
     Extract cookies from HTTP `response' and store them in the *Note
     CookieJar: 1d39, where allowed by policy.

     The *Note CookieJar: 1d39. will look for allowable `Set-Cookie' and
     `Set-Cookie2' headers in the `response' argument, and store cookies
     as appropriate (subject to the *Note CookiePolicy.set_ok(): 1f02.
     method’s approval).

     The `response' object (usually the result of a call to *Note
     urllib2.urlopen(): 371, or similar) should support an `info()'
     method, which returns an object with a `getallmatchingheaders()'
     method (usually a *Note mimetools.Message: 19b0.  instance).

     The `request' object (usually a *Note urllib2.Request: 1cf0.
     instance) must support the methods `get_full_url()', `get_host()',
     `unverifiable()', and `get_origin_req_host()', as documented by
     *Note urllib2: 189.  The request is used to set default values for
     cookie-attributes as well as for checking that the cookie is
     allowed to be set.

 -- Method: CookieJar.set_policy (policy)
     Set the *Note CookiePolicy: 1ef7. instance to be used.

 -- Method: CookieJar.make_cookies (response, request)
     Return sequence of *Note Cookie: 1efd. objects extracted from
     `response' object.

     See the documentation for *Note extract_cookies(): 1f01. for the
     interfaces required of the `response' and `request' arguments.

 -- Method: CookieJar.set_cookie_if_ok (cookie, request)
     Set a *Note Cookie: 1efd. if policy says it’s OK to do so.

 -- Method: CookieJar.set_cookie (cookie)
     Set a *Note Cookie: 1efd, without checking with policy to see
     whether or not it should be set.

 -- Method: CookieJar.clear ([domain[, path[, name]]])
     Clear some cookies.

     If invoked without arguments, clear all cookies.  If given a
     single argument, only cookies belonging to that `domain' will be
     removed. If given two arguments, cookies belonging to the
     specified `domain' and URL `path' are removed.  If given three
     arguments, then the cookie with the specified `domain', `path' and
     `name' is removed.

     Raises *Note KeyError: 205. if no matching cookie exists.

 -- Method: CookieJar.clear_session_cookies ()
     Discard all session cookies.

     Discards all contained cookies that have a true `discard' attribute
     (usually because they had either no `max-age' or `expires'
     cookie-attribute, or an explicit `discard' cookie-attribute).  For
     interactive browsers, the end of a session usually corresponds to
     closing the browser window.

     Note that the `save()' method won’t save session cookies anyway,
     unless you ask otherwise by passing a true `ignore_discard'
     argument.

*Note FileCookieJar: 1ef6. implements the following additional methods:

 -- Method: FileCookieJar.save (filename=None, ignore_discard=False,
          ignore_expires=False)
     Save cookies to a file.

     This base class raises *Note NotImplementedError: 978.  Subclasses
     may leave this method unimplemented.

     `filename' is the name of file in which to save cookies.  If
     `filename' is not specified, `self.filename' is used (whose
     default is the value passed to the constructor, if any); if
     `self.filename' is *Note None: 3b2, *Note ValueError: 236. is
     raised.

     `ignore_discard': save even cookies set to be discarded.
     `ignore_expires': save even cookies that have expired

     The file is overwritten if it already exists, thus wiping all the
     cookies it contains.  Saved cookies can be restored later using
     the *Note load(): 1ef8. or *Note revert(): 1ef9. methods.

 -- Method: FileCookieJar.load (filename=None, ignore_discard=False,
          ignore_expires=False)
     Load cookies from a file.

     Old cookies are kept unless overwritten by newly loaded ones.

     Arguments are as for *Note save(): 1f09.

     The named file must be in the format understood by the class, or
     *Note LoadError: 1ef5. will be raised.  Also, *Note IOError: 1fa.
     may be raised, for example if the file does not exist.

          Note: For backwards-compatibility with Python 2.4 (which
          raised an *Note IOError: 1fa.), *Note LoadError: 1ef5. is a
          subclass of *Note IOError: 1fa.

 -- Method: FileCookieJar.revert (filename=None, ignore_discard=False,
          ignore_expires=False)
     Clear all cookies and reload cookies from a saved file.

     *Note revert(): 1ef9. can raise the same exceptions as *Note
     load(): 1ef8. If there is a failure, the object’s state will not
     be altered.

*Note FileCookieJar: 1ef6. instances have the following public
attributes:

 -- Attribute: FileCookieJar.filename
     Filename of default file in which to keep cookies.  This attribute
     may be assigned to.

 -- Attribute: FileCookieJar.delayload
     If true, load cookies lazily from disk.  This attribute should not
     be assigned to.  This is only a hint, since this only affects
     performance, not behaviour (unless the cookies on disk are
     changing). A *Note CookieJar: 1d39. object may ignore it.  None of
     the *Note FileCookieJar: 1ef6. classes included in the standard
     library lazily loads cookies.

