This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: More Suggestions,  Prev: Weak Reference Support,  Up: Type Methods

6.2.2.9 More Suggestions
........................

Remember that you can omit most of these functions, in which case you
provide `0' as a value.  There are type definitions for each of the
functions you must provide.  They are in `object.h' in the Python
include directory that comes with the source distribution of Python.

In order to learn how to implement any specific method for your new
data type, do the following: Download and unpack the Python source
distribution.  Go the `Objects' directory, then search the C source
files for `tp_' plus the function you want (for example, `tp_print' or
`tp_compare').  You will find examples of the function you want to
implement.

When you need to verify that an object is an instance of the type you
are implementing, use the *Note PyObject_TypeCheck(): 2ad8. function. A
sample of its use might be something like the following:

    if (! PyObject_TypeCheck(some_object, &MyType)) {
        PyErr_SetString(PyExc_TypeError, "arg #1 not a mything");
        return NULL;
    }


File: python.info,  Node: Building C and C++ Extensions with distutils,  Next: Building C and C++ Extensions on Windows,  Prev: Defining New Types,  Up: Extending and Embedding the Python Interpreter

6.3 Building C and C++ Extensions with distutils
================================================

Starting in Python 1.4, Python provides, on Unix, a special make file
for building make files for building dynamically-linked extensions and
custom interpreters.  Starting with Python 2.0, this mechanism (known
as related to Makefile.pre.in, and Setup files) is no longer supported.
Building custom interpreters was rarely used, and extension modules can
be built using distutils.

Building an extension module using distutils requires that distutils is
installed on the build machine, which is included in Python 2.x and
available separately for Python 1.5. Since distutils also supports
creation of binary packages, users don’t necessarily need a compiler
and distutils to install the extension.

A distutils package contains a driver script, `setup.py'. This is a
plain Python file, which, in the most simple case, could look like this:

    from distutils.core import setup, Extension

    module1 = Extension('demo',
                        sources = ['demo.c'])

    setup (name = 'PackageName',
           version = '1.0',
           description = 'This is a demo package',
           ext_modules = [module1])

With this `setup.py', and a file `demo.c', running

    python setup.py build

will compile `demo.c', and produce an extension module named `demo' in
the `build' directory. Depending on the system, the module file will end
up in a subdirectory `build/lib.system', and may have a name like
`demo.so' or `demo.pyd'.

In the `setup.py', all execution is performed by calling the `setup'
function. This takes a variable number of keyword arguments, of which
the example above uses only a subset. Specifically, the example
specifies meta-information to build packages, and it specifies the
contents of the package.  Normally, a package will contain of addition
modules, like Python source modules, documentation, subpackages, etc.
Please refer to the distutils documentation in *Note Distributing
Python Modules (Legacy version): 2f1. to learn more about the features
of distutils; this section explains building extension modules only.

It is common to pre-compute arguments to `setup()', to better structure
the driver script. In the example above, the `ext_modules' argument to
`setup()' is a list of extension modules, each of which is an instance
of the `Extension'. In the example, the instance defines an extension
named `demo' which is build by compiling a single source file, `demo.c'.

In many cases, building an extension is more complex, since additional
preprocessor defines and libraries may be needed. This is demonstrated
in the example below.

    from distutils.core import setup, Extension

    module1 = Extension('demo',
                        define_macros = [('MAJOR_VERSION', '1'),
                                         ('MINOR_VERSION', '0')],
                        include_dirs = ['/usr/local/include'],
                        libraries = ['tcl83'],
                        library_dirs = ['/usr/local/lib'],
                        sources = ['demo.c'])

    setup (name = 'PackageName',
           version = '1.0',
           description = 'This is a demo package',
           author = 'Martin v. Loewis',
           author_email = 'martin@v.loewis.de',
           url = 'https://docs.python.org/extending/building',
           long_description = '''
    This is really just a demo package.
    ''',
           ext_modules = [module1])

In this example, `setup()' is called with additional meta-information,
which is recommended when distribution packages have to be built. For
the extension itself, it specifies preprocessor defines, include
directories, library directories, and libraries. Depending on the
compiler, distutils passes this information in different ways to the
compiler. For example, on Unix, this may result in the compilation
commands

    gcc -DNDEBUG -g -O3 -Wall -Wstrict-prototypes -fPIC -DMAJOR_VERSION=1 -DMINOR_VERSION=0 -I/usr/local/include -I/usr/local/include/python2.2 -c demo.c -o build/temp.linux-i686-2.2/demo.o

    gcc -shared build/temp.linux-i686-2.2/demo.o -L/usr/local/lib -ltcl83 -o build/lib.linux-i686-2.2/demo.so

These lines are for demonstration purposes only; distutils users should
trust that distutils gets the invocations right.

* Menu:

* Distributing your extension modules::


File: python.info,  Node: Distributing your extension modules,  Up: Building C and C++ Extensions with distutils

6.3.1 Distributing your extension modules
-----------------------------------------

When an extension has been successfully build, there are three ways to
use it.

End-users will typically want to install the module, they do so by
running

    python setup.py install

Module maintainers should produce source packages; to do so, they run

    python setup.py sdist

In some cases, additional files need to be included in a source
distribution; this is done through a `MANIFEST.in' file; see the
distutils documentation for details.

If the source distribution has been build successfully, maintainers can
also create binary distributions. Depending on the platform, one of the
following commands can be used to do so.

    python setup.py bdist_wininst
    python setup.py bdist_rpm
    python setup.py bdist_dumb


File: python.info,  Node: Building C and C++ Extensions on Windows,  Next: Embedding Python in Another Application,  Prev: Building C and C++ Extensions with distutils,  Up: Extending and Embedding the Python Interpreter

6.4 Building C and C++ Extensions on Windows
============================================

This chapter briefly explains how to create a Windows extension module
for Python using Microsoft Visual C++, and follows with more detailed
background information on how it works.  The explanatory material is
useful for both the Windows programmer learning to build Python
extensions and the Unix programmer interested in producing software
which can be successfully built on both Unix and Windows.

Module authors are encouraged to use the distutils approach for building
extension modules, instead of the one described in this section. You
will still need the C compiler that was used to build Python; typically
Microsoft Visual C++.

     Note: This chapter mentions a number of filenames that include an
     encoded Python version number.  These filenames are represented
     with the version number shown as `XY'; in practice, `'X'' will be
     the major version number and `'Y'' will be the minor version
     number of the Python release you’re working with.  For example,
     if you are using Python 2.2.1, `XY' will actually be `22'.

* Menu:

* A Cookbook Approach::
* Differences Between Unix and Windows::
* Using DLLs in Practice::


File: python.info,  Node: A Cookbook Approach,  Next: Differences Between Unix and Windows,  Up: Building C and C++ Extensions on Windows

6.4.1 A Cookbook Approach
-------------------------

There are two approaches to building extension modules on Windows, just
as there are on Unix: use the *Note distutils: 85. package to control
the build process, or do things manually.  The distutils approach works
well for most extensions; documentation on using *Note distutils: 85.
to build and package extension modules is available in *Note
Distributing Python Modules (Legacy version): 2f1.  If you find you
really need to do things manually, it may be instructive to study the
project file for the winsound(1) standard library module.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/PCbuild/winsound.vcxproj


File: python.info,  Node: Differences Between Unix and Windows,  Next: Using DLLs in Practice,  Prev: A Cookbook Approach,  Up: Building C and C++ Extensions on Windows

6.4.2 Differences Between Unix and Windows
------------------------------------------

Unix and Windows use completely different paradigms for run-time
loading of code.  Before you try to build a module that can be
dynamically loaded, be aware of how your system works.

In Unix, a shared object (`.so') file contains code to be used by the
program, and also the names of functions and data that it expects to
find in the program.  When the file is joined to the program, all
references to those functions and data in the file’s code are changed
to point to the actual locations in the program where the functions and
data are placed in memory.  This is basically a link operation.

In Windows, a dynamic-link library (`.dll') file has no dangling
references.  Instead, an access to functions or data goes through a
lookup table.  So the DLL code does not have to be fixed up at runtime
to refer to the program’s memory; instead, the code already uses the
DLL’s lookup table, and the lookup table is modified at runtime to
point to the functions and data.

In Unix, there is only one type of library file (`.a') which contains
code from several object files (`.o').  During the link step to create
a shared object file (`.so'), the linker may find that it doesn’t
know where an identifier is defined.  The linker will look for it in
the object files in the libraries; if it finds it, it will include all
the code from that object file.

In Windows, there are two types of library, a static library and an
import library (both called `.lib').  A static library is like a Unix
`.a' file; it contains code to be included as necessary. An import
library is basically used only to reassure the linker that a certain
identifier is legal, and will be present in the program when the DLL is
loaded.  So the linker uses the information from the import library to
build the lookup table for using identifiers that are not included in
the DLL.  When an application or a DLL is linked, an import library may
be generated, which will need to be used for all future DLLs that
depend on the symbols in the application or DLL.

Suppose you are building two dynamic-load modules, B and C, which
should share another block of code A.  On Unix, you would `not' pass
`A.a' to the linker for `B.so' and `C.so'; that would cause it to be
included twice, so that B and C would each have their own copy.  In
Windows, building `A.dll' will also build `A.lib'.  You `do' pass
`A.lib' to the linker for B and C.  `A.lib' does not contain code; it
just contains information which will be used at runtime to access A’s
code.

In Windows, using an import library is sort of like using `import
spam'; it gives you access to spam’s names, but does not create a
separate copy.  On Unix, linking with a library is more like `from spam
import *'; it does create a separate copy.


File: python.info,  Node: Using DLLs in Practice,  Prev: Differences Between Unix and Windows,  Up: Building C and C++ Extensions on Windows

6.4.3 Using DLLs in Practice
----------------------------

Windows Python is built in Microsoft Visual C++; using other compilers
may or may not work (though Borland seems to).  The rest of this
section is MSVC++ specific.

When creating DLLs in Windows, you must pass `pythonXY.lib' to the
linker.  To build two DLLs, spam and ni (which uses C functions found
in spam), you could use these commands:

    cl /LD /I/python/include spam.c ../libs/pythonXY.lib
    cl /LD /I/python/include ni.c spam.lib ../libs/pythonXY.lib

The first command created three files: `spam.obj', `spam.dll' and
`spam.lib'.  `Spam.dll' does not contain any Python functions (such as
*Note PyArg_ParseTuple(): 32f.), but it does know how to find the
Python code thanks to `pythonXY.lib'.

The second command created `ni.dll' (and `.obj' and `.lib'), which
knows how to find the necessary functions from spam, and also from the
Python executable.

Not every identifier is exported to the lookup table.  If you want any
other modules (including Python) to be able to see your identifiers,
you have to say `_declspec(dllexport)', as in `void
_declspec(dllexport) initspam(void)' or `PyObject _declspec(dllexport)
*NiGetSpamData(void)'.

Developer Studio will throw in a lot of import libraries that you do
not really need, adding about 100K to your executable.  To get rid of
them, use the Project Settings dialog, Link tab, to specify `ignore
default libraries'.  Add the correct `msvcrtxx.lib' to the list of
libraries.


File: python.info,  Node: Embedding Python in Another Application,  Prev: Building C and C++ Extensions on Windows,  Up: Extending and Embedding the Python Interpreter

6.5 Embedding Python in Another Application
===========================================

The previous chapters discussed how to extend Python, that is, how to
extend the functionality of Python by attaching a library of C
functions to it.  It is also possible to do it the other way around:
enrich your C/C++ application by embedding Python in it.  Embedding
provides your application with the ability to implement some of the
functionality of your application in Python rather than C or C++. This
can be used for many purposes; one example would be to allow users to
tailor the application to their needs by writing some scripts in
Python.  You can also use it yourself if some of the functionality can
be written in Python more easily.

Embedding Python is similar to extending it, but not quite.  The
difference is that when you extend Python, the main program of the
application is still the Python interpreter, while if you embed Python,
the main program may have nothing to do with Python — instead, some
parts of the application occasionally call the Python interpreter to
run some Python code.

So if you are embedding Python, you are providing your own main
program.  One of the things this main program has to do is initialize
the Python interpreter.  At the very least, you have to call the
function *Note Py_Initialize(): 2a70.  There are optional calls to pass
command line arguments to Python.  Then later you can call the
interpreter from any part of the application.

There are several different ways to call the interpreter: you can pass
a string containing Python statements to *Note PyRun_SimpleString():
2ae8, or you can pass a stdio file pointer and a file name (for
identification in error messages only) to *Note PyRun_SimpleFile():
2ae9.  You can also call the lower-level operations described in the
previous chapters to construct and use Python objects.

A simple demo of embedding Python can be found in the directory
`Demo/embed/' of the source distribution.

See also
........

*Note Python/C API Reference Manual: 518.
     The details of Python’s C interface are given in this manual. A
     great deal of necessary information can be found here.

* Menu:

* Very High Level Embedding::
* Beyond Very High Level Embedding; An overview: Beyond Very High Level Embedding An overview.
* Pure Embedding::
* Extending Embedded Python::
* Embedding Python in C++::
* Compiling and Linking under Unix-like systems::


File: python.info,  Node: Very High Level Embedding,  Next: Beyond Very High Level Embedding An overview,  Up: Embedding Python in Another Application

6.5.1 Very High Level Embedding
-------------------------------

The simplest form of embedding Python is the use of the very high level
interface. This interface is intended to execute a Python script
without needing to interact with the application directly. This can for
example be used to perform some operation on a file.

    #include <Python.h>

    int
    main(int argc, char *argv[])
    {
      Py_SetProgramName(argv[0]);  /* optional but recommended */
      Py_Initialize();
      PyRun_SimpleString("from time import time,ctime\n"
                         "print 'Today is',ctime(time())\n");
      Py_Finalize();
      return 0;
    }

The *Note Py_SetProgramName(): 2aec. function should be called before
*Note Py_Initialize(): 2a70. to inform the interpreter about paths to
Python run-time libraries.  Next, the Python interpreter is initialized
with *Note Py_Initialize(): 2a70, followed by the execution of a
hard-coded Python script that prints the date and time.  Afterwards,
the *Note Py_Finalize(): 2c6. call shuts the interpreter down, followed
by the end of the program.  In a real program, you may want to get the
Python script from another source, perhaps a text-editor routine, a
file, or a database.  Getting the Python code from a file can better be
done by using the *Note PyRun_SimpleFile(): 2ae9. function, which saves
you the trouble of allocating memory space and loading the file
contents.


File: python.info,  Node: Beyond Very High Level Embedding An overview,  Next: Pure Embedding,  Prev: Very High Level Embedding,  Up: Embedding Python in Another Application

6.5.2 Beyond Very High Level Embedding: An overview
---------------------------------------------------

The high level interface gives you the ability to execute arbitrary
pieces of Python code from your application, but exchanging data values
is quite cumbersome to say the least. If you want that, you should use
lower level calls.  At the cost of having to write more C code, you can
achieve almost anything.

It should be noted that extending Python and embedding Python is quite
the same activity, despite the different intent. Most topics discussed
in the previous chapters are still valid. To show this, consider what
the extension code from Python to C really does:

  1. Convert data values from Python to C,

  2. Perform a function call to a C routine using the converted values,
     and

  3. Convert the data values from the call from C to Python.

When embedding Python, the interface code does:

  1. Convert data values from C to Python,

  2. Perform a function call to a Python interface routine using the
     converted values, and

  3. Convert the data values from the call from Python to C.

As you can see, the data conversion steps are simply swapped to
accommodate the different direction of the cross-language transfer. The
only difference is the routine that you call between both data
conversions. When extending, you call a C routine, when embedding, you
call a Python routine.

This chapter will not discuss how to convert data from Python to C and
vice versa.  Also, proper use of references and dealing with errors is
assumed to be understood.  Since these aspects do not differ from
extending the interpreter, you can refer to earlier chapters for the
required information.


File: python.info,  Node: Pure Embedding,  Next: Extending Embedded Python,  Prev: Beyond Very High Level Embedding An overview,  Up: Embedding Python in Another Application

6.5.3 Pure Embedding
--------------------

The first program aims to execute a function in a Python script. Like
in the section about the very high level interface, the Python
interpreter does not directly interact with the application (but that
will change in the next section).

The code to run a function defined in a Python script is:

    #include <Python.h>

    int
    main(int argc, char *argv[])
    {
        PyObject *pName, *pModule, *pDict, *pFunc;
        PyObject *pArgs, *pValue;
        int i;

        if (argc < 3) {
            fprintf(stderr,"Usage: call pythonfile funcname [args]\n");
            return 1;
        }

        Py_Initialize();
        pName = PyString_FromString(argv[1]);
        /* Error checking of pName left out */

        pModule = PyImport_Import(pName);
        Py_DECREF(pName);

        if (pModule != NULL) {
            pFunc = PyObject_GetAttrString(pModule, argv[2]);
            /* pFunc is a new reference */

            if (pFunc && PyCallable_Check(pFunc)) {
                pArgs = PyTuple_New(argc - 3);
                for (i = 0; i < argc - 3; ++i) {
                    pValue = PyInt_FromLong(atoi(argv[i + 3]));
                    if (!pValue) {
                        Py_DECREF(pArgs);
                        Py_DECREF(pModule);
                        fprintf(stderr, "Cannot convert argument\n");
                        return 1;
                    }
                    /* pValue reference stolen here: */
                    PyTuple_SetItem(pArgs, i, pValue);
                }
                pValue = PyObject_CallObject(pFunc, pArgs);
                Py_DECREF(pArgs);
                if (pValue != NULL) {
                    printf("Result of call: %ld\n", PyInt_AsLong(pValue));
                    Py_DECREF(pValue);
                }
                else {
                    Py_DECREF(pFunc);
                    Py_DECREF(pModule);
                    PyErr_Print();
                    fprintf(stderr,"Call failed\n");
                    return 1;
                }
            }
            else {
                if (PyErr_Occurred())
                    PyErr_Print();
                fprintf(stderr, "Cannot find function \"%s\"\n", argv[2]);
            }
            Py_XDECREF(pFunc);
            Py_DECREF(pModule);
        }
        else {
            PyErr_Print();
            fprintf(stderr, "Failed to load \"%s\"\n", argv[1]);
            return 1;
        }
        Py_Finalize();
        return 0;
    }

This code loads a Python script using `argv[1]', and calls the function
named in `argv[2]'.  Its integer arguments are the other values of the
`argv' array.  If you compile and link this program (let’s call the
finished executable `call'), and use it to execute a Python script,
such as:

    def multiply(a,b):
        print "Will compute", a, "times", b
        c = 0
        for i in range(0, a):
            c = c + b
        return c

then the result should be:

    $ call multiply multiply 3 2
    Will compute 3 times 2
    Result of call: 6

Although the program is quite large for its functionality, most of the
code is for data conversion between Python and C, and for error
reporting.  The interesting part with respect to embedding Python
starts with

    Py_Initialize();
    pName = PyString_FromString(argv[1]);
    /* Error checking of pName left out */
    pModule = PyImport_Import(pName);

After initializing the interpreter, the script is loaded using *Note
PyImport_Import(): 397.  This routine needs a Python string as its
argument, which is constructed using the *Note PyString_FromString():
2af1. data conversion routine.

    pFunc = PyObject_GetAttrString(pModule, argv[2]);
    /* pFunc is a new reference */

    if (pFunc && PyCallable_Check(pFunc)) {
        ...
    }
    Py_XDECREF(pFunc);

Once the script is loaded, the name we’re looking for is retrieved
using *Note PyObject_GetAttrString(): 2a86.  If the name exists, and
the object returned is callable, you can safely assume that it is a
function.  The program then proceeds by constructing a tuple of
arguments as normal.  The call to the Python function is then made with:

    pValue = PyObject_CallObject(pFunc, pArgs);

Upon return of the function, `pValue' is either `NULL' or it contains a
reference to the return value of the function.  Be sure to release the
reference after examining the value.


File: python.info,  Node: Extending Embedded Python,  Next: Embedding Python in C++,  Prev: Pure Embedding,  Up: Embedding Python in Another Application

6.5.4 Extending Embedded Python
-------------------------------

Until now, the embedded Python interpreter had no access to
functionality from the application itself.  The Python API allows this
by extending the embedded interpreter.  That is, the embedded
interpreter gets extended with routines provided by the application.
While it sounds complex, it is not so bad.  Simply forget for a while
that the application starts the Python interpreter.  Instead, consider
the application to be a set of subroutines, and write some glue code
that gives Python access to those routines, just like you would write a
normal Python extension.  For example:

    static int numargs=0;

    /* Return the number of arguments of the application command line */
    static PyObject*
    emb_numargs(PyObject *self, PyObject *args)
    {
        if(!PyArg_ParseTuple(args, ":numargs"))
            return NULL;
        return Py_BuildValue("i", numargs);
    }

    static PyMethodDef EmbMethods[] = {
        {"numargs", emb_numargs, METH_VARARGS,
         "Return the number of arguments received by the process."},
        {NULL, NULL, 0, NULL}
    };

Insert the above code just above the `main()' function. Also, insert the
following two statements directly after *Note Py_Initialize(): 2a70.:

    numargs = argc;
    Py_InitModule("emb", EmbMethods);

These two lines initialize the `numargs' variable, and make the
`emb.numargs()' function accessible to the embedded Python interpreter.
With these extensions, the Python script can do things like

    import emb
    print "Number of arguments", emb.numargs()

In a real application, the methods will expose an API of the
application to Python.


File: python.info,  Node: Embedding Python in C++,  Next: Compiling and Linking under Unix-like systems,  Prev: Extending Embedded Python,  Up: Embedding Python in Another Application

6.5.5 Embedding Python in C++
-----------------------------

It is also possible to embed Python in a C++ program; precisely how
this is done will depend on the details of the C++ system used; in
general you will need to write the main program in C++, and use the C++
compiler to compile and link your program.  There is no need to
recompile Python itself using C++.


File: python.info,  Node: Compiling and Linking under Unix-like systems,  Prev: Embedding Python in C++,  Up: Embedding Python in Another Application

6.5.6 Compiling and Linking under Unix-like systems
---------------------------------------------------

It is not necessarily trivial to find the right flags to pass to your
compiler (and linker) in order to embed the Python interpreter into your
application, particularly because Python needs to load library modules
implemented as C dynamic extensions (`.so' files) linked against it.

To find out the required compiler and linker flags, you can execute the
`python`X.Y'-config' script which is generated as part of the
installation process (a `python-config' script may also be available).
This script has several options, of which the following will be
directly useful to you:

   * `pythonX.Y-config --cflags' will give you the recommended flags
     when compiling:

         $ /opt/bin/python2.7-config --cflags
         -I/opt/include/python2.7 -fno-strict-aliasing -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes

   * `pythonX.Y-config --ldflags' will give you the recommended flags
     when linking:

         $ /opt/bin/python2.7-config --ldflags
         -L/opt/lib/python2.7/config -lpthread -ldl -lutil -lm -lpython2.7 -Xlinker -export-dynamic

     Note: To avoid confusion between several Python installations (and
     especially between the system Python and your own compiled
     Python), it is recommended that you use the absolute path to
     `python`X.Y'-config', as in the above example.

If this procedure doesn’t work for you (it is not guaranteed to work
for all Unix-like platforms; however, we welcome *Note bug reports:
2af8.)  you will have to read your system’s documentation about
dynamic linking and/or examine Python’s `Makefile' (use *Note
sysconfig.get_makefile_filename(): 24a5.  to find its location) and
compilation options.  In this case, the *Note sysconfig: 16e. module is
a useful tool to programmatically extract the configuration values that
you will want to combine together.  For example:

    >>> import sysconfig
    >>> sysconfig.get_config_var('LIBS')
    '-lpthread -ldl  -lutil'
    >>> sysconfig.get_config_var('LINKFORSHARED')
    '-Xlinker -export-dynamic'


File: python.info,  Node: Python/C API Reference Manual,  Next: Distributing Python Modules,  Prev: Extending and Embedding the Python Interpreter,  Up: Top

7 Python/C API Reference Manual
*******************************

This manual documents the API used by C and C++ programmers who want to
write extension modules or embed Python.  It is a companion to *Note
Extending and Embedding the Python Interpreter: 517, which describes
the general principles of extension writing but does not document the
API functions in detail.

* Menu:

* Introduction: Introduction<10>.
* The Very High Level Layer::
* Reference Counting::
* Exception Handling::
* Utilities::
* Abstract Objects Layer::
* Concrete Objects Layer::
* Initialization, Finalization, and Threads: Initialization Finalization and Threads.
* Memory Management::
* Object Implementation Support::


File: python.info,  Node: Introduction<10>,  Next: The Very High Level Layer,  Up: Python/C API Reference Manual

7.1 Introduction
================

The Application Programmer’s Interface to Python gives C and C++
programmers access to the Python interpreter at a variety of levels.
The API is equally usable from C++, but for brevity it is generally
referred to as the Python/C API.  There are two fundamentally different
reasons for using the Python/C API.  The first reason is to write
`extension modules' for specific purposes; these are C modules that
extend the Python interpreter.  This is probably the most common use.
The second reason is to use Python as a component in a larger
application; this technique is generally referred to as `embedding'
Python in an application.

Writing an extension module is a relatively well-understood process,
where a “cookbook” approach works well.  There are several tools
that automate the process to some extent.  While people have embedded
Python in other applications since its early existence, the process of
embedding Python is less straightforward than writing an extension.

Many API functions are useful independent of whether you’re embedding
or extending Python; moreover, most applications that embed Python
will need to provide a custom extension as well, so it’s probably a
good idea to become familiar with writing an extension before
attempting to embed Python in a real application.

* Menu:

* Include Files::
* Objects, Types and Reference Counts: Objects Types and Reference Counts.
* Exceptions: Exceptions<7>.
* Embedding Python::
* Debugging Builds::


File: python.info,  Node: Include Files,  Next: Objects Types and Reference Counts,  Up: Introduction<10>

7.1.1 Include Files
-------------------

All function, type and macro definitions needed to use the Python/C API
are included in your code by the following line:

    #include "Python.h"

This implies inclusion of the following standard headers: `<stdio.h>',
`<string.h>', `<errno.h>', `<limits.h>', `<assert.h>' and `<stdlib.h>'
(if available).

     Note: Since Python may define some pre-processor definitions which
     affect the standard headers on some systems, you `must' include
     `Python.h' before any standard headers are included.

All user visible names defined by Python.h (except those defined by the
included standard headers) have one of the prefixes `Py' or `_Py'.
Names beginning with `_Py' are for internal use by the Python
implementation and should not be used by extension writers. Structure
member names do not have a reserved prefix.

`Important:' user code should never define names that begin with `Py' or
`_Py'.  This confuses the reader, and jeopardizes the portability of
the user code to future Python versions, which may define additional
names beginning with one of these prefixes.

The header files are typically installed with Python.  On Unix, these
are located in the directories ``prefix'/include/pythonversion/' and
``exec_prefix'/include/pythonversion/', where `prefix' and `exec_prefix'
are defined by the corresponding parameters to Python’s `configure'
script and `version' is `sys.version[:3]'.  On Windows, the headers are
installed in ``prefix'/include', where `prefix' is the installation
directory specified to the installer.

To include the headers, place both directories (if different) on your
compiler’s search path for includes.  Do `not' place the parent
directories on the search path and then use `#include
<pythonX.Y/Python.h>'; this will break on multi-platform builds since
the platform independent headers under `prefix' include the platform
specific headers from `exec_prefix'.

C++ users should note that though the API is defined entirely using C,
the header files do properly declare the entry points to be `extern
"C"', so there is no need to do anything special to use the API from
C++.


File: python.info,  Node: Objects Types and Reference Counts,  Next: Exceptions<7>,  Prev: Include Files,  Up: Introduction<10>

7.1.2 Objects, Types and Reference Counts
-----------------------------------------

Most Python/C API functions have one or more arguments as well as a
return value of type *Note PyObject*: 3be.  This type is a pointer to
an opaque data type representing an arbitrary Python object.  Since all
Python object types are treated the same way by the Python language in
most situations (e.g., assignments, scope rules, and argument passing),
it is only fitting that they should be represented by a single C type.
Almost all Python objects live on the heap: you never declare an
automatic or static variable of type *Note PyObject: 3be, only pointer
variables of type *Note PyObject*: 3be. can  be declared.  The sole
exception are the type objects; since these must never be deallocated,
they are typically static *Note PyTypeObject: 2aa0. objects.

All Python objects (even Python integers) have a `type' and a
`reference count'.  An object’s type determines what kind of object
it is (e.g., an integer, a list, or a user-defined function; there are
many more as explained in *Note The standard type hierarchy: 719.).
For each of the well-known types there is a macro to check whether an
object is of that type; for instance, `PyList_Check(a)' is true if (and
only if) the object pointed to by `a' is a Python list.

* Menu:

* Reference Counts: Reference Counts<2>.
* Types::


File: python.info,  Node: Reference Counts<2>,  Next: Types,  Up: Objects Types and Reference Counts

7.1.2.1 Reference Counts
........................

The reference count is important because today’s computers have a
finite (and often severely limited) memory size; it counts how many
different places there are that have a reference to an object.  Such a
place could be another object, or a global (or static) C variable, or
a local variable in some C function.  When an object’s reference
count  becomes zero, the object is deallocated.  If it contains
references to  other objects, their reference count is decremented.
Those other  objects may be deallocated in turn, if this decrement
makes their reference count become zero, and so on.  (There’s an
obvious problem  with objects that reference each other here; for now,
the solution is  “don’t do that.”)

Reference counts are always manipulated explicitly.  The normal way is
to use the macro *Note Py_INCREF(): 2a62. to increment an object’s
reference count by one, and *Note Py_DECREF(): 2a68. to decrement it by
 one.  The *Note Py_DECREF(): 2a68. macro is considerably more complex
than the incref one, since it must check whether the reference count
becomes zero and then cause the object’s deallocator to be called.
The deallocator is a function pointer contained in the object’s type
structure.  The type-specific deallocator takes care of decrementing the
reference counts for other objects contained in the object if this is a
compound object type, such as a list, as well as performing any
additional finalization that’s needed.  There’s no chance that the
reference count can overflow; at least as many bits are used to hold
the reference count as there are distinct memory locations in virtual
memory (assuming `sizeof(Py_ssize_t) >= sizeof(void*)').  Thus, the
reference count increment is a simple operation.

It is not necessary to increment an object’s reference count for
every  local variable that contains a pointer to an object.  In theory,
the  object’s reference count goes up by one when the variable is
made to  point to it and it goes down by one when the variable goes out
of  scope.  However, these two cancel each other out, so at the end the
reference count hasn’t changed.  The only real reason to use the
reference count is to prevent the object from being deallocated as
long as our variable is pointing to it.  If we know that there is at
least one other reference to the object that lives at least as long as
our variable, there is no need to increment the reference count
temporarily.  An important situation where this arises is in objects
that are passed as arguments to C functions in an extension module
that are called from Python; the call mechanism guarantees to hold a
reference to every argument for the duration of the call.

However, a common pitfall is to extract an object from a list and hold
on to it for a while without incrementing its reference count. Some
other operation might conceivably remove the object from the list,
decrementing its reference count and possible deallocating it. The real
danger is that innocent-looking operations may invoke arbitrary Python
code which could do this; there is a code path which allows control to
flow back to the user from a *Note Py_DECREF(): 2a68, so almost any
operation is potentially dangerous.

A safe approach is to always use the generic operations (functions
whose name begins with `PyObject_', `PyNumber_', `PySequence_' or
`PyMapping_').  These operations always increment the reference count
of the object they return.  This leaves the caller with the
responsibility to call *Note Py_DECREF(): 2a68. when they are done with
the result; this soon becomes second nature.

* Menu:

* Reference Count Details::


File: python.info,  Node: Reference Count Details,  Up: Reference Counts<2>

7.1.2.2 Reference Count Details
...............................

The reference count behavior of functions in the Python/C API is best
explained in terms of `ownership of references'.  Ownership pertains to
references, never to objects (objects are not owned: they are always
shared).  “Owning a reference” means being responsible for calling
Py_DECREF on it when the reference is no longer needed.  Ownership can
also be transferred, meaning that the code that receives ownership of
the reference then becomes responsible for eventually decref’ing it
by calling *Note Py_DECREF(): 2a68. or *Note Py_XDECREF(): 2a67.  when
it’s no longer needed—or passing on this responsibility (usually to
its caller). When a function passes ownership of a reference on to its
caller, the caller is said to receive a `new' reference.  When no
ownership is transferred, the caller is said to `borrow' the reference.
Nothing needs to be done for a borrowed reference.

Conversely, when a calling function passes in a reference to an
object, there are two possibilities: the function `steals' a  reference
to the object, or it does not.  `Stealing a reference' means that when
you pass a reference to a function, that function assumes that it now
owns that reference, and you are not responsible for it any longer.

Few functions steal references; the two notable exceptions are *Note
PyList_SetItem(): 2a8d. and *Note PyTuple_SetItem(): 2a8c, which  steal
a reference to the item (but not to the tuple or list into which the
item is put!).  These functions were designed to steal a reference
because of a common idiom for populating a tuple or list with newly
created objects; for example, the code to create the tuple `(1, 2,
"three")' could look like this (forgetting about error handling for the
moment; a better way to code this is shown below):

    PyObject *t;

    t = PyTuple_New(3);
    PyTuple_SetItem(t, 0, PyInt_FromLong(1L));
    PyTuple_SetItem(t, 1, PyInt_FromLong(2L));
    PyTuple_SetItem(t, 2, PyString_FromString("three"));

Here, *Note PyInt_FromLong(): 2a66. returns a new reference which is
immediately stolen by *Note PyTuple_SetItem(): 2a8c.  When you want to
keep using an object although the reference to it will be stolen, use
*Note Py_INCREF(): 2a62. to grab another reference before calling the
reference-stealing function.

Incidentally, *Note PyTuple_SetItem(): 2a8c. is the `only' way to set
tuple items; *Note PySequence_SetItem(): 2b06. and *Note
PyObject_SetItem(): 2b07. refuse to do this since tuples are an
immutable data type.  You should only use *Note PyTuple_SetItem():
2a8c. for tuples that you are creating yourself.

Equivalent code for populating a list can be written using *Note
PyList_New(): 2b08.  and *Note PyList_SetItem(): 2a8d.

However, in practice, you will rarely use these ways of creating and
populating a tuple or list.  There’s a generic function, *Note
Py_BuildValue(): 3c0, that can create most common objects from C
values, directed by a `format string'.  For example, the above two
blocks of code could be replaced by the following (which also takes
care of the error checking):

    PyObject *tuple, *list;

    tuple = Py_BuildValue("(iis)", 1, 2, "three");
    list = Py_BuildValue("[iis]", 1, 2, "three");

It is much more common to use *Note PyObject_SetItem(): 2b07. and
friends with items whose references you are only borrowing, like
arguments that were passed in to the function you are writing.  In that
case, their behaviour regarding reference counts is much saner, since
you don’t have to increment a reference count so you can give a
reference away (“have it be stolen”).  For example, this function
sets all items of a list (actually, any mutable sequence) to a given
item:

    int
    set_all(PyObject *target, PyObject *item)
    {
        int i, n;

        n = PyObject_Length(target);
        if (n < 0)
            return -1;
        for (i = 0; i < n; i++) {
            PyObject *index = PyInt_FromLong(i);
            if (!index)
                return -1;
            if (PyObject_SetItem(target, index, item) < 0) {
                Py_DECREF(index);
                return -1;
            }
            Py_DECREF(index);
        }
        return 0;
    }

The situation is slightly different for function return values.   While
passing a reference to most functions does not change your  ownership
responsibilities for that reference, many functions that  return a
reference to an object give you ownership of the reference. The reason
is simple: in many cases, the returned object is created  on the fly,
and the reference you get is the only reference to the  object.
Therefore, the generic functions that return object references, like
*Note PyObject_GetItem(): 2b09. and  *Note PySequence_GetItem(): 2b0a,
always return a new reference (the caller becomes the owner of the
reference).

It is important to realize that whether you own a reference returned
by a function depends on which function you call only — `the plumage'
(the type of the object passed as an argument to the function)
`doesn’t enter into it!'  Thus, if you  extract an item from a list
using *Note PyList_GetItem(): 2a88, you don’t own the reference —
but if you obtain the same item from the same list using *Note
PySequence_GetItem(): 2b0a. (which happens to take exactly the same
arguments), you do own a reference to the returned object.

Here is an example of how you could write a function that computes the
sum of the items in a list of integers; once using  *Note
PyList_GetItem(): 2a88, and once using *Note PySequence_GetItem(): 2b0a.

    long
    sum_list(PyObject *list)
    {
        int i, n;
        long total = 0;
        PyObject *item;

        n = PyList_Size(list);
        if (n < 0)
            return -1; /* Not a list */
        for (i = 0; i < n; i++) {
            item = PyList_GetItem(list, i); /* Can't fail */
            if (!PyInt_Check(item)) continue; /* Skip non-integers */
            total += PyInt_AsLong(item);
        }
        return total;
    }

    long
    sum_sequence(PyObject *sequence)
    {
        int i, n;
        long total = 0;
        PyObject *item;
        n = PySequence_Length(sequence);
        if (n < 0)
            return -1; /* Has no length */
        for (i = 0; i < n; i++) {
            item = PySequence_GetItem(sequence, i);
            if (item == NULL)
                return -1; /* Not a sequence, or other failure */
            if (PyInt_Check(item))
                total += PyInt_AsLong(item);
            Py_DECREF(item); /* Discard reference ownership */
        }
        return total;
    }


File: python.info,  Node: Types,  Prev: Reference Counts<2>,  Up: Objects Types and Reference Counts

7.1.2.3 Types
.............

There are few other data types that play a significant role in  the
Python/C API; most are simple C types such as `int',  `long', `double'
and `char*'.  A few structure types  are used to describe static tables
used to list the functions exported  by a module or the data attributes
of a new object type, and another is used to describe the value of a
complex number.  These will  be discussed together with the functions
that use them.


File: python.info,  Node: Exceptions<7>,  Next: Embedding Python,  Prev: Objects Types and Reference Counts,  Up: Introduction<10>

7.1.3 Exceptions
----------------

The Python programmer only needs to deal with exceptions if specific
error handling is required; unhandled exceptions are automatically
propagated to the caller, then to the caller’s caller, and so on,
until they reach the top-level interpreter, where they are reported to
the  user accompanied by a stack traceback.

For C programmers, however, error checking always has to be explicit.
All functions in the Python/C API can raise exceptions, unless an
explicit claim is made otherwise in a function’s documentation.  In
general, when a function encounters an error, it sets an exception,
discards any object references that it owns, and returns an error
indicator.  If not documented otherwise, this indicator is either
`NULL' or `-1', depending on the function’s return type.  A few
functions return a Boolean true/false result, with false indicating an
error.  Very few functions return no explicit error indicator or have an
ambiguous return value, and require explicit testing for errors with
*Note PyErr_Occurred(): 2a63.  These exceptions are always explicitly
documented.

Exception state is maintained in per-thread storage (this is
equivalent to using global storage in an unthreaded application).  A
thread can be in one of two states: an exception has occurred, or not.
The function *Note PyErr_Occurred(): 2a63. can be used to check for
this: it returns a borrowed reference to the exception type object when
an exception has occurred, and `NULL' otherwise.  There are a number of
functions to set the exception state: *Note PyErr_SetString(): 2a5f. is
the most common (though not the most general) function to set the
exception state, and *Note PyErr_Clear(): 2a64. clears the exception
state.

The full exception state consists of three objects (all of which can  be
`NULL'): the exception type, the corresponding exception  value, and the
traceback.  These have the same meanings as the Python   objects
`sys.exc_type', `sys.exc_value', and `sys.exc_traceback'; however, they
are not the same: the Python objects represent the last exception being
handled by a Python  *Note try: 3ad. … *Note except: 3af. statement,
while the C level exception state only exists while an exception is
being passed on between C functions until it reaches the Python
bytecode interpreter’s  main loop, which takes care of transferring
it to `sys.exc_type' and friends.

Note that starting with Python 1.5, the preferred, thread-safe way to
access the exception state from Python code is to call the function
*Note sys.exc_info(): 306, which returns the per-thread exception state
for Python code.  Also, the semantics of both ways to access the
exception state have changed so that a function which catches an
exception will save and restore its thread’s exception state so as to
preserve the exception state of its caller.  This prevents common bugs
in exception handling code caused by an innocent-looking function
overwriting the exception being handled; it also reduces the often
unwanted lifetime extension for objects that are referenced by the
stack frames in the traceback.

As a general principle, a function that calls another function to
perform some task should check whether the called function raised an
exception, and if so, pass the exception state on to its caller.  It
should discard any object references that it owns, and return an  error
indicator, but it should `not' set another exception — that would
overwrite the exception that was just raised, and lose important
information about the exact cause of the error.

A simple example of detecting exceptions and passing them on is shown
in the `sum_sequence()' example above.  It so happens that this example
doesn’t need to clean up any owned references when it detects an
error.  The following example function shows some error cleanup.
First, to remind you why you like Python, we show the equivalent Python
code:

    def incr_item(dict, key):
        try:
            item = dict[key]
        except KeyError:
            item = 0
        dict[key] = item + 1

Here is the corresponding C code, in all its glory:

    int
    incr_item(PyObject *dict, PyObject *key)
    {
        /* Objects all initialized to NULL for Py_XDECREF */
        PyObject *item = NULL, *const_one = NULL, *incremented_item = NULL;
        int rv = -1; /* Return value initialized to -1 (failure) */

        item = PyObject_GetItem(dict, key);
        if (item == NULL) {
            /* Handle KeyError only: */
            if (!PyErr_ExceptionMatches(PyExc_KeyError))
                goto error;

            /* Clear the error and use zero: */
            PyErr_Clear();
            item = PyInt_FromLong(0L);
            if (item == NULL)
                goto error;
        }
        const_one = PyInt_FromLong(1L);
        if (const_one == NULL)
            goto error;

        incremented_item = PyNumber_Add(item, const_one);
        if (incremented_item == NULL)
            goto error;

        if (PyObject_SetItem(dict, key, incremented_item) < 0)
            goto error;
        rv = 0; /* Success */
        /* Continue with cleanup code */

     error:
        /* Cleanup code, shared by success and failure path */

        /* Use Py_XDECREF() to ignore NULL references */
        Py_XDECREF(item);
        Py_XDECREF(const_one);
        Py_XDECREF(incremented_item);

        return rv; /* -1 for error, 0 for success */
    }

This example represents an endorsed use of the `goto' statement  in C!
It illustrates the use of *Note PyErr_ExceptionMatches(): 2b0f. and
*Note PyErr_Clear(): 2a64. to handle specific exceptions, and the use of
*Note Py_XDECREF(): 2a67. to dispose of owned references that may be
`NULL' (note the `'X'' in the name; *Note Py_DECREF(): 2a68. would
crash when confronted with a `NULL' reference).  It is important that
the variables used to hold owned references are initialized to `NULL'
for this to work; likewise, the proposed return value is initialized to
`-1' (failure) and only set to success after the final call made is
successful.


File: python.info,  Node: Embedding Python,  Next: Debugging Builds,  Prev: Exceptions<7>,  Up: Introduction<10>

7.1.4 Embedding Python
----------------------

The one important task that only embedders (as opposed to extension
writers) of the Python interpreter have to worry about is the
initialization, and possibly the finalization, of the Python
interpreter.  Most functionality of the interpreter can only be used
after the interpreter has been initialized.

The basic initialization function is *Note Py_Initialize(): 2a70. This
initializes the table of loaded modules, and creates the fundamental
modules *Note __builtin__: 0, *Note __main__: 2, *Note sys: 16d, and
*Note exceptions: ca.  It also initializes the module search path
(`sys.path').

*Note Py_Initialize(): 2a70. does not set the “script argument
list”  (`sys.argv').  If this variable is needed by Python code that
will be executed later, it must be set explicitly with a call to
`PySys_SetArgvEx(argc, argv, updatepath)' after the call to *Note
Py_Initialize(): 2a70.

On most systems (in particular, on Unix and Windows, although the
details are slightly different), *Note Py_Initialize(): 2a70.
calculates the module search path based upon its best guess for the
location of the standard Python interpreter executable, assuming that
the Python library is found in a fixed location relative to the Python
interpreter executable.  In particular, it looks for a directory named
`lib/python`X.Y'' relative to the parent directory where the executable
named `python' is found on the shell command search path (the
environment variable `PATH').

For instance, if the Python executable is found in
`/usr/local/bin/python', it will assume that the libraries are in
`/usr/local/lib/python`X.Y''.  (In fact, this particular path is also
the “fallback” location, used when no executable file named
`python' is found along `PATH'.)  The user can override this behavior
by setting the environment variable *Note PYTHONHOME: 664, or insert
additional directories in front of the standard path by setting *Note
PYTHONPATH: 59b.

The embedding application can steer the search by calling
`Py_SetProgramName(file)' `before' calling  *Note Py_Initialize():
2a70.  Note that *Note PYTHONHOME: 664. still overrides this and *Note
PYTHONPATH: 59b. is still inserted in front of the standard path.  An
application that requires total control has to provide its own
implementation of *Note Py_GetPath(): 2b12, *Note Py_GetPrefix(): 2b13,
*Note Py_GetExecPrefix(): 2b14, and *Note Py_GetProgramFullPath():
2b15. (all defined in `Modules/getpath.c').

Sometimes, it is desirable to “uninitialize” Python.  For instance,
the application may want to start over (make another call to *Note
Py_Initialize(): 2a70.) or the application is simply done with its  use
of Python and wants to free memory allocated by Python.  This can be
accomplished by calling *Note Py_Finalize(): 2c6.  The function *Note
Py_IsInitialized(): 2b16. returns true if Python is currently in the
initialized state.  More information about these functions is given in
a later chapter. Notice that *Note Py_Finalize(): 2c6.  does `not' free
all memory allocated by the Python interpreter, e.g. memory allocated
by extension modules currently cannot be released.


File: python.info,  Node: Debugging Builds,  Prev: Embedding Python,  Up: Introduction<10>

7.1.5 Debugging Builds
----------------------

Python can be built with several macros to enable extra checks of the
interpreter and extension modules.  These checks tend to add a large
amount of overhead to the runtime so they are not enabled by default.

A full list of the various types of debugging builds is in the file
`Misc/SpecialBuilds.txt' in the Python source distribution. Builds are
available that support tracing of reference counts, debugging the memory
allocator, or low-level profiling of the main interpreter loop.  Only
the most frequently-used builds will be described in the remainder of
this section.

Compiling the interpreter with the `Py_DEBUG' macro defined produces
what is generally meant by “a debug build” of Python. `Py_DEBUG' is
enabled in the Unix build by adding `--with-pydebug' to the
`./configure' command.  It is also implied by the presence of the
not-Python-specific `_DEBUG' macro.  When `Py_DEBUG' is enabled in the
Unix build, compiler optimization is disabled.

In addition to the reference count debugging described below, the
following extra checks are performed:

   * Extra checks are added to the object allocator.

   * Extra checks are added to the parser and compiler.

   * Downcasts from wide types to narrow types are checked for loss of
     information.

   * A number of assertions are added to the dictionary and set
     implementations.  In addition, the set object acquires a
     `test_c_api()' method.

   * Sanity checks of the input arguments are added to frame creation.

   * The storage for long ints is initialized with a known invalid
     pattern to catch reference to uninitialized digits.

   * Low-level tracing and extra exception checking are added to the
     runtime virtual machine.

   * Extra checks are added to the memory arena implementation.

   * Extra debugging is added to the thread module.

There may be additional checks not mentioned here.

Defining `Py_TRACE_REFS' enables reference tracing.  When defined, a
circular doubly linked list of active objects is maintained by adding
two extra fields to every *Note PyObject: 3be.  Total allocations are
tracked as well.  Upon exit, all existing references are printed.  (In
interactive mode this happens after every statement run by the
interpreter.)  Implied by `Py_DEBUG'.

Please refer to `Misc/SpecialBuilds.txt' in the Python source
distribution for more detailed information.


File: python.info,  Node: The Very High Level Layer,  Next: Reference Counting,  Prev: Introduction<10>,  Up: Python/C API Reference Manual

7.2 The Very High Level Layer
=============================

The functions in this chapter will let you execute Python source code
given in a file or a buffer, but they will not let you interact in a
more detailed way with the interpreter.

Several of these functions accept a start symbol from the grammar as a
parameter.  The available start symbols are `Py_eval_input',
`Py_file_input', and `Py_single_input'.  These are described following
the functions which accept them as parameters.

Note also that several of these functions take `FILE*' parameters.  One
particular issue which needs to be handled carefully is that the `FILE'
structure for different C libraries can be different and incompatible.
Under Windows (at least), it is possible for dynamically linked
extensions to actually use different libraries, so care should be taken
that `FILE*' parameters are only passed to these functions if it is
certain that they were created by the same library that the Python
runtime is using.

 -- C Function: int Py_Main (int argc, char **argv)
     The main program for the standard interpreter.  This is made
     available for programs which embed Python.  The `argc' and `argv'
     parameters should be prepared exactly as those which are passed to
     a C program’s `main()' function.  It is important to note that
     the argument list may be modified (but the contents of the strings
     pointed to by the argument list are not). The return value will be
     `0' if the interpreter exits normally (ie, without an exception),
     `1' if the interpreter exits due to an exception, or `2' if the
     parameter list does not represent a valid Python command line.

     Note that if an otherwise unhandled *Note SystemExit: 346. is
     raised, this function will not return `1', but exit the process,
     as long as `Py_InspectFlag' is not set.

 -- C Function: int PyRun_AnyFile (FILE *fp, const char *filename)
     This is a simplified interface to *Note PyRun_AnyFileExFlags():
     2b1e. below, leaving `closeit' set to `0' and `flags' set to
     `NULL'.

 -- C Function: int PyRun_AnyFileFlags (FILE *fp, const char *filename,
          PyCompilerFlags *flags)
     This is a simplified interface to *Note PyRun_AnyFileExFlags():
     2b1e. below, leaving the `closeit' argument set to `0'.

 -- C Function: int PyRun_AnyFileEx (FILE *fp, const char *filename,
          int closeit)
     This is a simplified interface to *Note PyRun_AnyFileExFlags():
     2b1e. below, leaving the `flags' argument set to `NULL'.

 -- C Function: int PyRun_AnyFileExFlags (FILE *fp, const
          char *filename, int closeit, PyCompilerFlags *flags)
     If `fp' refers to a file associated with an interactive device
     (console or terminal input or Unix pseudo-terminal), return the
     value of *Note PyRun_InteractiveLoop(): 2b21, otherwise return the
     result of *Note PyRun_SimpleFile(): 2ae9.  If `filename' is
     `NULL', this function uses `"???"' as the filename.

 -- C Function: int PyRun_SimpleString (const char *command)
     This is a simplified interface to *Note PyRun_SimpleStringFlags():
     2b22. below, leaving the `PyCompilerFlags*' argument set to NULL.

 -- C Function: int PyRun_SimpleStringFlags (const char *command,
          PyCompilerFlags *flags)
     Executes the Python source code from `command' in the *Note
     __main__: 2. module according to the `flags' argument. If *Note
     __main__: 2. does not already exist, it is created.  Returns `0'
     on success or `-1' if an exception was raised.  If there was an
     error, there is no way to get the exception information. For the
     meaning of `flags', see below.

     Note that if an otherwise unhandled *Note SystemExit: 346. is
     raised, this function will not return `-1', but exit the process,
     as long as `Py_InspectFlag' is not set.

 -- C Function: int PyRun_SimpleFile (FILE *fp, const char *filename)
     This is a simplified interface to *Note PyRun_SimpleFileExFlags():
     2b23. below, leaving `closeit' set to `0' and `flags' set to
     `NULL'.

 -- C Function: int PyRun_SimpleFileFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)
     This is a simplified interface to *Note PyRun_SimpleFileExFlags():
     2b23. below, leaving `closeit' set to `0'.

 -- C Function: int PyRun_SimpleFileEx (FILE *fp, const char *filename,
          int closeit)
     This is a simplified interface to *Note PyRun_SimpleFileExFlags():
     2b23. below, leaving `flags' set to `NULL'.

 -- C Function: int PyRun_SimpleFileExFlags (FILE *fp, const
          char *filename, int closeit, PyCompilerFlags *flags)
     Similar to *Note PyRun_SimpleStringFlags(): 2b22, but the Python
     source code is read from `fp' instead of an in-memory string.
     `filename' should be the name of the file.  If `closeit' is true,
     the file is closed before PyRun_SimpleFileExFlags returns.

 -- C Function: int PyRun_InteractiveOne (FILE *fp, const
          char *filename)
     This is a simplified interface to *Note
     PyRun_InteractiveOneFlags(): 2b27. below, leaving `flags' set to
     `NULL'.

 -- C Function: int PyRun_InteractiveOneFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)
     Read and execute a single statement from a file associated with an
     interactive device according to the `flags' argument.  The user
     will be prompted using `sys.ps1' and `sys.ps2'.  Returns `0' when
     the input was executed successfully, `-1' if there was an
     exception, or an error code from the `errcode.h' include file
     distributed as part of Python if there was a parse error.  (Note
     that `errcode.h' is not included by `Python.h', so must be
     included specifically if needed.)

 -- C Function: int PyRun_InteractiveLoop (FILE *fp, const
          char *filename)
     This is a simplified interface to *Note
     PyRun_InteractiveLoopFlags(): 2b28. below, leaving `flags' set to
     `NULL'.

 -- C Function: int PyRun_InteractiveLoopFlags (FILE *fp, const
          char *filename, PyCompilerFlags *flags)
     Read and execute statements from a file associated with an
     interactive device until EOF is reached.  The user will be
     prompted using `sys.ps1' and `sys.ps2'.  Returns `0' at EOF.

 -- C Function: struct _node* PyParser_SimpleParseString (const
          char *str, int start)
     This is a simplified interface to *Note
     PyParser_SimpleParseStringFlagsFilename(): 2b2a. below, leaving
     `filename' set to `NULL' and `flags' set to `0'.

 -- C Function: struct _node* PyParser_SimpleParseStringFlags (const
          char *str, int start, int flags)
     This is a simplified interface to *Note
     PyParser_SimpleParseStringFlagsFilename(): 2b2a. below, leaving
     `filename' set to `NULL'.

 -- C Function: struct _node* PyParser_SimpleParseStringFlagsFilename
          (const char *str, const char *filename, int start, int flags)
     Parse Python source code from `str' using the start token `start'
     according to the `flags' argument.  The result can be used to
     create a code object which can be evaluated efficiently. This is
     useful if a code fragment must be evaluated many times.

 -- C Function: struct _node* PyParser_SimpleParseFile (FILE *fp, const
          char *filename, int start)
     This is a simplified interface to *Note
     PyParser_SimpleParseFileFlags(): 2b2d. below, leaving `flags' set
     to `0'.

 -- C Function: struct _node* PyParser_SimpleParseFileFlags (FILE *fp,
          const char *filename, int start, int flags)
     Similar to *Note PyParser_SimpleParseStringFlagsFilename(): 2b2a,
     but the Python source code is read from `fp' instead of an
     in-memory string.

 -- C Function: PyObject* PyRun_String (const char *str, int start,
          PyObject *globals, PyObject *locals)
     `Return value: New reference.'  This is a simplified interface to
     *Note PyRun_StringFlags(): 2b2f. below, leaving `flags' set to
     `NULL'.

 -- C Function: PyObject* PyRun_StringFlags (const char *str,
          int start, PyObject *globals, PyObject *locals,
          PyCompilerFlags *flags)
     `Return value: New reference.'  Execute Python source code from
     `str' in the context specified by the dictionaries `globals' and
     `locals' with the compiler flags specified by `flags'.  The
     parameter `start' specifies the start token that should be used to
     parse the source code.

     Returns the result of executing the code as a Python object, or
     `NULL' if an exception was raised.

 -- C Function: PyObject* PyRun_File (FILE *fp, const char *filename,
          int start, PyObject *globals, PyObject *locals)
     `Return value: New reference.'  This is a simplified interface to
     *Note PyRun_FileExFlags(): 2b31. below, leaving `closeit' set to
     `0' and `flags' set to `NULL'.

 -- C Function: PyObject* PyRun_FileEx (FILE *fp, const char *filename,
          int start, PyObject *globals, PyObject *locals, int closeit)
     `Return value: New reference.'  This is a simplified interface to
     *Note PyRun_FileExFlags(): 2b31. below, leaving `flags' set to
     `NULL'.

 -- C Function: PyObject* PyRun_FileFlags (FILE *fp, const
          char *filename, int start, PyObject *globals,
          PyObject *locals, PyCompilerFlags *flags)
     `Return value: New reference.'  This is a simplified interface to
     *Note PyRun_FileExFlags(): 2b31. below, leaving `closeit' set to
     `0'.

 -- C Function: PyObject* PyRun_FileExFlags (FILE *fp, const
          char *filename, int start, PyObject *globals,
          PyObject *locals, int closeit, PyCompilerFlags *flags)
     `Return value: New reference.'  Similar to *Note
     PyRun_StringFlags(): 2b2f, but the Python source code is read from
     `fp' instead of an in-memory string. `filename' should be the name
     of the file.  If `closeit' is true, the file is closed before
     *Note PyRun_FileExFlags(): 2b31.  returns.

 -- C Function: PyObject* Py_CompileString (const char *str, const
          char *filename, int start)
     `Return value: New reference.'  This is a simplified interface to
     *Note Py_CompileStringFlags(): 2b35. below, leaving `flags' set to
     `NULL'.

 -- C Function: PyObject* Py_CompileStringFlags (const char *str, const
          char *filename, int start, PyCompilerFlags *flags)
     `Return value: New reference.'  Parse and compile the Python
     source code in `str', returning the resulting code object.  The
     start token is given by `start'; this can be used to constrain the
     code which can be compiled and should be `Py_eval_input',
     `Py_file_input', or `Py_single_input'.  The filename specified by
     `filename' is used to construct the code object and may appear in
     tracebacks or *Note SyntaxError: 4b4. exception messages.  This
     returns `NULL' if the code cannot be parsed or compiled.

 -- C Function: PyObject* PyEval_EvalCode (PyCodeObject *co,
          PyObject *globals, PyObject *locals)
     `Return value: New reference.'  This is a simplified interface to
     *Note PyEval_EvalCodeEx(): 2b37, with just the code object, and
     the dictionaries of global and local variables.  The other
     arguments are set to `NULL'.

 -- C Function: PyObject* PyEval_EvalCodeEx (PyCodeObject *co,
          PyObject *globals, PyObject *locals, PyObject **args,
          int argcount, PyObject **kws, int kwcount, PyObject **defs,
          int defcount, PyObject *closure)
     Evaluate a precompiled code object, given a particular environment
     for its evaluation.  This environment consists of dictionaries of
     global and local variables, arrays of arguments, keywords and
     defaults, and a closure tuple of cells.

 -- C Function: PyObject* PyEval_EvalFrame (PyFrameObject *f)
     Evaluate an execution frame.  This is a simplified interface to
     PyEval_EvalFrameEx, for backward compatibility.

 -- C Function: PyObject* PyEval_EvalFrameEx (PyFrameObject *f,
          int throwflag)
     This is the main, unvarnished function of Python interpretation.
     It is literally 2000 lines long.  The code object associated with
     the execution frame `f' is executed, interpreting bytecode and
     executing calls as needed.  The additional `throwflag' parameter
     can mostly be ignored - if true, then it causes an exception to
     immediately be thrown; this is used for the *Note throw(): 7ce.
     methods of generator objects.

 -- C Function: int PyEval_MergeCompilerFlags (PyCompilerFlags *cf)
     This function changes the flags of the current evaluation frame,
     and returns true on success, false on failure.

 -- C Variable: int Py_eval_input
     The start symbol from the Python grammar for isolated expressions;
     for use with *Note Py_CompileString(): 2b34.

 -- C Variable: int Py_file_input
     The start symbol from the Python grammar for sequences of
     statements as read from a file or other source; for use with *Note
     Py_CompileString(): 2b34.  This is the symbol to use when
     compiling arbitrarily long Python source code.

 -- C Variable: int Py_single_input
     The start symbol from the Python grammar for a single statement;
     for use with *Note Py_CompileString(): 2b34. This is the symbol
     used for the interactive interpreter loop.

 -- C Type: struct PyCompilerFlags
     This is the structure used to hold compiler flags.  In cases where
     code is only being compiled, it is passed as `int flags', and in
     cases where code is being executed, it is passed as
     `PyCompilerFlags *flags'.  In this case, `from __future__ import'
     can modify `flags'.

     Whenever `PyCompilerFlags *flags' is `NULL', `cf_flags' is treated
     as equal to `0', and any modification due to `from __future__
     import' is discarded.

         struct PyCompilerFlags {
             int cf_flags;
         }

 -- C Variable: int CO_FUTURE_DIVISION
     This bit can be set in `flags' to cause division operator `/' to be
     interpreted as “true division” according to PEP 238(1).

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0238


File: python.info,  Node: Reference Counting,  Next: Exception Handling,  Prev: The Very High Level Layer,  Up: Python/C API Reference Manual

7.3 Reference Counting
======================

The macros in this section are used for managing reference counts of
Python objects.

 -- C Function: void Py_INCREF (PyObject *o)
     Increment the reference count for object `o'.  The object must not
     be `NULL'; if you aren’t sure that it isn’t `NULL', use *Note
     Py_XINCREF(): 2a77.

 -- C Function: void Py_XINCREF (PyObject *o)
     Increment the reference count for object `o'.  The object may be
     `NULL', in which case the macro has no effect.

 -- C Function: void Py_DECREF (PyObject *o)
     Decrement the reference count for object `o'.  The object must not
     be `NULL'; if you aren’t sure that it isn’t `NULL', use *Note
     Py_XDECREF(): 2a67.  If the reference count reaches zero, the
     object’s type’s deallocation function (which must not be
     `NULL') is invoked.

          Warning: The deallocation function can cause arbitrary Python
          code to be invoked (e.g.  when a class instance with a *Note
          __del__(): 731. method is deallocated).  While exceptions in
          such code are not propagated, the executed code has free
          access to all Python global variables.  This means that any
          object that is reachable from a global variable should be in
          a consistent state before *Note Py_DECREF(): 2a68. is
          invoked.  For example, code to delete an object from a list
          should copy a reference to the deleted object in a temporary
          variable, update the list data structure, and then call *Note
          Py_DECREF(): 2a68. for the temporary variable.

 -- C Function: void Py_XDECREF (PyObject *o)
     Decrement the reference count for object `o'.  The object may be
     `NULL', in which case the macro has no effect; otherwise the
     effect is the same as for *Note Py_DECREF(): 2a68, and the same
     warning applies.

 -- C Function: void Py_CLEAR (PyObject *o)
     Decrement the reference count for object `o'.  The object may be
     `NULL', in which case the macro has no effect; otherwise the
     effect is the same as for *Note Py_DECREF(): 2a68, except that the
     argument is also set to `NULL'.  The warning for *Note
     Py_DECREF(): 2a68. does not apply with respect to the object
     passed because the macro carefully uses a temporary variable and
     sets the argument to `NULL' before decrementing its reference
     count.

     It is a good idea to use this macro whenever decrementing the
     value of a variable that might be traversed during garbage
     collection.

     New in version 2.4.


The following functions are for runtime dynamic embedding of Python:
`Py_IncRef(PyObject *o)', `Py_DecRef(PyObject *o)'. They are simply
exported function versions of *Note Py_XINCREF(): 2a77. and *Note
Py_XDECREF(): 2a67, respectively.

The following functions or macros are only for use within the
interpreter core: `_Py_Dealloc()', `_Py_ForgetReference()',
`_Py_NewReference()', as well as the global variable `_Py_RefTotal'.


File: python.info,  Node: Exception Handling,  Next: Utilities,  Prev: Reference Counting,  Up: Python/C API Reference Manual

7.4 Exception Handling
======================

The functions described in this chapter will let you handle and raise
Python exceptions.  It is important to understand some of the basics of
Python exception handling.  It works somewhat like the Unix `errno'
variable: there is a global indicator (per thread) of the last error
that occurred.  Most functions don’t clear this on success, but will
set it to indicate the cause of the error on failure.  Most functions
also return an error indicator, usually `NULL' if they are supposed to
return a pointer, or `-1' if they return an integer (exception: the
`PyArg_*()' functions return `1' for success and `0' for failure).

When a function must fail because some function it called failed, it
generally doesn’t set the error indicator; the function it called
already set it.  It is responsible for either handling the error and
clearing the exception or returning after cleaning up any resources it
holds (such as object references or memory allocations); it should
`not' continue normally if it is not prepared to handle the error.  If
returning due to an error, it is important to indicate to the caller
that an error has been set.  If the error is not handled or carefully
propagated, additional calls into the Python/C API may not behave as
intended and may fail in mysterious ways.

The error indicator consists of three Python objects corresponding to
the Python variables `sys.exc_type', `sys.exc_value' and
`sys.exc_traceback'.  API functions exist to interact with the error
indicator in various ways.  There is a separate error indicator for
each thread.

 -- C Function: void PyErr_PrintEx (int set_sys_last_vars)
     Print a standard traceback to `sys.stderr' and clear the error
     indicator.  Call this function only when the error indicator is
     set.  (Otherwise it will cause a fatal error!)

     If `set_sys_last_vars' is nonzero, the variables *Note
     sys.last_type: 2488, *Note sys.last_value: 2489. and *Note
     sys.last_traceback: 23f4. will be set to the type, value and
     traceback of the printed exception, respectively.

 -- C Function: void PyErr_Print ()
     Alias for `PyErr_PrintEx(1)'.

 -- C Function: PyObject* PyErr_Occurred ()
     `Return value: Borrowed reference.'  Test whether the error
     indicator is set.  If set, return the exception `type' (the first
     argument to the last call to one of the `PyErr_Set*()' functions
     or to *Note PyErr_Restore(): 2ac0.).  If not set, return `NULL'.
     You do not own a reference to the return value, so you do not need
     to *Note Py_DECREF(): 2a68.  it.

          Note: Do not compare the return value to a specific
          exception; use *Note PyErr_ExceptionMatches(): 2b0f. instead,
          shown below.  (The comparison could easily fail since the
          exception may be an instance instead of a class, in the case
          of a class exception, or it may be a subclass of the expected
          exception.)

 -- C Function: int PyErr_ExceptionMatches (PyObject *exc)
     Equivalent to `PyErr_GivenExceptionMatches(PyErr_Occurred(),
     exc)'.  This should only be called when an exception is actually
     set; a memory access violation will occur if no exception has been
     raised.

 -- C Function: int PyErr_GivenExceptionMatches (PyObject *given,
          PyObject *exc)
     Return true if the `given' exception matches the exception in
     `exc'.  If `exc' is a class object, this also returns true when
     `given' is an instance of a subclass.  If `exc' is a tuple, all
     exceptions in the tuple (and recursively in subtuples) are
     searched for a match.

 -- C Function: void PyErr_NormalizeException (PyObject**exc,
          PyObject**val, PyObject**tb)
     Under certain circumstances, the values returned by *Note
     PyErr_Fetch(): 2abf. below can be “unnormalized”, meaning that
     `*exc' is a class object but `*val' is not an instance of the
     same class.  This function can be used to instantiate the class in
     that case.  If the values are already normalized, nothing happens.
     The delayed normalization is implemented to improve performance.

 -- C Function: void PyErr_Clear ()
     Clear the error indicator.  If the error indicator is not set,
     there is no effect.

 -- C Function: void PyErr_Fetch (PyObject **ptype, PyObject **pvalue,
          PyObject **ptraceback)
     Retrieve the error indicator into three variables whose addresses
     are passed.  If the error indicator is not set, set all three
     variables to `NULL'.  If it is set, it will be cleared and you own
     a reference to each object retrieved.  The value and traceback
     object may be `NULL' even when the type object is not.

          Note: This function is normally only used by code that needs
          to handle exceptions or by code that needs to save and
          restore the error indicator temporarily.

 -- C Function: void PyErr_Restore (PyObject *type, PyObject *value,
          PyObject *traceback)
     Set  the error indicator from the three objects.  If the error
     indicator is already set, it is cleared first.  If the objects are
     `NULL', the error indicator is cleared.  Do not pass a `NULL' type
     and non-`NULL' value or traceback.  The exception type should be a
     class.  Do not pass an invalid exception type or value. (Violating
     these rules will cause subtle problems later.)  This call takes
     away a reference to each object: you must own a reference to each
     object before the call and after the call you no longer own these
     references.  (If you don’t understand this, don’t use this
     function.  I warned you.)

          Note: This function is normally only used by code that needs
          to save and restore the error indicator temporarily; use
          *Note PyErr_Fetch(): 2abf. to save the current exception
          state.

 -- C Function: void PyErr_SetString (PyObject *type, const
          char *message)
     This is the most common way to set the error indicator.  The first
     argument specifies the exception type; it is normally one of the
     standard exceptions, e.g. `PyExc_RuntimeError'.  You need not
     increment its reference count.  The second argument is an error
     message; it is converted to a string object.

 -- C Function: void PyErr_SetObject (PyObject *type, PyObject *value)
     This function is similar to *Note PyErr_SetString(): 2a5f. but
     lets you specify an arbitrary Python object for the “value” of
     the exception.

 -- C Function: PyObject* PyErr_Format (PyObject *exception, const
          char *format, ...)
     `Return value: Always NULL.'  This function sets the error
     indicator and returns `NULL'.  `exception' should be a Python
     exception class.  The `format' and subsequent parameters help
     format the error message; they have the same meaning and values as
     in *Note PyString_FromFormat(): 2b49.

 -- C Function: void PyErr_SetNone (PyObject *type)
     This is a shorthand for `PyErr_SetObject(type, Py_None)'.

 -- C Function: int PyErr_BadArgument ()
     This is a shorthand for `PyErr_SetString(PyExc_TypeError,
     message)', where `message' indicates that a built-in operation was
     invoked with an illegal argument.  It is mostly for internal use.

 -- C Function: PyObject* PyErr_NoMemory ()
     `Return value: Always NULL.'  This is a shorthand for
     `PyErr_SetNone(PyExc_MemoryError)'; it returns `NULL' so an object
     allocation function can write `return PyErr_NoMemory();' when it
     runs out of memory.

 -- C Function: PyObject* PyErr_SetFromErrno (PyObject *type)
     `Return value: Always NULL.'  

     This is a convenience function to raise an exception when a C
     library function has returned an error and set the C variable
     `errno'.  It constructs a tuple object whose first item is the
     integer `errno' value and whose second item is the corresponding
     error message (gotten from `strerror()'), and then calls
     `PyErr_SetObject(type, object)'.  On Unix, when the `errno' value
     is `EINTR', indicating an interrupted system call, this calls
     *Note PyErr_CheckSignals(): 2b4c, and if that set the error
     indicator, leaves it set to that.  The function always returns
     `NULL', so a wrapper function around a system call can write
     `return PyErr_SetFromErrno(type);' when the system call returns an
     error.

 -- C Function: PyObject* PyErr_SetFromErrnoWithFilenameObject
          (PyObject *type, PyObject *filenameObject)
     Similar to *Note PyErr_SetFromErrno(): 2a60, with the additional
     behavior that if `filenameObject' is not `NULL', it is passed to
     the constructor of `type' as a third parameter.  In the case of
     exceptions such as *Note IOError: 1fa. and *Note OSError: 231,
     this is used to define the `filename' attribute of the exception
     instance.

 -- C Function: PyObject* PyErr_SetFromErrnoWithFilename
          (PyObject *type, const char *filename)
     `Return value: Always NULL.'  Similar to *Note
     PyErr_SetFromErrnoWithFilenameObject(): 2b4d, but the filename is
     given as a C string.

 -- C Function: PyObject* PyErr_SetFromWindowsErr (int ierr)
     `Return value: Always NULL.'  This is a convenience function to
     raise *Note WindowsError: 985. If called with `ierr' of `0', the
     error code returned by a call to `GetLastError()' is used instead.
     It calls the Win32 function `FormatMessage()' to retrieve the
     Windows description of error code given by `ierr' or
     `GetLastError()', then it constructs a tuple object whose first
     item is the `ierr' value and whose second item is the
     corresponding error message (gotten from `FormatMessage()'), and
     then calls `PyErr_SetObject(PyExc_WindowsError, object)'. This
     function always returns `NULL'. Availability: Windows.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErr (PyObject *type,
          int ierr)
     `Return value: Always NULL.'  Similar to *Note
     PyErr_SetFromWindowsErr(): 2b4f, with an additional parameter
     specifying the exception type to be raised. Availability: Windows.

     New in version 2.3.


 -- C Function: PyObject* PyErr_SetFromWindowsErrWithFilenameObject
          (int ierr, PyObject *filenameObject)
     Similar to *Note PyErr_SetFromWindowsErr(): 2b4f, with the
     additional behavior that if `filenameObject' is not `NULL', it is
     passed to the constructor of *Note WindowsError: 985. as a third
     parameter. Availability: Windows.

 -- C Function: PyObject* PyErr_SetFromWindowsErrWithFilename
          (int ierr, const char *filename)
     `Return value: Always NULL.'  Similar to *Note
     PyErr_SetFromWindowsErrWithFilenameObject(): 2b51, but the
     filename is given as a C string. Availability: Windows.

 -- C Function: PyObject* PyErr_SetExcFromWindowsErrWithFilenameObject
          (PyObject *type, int ierr, PyObject *filename)
     Similar to *Note PyErr_SetFromWindowsErrWithFilenameObject():
     2b51, with an additional parameter specifying the exception type
     to be raised.  Availability: Windows.

     New in version 2.3.


 -- C Function: PyObject* PyErr_SetExcFromWindowsErrWithFilename
          (PyObject *type, int ierr, const char *filename)
     `Return value: Always NULL.'  Similar to *Note
     PyErr_SetFromWindowsErrWithFilename(): 2b52, with an additional
     parameter specifying the exception type to be raised.
     Availability: Windows.

     New in version 2.3.


 -- C Function: void PyErr_BadInternalCall ()
     This is a shorthand for `PyErr_SetString(PyExc_SystemError,
     message)', where `message' indicates that an internal operation
     (e.g. a Python/C API function) was invoked with an illegal
     argument.  It is mostly for internal use.

 -- C Function: int PyErr_WarnEx (PyObject *category, char *message,
          int stacklevel)
     Issue a warning message.  The `category' argument is a warning
     category (see below) or `NULL'; the `message' argument is a
     message string.  `stacklevel' is a positive number giving a number
     of stack frames; the warning will be issued from the  currently
     executing line of code in that stack frame.  A `stacklevel' of 1
     is the function calling *Note PyErr_WarnEx(): 400, 2 is  the
     function above that, and so forth.

     This function normally prints a warning message to `sys.stderr';
     however, it is also possible that the user has specified that
     warnings are to be turned into errors, and in that case this will
     raise an exception.  It is also possible that the function raises
     an exception because of a problem with the warning machinery (the
     implementation imports the *Note warnings: 193. module to do the
     heavy lifting).  The return value is `0' if no exception is
     raised, or `-1' if an exception is raised.  (It is not possible to
     determine whether a warning message is actually printed, nor what
     the reason is for the exception; this is intentional.)  If an
     exception is raised, the caller should do its normal exception
     handling (for example, *Note Py_DECREF(): 2a68. owned references
     and return an error value).

     Warning categories must be subclasses of `Warning'; the default
     warning category is `RuntimeWarning'.  The standard Python warning
     categories are available as global variables whose names are
     `PyExc_' followed by the Python exception name. These have the
     type *Note PyObject*: 3be.; they are all class objects. Their
     names are `PyExc_Warning', `PyExc_UserWarning',
     `PyExc_UnicodeWarning', `PyExc_DeprecationWarning',
     `PyExc_SyntaxWarning', `PyExc_RuntimeWarning', and
     `PyExc_FutureWarning'.  `PyExc_Warning' is a subclass of
     `PyExc_Exception'; the other warning categories are subclasses of
     `PyExc_Warning'.

     For information about warning control, see the documentation for
     the *Note warnings: 193. module and the *Note -W: 1be. option in
     the command line documentation.  There is no C API for warning
     control.

 -- C Function: int PyErr_Warn (PyObject *category, char *message)
     Issue a warning message.  The `category' argument is a warning
     category (see below) or `NULL'; the `message' argument is a
     message string.  The warning will appear to be issued from the
     function calling *Note PyErr_Warn(): 3ff, equivalent to calling
     *Note PyErr_WarnEx(): 400. with a `stacklevel' of 1.

     Deprecated; use *Note PyErr_WarnEx(): 400. instead.

 -- C Function: int PyErr_WarnExplicit (PyObject *category, const
          char *message, const char *filename, int lineno, const
          char *module, PyObject *registry)
     Issue a warning message with explicit control over all warning
     attributes.  This is a straightforward wrapper around the Python
     function *Note warnings.warn_explicit(): 24c3, see there for more
     information.  The `module' and `registry' arguments may be set to
     `NULL' to get the default effect described there.

 -- C Function: int PyErr_WarnPy3k (char *message, int stacklevel)
     Issue a *Note DeprecationWarning: 1bd. with the given `message'
     and `stacklevel' if the `Py_Py3kWarningFlag' flag is enabled.

     New in version 2.6.


 -- C Function: int PyErr_CheckSignals ()
     This function interacts with Python’s signal handling.  It
     checks whether a signal has been sent to the processes and if so,
     invokes the corresponding signal handler.  If the *Note signal:
     155. module is supported, this can invoke a signal handler written
     in Python.  In all cases, the default effect for `SIGINT' is to
     raise the  *Note KeyboardInterrupt: 251. exception.  If an
     exception is raised the error indicator is set and the function
     returns `-1'; otherwise the function returns `0'.  The error
     indicator may or may not be cleared if it was previously set.

 -- C Function: void PyErr_SetInterrupt ()
     This function simulates the effect of a `SIGINT' signal arriving
     — the next time *Note PyErr_CheckSignals(): 2b4c. is called,
     *Note KeyboardInterrupt: 251. will be raised.  It may be called
     without holding the interpreter lock.


 -- C Function: int PySignal_SetWakeupFd (int fd)
     This utility function specifies a file descriptor to which a
     `'\0'' byte will be written whenever a signal is received.  It
     returns the previous such file descriptor.  The value `-1'
     disables the feature; this is the initial state.  This is
     equivalent to *Note signal.set_wakeup_fd(): 181e. in Python, but
     without any error checking.  `fd' should be a valid file
     descriptor.  The function should only be called from the main
     thread.

     New in version 2.6.


 -- C Function: PyObject* PyErr_NewException (char *name,
          PyObject *base, PyObject *dict)
     `Return value: New reference.'  This utility function creates and
     returns a new exception class. The `name' argument must be the
     name of the new exception, a C string of the form
     `module.classname'.  The `base' and `dict' arguments are normally
     `NULL'.  This creates a class object derived from *Note Exception:
     34d. (accessible in C as `PyExc_Exception').

     The `__module__' attribute of the new class is set to the first
     part (up to the last dot) of the `name' argument, and the class
     name is set to the last part (after the last dot).  The `base'
     argument can be used to specify alternate base classes; it can
     either be only one class or a tuple of classes. The `dict'
     argument can be used to specify a dictionary of class variables
     and methods.

 -- C Function: PyObject* PyErr_NewExceptionWithDoc (char *name,
          char *doc, PyObject *base, PyObject *dict)
     `Return value: New reference.'  Same as *Note
     PyErr_NewException(): 2bd, except that the new exception class can
     easily be given a docstring: If `doc' is non-`NULL', it will be
     used as the docstring for the exception class.

     New in version 2.7.


 -- C Function: void PyErr_WriteUnraisable (PyObject *obj)
     This utility function prints a warning message to `sys.stderr'
     when an exception has been set but it is impossible for the
     interpreter to actually raise the exception.  It is used, for
     example, when an exception occurs in an *Note __del__(): 731.
     method.

     The function is called with a single argument `obj' that
     identifies the context in which the unraisable exception occurred.
     If possible, the repr of `obj' will be printed in the warning
     message.

* Menu:

* Unicode Exception Objects::
* Recursion Control::
* Standard Exceptions::
* String Exceptions::


File: python.info,  Node: Unicode Exception Objects,  Next: Recursion Control,  Up: Exception Handling

7.4.1 Unicode Exception Objects
-------------------------------

The following functions are used to create and modify Unicode
exceptions from C.

 -- C Function: PyObject* PyUnicodeDecodeError_Create (const
          char *encoding, const char *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)
     Create a `UnicodeDecodeError' object with the attributes
     `encoding', `object', `length', `start', `end' and `reason'.

 -- C Function: PyObject* PyUnicodeEncodeError_Create (const
          char *encoding, const Py_UNICODE *object, Py_ssize_t length,
          Py_ssize_t start, Py_ssize_t end, const char *reason)
     Create a `UnicodeEncodeError' object with the attributes
     `encoding', `object', `length', `start', `end' and `reason'.

 -- C Function: PyObject* PyUnicodeTranslateError_Create (const
          Py_UNICODE *object, Py_ssize_t length, Py_ssize_t start,
          Py_ssize_t end, const char *reason)
     Create a `UnicodeTranslateError' object with the attributes
     `object', `length', `start', `end' and `reason'.

 -- C Function: PyObject* PyUnicodeDecodeError_GetEncoding
          (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetEncoding
          (PyObject *exc)
     Return the `encoding' attribute of the given exception object.

 -- C Function: PyObject* PyUnicodeDecodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetObject (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetObject
          (PyObject *exc)
     Return the `object' attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeEncodeError_GetStart (PyObject *exc,
          Py_ssize_t *start)
 -- C Function: int PyUnicodeTranslateError_GetStart (PyObject *exc,
          Py_ssize_t *start)
     Get the `start' attribute of the given exception object and place
     it into `*start'.  `start' must not be `NULL'.  Return `0' on
     success, `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeEncodeError_SetStart (PyObject *exc,
          Py_ssize_t start)
 -- C Function: int PyUnicodeTranslateError_SetStart (PyObject *exc,
          Py_ssize_t start)
     Set the `start' attribute of the given exception object to
     `start'.  Return `0' on success, `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeEncodeError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
 -- C Function: int PyUnicodeTranslateError_GetEnd (PyObject *exc,
          Py_ssize_t *end)
     Get the `end' attribute of the given exception object and place it
     into `*end'.  `end' must not be `NULL'.  Return `0' on success,
     `-1' on failure.

 -- C Function: int PyUnicodeDecodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeEncodeError_SetEnd (PyObject *exc,
          Py_ssize_t end)
 -- C Function: int PyUnicodeTranslateError_SetEnd (PyObject *exc,
          Py_ssize_t end)
     Set the `end' attribute of the given exception object to `end'.
     Return `0' on success, `-1' on failure.

 -- C Function: PyObject* PyUnicodeDecodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeEncodeError_GetReason (PyObject *exc)
 -- C Function: PyObject* PyUnicodeTranslateError_GetReason
          (PyObject *exc)
     Return the `reason' attribute of the given exception object.

 -- C Function: int PyUnicodeDecodeError_SetReason (PyObject *exc,
          const char *reason)
 -- C Function: int PyUnicodeEncodeError_SetReason (PyObject *exc,
          const char *reason)
 -- C Function: int PyUnicodeTranslateError_SetReason (PyObject *exc,
          const char *reason)
     Set the `reason' attribute of the given exception object to
     `reason'.  Return `0' on success, `-1' on failure.


File: python.info,  Node: Recursion Control,  Next: Standard Exceptions,  Prev: Unicode Exception Objects,  Up: Exception Handling

7.4.2 Recursion Control
-----------------------

These two functions provide a way to perform safe recursive calls at
the C level, both in the core and in extension modules.  They are
needed if the recursive code does not necessarily invoke Python code
(which tracks its recursion depth automatically).

 -- C Function: int Py_EnterRecursiveCall (const char *where)
     Marks a point where a recursive C-level call is about to be
     performed.

     If `USE_STACKCHECK' is defined, this function checks if the OS
     stack overflowed using *Note PyOS_CheckStack(): 2b78.  In this is
     the case, it sets a *Note MemoryError: 977. and returns a nonzero
     value.

     The function then checks if the recursion limit is reached.  If
     this is the case, a *Note RuntimeError: 3b3. is set and a nonzero
     value is returned.  Otherwise, zero is returned.

     `where' should be a string such as `" in instance check"' to be
     concatenated to the *Note RuntimeError: 3b3. message caused by the
     recursion depth limit.

 -- C Function: void Py_LeaveRecursiveCall ()
     Ends a *Note Py_EnterRecursiveCall(): 2b77.  Must be called once
     for each `successful' invocation of *Note Py_EnterRecursiveCall():
     2b77.


File: python.info,  Node: Standard Exceptions,  Next: String Exceptions,  Prev: Recursion Control,  Up: Exception Handling

7.4.3 Standard Exceptions
-------------------------

All standard Python exceptions are available as global variables whose
names are `PyExc_' followed by the Python exception name.  These have
the type *Note PyObject*: 3be.; they are all class objects.  For
completeness, here are all the variables:

C Name                                    Python Name                      Notes
------------------------------------------------------------------------------------------ 
`PyExc_BaseException'                     *Note BaseException: 34c.        (1), (4)
`PyExc_Exception'                         *Note Exception: 34d.            (1)
`PyExc_StandardError'                     *Note StandardError: 39a.        (1)
`PyExc_ArithmeticError'                   *Note ArithmeticError: 971.      (1)
`PyExc_LookupError'                       *Note LookupError: 8b9.          (1)
`PyExc_AssertionError'                    *Note AssertionError: 834.       
`PyExc_AttributeError'                    *Note AttributeError: 1f8.       
`PyExc_EOFError'                          *Note EOFError: 8b3.             
`PyExc_EnvironmentError'                  *Note EnvironmentError: 976.     (1)
`PyExc_FloatingPointError'                *Note FloatingPointError: 972.   
`PyExc_IOError'                           *Note IOError: 1fa.              
`PyExc_ImportError'                       *Note ImportError: 388.          
`PyExc_IndexError'                        *Note IndexError: 4fe.           
`PyExc_KeyError'                          *Note KeyError: 205.             
`PyExc_KeyboardInterrupt'                 *Note KeyboardInterrupt: 251.    
`PyExc_MemoryError'                       *Note MemoryError: 977.          
`PyExc_NameError'                         *Note NameError: 3bb.            
`PyExc_NotImplementedError'               *Note NotImplementedError: 978.  
`PyExc_OSError'                           *Note OSError: 231.              
`PyExc_OverflowError'                     *Note OverflowError: 2dd.        
`PyExc_ReferenceError'                    *Note ReferenceError: 4ce.       (2)
`PyExc_RuntimeError'                      *Note RuntimeError: 3b3.         
`PyExc_SyntaxError'                       *Note SyntaxError: 4b4.          
`PyExc_SystemError'                       *Note SystemError: 97a.          
`PyExc_SystemExit'                        *Note SystemExit: 346.           
`PyExc_TypeError'                         *Note TypeError: 218.            
`PyExc_ValueError'                        *Note ValueError: 236.           
`PyExc_WindowsError'                      *Note WindowsError: 985.         (3)
`PyExc_ZeroDivisionError'                 *Note ZeroDivisionError: 5c7.    

Notes:

  1. This is a base class for other standard exceptions.

  2. This is the same as *Note weakref.ReferenceError: 4df.

  3. Only defined on Windows; protect code that uses this by testing
     that the preprocessor macro `MS_WINDOWS' is defined.

  4.  New in version 2.5.



File: python.info,  Node: String Exceptions,  Prev: Standard Exceptions,  Up: Exception Handling

7.4.4 String Exceptions
-----------------------

Changed in version 2.6: All exceptions to be raised or caught must be
derived from *Note BaseException: 34c.  Trying to raise a string
exception now raises *Note TypeError: 218.


File: python.info,  Node: Utilities,  Next: Abstract Objects Layer,  Prev: Exception Handling,  Up: Python/C API Reference Manual

7.5 Utilities
=============

The functions in this chapter perform various utility tasks, ranging
from helping C code be more portable across platforms, using Python
modules from C, and parsing function arguments and constructing Python
values from C values.

* Menu:

* Operating System Utilities::
* System Functions::
* Process Control::
* Importing Modules: Importing Modules<2>.
* Data marshalling support::
* Parsing arguments and building values::
* String conversion and formatting::
* Reflection::
* Codec registry and support functions::


File: python.info,  Node: Operating System Utilities,  Next: System Functions,  Up: Utilities

7.5.1 Operating System Utilities
--------------------------------

 -- C Function: int Py_FdIsInteractive (FILE *fp, const char *filename)
     Return true (nonzero) if the standard I/O file `fp' with name
     `filename' is deemed interactive.  This is the case for files for
     which `isatty(fileno(fp))' is true.  If the global flag
     `Py_InteractiveFlag' is true, this function also returns true if
     the `filename' pointer is `NULL' or if the name is equal to one of
     the strings `'<stdin>'' or `'???''.

 -- C Function: void PyOS_AfterFork ()
     Function to update some internal state after a process fork; this
     should be called in the new process if the Python interpreter will
     continue to be used.  If a new executable is loaded into the new
     process, this function does not need to be called.

 -- C Function: int PyOS_CheckStack ()
     Return true when the interpreter runs out of stack space.  This is
     a reliable check, but is only available when `USE_STACKCHECK' is
     defined (currently on Windows using the Microsoft Visual C++
     compiler).  `USE_STACKCHECK' will be defined automatically; you
     should never change the definition in your own code.

 -- C Function: PyOS_sighandler_t PyOS_getsig (int i)
     Return the current signal handler for signal `i'.  This is a thin
     wrapper around either `sigaction()' or `signal()'.  Do not call
     those functions directly! `PyOS_sighandler_t' is a typedef alias
     for `void (*)(int)'.

 -- C Function: PyOS_sighandler_t PyOS_setsig (int i,
          PyOS_sighandler_t h)
     Set the signal handler for signal `i' to be `h'; return the old
     signal handler.  This is a thin wrapper around either
     `sigaction()' or `signal()'.  Do not call those functions
     directly!  `PyOS_sighandler_t' is a typedef alias for `void
     (*)(int)'.


File: python.info,  Node: System Functions,  Next: Process Control,  Prev: Operating System Utilities,  Up: Utilities

7.5.2 System Functions
----------------------

These are utility functions that make functionality from the *Note sys:
16d. module accessible to C code.  They all work with the current
interpreter thread’s *Note sys: 16d. module’s dict, which is
contained in the internal thread state structure.

 -- C Function: PyObject *PySys_GetObject (char *name)
     `Return value: Borrowed reference.'  Return the object `name' from
     the *Note sys: 16d. module or `NULL' if it does not exist, without
     setting an exception.

 -- C Function: FILE *PySys_GetFile (char *name, FILE *def)
     Return the `FILE*' associated with the object `name' in the *Note
     sys: 16d. module, or `def' if `name' is not in the module or is
     not associated with a `FILE*'.

 -- C Function: int PySys_SetObject (char *name, PyObject *v)
     Set `name' in the *Note sys: 16d. module to `v' unless `v' is
     `NULL', in which case `name' is deleted from the sys module.
     Returns `0' on success, `-1' on error.

 -- C Function: void PySys_ResetWarnOptions ()
     Reset *Note sys.warnoptions: 2497. to an empty list.

 -- C Function: void PySys_AddWarnOption (char *s)
     Append `s' to *Note sys.warnoptions: 2497.

 -- C Function: void PySys_SetPath (char *path)
     Set *Note sys.path: 59a. to a list object of paths found in `path'
     which should be a list of paths separated with the platform’s
     search path delimiter (`:' on Unix, `;' on Windows).

 -- C Function: void PySys_WriteStdout (const char *format, ...)
     Write the output string described by `format' to *Note sys.stdout:
     8b2.  No exceptions are raised, even if truncation occurs (see
     below).

     `format' should limit the total size of the formatted output
     string to 1000 bytes or less – after 1000 bytes, the output
     string is truncated.  In particular, this means that no
     unrestricted “%s” formats should occur; these should be
     limited using “%.<N>s” where <N> is a decimal number
     calculated so that <N> plus the maximum size of other formatted
     text does not exceed 1000 bytes.  Also watch out for “%f”,
     which can print hundreds of digits for very large numbers.

     If a problem occurs, or *Note sys.stdout: 8b2. is unset, the
     formatted message is written to the real (C level) `stdout'.

 -- C Function: void PySys_WriteStderr (const char *format, ...)
     As above, but write to *Note sys.stderr: 672. or `stderr' instead.


File: python.info,  Node: Process Control,  Next: Importing Modules<2>,  Prev: System Functions,  Up: Utilities

7.5.3 Process Control
---------------------

 -- C Function: void Py_FatalError (const char *message)
     Print a fatal error message and kill the process.  No cleanup is
     performed.  This function should only be invoked when a condition
     is detected that would make it dangerous to continue using the
     Python interpreter; e.g., when the object administration appears
     to be corrupted.  On Unix, the standard C library function
     `abort()' is called which will attempt to produce a `core' file.

 -- C Function: void Py_Exit (int status)
     Exit the current process.  This calls *Note Py_Finalize(): 2c6.
     and then calls the standard C library function `exit(status)'.

 -- C Function: int Py_AtExit (void (*func)())
     Register a cleanup function to be called by *Note Py_Finalize():
     2c6.  The cleanup function will be called with no arguments and
     should return no value.  At most 32 cleanup functions can be
     registered.  When the registration is successful, *Note
     Py_AtExit(): 2b95. returns `0'; on failure, it returns `-1'.  The
     cleanup function registered last is called first. Each cleanup
     function will be called at most once.  Since Python’s internal
     finalization will have completed before the cleanup function, no
     Python APIs should be called by `func'.


File: python.info,  Node: Importing Modules<2>,  Next: Data marshalling support,  Prev: Process Control,  Up: Utilities

7.5.4 Importing Modules
-----------------------

 -- C Function: PyObject* PyImport_ImportModule (const char *name)
     `Return value: New reference.'  

     This is a simplified interface to *Note PyImport_ImportModuleEx():
     2b99. below, leaving the `globals' and `locals' arguments set to
     `NULL' and `level' set to 0.  When the `name' argument contains a
     dot (when it specifies a submodule of a package), the `fromlist'
     argument is set to the list `['*']' so that the return value is the
     named module rather than the top-level package containing it as
     would otherwise be the case.  (Unfortunately, this has an
     additional side effect when `name' in fact specifies a subpackage
     instead of a submodule: the submodules specified in the
     package’s `__all__' variable are  loaded.)  Return a new
     reference to the imported module, or `NULL' with an exception set
     on failure.  Before Python 2.4, the module may still be created in
     the failure case — examine `sys.modules' to find out.  Starting
     with Python 2.4, a failing import of a module no longer leaves the
     module in `sys.modules'.

     Changed in version 2.4: Failing imports remove incomplete module
     objects.

     Changed in version 2.6: Always uses absolute imports.


 -- C Function: PyObject* PyImport_ImportModuleNoBlock (const
          char *name)
     This version of *Note PyImport_ImportModule(): 398. does not
     block. It’s intended to be used in C functions that import other
     modules to execute a function.  The import may block if another
     thread holds the import lock. The function *Note
     PyImport_ImportModuleNoBlock(): 389. never blocks. It first tries
     to fetch the module from sys.modules and falls back to *Note
     PyImport_ImportModule(): 398.  unless the lock is held, in which
     case the function will raise an *Note ImportError: 388.

     New in version 2.6.


 -- C Function: PyObject* PyImport_ImportModuleEx (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist)
     `Return value: New reference.'  

     Import a module.  This is best described by referring to the
     built-in Python function *Note __import__(): 396, as the standard
     *Note __import__(): 396. function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or `NULL' with an exception set on failure
     (before Python 2.4, the module may still be created in this case).
     Like for *Note __import__(): 396, the return value when a
     submodule of a package was requested is normally the top-level
     package, unless a non-empty `fromlist' was given.

     Changed in version 2.4: Failing imports remove incomplete module
     objects.

     Changed in version 2.6: The function is an alias for *Note
     PyImport_ImportModuleLevel(): 2b9a. with `-1' as level, meaning
     relative import.


 -- C Function: PyObject* PyImport_ImportModuleLevel (char *name,
          PyObject *globals, PyObject *locals, PyObject *fromlist,
          int level)
     `Return value: New reference.'  Import a module.  This is best
     described by referring to the built-in Python function *Note
     __import__(): 396, as the standard *Note __import__(): 396.
     function calls this function directly.

     The return value is a new reference to the imported module or
     top-level package, or `NULL' with an exception set on failure.
     Like for *Note __import__(): 396, the return value when a
     submodule of a package was requested is normally the top-level
     package, unless a non-empty `fromlist' was given.

     New in version 2.5.


 -- C Function: PyObject* PyImport_Import (PyObject *name)
     `Return value: New reference.'  

     This is a higher-level interface that calls the current “import
     hook function”.  It invokes the *Note __import__(): 396.
     function from the `__builtins__' of the current globals.  This
     means that the import is done using whatever import hooks are
     installed in the current environment, e.g. by *Note rexec: 147. or
     `ihooks'.

     Changed in version 2.6: Always uses absolute imports.


 -- C Function: PyObject* PyImport_ReloadModule (PyObject *m)
     `Return value: New reference.'  

     Reload a module.  This is best described by referring to the
     built-in Python function *Note reload(): 595, as the standard
     *Note reload(): 595. function calls this function directly.
     Return a new reference to the reloaded module, or `NULL' with an
     exception set on failure (the module still exists in this case).

 -- C Function: PyObject* PyImport_AddModule (const char *name)
     `Return value: Borrowed reference.'  Return the module object
     corresponding to a module name.  The `name' argument may be of the
     form `package.module'. First check the modules dictionary if
     there’s one there, and if not, create a new one and insert it in
     the modules dictionary. Return `NULL' with an exception set on
     failure.

          Note: This function does not load or import the module; if
          the module wasn’t already loaded, you will get an empty
          module object. Use *Note PyImport_ImportModule(): 398.  or
          one of its variants to import a module.  Package structures
          implied by a dotted name for `name' are not created if not
          already present.

 -- C Function: PyObject* PyImport_ExecCodeModule (char *name,
          PyObject *co)
     `Return value: New reference.'  

     Given a module name (possibly of the form `package.module') and a
     code object read from a Python bytecode file or obtained from the
     built-in function *Note compile(): 1fb, load the module.  Return a
     new reference to the module object, or `NULL' with an exception
     set if an error occurred.  Before Python 2.4, the module could
     still be created in error cases.  Starting with Python 2.4, `name'
     is removed from *Note sys.modules: 84c. in error cases, and even
     if `name' was already in *Note sys.modules: 84c. on entry to *Note
     PyImport_ExecCodeModule(): 2b9c.  Leaving incompletely initialized
     modules in *Note sys.modules: 84c. is dangerous, as imports of
     such modules have no way to know that the module object is an
     unknown (and probably damaged with respect to the module
     author’s intents) state.

     The module’s `__file__' attribute will be set to the code
     object’s `co_filename'.

     This function will reload the module if it was already imported.
     See *Note PyImport_ReloadModule(): 2b9b. for the intended way to
     reload a module.

     If `name' points to a dotted name of the form `package.module',
     any package structures not already created will still not be
     created.

     Changed in version 2.4: `name' is removed from *Note sys.modules:
     84c. in error cases.


 -- C Function: PyObject* PyImport_ExecCodeModuleEx (char *name,
          PyObject *co, char *pathname)
     `Return value: New reference.'  Like *Note
     PyImport_ExecCodeModule(): 2b9c, but the `__file__' attribute of
     the module object is set to `pathname' if it is non-`NULL'.

 -- C Function: long PyImport_GetMagicNumber ()
     Return the magic number for Python bytecode files (a.k.a. `.pyc'
     and `.pyo' files).  The magic number should be present in the
     first four bytes of the bytecode file, in little-endian byte order.

 -- C Function: PyObject* PyImport_GetModuleDict ()
     `Return value: Borrowed reference.'  Return the dictionary used
     for the module administration (a.k.a.  `sys.modules').  Note that
     this is a per-interpreter variable.

 -- C Function: PyObject* PyImport_GetImporter (PyObject *path)
     Return an importer object for a *Note sys.path:
     59a./`pkg.__path__' item `path', possibly by fetching it from the
     *Note sys.path_importer_cache: 851.  dict.  If it wasn’t yet
     cached, traverse *Note sys.path_hooks: 850. until a hook is found
     that can handle the path item.  Return `None' if no hook could;
     this tells our caller it should fall back to the built-in import
     mechanism.  Cache the result in *Note sys.path_importer_cache:
     851.  Return a new reference to the importer object.

     New in version 2.6.


 -- C Function: void _PyImport_Init ()
     Initialize the import mechanism.  For internal use only.

 -- C Function: void PyImport_Cleanup ()
     Empty the module table.  For internal use only.

 -- C Function: void _PyImport_Fini ()
     Finalize the import mechanism.  For internal use only.

 -- C Function: PyObject* _PyImport_FindExtension (char *, char *)
     For internal use only.

 -- C Function: PyObject* _PyImport_FixupExtension (char *, char *)
     For internal use only.

 -- C Function: int PyImport_ImportFrozenModule (char *name)
     Load a frozen module named `name'.  Return `1' for success, `0' if
     the module is not found, and `-1' with an exception set if the
     initialization failed.  To access the imported module on a
     successful load, use *Note PyImport_ImportModule(): 398.  (Note
     the misnomer — this function would reload the module if it was
     already imported.)

 -- C Type: struct _frozen
     This is the structure type definition for frozen module
     descriptors, as generated by the `freeze' utility (see
     `Tools/freeze/' in the Python source distribution).  Its
     definition, found in `Include/import.h', is:

         struct _frozen {
             char *name;
             unsigned char *code;
             int size;
         };

 -- C Variable: struct _frozen* PyImport_FrozenModules
     This pointer is initialized to point to an array of `struct
     _frozen' records, terminated by one whose members are all `NULL'
     or zero.  When a frozen module is imported, it is searched in this
     table.  Third-party code could play tricks with this to provide a
     dynamically created collection of frozen modules.

 -- C Function: int PyImport_AppendInittab (const char *name, void
          (*initfunc)(void))
     Add a single module to the existing table of built-in modules.
     This is a convenience wrapper around *Note
     PyImport_ExtendInittab(): 2baa, returning `-1' if the table could
     not be extended.  The new module can be imported by the name
     `name', and uses the function `initfunc' as the initialization
     function called on the first attempted import.  This should be
     called before *Note Py_Initialize(): 2a70.

 -- C Type: struct _inittab
     Structure describing a single entry in the list of built-in
     modules.  Each of these structures gives the name and
     initialization function for a module built into the interpreter.
     Programs which embed Python may use an array of these structures
     in conjunction with *Note PyImport_ExtendInittab(): 2baa. to
     provide additional built-in modules.  The structure is defined in
     `Include/import.h' as:

         struct _inittab {
             char *name;
             void (*initfunc)(void);
         };

 -- C Function: int PyImport_ExtendInittab (struct _inittab *newtab)
     Add a collection of modules to the table of built-in modules.  The
     `newtab' array must end with a sentinel entry which contains
     `NULL' for the `name' field; failure to provide the sentinel value
     can result in a memory fault.  Returns `0' on success or `-1' if
     insufficient memory could be allocated to extend the internal
     table.  In the event of failure, no modules are added to the
     internal table.  This should be called before *Note
     Py_Initialize(): 2a70.


File: python.info,  Node: Data marshalling support,  Next: Parsing arguments and building values,  Prev: Importing Modules<2>,  Up: Utilities

7.5.5 Data marshalling support
------------------------------

These routines allow C code to work with serialized objects using the
same data format as the *Note marshal: 10c. module.  There are
functions to write data into the serialization format, and additional
functions that can be used to read the data back.  Files used to store
marshalled data must be opened in binary mode.

Numeric values are stored with the least significant byte first.

The module supports two versions of the data format: version `0' is the
historical version, version `1' (new in Python 2.4) shares interned
strings in the file, and upon unmarshalling.  Version 2 (new in Python
2.5) uses a binary format for floating point numbers.
`Py_MARSHAL_VERSION' indicates the current file format (currently 2).

 -- C Function: void PyMarshal_WriteLongToFile (long value, FILE *file,
          int version)
     Marshal a `long' integer, `value', to `file'.  This will only write
     the least-significant 32 bits of `value'; regardless of the size
     of the native `long' type.

     Changed in version 2.4: `version' indicates the file format.


 -- C Function: void PyMarshal_WriteObjectToFile (PyObject *value,
          FILE *file, int version)
     Marshal a Python object, `value', to `file'.

     Changed in version 2.4: `version' indicates the file format.


 -- C Function: PyObject* PyMarshal_WriteObjectToString
          (PyObject *value, int version)
     `Return value: New reference.'  Return a string object containing
     the marshalled representation of `value'.

     Changed in version 2.4: `version' indicates the file format.


The following functions allow marshalled values to be read back in.

XXX What about error detection?  It appears that reading past the end
of the file will always result in a negative numeric value (where
that’s relevant), but it’s not clear that negative values won’t
be handled properly when there’s no error.  What’s the right way to
tell? Should only non-negative values be written using these routines?

 -- C Function: long PyMarshal_ReadLongFromFile (FILE *file)
     Return a C `long' from the data stream in a `FILE*' opened for
     reading.  Only a 32-bit value can be read in using this function,
     regardless of the native size of `long'.

 -- C Function: int PyMarshal_ReadShortFromFile (FILE *file)
     Return a C `short' from the data stream in a `FILE*' opened for
     reading.  Only a 16-bit value can be read in using this function,
     regardless of the native size of `short'.

 -- C Function: PyObject* PyMarshal_ReadObjectFromFile (FILE *file)
     `Return value: New reference.'  Return a Python object from the
     data stream in a `FILE*' opened for reading.  On error, sets the
     appropriate exception (*Note EOFError: 8b3. or *Note TypeError:
     218.) and returns `NULL'.

 -- C Function: PyObject* PyMarshal_ReadLastObjectFromFile (FILE *file)
     `Return value: New reference.'  Return a Python object from the
     data stream in a `FILE*' opened for reading.  Unlike *Note
     PyMarshal_ReadObjectFromFile(): 2bb4, this function assumes that
     no further objects will be read from the file, allowing it to
     aggressively load file data into memory so that the
     de-serialization can operate from data in memory rather than
     reading a byte at a time from the file.  Only use these variant if
     you are certain that you won’t be reading anything else from the
     file.  On error, sets the appropriate exception (*Note EOFError:
     8b3. or *Note TypeError: 218.) and returns `NULL'.

 -- C Function: PyObject* PyMarshal_ReadObjectFromString (char *string,
          Py_ssize_t len)
     `Return value: New reference.'  Return a Python object from the
     data stream in a character buffer containing `len' bytes pointed
     to by `string'.  On error, sets the appropriate exception (*Note
     EOFError: 8b3. or *Note TypeError: 218.) and returns `NULL'.

     Changed in version 2.5: This function used an `int' type for
     `len'. This might require changes in your code for properly
     supporting 64-bit systems.



File: python.info,  Node: Parsing arguments and building values,  Next: String conversion and formatting,  Prev: Data marshalling support,  Up: Utilities

7.5.6 Parsing arguments and building values
-------------------------------------------

These functions are useful when creating your own extensions functions
and methods.  Additional information and examples are available in
*Note Extending and Embedding the Python Interpreter: 517.

The first three of these functions described, *Note PyArg_ParseTuple():
32f, *Note PyArg_ParseTupleAndKeywords(): 435, and *Note PyArg_Parse():
2bb9, all use `format strings' which are used to tell the function
about the expected arguments.  The format strings use the same syntax
for each of these functions.

A format string consists of zero or more “format units.”  A format
unit describes one Python object; it is usually a single character or a
parenthesized sequence of format units.  With a few exceptions, a
format unit that is not a parenthesized sequence normally corresponds
to a single address argument to these functions.  In the following
description, the quoted form is the format unit; the entry in (round)
parentheses is the Python object type that matches the format unit; and
the entry in [square] brackets is the type of the C variable(s) whose
address should be passed.

These formats allow accessing an object as a contiguous chunk of memory.
You don’t have to provide raw storage for the returned unicode or
bytes area.  Also, you won’t have to release any memory yourself,
except with the `es', `es#', `et' and `et#' formats.

`s' (string or Unicode) [const char *]
     Convert a Python string or Unicode object to a C pointer to a
     character string.  You must not provide storage for the string
     itself; a pointer to an existing string is stored into the
     character pointer variable whose address you pass.  The C string
     is NUL-terminated.  The Python string must not contain embedded
     NUL bytes; if it does, a *Note TypeError: 218. exception is
     raised. Unicode objects are converted to C strings using the
     default encoding.  If this conversion fails, a *Note UnicodeError:
     44c. is raised.

`s#' (string, Unicode or any read buffer compatible object) [const char *, int (or `Py_ssize_t', see below)]
     This variant on `s' stores into two C variables, the first one a
     pointer to a character string, the second one its length.  In this
     case the Python string may contain embedded null bytes.  Unicode
     objects pass back a pointer to the default encoded string version
     of the object if such a conversion is possible.  All other
     read-buffer compatible objects pass back a reference to the raw
     internal data representation.

     Starting with Python 2.5 the type of the length argument can be
     controlled by defining the macro `PY_SSIZE_T_CLEAN' before
     including `Python.h'.  If the macro is defined, length is a
     `Py_ssize_t' rather than an int.

`s*' (string, Unicode, or any buffer compatible object) [Py_buffer]
     Similar to `s#', this code fills a Py_buffer structure provided by
     the caller.  The buffer gets locked, so that the caller can
     subsequently use the buffer even inside a `Py_BEGIN_ALLOW_THREADS'
     block; the caller is responsible for calling `PyBuffer_Release'
     with the structure after it has processed the data.

     New in version 2.6.

`z' (string, Unicode  or `None') [const char *]
     Like `s', but the Python object may also be `None', in which case
     the C pointer is set to `NULL'.

`z#' (string, Unicode, `None' or any read buffer compatible object) [const char *, int]
     This is to `s#' as `z' is to `s'.

`z*' (string, Unicode, `None' or any buffer compatible object) [Py_buffer]
     This is to `s*' as `z' is to `s'.

     New in version 2.6.

`u' (Unicode) [Py_UNICODE *]
     Convert a Python Unicode object to a C pointer to a NUL-terminated
     buffer of 16-bit Unicode (UTF-16) data.  As with `s', there is no
     need to provide storage for the Unicode data buffer; a pointer to
     the existing Unicode data is stored into the *Note Py_UNICODE:
     ab3. pointer variable whose address you pass.

`u#' (Unicode) [Py_UNICODE *, int]
     This variant on `u' stores into two C variables, the first one a
     pointer to a Unicode data buffer, the second one its length.
     Non-Unicode objects are handled by interpreting their read-buffer
     pointer as pointer to a *Note Py_UNICODE: ab3. array.

`es' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer]
     This variant on `s' is used for encoding Unicode and objects
     convertible to Unicode into a character buffer. It only works for
     encoded data without embedded NUL bytes.

     This format requires two arguments.  The first is only used as
     input, and must be a `const char*' which points to the name of an
     encoding as a NUL-terminated string, or `NULL', in which case the
     default encoding is used.  An exception is raised if the named
     encoding is not known to Python.  The second argument must be a
     `char**'; the value of the pointer it references will be set to a
     buffer with the contents of the argument text.  The text will be
     encoded in the encoding specified by the first argument.

     *Note PyArg_ParseTuple(): 32f. will allocate a buffer of the
     needed size, copy the encoded data into this buffer and adjust
     `*buffer' to reference the newly allocated storage.  The caller is
     responsible for calling *Note PyMem_Free(): 3f8. to free the
     allocated buffer after use.

`et' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer]
     Same as `es' except that 8-bit string objects are passed through
     without recoding them.  Instead, the implementation assumes that
     the string object uses the encoding passed in as parameter.

`es#' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer, int *buffer_length]
     This variant on `s#' is used for encoding Unicode and objects
     convertible to Unicode into a character buffer.  Unlike the `es'
     format, this variant allows input data which contains NUL
     characters.

     It requires three arguments.  The first is only used as input, and
     must be a `const char*' which points to the name of an encoding as
     a NUL-terminated string, or `NULL', in which case the default
     encoding is used.  An exception is raised if the named encoding is
     not known to Python.  The second argument must be a `char**'; the
     value of the pointer it references will be set to a buffer with
     the contents of the argument text.  The text will be encoded in
     the encoding specified by the first argument.  The third argument
     must be a pointer to an integer; the referenced integer will be
     set to the number of bytes in the output buffer.

     There are two modes of operation:

     If `*buffer' points a `NULL' pointer, the function will allocate a
     buffer of the needed size, copy the encoded data into this buffer
     and set `*buffer' to reference the newly allocated storage.  The
     caller is responsible for calling *Note PyMem_Free(): 3f8. to free
     the allocated buffer after usage.

     If `*buffer' points to a non-`NULL' pointer (an already allocated
     buffer), *Note PyArg_ParseTuple(): 32f. will use this location as
     the buffer and interpret the initial value of `*buffer_length' as
     the buffer size.  It will then copy the encoded data into the
     buffer and NUL-terminate it.  If the buffer is not large enough, a
     *Note TypeError: 218. will be set.  Note: starting from Python 3.6
     a *Note ValueError: 236. will be set.

     In both cases, `*buffer_length' is set to the length of the
     encoded data without the trailing NUL byte.

`et#' (string, Unicode or character buffer compatible object) [const char *encoding, char **buffer, int *buffer_length]
     Same as `es#' except that string objects are passed through without
     recoding them. Instead, the implementation assumes that the string
     object uses the encoding passed in as parameter.

`b' (integer) [unsigned char]
     Convert a nonnegative Python integer to an unsigned tiny int,
     stored in a C `unsigned char'.

`B' (integer) [unsigned char]
     Convert a Python integer to a tiny int without overflow checking,
     stored in a C `unsigned char'.

     New in version 2.3.

`h' (integer) [short int]
     Convert a Python integer to a C `short int'.

`H' (integer) [unsigned short int]
     Convert a Python integer to a C `unsigned short int', without
     overflow checking.

     New in version 2.3.

`i' (integer) [int]
     Convert a Python integer to a plain C `int'.

`I' (integer) [unsigned int]
     Convert a Python integer to a C `unsigned int', without overflow
     checking.

     New in version 2.3.

`l' (integer) [long int]
     Convert a Python integer to a C `long int'.

`k' (integer) [unsigned long]
     Convert a Python integer or long integer to a C `unsigned long'
     without overflow checking.

     New in version 2.3.

`L' (integer) [PY_LONG_LONG]
     Convert a Python integer to a C `long long'.  This format is only
     available on platforms that support `long long' (or `_int64' on
     Windows).

`K' (integer) [unsigned PY_LONG_LONG]
     Convert a Python integer or long integer to a C `unsigned long
     long' without overflow checking.  This format is only available on
     platforms that support `unsigned long long' (or `unsigned _int64'
     on Windows).

     New in version 2.3.

`n' (integer) [Py_ssize_t]
     Convert a Python integer or long integer to a C `Py_ssize_t'.

     New in version 2.5.

`c' (string of length 1) [char]
     Convert a Python character, represented as a string of length 1,
     to a C `char'.

`f' (float) [float]
     Convert a Python floating point number to a C `float'.

`d' (float) [double]
     Convert a Python floating point number to a C `double'.

`D' (complex) [Py_complex]
     Convert a Python complex number to a C *Note Py_complex: 2bba.
     structure.

`O' (object) [PyObject *]
     Store a Python object (without any conversion) in a C object
     pointer.  The C program thus receives the actual object that was
     passed.  The object’s reference count is not increased.  The
     pointer stored is not `NULL'.

`O!' (object) [`typeobject', PyObject *]
     Store a Python object in a C object pointer.  This is similar to
     `O', but takes two C arguments: the first is the address of a
     Python type object, the second is the address of the C variable
     (of type *Note PyObject*: 3be.)  into which the object pointer is
     stored.  If the Python object does not have the required type,
     *Note TypeError: 218. is raised.

`O&' (object) [`converter', `anything']
     Convert a Python object to a C variable through a `converter'
     function.  This takes two arguments: the first is a function, the
     second is the address of a C variable (of arbitrary type),
     converted to `void *'.  The `converter' function in turn is called
     as follows:

         status = converter(object, address);

     where `object' is the Python object to be converted and `address'
     is the `void*' argument that was passed to the *Note
     PyArg_Parse*(): 2bb9.  function.  The returned `status' should be
     `1' for a successful conversion and `0' if the conversion has
     failed.  When the conversion fails, the `converter' function
     should raise an exception and leave the content of `address'
     unmodified.

`S' (string) [PyStringObject *]
     Like `O' but requires that the Python object is a string object.
     Raises *Note TypeError: 218. if the object is not a string object.
     The C variable may also be declared as *Note PyObject*: 3be.

`U' (Unicode string) [PyUnicodeObject *]
     Like `O' but requires that the Python object is a Unicode object.
     Raises *Note TypeError: 218. if the object is not a Unicode
     object.  The C variable may also be declared as *Note PyObject*:
     3be.

`t#' (read-only character buffer) [char *, int]
     Like `s#', but accepts any object which implements the read-only
     buffer interface.  The `char*' variable is set to point to the
     first byte of the buffer, and the `int' is set to the length of
     the buffer.  Only single-segment buffer objects are accepted;
     *Note TypeError: 218. is raised for all others.

`w' (read-write character buffer) [char *]
     Similar to `s', but accepts any object which implements the
     read-write buffer interface.  The caller must determine the length
     of the buffer by other means, or use `w#' instead.  Only
     single-segment buffer objects are accepted; *Note TypeError: 218.
     is raised for all others.

`w#' (read-write character buffer) [char *, Py_ssize_t]
     Like `s#', but accepts any object which implements the read-write
     buffer interface.  The `char *' variable is set to point to the
     first byte of the buffer, and the `Py_ssize_t' is set to the
     length of the buffer.  Only single-segment buffer objects are
     accepted; *Note TypeError: 218.  is raised for all others.

`w*' (read-write byte-oriented buffer) [Py_buffer]
     This is to `w' what `s*' is to `s'.

     New in version 2.6.

`(items)' (tuple) [`matching-items']
     The object must be a Python sequence whose length is the number of
     format units in `items'.  The C arguments must correspond to the
     individual format units in `items'.  Format units for sequences
     may be nested.

          Note: Prior to Python version 1.5.2, this format specifier
          only accepted a tuple containing the individual parameters,
          not an arbitrary sequence.  Code which previously caused
          *Note TypeError: 218. to be raised here may now proceed
          without an exception.  This is not expected to be a problem
          for existing code.

It is possible to pass Python long integers where integers are
requested; however no proper range checking is done — the most
significant bits are silently truncated when the receiving field is too
small to receive the value (actually, the semantics are inherited from
downcasts in C — your mileage may vary).

A few other characters have a meaning in a format string.  These may
not occur inside nested parentheses.  They are:

`|'
     Indicates that the remaining arguments in the Python argument list
     are optional.  The C variables corresponding to optional arguments
     should be initialized to their default value — when an optional
     argument is not specified, *Note PyArg_ParseTuple(): 32f. does not
     touch the contents of the corresponding C variable(s).

`:'
     The list of format units ends here; the string after the colon is
     used as the function name in error messages (the “associated
     value” of the exception that *Note PyArg_ParseTuple(): 32f.
     raises).

`;'
     The list of format units ends here; the string after the semicolon
     is used as the error message `instead' of the default error
     message.  `:' and `;' mutually exclude each other.

Note that any Python object references which are provided to the caller
are `borrowed' references; do not decrement their reference count!

Additional arguments passed to these functions must be addresses of
variables whose type is determined by the format string; these are used
to store values from the input tuple.  There are a few cases, as
described in the list of format units above, where these parameters are
used as input values; they should match what is specified for the
corresponding format unit in that case.

For the conversion to succeed, the `arg' object must match the format
and the format must be exhausted.  On success, the *Note
PyArg_Parse*(): 2bb9. functions return true, otherwise they return
false and raise an appropriate exception.  When the *Note
PyArg_Parse*(): 2bb9. functions fail due to conversion failure in one
of the format units, the variables at the addresses corresponding to
that and the following format units are left untouched.

 -- C Function: int PyArg_ParseTuple (PyObject *args, const
          char *format, ...)
     Parse the parameters of a function that takes only positional
     parameters into local variables.  Returns true on success; on
     failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParse (PyObject *args, const char *format,
          va_list vargs)
     Identical to *Note PyArg_ParseTuple(): 32f, except that it accepts
     a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_ParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[], ...)
     Parse the parameters of a function that takes both positional and
     keyword parameters into local variables.  Returns true on success;
     on failure, it returns false and raises the appropriate exception.

 -- C Function: int PyArg_VaParseTupleAndKeywords (PyObject *args,
          PyObject *kw, const char *format, char *keywords[],
          va_list vargs)
     Identical to *Note PyArg_ParseTupleAndKeywords(): 435, except that
     it accepts a va_list rather than a variable number of arguments.

 -- C Function: int PyArg_Parse (PyObject *args, const char *format,
          ...)
     Function used to deconstruct the argument lists of “old-style”
     functions — these are functions which use the *Note
     METH_OLDARGS: 4c9. parameter parsing method.  This is not
     recommended for use in parameter parsing in new code, and most
     code in the standard interpreter has been modified to no longer
     use this for that purpose.  It does remain a convenient way to
     decompose other tuples, however, and may continue to be used for
     that purpose.

 -- C Function: int PyArg_UnpackTuple (PyObject *args, const
          char *name, Py_ssize_t min, Py_ssize_t max, ...)
     A simpler form of parameter retrieval which does not use a format
     string to specify the types of the arguments.  Functions which use
     this method to retrieve their parameters should be declared as
     *Note METH_VARARGS: 4c8. in function or method tables.  The tuple
     containing the actual parameters should be passed as `args'; it
     must actually be a tuple.  The length of the tuple must be at
     least `min' and no more than `max'; `min' and `max' may be equal.
     Additional arguments must be passed to the function, each of which
     should be a pointer to a *Note PyObject*: 3be. variable; these
     will be filled in with the values from `args'; they will contain
     borrowed references.  The variables which correspond to optional
     parameters not given by `args' will not be filled in; these should
     be initialized by the caller. This function returns true on
     success and false if `args' is not a tuple or contains the wrong
     number of elements; an exception will be set if there was a
     failure.

     This is an example of the use of this function, taken from the
     sources for the `_weakref' helper module for weak references:

         static PyObject *
         weakref_ref(PyObject *self, PyObject *args)
         {
             PyObject *object;
             PyObject *callback = NULL;
             PyObject *result = NULL;

             if (PyArg_UnpackTuple(args, "ref", 1, 2, &object, &callback)) {
                 result = PyWeakref_NewRef(object, callback);
             }
             return result;
         }

     The call to *Note PyArg_UnpackTuple(): 4c6. in this example is
     entirely equivalent to this call to *Note PyArg_ParseTuple(): 32f.:

         PyArg_ParseTuple(args, "O|O:ref", &object, &callback)

     New in version 2.2.

     Changed in version 2.5: This function used an `int' type for `min'
     and `max'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* Py_BuildValue (const char *format, ...)
     `Return value: New reference.'  Create a new value based on a
     format string similar to those accepted by the *Note
     PyArg_Parse*(): 2bb9. family of functions and a sequence of values.
     Returns the value or `NULL' in the case of an error; an exception
     will be raised if `NULL' is returned.

     *Note Py_BuildValue(): 3c0. does not always build a tuple.  It
     builds a tuple only if its format string contains two or more
     format units.  If the format string is empty, it returns `None';
     if it contains exactly one format unit, it returns whatever object
     is described by that format unit.  To force it to return a tuple
     of size `0' or one, parenthesize the format string.

     When memory buffers are passed as parameters to supply data to
     build objects, as for the `s' and `s#' formats, the required data
     is copied.  Buffers provided by the caller are never referenced by
     the objects created by *Note Py_BuildValue(): 3c0.  In other
     words, if your code invokes `malloc()' and passes the allocated
     memory to *Note Py_BuildValue(): 3c0, your code is responsible for
     calling `free()' for that memory once *Note Py_BuildValue(): 3c0.
     returns.

     In the following description, the quoted form is the format unit;
     the entry in (round) parentheses is the Python object type that
     the format unit will return; and the entry in [square] brackets is
     the type of the C value(s) to be passed.

     The characters space, tab, colon and comma are ignored in format
     strings (but not within format units such as `s#').  This can be
     used to make long format strings a tad more readable.

    `s' (string) [char *]
          Convert a null-terminated C string to a Python object.  If
          the C string pointer is `NULL', `None' is used.

    `s#' (string) [char *, int]
          Convert a C string and its length to a Python object.  If the
          C string pointer is `NULL', the length is ignored and `None'
          is returned.

    `z' (string or `None') [char *]
          Same as `s'.

    `z#' (string or `None') [char *, int]
          Same as `s#'.

    `u' (Unicode string) [Py_UNICODE *]
          Convert a null-terminated buffer of Unicode (UCS-2 or UCS-4)
          data to a Python Unicode object.  If the Unicode buffer
          pointer is `NULL', `None' is returned.

    `u#' (Unicode string) [Py_UNICODE *, int]
          Convert a Unicode (UCS-2 or UCS-4) data buffer and its length
          to a Python Unicode object.   If the Unicode buffer pointer
          is `NULL', the length is ignored and `None' is returned.

    `i' (integer) [int]
          Convert a plain C `int' to a Python integer object.

    `b' (integer) [char]
          Convert a plain C `char' to a Python integer object.

    `h' (integer) [short int]
          Convert a plain C `short int' to a Python integer object.

    `l' (integer) [long int]
          Convert a C `long int' to a Python integer object.

    `B' (integer) [unsigned char]
          Convert a C `unsigned char' to a Python integer object.

    `H' (integer) [unsigned short int]
          Convert a C `unsigned short int' to a Python integer object.

    `I' (integer/long) [unsigned int]
          Convert a C `unsigned int' to a Python integer object or a
          Python long integer object, if it is larger than `sys.maxint'.

    `k' (integer/long) [unsigned long]
          Convert a C `unsigned long' to a Python integer object or a
          Python long integer object, if it is larger than `sys.maxint'.

    `L' (long) [PY_LONG_LONG]
          Convert a C `long long' to a Python long integer object. Only
          available on platforms that support `long long'.

    `K' (long) [unsigned PY_LONG_LONG]
          Convert a C `unsigned long long' to a Python long integer
          object.  Only available on platforms that support `unsigned
          long long'.

    `n' (int) [Py_ssize_t]
          Convert a C `Py_ssize_t' to a Python integer or long integer.

          New in version 2.5.

    `c' (string of length 1) [char]
          Convert a C `int' representing a character to a Python string
          of length 1.

    `d' (float) [double]
          Convert a C `double' to a Python floating point number.

    `f' (float) [float]
          Same as `d'.

    `D' (complex) [Py_complex *]
          Convert a C *Note Py_complex: 2bba. structure to a Python
          complex number.

    `O' (object) [PyObject *]
          Pass a Python object untouched (except for its reference
          count, which is incremented by one).  If the object passed in
          is a `NULL' pointer, it is assumed that this was caused
          because the call producing the argument found an error and
          set an exception. Therefore, *Note Py_BuildValue(): 3c0.
          will return `NULL' but won’t raise an exception.  If no
          exception has been raised yet, *Note SystemError: 97a. is set.

    `S' (object) [PyObject *]
          Same as `O'.

    `N' (object) [PyObject *]
          Same as `O', except it doesn’t increment the reference
          count on the object.  Useful when the object is created by a
          call to an object constructor in the argument list.

    `O&' (object) [`converter', `anything']
          Convert `anything' to a Python object through a `converter'
          function.  The function is called with `anything' (which
          should be compatible with `void *') as its argument and
          should return a “new” Python object, or `NULL' if an
          error occurred.

    `(items)' (tuple) [`matching-items']
          Convert a sequence of C values to a Python tuple with the
          same number of items.

    `[items]' (list) [`matching-items']
          Convert a sequence of C values to a Python list with the same
          number of items.

    `{items}' (dictionary) [`matching-items']
          Convert a sequence of C values to a Python dictionary.  Each
          pair of consecutive C values adds one item to the dictionary,
          serving as key and value, respectively.

     If there is an error in the format string, the *Note SystemError:
     97a. exception is set and `NULL' returned.

 -- C Function: PyObject* Py_VaBuildValue (const char *format,
          va_list vargs)
     Identical to *Note Py_BuildValue(): 3c0, except that it accepts a
     va_list rather than a variable number of arguments.


File: python.info,  Node: String conversion and formatting,  Next: Reflection,  Prev: Parsing arguments and building values,  Up: Utilities

7.5.7 String conversion and formatting
--------------------------------------

Functions for number conversion and formatted string output.

 -- C Function: int PyOS_snprintf (char *str, size_t size, const
          char *format, ...)
     Output not more than `size' bytes to `str' according to the format
     string `format' and the extra arguments. See the Unix man page
     `snprintf(2)'.

 -- C Function: int PyOS_vsnprintf (char *str, size_t size, const
          char *format, va_list va)
     Output not more than `size' bytes to `str' according to the format
     string `format' and the variable argument list `va'. Unix man page
     `vsnprintf(2)'.

*Note PyOS_snprintf(): 4ca. and *Note PyOS_vsnprintf(): 4cb. wrap the
Standard C library functions `snprintf()' and `vsnprintf()'. Their
purpose is to guarantee consistent behavior in corner cases, which the
Standard C functions do not.

The wrappers ensure that `str*[*size'-1] is always `'\0'' upon return.
They never write more than `size' bytes (including the trailing `'\0''
into str.  Both functions require that `str != NULL', `size > 0' and
`format != NULL'.

If the platform doesn’t have `vsnprintf()' and the buffer size needed
to avoid truncation exceeds `size' by more than 512 bytes, Python
aborts with a `Py_FatalError'.

The return value (`rv') for these functions should be interpreted as
follows:

   * When `0 <= rv < size', the output conversion was successful and
     `rv' characters were written to `str' (excluding the trailing
     `'\0'' byte at `str*[*rv']).

   * When `rv >= size', the output conversion was truncated and a
     buffer with `rv + 1' bytes would have been needed to succeed.
     `str*[*size'-1] is `'\0'' in this case.

   * When `rv < 0', “something bad happened.” `str*[*size'-1] is
     `'\0'' in this case too, but the rest of `str' is undefined. The
     exact cause of the error depends on the underlying platform.

The following functions provide locale-independent string to number
conversions.

 -- C Function: double PyOS_string_to_double (const char *s,
          char **endptr, PyObject *overflow_exception)
     Convert a string `s' to a `double', raising a Python exception on
     failure.  The set of accepted strings corresponds to the set of
     strings accepted by Python’s *Note float(): 1eb. constructor,
     except that `s' must not have leading or trailing whitespace.  The
     conversion is independent of the current locale.

     If `endptr' is `NULL', convert the whole string.  Raise ValueError
     and return `-1.0' if the string is not a valid representation of a
     floating-point number.

     If endptr is not `NULL', convert as much of the string as possible
     and set `*endptr' to point to the first unconverted character.  If
     no initial segment of the string is the valid representation of a
     floating-point number, set `*endptr' to point to the beginning of
     the string, raise ValueError, and return `-1.0'.

     If `s' represents a value that is too large to store in a float
     (for example, `"1e500"' is such a string on many platforms) then
     if `overflow_exception' is `NULL' return `Py_HUGE_VAL' (with an
     appropriate sign) and don’t set any exception.  Otherwise,
     `overflow_exception' must point to a Python exception object;
     raise that exception and return `-1.0'.  In both cases, set
     `*endptr' to point to the first character after the converted
     value.

     If any other error occurs during the conversion (for example an
     out-of-memory error), set the appropriate Python exception and
     return `-1.0'.

     New in version 2.7.


 -- C Function: double PyOS_ascii_strtod (const char *nptr,
          char **endptr)
     Convert a string to a `double'. This function behaves like the
     Standard C function `strtod()' does in the C locale. It does this
     without changing the current locale, since that would not be
     thread-safe.

     *Note PyOS_ascii_strtod(): 2c1. should typically be used for
     reading configuration files or other non-user input that should be
     locale independent.

     See the Unix man page `strtod(2)' for details.

     New in version 2.4.

     Deprecated since version 2.7: Use *Note PyOS_string_to_double():
     2c0. instead.


 -- C Function: char* PyOS_ascii_formatd (char *buffer, size_t buf_len,
          const char *format, double d)
     Convert a `double' to a string using the `'.'' as the decimal
     separator. `format' is a `printf()'-style format string specifying
     the number format. Allowed conversion characters are `'e'', `'E'',
     `'f'', `'F'', `'g'' and `'G''.

     The return value is a pointer to `buffer' with the converted
     string or NULL if the conversion failed.

     New in version 2.4.

     Deprecated since version 2.7: This function is removed in Python
     2.7 and 3.1.  Use `PyOS_double_to_string()' instead.


 -- C Function: char* PyOS_double_to_string (double val,
          char format_code, int precision, int flags, int *ptype)
     Convert a `double' `val' to a string using supplied `format_code',
     `precision', and `flags'.

     `format_code' must be one of `'e'', `'E'', `'f'', `'F'', `'g'',
     `'G'' or `'r''.  For `'r'', the supplied `precision' must be `0'
     and is ignored.  The `'r'' format code specifies the standard
     *Note repr(): 1c6. format.

     `flags' can be zero or more of the values `Py_DTSF_SIGN',
     `Py_DTSF_ADD_DOT_0', or `Py_DTSF_ALT', or-ed together:

        * `Py_DTSF_SIGN' means to always precede the returned string
          with a sign character, even if `val' is non-negative.

        * `Py_DTSF_ADD_DOT_0' means to ensure that the returned string
          will not look like an integer.

        * `Py_DTSF_ALT' means to apply “alternate” formatting
          rules.  See the documentation for the *Note PyOS_snprintf():
          4ca. `'#'' specifier for details.

     If `ptype' is non-NULL, then the value it points to will be set to
     one of `Py_DTST_FINITE', `Py_DTST_INFINITE', or `Py_DTST_NAN',
     signifying that `val' is a finite number, an infinite number, or
     not a number, respectively.

     The return value is a pointer to `buffer' with the converted
     string or `NULL' if the conversion failed. The caller is
     responsible for freeing the returned string by calling *Note
     PyMem_Free(): 3f8.

     New in version 2.7.


 -- C Function: double PyOS_ascii_atof (const char *nptr)
     Convert a string to a `double' in a locale-independent way.

     See the Unix man page `atof(2)' for details.

     New in version 2.4.

     Deprecated since version 3.1: Use *Note PyOS_string_to_double():
     2c0. instead.


 -- C Function: char* PyOS_stricmp (char *s1, char *s2)
     Case insensitive comparison of strings. The function works almost
     identically to `strcmp()' except that it ignores the case.

     New in version 2.6.


 -- C Function: char* PyOS_strnicmp (char *s1, char *s2, Py_ssize_t
           size)
     Case insensitive comparison of strings. The function works almost
     identically to `strncmp()' except that it ignores the case.

     New in version 2.6.



File: python.info,  Node: Reflection,  Next: Codec registry and support functions,  Prev: String conversion and formatting,  Up: Utilities

7.5.8 Reflection
----------------

 -- C Function: PyObject* PyEval_GetBuiltins ()
     `Return value: Borrowed reference.'  Return a dictionary of the
     builtins in the current execution frame, or the interpreter of the
     thread state if no frame is currently executing.

 -- C Function: PyObject* PyEval_GetLocals ()
     `Return value: Borrowed reference.'  Return a dictionary of the
     local variables in the current execution frame, or `NULL' if no
     frame is currently executing.

 -- C Function: PyObject* PyEval_GetGlobals ()
     `Return value: Borrowed reference.'  Return a dictionary of the
     global variables in the current execution frame, or `NULL' if no
     frame is currently executing.

 -- C Function: PyFrameObject* PyEval_GetFrame ()
     `Return value: Borrowed reference.'  Return the current thread
     state’s frame, which is `NULL' if no frame is currently
     executing.

 -- C Function: int PyFrame_GetLineNumber (PyFrameObject *frame)
     Return the line number that `frame' is currently executing.

 -- C Function: int PyEval_GetRestricted ()
     If there is a current frame and it is executing in restricted
     mode, return true, otherwise false.

 -- C Function: const char* PyEval_GetFuncName (PyObject *func)
     Return the name of `func' if it is a function, class or instance
     object, else the name of `func's type.

 -- C Function: const char* PyEval_GetFuncDesc (PyObject *func)
     Return a description string, depending on the type of `func'.
     Return values include “()” for functions and methods, ”
     constructor”, ” instance”, and ” object”.  Concatenated
     with the result of *Note PyEval_GetFuncName(): 2bcc, the result
     will be a description of `func'.


File: python.info,  Node: Codec registry and support functions,  Prev: Reflection,  Up: Utilities

7.5.9 Codec registry and support functions
------------------------------------------

 -- C Function: int PyCodec_Register (PyObject *search_function)
     Register a new codec search function.

     As side effect, this tries to load the `encodings' package, if not
     yet done, to make sure that it is always first in the list of
     search functions.

 -- C Function: int PyCodec_KnownEncoding (const char *encoding)
     Return `1' or `0' depending on whether there is a registered codec
     for the given `encoding'.

 -- C Function: PyObject* PyCodec_Encode (PyObject *object, const
          char *encoding, const char *errors)
     Generic codec based encoding API.

     `object' is passed through the encoder function found for the given
     `encoding' using the error handling method defined by `errors'.
     `errors' may be `NULL' to use the default method defined for the
     codec.  Raises a *Note LookupError: 8b9. if no encoder can be
     found.

 -- C Function: PyObject* PyCodec_Decode (PyObject *object, const
          char *encoding, const char *errors)
     Generic codec based decoding API.

     `object' is passed through the decoder function found for the given
     `encoding' using the error handling method defined by `errors'.
     `errors' may be `NULL' to use the default method defined for the
     codec.  Raises a *Note LookupError: 8b9. if no encoder can be
     found.

* Menu:

* Codec lookup API::
* Registry API for Unicode encoding error handlers::


File: python.info,  Node: Codec lookup API,  Next: Registry API for Unicode encoding error handlers,  Up: Codec registry and support functions

7.5.9.1 Codec lookup API
........................

In the following functions, the `encoding' string is looked up
converted to all lower-case characters, which makes encodings looked up
through this mechanism effectively case-insensitive.  If no codec is
found, a *Note KeyError: 205. is set and `NULL' returned.

 -- C Function: PyObject* PyCodec_Encoder (const char *encoding)
     Get an encoder function for the given `encoding'.

 -- C Function: PyObject* PyCodec_Decoder (const char *encoding)
     Get a decoder function for the given `encoding'.

 -- C Function: PyObject* PyCodec_IncrementalEncoder (const
          char *encoding, const char *errors)
     Get an *Note IncrementalEncoder: a79. object for the given
     `encoding'.

 -- C Function: PyObject* PyCodec_IncrementalDecoder (const
          char *encoding, const char *errors)
     Get an *Note IncrementalDecoder: a7a. object for the given
     `encoding'.

 -- C Function: PyObject* PyCodec_StreamReader (const char *encoding,
          PyObject *stream, const char *errors)
     Get a *Note StreamReader: a7b. factory function for the given
     `encoding'.

 -- C Function: PyObject* PyCodec_StreamWriter (const char *encoding,
          PyObject *stream, const char *errors)
     Get a *Note StreamWriter: a7c. factory function for the given
     `encoding'.


File: python.info,  Node: Registry API for Unicode encoding error handlers,  Prev: Codec lookup API,  Up: Codec registry and support functions

7.5.9.2 Registry API for Unicode encoding error handlers
........................................................

 -- C Function: int PyCodec_RegisterError (const char *name,
          PyObject *error)
     Register the error handling callback function `error' under the
     given `name'.  This callback function will be called by a codec
     when it encounters unencodable characters/undecodable bytes and
     `name' is specified as the error parameter in the call to the
     encode/decode function.

     The callback gets a single argument, an instance of *Note
     UnicodeEncodeError: 981, *Note UnicodeDecodeError: 982. or *Note
     UnicodeTranslateError: 983. that holds information about the
     problematic sequence of characters or bytes and their offset in
     the original string (see *Note Unicode Exception Objects: 2b5b.
     for functions to extract this information).  The callback must
     either raise the given exception, or return a two-item tuple
     containing the replacement for the problematic sequence, and an
     integer giving the offset in the original string at which
     encoding/decoding should be resumed.

     Return `0' on success, `-1' on error.

 -- C Function: PyObject* PyCodec_LookupError (const char *name)
     Lookup the error handling callback function registered under
     `name'.  As a special case `NULL' can be passed, in which case the
     error handling callback for “strict” will be returned.

 -- C Function: PyObject* PyCodec_StrictErrors (PyObject *exc)
     Raise `exc' as an exception.

 -- C Function: PyObject* PyCodec_IgnoreErrors (PyObject *exc)
     Ignore the unicode error, skipping the faulty input.

 -- C Function: PyObject* PyCodec_ReplaceErrors (PyObject *exc)
     Replace the unicode encode error with `?' or `U+FFFD'.

 -- C Function: PyObject* PyCodec_XMLCharRefReplaceErrors
          (PyObject *exc)
     Replace the unicode encode error with XML character references.

 -- C Function: PyObject* PyCodec_BackslashReplaceErrors (PyObject *exc)
     Replace the unicode encode error with backslash escapes (`\x',
     `\u' and `\U').


File: python.info,  Node: Abstract Objects Layer,  Next: Concrete Objects Layer,  Prev: Utilities,  Up: Python/C API Reference Manual

7.6 Abstract Objects Layer
==========================

The functions in this chapter interact with Python objects regardless
of their type, or with wide classes of object types (e.g. all numerical
types, or all sequence types).  When used on object types for which
they do not apply, they will raise a Python exception.

It is not possible to use these functions on objects that are not
properly initialized, such as a list object that has been created by
*Note PyList_New(): 2b08, but whose items have not been set to some
non-`NULL' value yet.

* Menu:

* Object Protocol::
* Number Protocol::
* Sequence Protocol::
* Mapping Protocol::
* Iterator Protocol::
* Old Buffer Protocol::


File: python.info,  Node: Object Protocol,  Next: Number Protocol,  Up: Abstract Objects Layer

7.6.1 Object Protocol
---------------------

 -- C Function: int PyObject_Print (PyObject *o, FILE *fp, int flags)
     Print an object `o', on file `fp'.  Returns `-1' on error.  The
     flags argument is used to enable certain printing options.  The
     only option currently supported is `Py_PRINT_RAW'; if given, the
     *Note str(): 1ea. of the object is written instead of the *Note
     repr(): 1c6.

 -- C Function: int PyObject_HasAttr (PyObject *o, PyObject *attr_name)
     Returns `1' if `o' has the attribute `attr_name', and `0'
     otherwise.  This is equivalent to the Python expression
     `hasattr(o, attr_name)'.  This function always succeeds.

 -- C Function: int PyObject_HasAttrString (PyObject *o, const
          char *attr_name)
     Returns `1' if `o' has the attribute `attr_name', and `0'
     otherwise.  This is equivalent to the Python expression
     `hasattr(o, attr_name)'.  This function always succeeds.

 -- C Function: PyObject* PyObject_GetAttr (PyObject *o,
          PyObject *attr_name)
     `Return value: New reference.'  Retrieve an attribute named
     `attr_name' from object `o'. Returns the attribute value on
     success, or `NULL' on failure.  This is the equivalent of the
     Python expression `o.attr_name'.

 -- C Function: PyObject* PyObject_GetAttrString (PyObject *o, const
          char *attr_name)
     `Return value: New reference.'  Retrieve an attribute named
     `attr_name' from object `o'. Returns the attribute value on
     success, or `NULL' on failure. This is the equivalent of the Python
     expression `o.attr_name'.

 -- C Function: PyObject* PyObject_GenericGetAttr (PyObject *o,
          PyObject *name)
     Generic attribute getter function that is meant to be put into a
     type object’s `tp_getattro' slot.  It looks for a descriptor in
     the dictionary of classes in the object’s MRO as well as an
     attribute in the object’s *Note __dict__: 4a0. (if present).  As
     outlined in *Note Implementing Descriptors: 726, data descriptors
     take preference over instance attributes, while non-data
     descriptors don’t.  Otherwise, an *Note AttributeError: 1f8. is
     raised.

 -- C Function: int PyObject_SetAttr (PyObject *o, PyObject *attr_name,
          PyObject *v)
     Set the value of the attribute named `attr_name', for object `o',
     to the value `v'. Raise an exception and return `-1' on failure;
     return `0' on success.  This is the equivalent of the Python
     statement `o.attr_name = v'.

     If `v' is `NULL', the attribute is deleted, however this feature is
     deprecated in favour of using *Note PyObject_DelAttr(): 2bee.

 -- C Function: int PyObject_SetAttrString (PyObject *o, const
          char *attr_name, PyObject *v)
     Set the value of the attribute named `attr_name', for object `o',
     to the value `v'. Raise an exception and return `-1' on failure;
     return `0' on success.  This is the equivalent of the Python
     statement `o.attr_name = v'.

     If `v' is `NULL', the attribute is deleted, however this feature is
     deprecated in favour of using *Note PyObject_DelAttrString(): 2bf0.

 -- C Function: int PyObject_GenericSetAttr (PyObject *o,
          PyObject *name, PyObject *value)
     Generic attribute setter and deleter function that is meant to be
     put into a type object’s *Note tp_setattro: 2ac8.  slot.  It
     looks for a data descriptor in the dictionary of classes in the
     object’s MRO, and if found it takes preference over setting or
     deleting the attribute in the instance dictionary. Otherwise, the
     attribute is set or deleted in the object’s *Note __dict__: 4a0.
     (if present).  On success, `0' is returned, otherwise an *Note
     AttributeError: 1f8.  is raised and `-1' is returned.

 -- C Function: int PyObject_DelAttr (PyObject *o, PyObject *attr_name)
     Delete attribute named `attr_name', for object `o'. Returns `-1'
     on failure.  This is the equivalent of the Python statement `del
     o.attr_name'.

 -- C Function: int PyObject_DelAttrString (PyObject *o, const
          char *attr_name)
     Delete attribute named `attr_name', for object `o'. Returns `-1'
     on failure.  This is the equivalent of the Python statement `del
     o.attr_name'.

 -- C Function: PyObject* PyObject_RichCompare (PyObject *o1,
          PyObject *o2, int opid)
     `Return value: New reference.'  Compare the values of `o1' and
     `o2' using the operation specified by `opid', which must be one of
     `Py_LT', `Py_LE', `Py_EQ', `Py_NE', `Py_GT', or `Py_GE',
     corresponding to `<', `<=', `==', `!=', `>', or `>=' respectively.
     This is the equivalent of the Python expression `o1 op o2', where
     `op' is the operator corresponding to `opid'. Returns the value of
     the comparison on success, or `NULL' on failure.

 -- C Function: int PyObject_RichCompareBool (PyObject *o1,
          PyObject *o2, int opid)
     Compare the values of `o1' and `o2' using the operation specified
     by `opid', which must be one of `Py_LT', `Py_LE', `Py_EQ',
     `Py_NE', `Py_GT', or `Py_GE', corresponding to `<', `<=', `==',
     `!=', `>', or `>=' respectively. Returns `-1' on error, `0' if the
     result is false, `1' otherwise. This is the equivalent of the
     Python expression `o1 op o2', where `op' is the operator
     corresponding to `opid'.

     Note: If `o1' and `o2' are the same object, *Note
     PyObject_RichCompareBool(): 2bf3.  will always return `1' for
     `Py_EQ' and `0' for `Py_NE'.

 -- C Function: int PyObject_Cmp (PyObject *o1, PyObject *o2,
          int *result)
     Compare the values of `o1' and `o2' using a routine provided by
     `o1', if one exists, otherwise with a routine provided by `o2'.
     The result of the comparison is returned in `result'.  Returns
     `-1' on failure.  This is the equivalent of the Python statement
     `result = cmp(o1, o2)'.

 -- C Function: int PyObject_Compare (PyObject *o1, PyObject *o2)
     Compare the values of `o1' and `o2' using a routine provided by
     `o1', if one exists, otherwise with a routine provided by `o2'.
     Returns the result of the comparison on success.  On error, the
     value returned is undefined; use *Note PyErr_Occurred(): 2a63. to
     detect an error.  This is equivalent to the Python expression
     `cmp(o1, o2)'.

 -- C Function: PyObject* PyObject_Repr (PyObject *o)
     `Return value: New reference.'  

     Compute a string representation of object `o'.  Returns the string
     representation on success, `NULL' on failure.  This is the
     equivalent of the Python expression `repr(o)'.  Called by the
     *Note repr(): 1c6. built-in function and by reverse quotes.

 -- C Function: PyObject* PyObject_Str (PyObject *o)
     `Return value: New reference.'  

     Compute a string representation of object `o'.  Returns the string
     representation on success, `NULL' on failure.  This is the
     equivalent of the Python expression `str(o)'.  Called by the *Note
     str(): 1ea. built-in function and by the *Note print: 4fd.
     statement.

 -- C Function: PyObject* PyObject_Bytes (PyObject *o)
     Compute a bytes representation of object `o'.  In 2.x, this is
     just an alias for *Note PyObject_Str(): 2bf5.

 -- C Function: PyObject* PyObject_Unicode (PyObject *o)
     `Return value: New reference.'  

     Compute a Unicode string representation of object `o'.  Returns
     the Unicode string representation on success, `NULL' on failure.
     This is the equivalent of the Python expression `unicode(o)'.
     Called by the *Note unicode(): 1f5. built-in function.

 -- C Function: int PyObject_IsInstance (PyObject *inst, PyObject *cls)
     Returns `1' if `inst' is an instance of the class `cls' or a
     subclass of `cls', or `0' if not.  On error, returns `-1' and sets
     an exception.  If `cls' is a type object rather than a class
     object, *Note PyObject_IsInstance(): 2bf8.  returns `1' if `inst'
     is of type `cls'.  If `cls' is a tuple, the check will be done
     against every entry in `cls'. The result will be `1' when at least
     one of the checks returns `1', otherwise it will be `0'. If `inst'
     is not a class instance and `cls' is neither a type object, nor a
     class object, nor a tuple, `inst' must have a *Note __class__:
     472. attribute — the class relationship of the value of that
     attribute with `cls' will be used to determine the result of this
     function.

     New in version 2.1.

     Changed in version 2.2: Support for a tuple as the second argument
     added.


Subclass determination is done in a fairly straightforward way, but
includes a wrinkle that implementors of extensions to the class system
may want to be aware of.  If `A' and `B' are class objects, `B' is a
subclass of `A' if it inherits from `A' either directly or indirectly.
If either is not a class object, a more general mechanism is used to
determine the class relationship of the two objects.  When testing if
`B' is a subclass of `A', if `A' is `B', *Note PyObject_IsSubclass():
2bf9. returns true.  If `A' and `B' are different objects, `B'’s
*Note __bases__: 471. attribute is searched in a depth-first fashion
for `A' — the presence of the *Note __bases__: 471.  attribute is
considered sufficient for this determination.

 -- C Function: int PyObject_IsSubclass (PyObject *derived,
          PyObject *cls)
     Returns `1' if the class `derived' is identical to or derived from
     the class `cls', otherwise returns `0'.  In case of an error,
     returns `-1'. If `cls' is a tuple, the check will be done against
     every entry in `cls'. The result will be `1' when at least one of
     the checks returns `1', otherwise it will be `0'. If either
     `derived' or `cls' is not an actual class object (or tuple), this
     function uses the generic algorithm described above.

     New in version 2.1.

     Changed in version 2.3: Older versions of Python did not support a
     tuple as the second argument.


 -- C Function: int PyCallable_Check (PyObject *o)
     Determine if the object `o' is callable.  Return `1' if the object
     is callable and `0' otherwise.  This function always succeeds.

 -- C Function: PyObject* PyObject_Call (PyObject *callable_object,
          PyObject *args, PyObject *kw)
     `Return value: New reference.'  

     Call a callable Python object `callable_object', with arguments
     given by the tuple `args', and named arguments given by the
     dictionary `kw'. If no named arguments are needed, `kw' may be
     `NULL'. `args' must not be `NULL', use an empty tuple if no
     arguments are needed. Returns the result of the call on success,
     or `NULL' on failure.  This is the equivalent of the Python
     expression `apply(callable_object, args, kw)' or
     `callable_object(*args, **kw)'.

     New in version 2.2.


 -- C Function: PyObject* PyObject_CallObject
          (PyObject *callable_object, PyObject *args)
     `Return value: New reference.'  

     Call a callable Python object `callable_object', with arguments
     given by the tuple `args'.  If no arguments are needed, then
     `args' may be `NULL'.  Returns the result of the call on success,
     or `NULL' on failure.  This is the equivalent of the Python
     expression `apply(callable_object, args)' or
     `callable_object(*args)'.

 -- C Function: PyObject* PyObject_CallFunction (PyObject *callable,
          char *format, ...)
     `Return value: New reference.'  

     Call a callable Python object `callable', with a variable number
     of C arguments.  The C arguments are described using a *Note
     Py_BuildValue(): 3c0. style format string.  The format may be
     `NULL', indicating that no arguments are provided.  Returns the
     result of the call on success, or `NULL' on failure.  This is the
     equivalent of the Python expression `apply(callable, args)' or
     `callable(*args)'. Note that if you only pass *Note PyObject *:
     3be. args, *Note PyObject_CallFunctionObjArgs(): 2bfc. is a faster
     alternative.

 -- C Function: PyObject* PyObject_CallMethod (PyObject *o,
          char *method, char *format, ...)
     `Return value: New reference.'  Call the method named `method' of
     object `o' with a variable number of C arguments.  The C arguments
     are described by a *Note Py_BuildValue(): 3c0. format string that
     should  produce a tuple.  The format may be `NULL', indicating that
     no arguments are provided. Returns the result of the call on
     success, or `NULL' on failure.  This is the equivalent of the
     Python expression `o.method(args)'.  Note that if you only pass
     *Note PyObject *: 3be. args, *Note PyObject_CallMethodObjArgs():
     2bfe. is a faster alternative.

 -- C Function: PyObject* PyObject_CallFunctionObjArgs
          (PyObject *callable, ..., NULL)
     `Return value: New reference.'  Call a callable Python object
     `callable', with a variable number of *Note PyObject*: 3be.
     arguments.  The arguments are provided as a variable number of
     parameters followed by `NULL'. Returns the result of the call on
     success, or `NULL' on failure.

     New in version 2.2.


 -- C Function: PyObject* PyObject_CallMethodObjArgs (PyObject *o,
          PyObject *name, ..., NULL)
     `Return value: New reference.'  Calls a method of the object `o',
     where the name of the method is given as a Python string object in
     `name'.  It is called with a variable number of *Note PyObject*:
     3be. arguments.  The arguments are provided as a variable number
     of parameters followed by `NULL'. Returns the result of the call
     on success, or `NULL' on failure.

     New in version 2.2.


 -- C Function: long PyObject_Hash (PyObject *o)
     Compute and return the hash value of an object `o'.  On failure,
     return `-1'.  This is the equivalent of the Python expression
     `hash(o)'.

 -- C Function: long PyObject_HashNotImplemented (PyObject *o)
     Set a *Note TypeError: 218. indicating that `type(o)' is not
     hashable and return `-1'.  This function receives special
     treatment when stored in a `tp_hash' slot, allowing a type to
     explicitly indicate to the interpreter that it is not hashable.

     New in version 2.6.


 -- C Function: int PyObject_IsTrue (PyObject *o)
     Returns `1' if the object `o' is considered to be true, and `0'
     otherwise.  This is equivalent to the Python expression `not not
     o'.  On failure, return `-1'.

 -- C Function: int PyObject_Not (PyObject *o)
     Returns `0' if the object `o' is considered to be true, and `1'
     otherwise.  This is equivalent to the Python expression `not o'.
     On failure, return `-1'.

 -- C Function: PyObject* PyObject_Type (PyObject *o)
     `Return value: New reference.'  

     When `o' is non-`NULL', returns a type object corresponding to the
     object type of object `o'. On failure, raises *Note SystemError:
     97a. and returns `NULL'.  This is equivalent to the Python
     expression `type(o)'. This function increments the reference count
     of the return value. There’s really no reason to use this
     function instead of the common expression `o->ob_type', which
     returns a pointer of type *Note PyTypeObject*: 2aa0, except when
     the incremented reference count is needed.

 -- C Function: int PyObject_TypeCheck (PyObject *o, PyTypeObject *type)
     Return true if the object `o' is of type `type' or a subtype of
     `type'.  Both parameters must be non-`NULL'.

     New in version 2.2.


 -- C Function: Py_ssize_t PyObject_Length (PyObject *o)
 -- C Function: Py_ssize_t PyObject_Size (PyObject *o)
     Return the length of object `o'.  If the object `o' provides
     either the sequence and mapping protocols, the sequence length is
     returned.  On error, `-1' is returned.  This is the equivalent to
     the Python expression `len(o)'.

     Changed in version 2.5: These functions returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: PyObject* PyObject_GetItem (PyObject *o, PyObject *key)
     `Return value: New reference.'  Return element of `o'
     corresponding to the object `key' or `NULL' on failure.  This is
     the equivalent of the Python expression `o[key]'.

 -- C Function: int PyObject_SetItem (PyObject *o, PyObject *key,
          PyObject *v)
     Map the object `key' to the value `v'.  Raise an exception and
     return `-1' on failure; return `0' on success.  This is the
     equivalent of the Python statement `o[key] = v'.

 -- C Function: int PyObject_DelItem (PyObject *o, PyObject *key)
     Delete the mapping for `key' from `o'.  Returns `-1' on failure.
     This is the equivalent of the Python statement `del o[key]'.

 -- C Function: int PyObject_AsFileDescriptor (PyObject *o)
     Derives a file descriptor from a Python object.  If the object is
     an integer or long integer, its value is returned.  If not, the
     object’s `fileno()' method is called if it exists; the method
     must return an integer or long integer, which is returned as the
     file descriptor value.  Returns `-1' on failure.

 -- C Function: PyObject* PyObject_Dir (PyObject *o)
     `Return value: New reference.'  This is equivalent to the Python
     expression `dir(o)', returning a (possibly empty) list of strings
     appropriate for the object argument, or `NULL' if there was an
     error.  If the argument is `NULL', this is like the Python `dir()',
     returning the names of the current locals; in this case, if no
     execution frame is active then `NULL' is returned but *Note
     PyErr_Occurred(): 2a63. will return false.

 -- C Function: PyObject* PyObject_GetIter (PyObject *o)
     `Return value: New reference.'  This is equivalent to the Python
     expression `iter(o)'. It returns a new iterator for the object
     argument, or the object  itself if the object is already an
     iterator.  Raises *Note TypeError: 218. and returns `NULL' if the
     object cannot be iterated.


File: python.info,  Node: Number Protocol,  Next: Sequence Protocol,  Prev: Object Protocol,  Up: Abstract Objects Layer

7.6.2 Number Protocol
---------------------

 -- C Function: int PyNumber_Check (PyObject *o)
     Returns `1' if the object `o' provides numeric protocols, and
     false otherwise.  This function always succeeds.

 -- C Function: PyObject* PyNumber_Add (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of adding `o1'
     and `o2', or `NULL' on failure.  This is the equivalent of the
     Python expression `o1 + o2'.

 -- C Function: PyObject* PyNumber_Subtract (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of subtracting
     `o2' from `o1', or `NULL' on failure.  This is the equivalent of
     the Python expression `o1 - o2'.

 -- C Function: PyObject* PyNumber_Multiply (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of multiplying
     `o1' and `o2', or `NULL' on failure.  This is the equivalent of
     the Python expression `o1 * o2'.

 -- C Function: PyObject* PyNumber_Divide (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of dividing
     `o1' by `o2', or `NULL' on failure.  This is the equivalent of the
     Python expression `o1 / o2'.

 -- C Function: PyObject* PyNumber_FloorDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return the floor of `o1' divided
     by `o2', or `NULL' on failure.  This is equivalent to the
     “classic” division of integers.

     New in version 2.2.


 -- C Function: PyObject* PyNumber_TrueDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return a reasonable approximation
     for the mathematical value of `o1' divided by `o2', or `NULL' on
     failure.  The return value is “approximate” because binary
     floating point numbers are approximate; it is not possible to
     represent all real numbers in base two.  This function can return
     a floating point value when passed two integers.

     New in version 2.2.


 -- C Function: PyObject* PyNumber_Remainder (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the remainder of dividing
     `o1' by `o2', or `NULL' on failure.  This is the equivalent of the
     Python expression `o1 % o2'.

 -- C Function: PyObject* PyNumber_Divmod (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  

     See the built-in function *Note divmod(): 768. Returns `NULL' on
     failure.  This is the equivalent of the Python expression
     `divmod(o1, o2)'.

 -- C Function: PyObject* PyNumber_Power (PyObject *o1, PyObject *o2,
          PyObject *o3)
     `Return value: New reference.'  

     See the built-in function *Note pow(): 4d1. Returns `NULL' on
     failure.  This is the equivalent of the Python expression `pow(o1,
     o2, o3)', where `o3' is optional.  If `o3' is to be ignored, pass
     *Note Py_None: 2a6b. in its place (passing `NULL' for `o3' would
     cause an illegal memory access).

 -- C Function: PyObject* PyNumber_Negative (PyObject *o)
     `Return value: New reference.'  Returns the negation of `o' on
     success, or `NULL' on failure. This is the equivalent of the
     Python expression `-o'.

 -- C Function: PyObject* PyNumber_Positive (PyObject *o)
     `Return value: New reference.'  Returns `o' on success, or `NULL'
     on failure.  This is the equivalent of the Python expression `+o'.

 -- C Function: PyObject* PyNumber_Absolute (PyObject *o)
     `Return value: New reference.'  

     Returns the absolute value of `o', or `NULL' on failure.  This is
     the equivalent of the Python expression `abs(o)'.

 -- C Function: PyObject* PyNumber_Invert (PyObject *o)
     `Return value: New reference.'  Returns the bitwise negation of
     `o' on success, or `NULL' on failure.  This is the equivalent of
     the Python expression `~o'.

 -- C Function: PyObject* PyNumber_Lshift (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of left
     shifting `o1' by `o2' on success, or `NULL' on failure.  This is
     the equivalent of the Python expression `o1 << o2'.

 -- C Function: PyObject* PyNumber_Rshift (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the result of right
     shifting `o1' by `o2' on success, or `NULL' on failure.  This is
     the equivalent of the Python expression `o1 >> o2'.

 -- C Function: PyObject* PyNumber_And (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the “bitwise and” of
     `o1' and `o2' on success and `NULL' on failure.  This is the
     equivalent of the Python expression `o1 & o2'.

 -- C Function: PyObject* PyNumber_Xor (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the “bitwise exclusive
     or” of `o1' by `o2' on success, or `NULL' on failure.  This is
     the equivalent of the Python expression `o1 ^ o2'.

 -- C Function: PyObject* PyNumber_Or (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Returns the “bitwise or” of
     `o1' and `o2' on success, or `NULL' on failure.  This is the
     equivalent of the Python expression `o1 | o2'.

 -- C Function: PyObject* PyNumber_InPlaceAdd (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of adding `o1'
     and `o2', or `NULL' on failure.  The operation is done `in-place'
     when `o1' supports it.  This is the equivalent of the Python
     statement `o1 += o2'.

 -- C Function: PyObject* PyNumber_InPlaceSubtract (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of subtracting
     `o2' from `o1', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement `o1 -= o2'.

 -- C Function: PyObject* PyNumber_InPlaceMultiply (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of multiplying
     `o1' and `o2', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement `o1 *= o2'.

 -- C Function: PyObject* PyNumber_InPlaceDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of dividing
     `o1' by `o2', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it. This is the equivalent of the
     Python statement `o1 /= o2'.

 -- C Function: PyObject* PyNumber_InPlaceFloorDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the mathematical floor of
     dividing `o1' by `o2', or `NULL' on failure.  The operation is
     done `in-place' when `o1' supports it.  This is the equivalent of
     the Python statement `o1 //= o2'.

     New in version 2.2.


 -- C Function: PyObject* PyNumber_InPlaceTrueDivide (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return a reasonable approximation
     for the mathematical value of `o1' divided by `o2', or `NULL' on
     failure.  The return value is “approximate” because binary
     floating point numbers are approximate; it is not possible to
     represent all real numbers in base two.  This function can return
     a floating point value when passed two integers.  The operation is
     done `in-place' when `o1' supports it.

     New in version 2.2.


 -- C Function: PyObject* PyNumber_InPlaceRemainder (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the remainder of dividing
     `o1' by `o2', or `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python statement `o1 %= o2'.

 -- C Function: PyObject* PyNumber_InPlacePower (PyObject *o1,
          PyObject *o2, PyObject *o3)
     `Return value: New reference.'  

     See the built-in function *Note pow(): 4d1. Returns `NULL' on
     failure.  The operation is done `in-place' when `o1' supports it.
     This is the equivalent of the Python statement `o1 **= o2' when o3
     is *Note Py_None: 2a6b, or an in-place variant of `pow(o1, o2,
     o3)' otherwise. If `o3' is to be ignored, pass *Note Py_None: 2a6b.
     in its place (passing `NULL' for `o3' would cause an illegal
     memory access).

 -- C Function: PyObject* PyNumber_InPlaceLshift (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of left
     shifting `o1' by `o2' on success, or `NULL' on failure.  The
     operation is done `in-place' when `o1' supports it.  This is the
     equivalent of the Python statement `o1 <<= o2'.

 -- C Function: PyObject* PyNumber_InPlaceRshift (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the result of right
     shifting `o1' by `o2' on success, or `NULL' on failure.  The
     operation is done `in-place' when `o1' supports it.  This is the
     equivalent of the Python statement `o1 >>= o2'.

 -- C Function: PyObject* PyNumber_InPlaceAnd (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the “bitwise and” of
     `o1' and `o2' on success and `NULL' on failure. The operation is
     done `in-place' when `o1' supports it.  This is the equivalent of
     the Python statement `o1 &= o2'.

 -- C Function: PyObject* PyNumber_InPlaceXor (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the “bitwise exclusive
     or” of `o1' by `o2' on success, or `NULL' on failure.  The
     operation is done `in-place' when `o1' supports it.  This is the
     equivalent of the Python statement `o1 ^= o2'.

 -- C Function: PyObject* PyNumber_InPlaceOr (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Returns the “bitwise or” of
     `o1' and `o2' on success, or `NULL' on failure.  The operation is
     done `in-place' when `o1' supports it.  This is the equivalent of
     the Python statement `o1 |= o2'.

 -- C Function: int PyNumber_Coerce (PyObject **p1, PyObject **p2)
     This function takes the addresses of two variables of type *Note
     PyObject*: 3be.  If the objects pointed to by `*p1' and `*p2' have
     the same type, increment their reference count and return `0'
     (success). If the objects can be converted to a common numeric
     type, replace `*p1' and `*p2' by their converted value (with
     ‘new’ reference counts), and return `0'. If no conversion is
     possible, or if some other error occurs, return `-1' (failure) and
     don’t increment the reference counts.  The call
     `PyNumber_Coerce(&o1, &o2)' is equivalent to the Python statement
     `o1, o2 = coerce(o1, o2)'.

 -- C Function: int PyNumber_CoerceEx (PyObject **p1, PyObject **p2)
     This function is similar to *Note PyNumber_Coerce(): 2c2c, except
     that it returns `1' when the conversion is not possible and when
     no error is raised.  Reference counts are still not increased in
     this case.

 -- C Function: PyObject* PyNumber_Int (PyObject *o)
     `Return value: New reference.'  

     Returns the `o' converted to an integer object on success, or
     `NULL' on failure.  If the argument is outside the integer range a
     long object will be returned instead. This is the equivalent of
     the Python expression `int(o)'.

 -- C Function: PyObject* PyNumber_Long (PyObject *o)
     `Return value: New reference.'  

     Returns the `o' converted to a long integer object on success, or
     `NULL' on failure.  This is the equivalent of the Python
     expression `long(o)'.

 -- C Function: PyObject* PyNumber_Float (PyObject *o)
     `Return value: New reference.'  

     Returns the `o' converted to a float object on success, or `NULL'
     on failure.  This is the equivalent of the Python expression
     `float(o)'.

 -- C Function: PyObject* PyNumber_Index (PyObject *o)
     Returns the `o' converted to a Python int or long on success or
     `NULL' with a *Note TypeError: 218. exception raised on failure.

     New in version 2.5.


 -- C Function: PyObject* PyNumber_ToBase (PyObject *n, int base)
     Returns the integer `n' converted to `base' as a string with a base
     marker of `'0b'', `'0o'', or `'0x'' if applicable.  When `base' is
     not 2, 8, 10, or 16, the format is `'x#num'' where x is the base.
     If `n' is not an int object, it is converted with *Note
     PyNumber_Index(): 2c31. first.

     New in version 2.6.


 -- C Function: Py_ssize_t PyNumber_AsSsize_t (PyObject *o,
          PyObject *exc)
     Returns `o' converted to a Py_ssize_t value if `o' can be
     interpreted as an integer. If `o' can be converted to a Python int
     or long but the attempt to convert to a Py_ssize_t value would
     raise an *Note OverflowError: 2dd, then the `exc' argument is the
     type of exception that will be raised (usually *Note IndexError:
     4fe. or *Note OverflowError: 2dd.).  If `exc' is `NULL', then the
     exception is cleared and the value is clipped to `PY_SSIZE_T_MIN'
     for a negative integer or `PY_SSIZE_T_MAX' for a positive integer.

     New in version 2.5.


 -- C Function: int PyIndex_Check (PyObject *o)
     Returns `1' if `o' is an index integer (has the nb_index slot of
     the tp_as_number structure filled in), and `0' otherwise.

     New in version 2.5.



File: python.info,  Node: Sequence Protocol,  Next: Mapping Protocol,  Prev: Number Protocol,  Up: Abstract Objects Layer

7.6.3 Sequence Protocol
-----------------------

 -- C Function: int PySequence_Check (PyObject *o)
     Return `1' if the object provides sequence protocol, and `0'
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PySequence_Size (PyObject *o)
 -- C Function: Py_ssize_t PySequence_Length (PyObject *o)
     Returns the number of objects in sequence `o' on success, and `-1'
     on failure.  For objects that do not provide sequence protocol,
     this is equivalent to the Python expression `len(o)'.

     Changed in version 2.5: These functions returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: PyObject* PySequence_Concat (PyObject *o1, PyObject *o2)
     `Return value: New reference.'  Return the concatenation of `o1'
     and `o2' on success, and `NULL' on failure.  This is the
     equivalent of the Python expression `o1 + o2'.

 -- C Function: PyObject* PySequence_Repeat (PyObject *o,
          Py_ssize_t count)
     `Return value: New reference.'  Return the result of repeating
     sequence object `o' `count' times, or `NULL' on failure.  This is
     the equivalent of the Python expression `o * count'.

     Changed in version 2.5: This function used an `int' type for
     `count'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PySequence_InPlaceConcat (PyObject *o1,
          PyObject *o2)
     `Return value: New reference.'  Return the concatenation of `o1'
     and `o2' on success, and `NULL' on failure.  The operation is done
     `in-place' when `o1' supports it.  This is the equivalent of the
     Python expression `o1 += o2'.

 -- C Function: PyObject* PySequence_InPlaceRepeat (PyObject *o,
          Py_ssize_t count)
     `Return value: New reference.'  Return the result of repeating
     sequence object `o' `count' times, or `NULL' on failure.  The
     operation is done `in-place' when `o' supports it.  This is the
     equivalent of the Python expression `o *= count'.

     Changed in version 2.5: This function used an `int' type for
     `count'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PySequence_GetItem (PyObject *o, Py_ssize_t i)
     `Return value: New reference.'  Return the `i'th element of `o',
     or `NULL' on failure. This is the equivalent of the Python
     expression `o[i]'.

     Changed in version 2.5: This function used an `int' type for `i'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: PyObject* PySequence_GetSlice (PyObject *o,
          Py_ssize_t i1, Py_ssize_t i2)
     `Return value: New reference.'  Return the slice of sequence
     object `o' between `i1' and `i2', or `NULL' on failure. This is
     the equivalent of the Python expression `o[i1:i2]'.

     Changed in version 2.5: This function used an `int' type for `i1'
     and `i2'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PySequence_SetItem (PyObject *o, Py_ssize_t i,
          PyObject *v)
     Assign object `v' to the `i'th element of `o'.  Raise an exception
     and return `-1' on failure; return `0' on success.  This is the
     equivalent of the Python statement `o[i] = v'.  This function `does
     not' steal a reference to `v'.

     If `v' is `NULL', the element is deleted, however this feature is
     deprecated in favour of using *Note PySequence_DelItem(): 2c40.

     Changed in version 2.5: This function used an `int' type for `i'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: int PySequence_DelItem (PyObject *o, Py_ssize_t i)
     Delete the `i'th element of object `o'.  Returns `-1' on failure.
     This is the equivalent of the Python statement `del o[i]'.

     Changed in version 2.5: This function used an `int' type for `i'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: int PySequence_SetSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2, PyObject *v)
     Assign the sequence object `v' to the slice in sequence object `o'
     from `i1' to `i2'.  Raise an exception and return `-1' on failure;
     return `0' on success.  This is the equivalent of the Python
     statement `o[i1:i2] = v'.

     If `v' is `NULL', the slice is deleted, however this feature is
     deprecated in favour of using *Note PySequence_DelSlice(): 2c42.

     Changed in version 2.5: This function used an `int' type for `i1'
     and `i2'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PySequence_DelSlice (PyObject *o, Py_ssize_t i1,
          Py_ssize_t i2)
     Delete the slice in sequence object `o' from `i1' to `i2'.
     Returns `-1' on failure.  This is the equivalent of the Python
     statement `del o[i1:i2]'.

     Changed in version 2.5: This function used an `int' type for `i1'
     and `i2'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: Py_ssize_t PySequence_Count (PyObject *o,
          PyObject *value)
     Return the number of occurrences of `value' in `o', that is,
     return the number of keys for which `o[key] == value'.  On
     failure, return `-1'.  This is equivalent to the Python expression
     `o.count(value)'.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: int PySequence_Contains (PyObject *o, PyObject *value)
     Determine if `o' contains `value'.  If an item in `o' is equal to
     `value', return `1', otherwise return `0'. On error, return `-1'.
     This is equivalent to the Python expression `value in o'.

 -- C Function: Py_ssize_t PySequence_Index (PyObject *o,
          PyObject *value)
     Return the first index `i' for which `o[i] == value'.  On error,
     return `-1'.    This is equivalent to the Python expression
     `o.index(value)'.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: PyObject* PySequence_List (PyObject *o)
     `Return value: New reference.'  Return a list object with the same
     contents as the arbitrary sequence `o'.  The returned list is
     guaranteed to be new.

 -- C Function: PyObject* PySequence_Tuple (PyObject *o)
     `Return value: New reference.'  

     Return a tuple object with the same contents as the arbitrary
     sequence `o' or `NULL' on failure.  If `o' is a tuple, a new
     reference will be returned, otherwise a tuple will be constructed
     with the appropriate contents.  This is equivalent to the Python
     expression `tuple(o)'.

 -- C Function: PyObject* PySequence_Fast (PyObject *o, const char *m)
     `Return value: New reference.'  Return the sequence `o' as a list,
     unless it is already a tuple or list, in which case `o' is
     returned.  Use *Note PySequence_Fast_GET_ITEM(): 2c49. to access
     the members of the result.  Returns `NULL' on failure.  If the
     object is not a sequence, raises *Note TypeError: 218. with `m' as
     the message text.

 -- C Function: PyObject* PySequence_Fast_GET_ITEM (PyObject *o,
          Py_ssize_t i)
     `Return value: Borrowed reference.'  Return the `i'th element of
     `o', assuming that `o' was returned by *Note PySequence_Fast():
     2c48, `o' is not `NULL', and that `i' is within bounds.

     Changed in version 2.5: This function used an `int' type for `i'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: PyObject** PySequence_Fast_ITEMS (PyObject *o)
     Return the underlying array of PyObject pointers.  Assumes that
     `o' was returned by *Note PySequence_Fast(): 2c48. and `o' is not
     `NULL'.

     Note, if a list gets resized, the reallocation may relocate the
     items array.  So, only use the underlying array pointer in
     contexts where the sequence cannot change.

     New in version 2.4.


 -- C Function: PyObject* PySequence_ITEM (PyObject *o, Py_ssize_t i)
     `Return value: New reference.'  Return the `i'th element of `o' or
     `NULL' on failure. Macro form of *Note PySequence_GetItem(): 2b0a.
     but without checking that *Note PySequence_Check(): 2c38. on `o'
     is true and without adjustment for negative indices.

     New in version 2.3.

     Changed in version 2.5: This function used an `int' type for `i'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: Py_ssize_t PySequence_Fast_GET_SIZE (PyObject *o)
     Returns the length of `o', assuming that `o' was returned by *Note
     PySequence_Fast(): 2c48. and that `o' is not `NULL'.  The size can
     also be gotten by calling *Note PySequence_Size(): 2c39. on `o',
     but *Note PySequence_Fast_GET_SIZE(): 2c4c. is faster because it
     can assume `o' is a list or tuple.


File: python.info,  Node: Mapping Protocol,  Next: Iterator Protocol,  Prev: Sequence Protocol,  Up: Abstract Objects Layer

7.6.4 Mapping Protocol
----------------------

 -- C Function: int PyMapping_Check (PyObject *o)
     Return `1' if the object provides mapping protocol, and `0'
     otherwise.  This function always succeeds.

 -- C Function: Py_ssize_t PyMapping_Size (PyObject *o)
 -- C Function: Py_ssize_t PyMapping_Length (PyObject *o)
     Returns the number of keys in object `o' on success, and `-1' on
     failure.  For objects that do not provide mapping protocol, this
     is equivalent to the Python expression `len(o)'.

     Changed in version 2.5: These functions returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: int PyMapping_DelItemString (PyObject *o, char *key)
     Remove the mapping for object `key' from the object `o'. Return
     `-1' on failure.  This is equivalent to the Python statement `del
     o[key]'.

 -- C Function: int PyMapping_DelItem (PyObject *o, PyObject *key)
     Remove the mapping for object `key' from the object `o'. Return
     `-1' on failure.  This is equivalent to the Python statement `del
     o[key]'.

 -- C Function: int PyMapping_HasKeyString (PyObject *o, char *key)
     On success, return `1' if the mapping object has the key `key' and
     `0' otherwise.  This is equivalent to `o[key]', returning `True'
     on success and `False' on an exception.  This function always
     succeeds.

 -- C Function: int PyMapping_HasKey (PyObject *o, PyObject *key)
     Return `1' if the mapping object has the key `key' and `0'
     otherwise.  This is equivalent to `o[key]', returning `True' on
     success and `False' on an exception.  This function always
     succeeds.

 -- C Function: PyObject* PyMapping_Keys (PyObject *o)
     `Return value: New reference.'  On success, return a list of the
     keys in object `o'.  On failure, return `NULL'.  This is
     equivalent to the Python expression `o.keys()'.

 -- C Function: PyObject* PyMapping_Values (PyObject *o)
     `Return value: New reference.'  On success, return a list of the
     values in object `o'.  On failure, return `NULL'. This is
     equivalent to the Python expression `o.values()'.

 -- C Function: PyObject* PyMapping_Items (PyObject *o)
     `Return value: New reference.'  On success, return a list of the
     items in object `o', where each item is a tuple containing a
     key-value pair.  On failure, return `NULL'. This is equivalent to
     the Python expression `o.items()'.

 -- C Function: PyObject* PyMapping_GetItemString (PyObject *o,
          char *key)
     `Return value: New reference.'  Return element of `o'
     corresponding to the object `key' or `NULL' on failure.  This is
     the equivalent of the Python expression `o[key]'.

 -- C Function: int PyMapping_SetItemString (PyObject *o, char *key,
          PyObject *v)
     Map the object `key' to the value `v' in object `o'. Returns `-1'
     on failure.  This is the equivalent of the Python statement
     `o[key] = v'.


File: python.info,  Node: Iterator Protocol,  Next: Old Buffer Protocol,  Prev: Mapping Protocol,  Up: Abstract Objects Layer

7.6.5 Iterator Protocol
-----------------------

New in version 2.2.

There are two functions specifically for working with iterators.

 -- C Function: int PyIter_Check (PyObject *o)
     Return true if the object `o' supports the iterator protocol.

     This function can return a false positive in the case of old-style
     classes because those classes always define a `tp_iternext' slot
     with logic that either invokes a *Note next(): 3b1. method or
     raises a *Note TypeError: 218.

 -- C Function: PyObject* PyIter_Next (PyObject *o)
     `Return value: New reference.'  Return the next value from the
     iteration `o'.  The object must be an iterator (it is up to the
     caller to check this).  If there are no remaining values, returns
     `NULL' with no exception set.  If an error occurs while retrieving
     the item, returns `NULL' and passes along the exception.

To write a loop which iterates over an iterator, the C code should look
something like this:

    PyObject *iterator = PyObject_GetIter(obj);
    PyObject *item;

    if (iterator == NULL) {
        /* propagate error */
    }

    while (item = PyIter_Next(iterator)) {
        /* do something with item */
        ...
        /* release reference when done */
        Py_DECREF(item);
    }

    Py_DECREF(iterator);

    if (PyErr_Occurred()) {
        /* propagate error */
    }
    else {
        /* continue doing useful work */
    }


File: python.info,  Node: Old Buffer Protocol,  Prev: Iterator Protocol,  Up: Abstract Objects Layer

7.6.6 Old Buffer Protocol
-------------------------

This section describes the legacy buffer protocol, which has been
introduced in Python 1.6. It is still supported but deprecated in the
Python 2.x series.  Python 3 introduces a new buffer protocol which
fixes weaknesses and shortcomings of the protocol, and has been
backported to Python 2.6.  See *Note Buffers and Memoryview Objects:
974. for more information.

 -- C Function: int PyObject_AsCharBuffer (PyObject *obj, const
          char **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a read-only memory location usable as
     character-based input.  The `obj' argument must support the
     single-segment character buffer interface.  On success, returns
     `0', sets `buffer' to the memory location and `buffer_len' to the
     buffer length.  Returns `-1' and sets a *Note TypeError: 218. on
     error.

     New in version 1.6.

     Changed in version 2.5: This function used an `int *' type for
     `buffer_len'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyObject_AsReadBuffer (PyObject *obj, const
          void **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a read-only memory location containing
     arbitrary data.  The `obj' argument must support the
     single-segment readable buffer interface.  On success, returns
     `0', sets `buffer' to the memory location and `buffer_len' to the
     buffer length.  Returns `-1' and sets a *Note TypeError: 218. on
     error.

     New in version 1.6.

     Changed in version 2.5: This function used an `int *' type for
     `buffer_len'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyObject_CheckReadBuffer (PyObject *o)
     Returns `1' if `o' supports the single-segment readable buffer
     interface.  Otherwise returns `0'.

     New in version 2.2.


 -- C Function: int PyObject_AsWriteBuffer (PyObject *obj,
          void **buffer, Py_ssize_t *buffer_len)
     Returns a pointer to a writeable memory location.  The `obj'
     argument must support the single-segment, character buffer
     interface.  On success, returns `0', sets `buffer' to the memory
     location and `buffer_len' to the buffer length.  Returns `-1' and
     sets a *Note TypeError: 218. on error.

     New in version 1.6.

     Changed in version 2.5: This function used an `int *' type for
     `buffer_len'. This might require changes in your code for properly
     supporting 64-bit systems.



File: python.info,  Node: Concrete Objects Layer,  Next: Initialization Finalization and Threads,  Prev: Abstract Objects Layer,  Up: Python/C API Reference Manual

7.7 Concrete Objects Layer
==========================

The functions in this chapter are specific to certain Python object
types.  Passing them an object of the wrong type is not a good idea; if
you receive an object from a Python program and you are not sure that
it has the right type, you must perform a type check first; for
example, to check that an object is a dictionary, use *Note
PyDict_Check(): 2c6b.  The chapter is structured like the “family
tree” of Python object types.

     Warning: While the functions described in this chapter carefully
     check the type of the objects which are passed in, many of them do
     not check for `NULL' being passed instead of a valid object.
     Allowing `NULL' to be passed in can cause memory access violations
     and immediate termination of the interpreter.

* Menu:

* Fundamental Objects::
* Numeric Objects::
* Sequence Objects::
* Mapping Objects::
* Other Objects::


File: python.info,  Node: Fundamental Objects,  Next: Numeric Objects,  Up: Concrete Objects Layer

7.7.1 Fundamental Objects
-------------------------

This section describes Python type objects and the singleton object
`None'.

* Menu:

* Type Objects: Type Objects<2>.
* The None Object::


File: python.info,  Node: Type Objects<2>,  Next: The None Object,  Up: Fundamental Objects

7.7.1.1 Type Objects
....................

 -- C Type: PyTypeObject
     The C structure of the objects used to describe built-in types.

 -- C Variable: PyObject* PyType_Type
     This is the type object for type objects; it is the same object as
     `type' and `types.TypeType' in the Python layer.

 -- C Function: int PyType_Check (PyObject *o)
     Return true if the object `o' is a type object, including
     instances of types derived from the standard type object.  Return
     false in all other cases.

 -- C Function: int PyType_CheckExact (PyObject *o)
     Return true if the object `o' is a type object, but not a subtype
     of the standard type object.  Return false in all other cases.

     New in version 2.2.


 -- C Function: unsigned int PyType_ClearCache ()
     Clear the internal lookup cache. Return the current version tag.

     New in version 2.6.


 -- C Function: void PyType_Modified (PyTypeObject *type)
     Invalidate the internal lookup cache for the type and all of its
     subtypes.  This function must be called after any manual
     modification of the attributes or base classes of the type.

     New in version 2.6.


 -- C Function: int PyType_HasFeature (PyObject *o, int feature)
     Return true if the type object `o' sets the feature `feature'.
     Type features are denoted by single bit flags.

 -- C Function: int PyType_IS_GC (PyObject *o)
     Return true if the type object includes support for the cycle
     detector; this tests the type flag *Note Py_TPFLAGS_HAVE_GC: 2ab6.

     New in version 2.0.


 -- C Function: int PyType_IsSubtype (PyTypeObject *a, PyTypeObject *b)
     Return true if `a' is a subtype of `b'.

     New in version 2.2.

     This function only checks for actual subtypes, which means that
     *Note __subclasscheck__(): 748. is not called on `b'.  Call *Note
     PyObject_IsSubclass(): 2bf9. to do the same check that *Note
     issubclass(): 333.  would do.

 -- C Function: PyObject* PyType_GenericAlloc (PyTypeObject *type,
          Py_ssize_t nitems)
     `Return value: New reference.'

     New in version 2.2.

     Changed in version 2.5: This function used an `int' type for
     `nitems'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyType_GenericNew (PyTypeObject *type,
          PyObject *args, PyObject *kwds)
     `Return value: New reference.'

     New in version 2.2.


 -- C Function: int PyType_Ready (PyTypeObject *type)
     Finalize a type object.  This should be called on all type objects
     to finish their initialization.  This function is responsible for
     adding inherited slots from a type’s base class.  Return `0' on
     success, or return `-1' and sets an exception on error.

     New in version 2.2.



File: python.info,  Node: The None Object,  Prev: Type Objects<2>,  Up: Fundamental Objects

7.7.1.2 The `None' Object
.........................

Note that the *Note PyTypeObject: 2aa0. for `None' is not directly
exposed in the Python/C API.  Since `None' is a singleton, testing for
object identity (using `==' in C) is sufficient. There is no
`PyNone_Check()' function for the same reason.

 -- C Variable: PyObject* Py_None
     The Python `None' object, denoting lack of value.  This object has
     no methods.  It needs to be treated just like any other object
     with respect to reference counts.

 -- C Macro: Py_RETURN_NONE
     Properly handle returning *Note Py_None: 2a6b. from within a C
     function.

     New in version 2.4.



File: python.info,  Node: Numeric Objects,  Next: Sequence Objects,  Prev: Fundamental Objects,  Up: Concrete Objects Layer

7.7.2 Numeric Objects
---------------------

* Menu:

* Plain Integer Objects::
* Boolean Objects: Boolean Objects<2>.
* Long Integer Objects::
* Floating Point Objects::
* Complex Number Objects::


File: python.info,  Node: Plain Integer Objects,  Next: Boolean Objects<2>,  Up: Numeric Objects

7.7.2.1 Plain Integer Objects
.............................

 -- C Type: PyIntObject
     This subtype of *Note PyObject: 3be. represents a Python integer
     object.

 -- C Variable: PyTypeObject PyInt_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     plain integer type.  This is the same object as `int' and
     `types.IntType'.

 -- C Function: int PyInt_Check (PyObject *o)
     Return true if `o' is of type *Note PyInt_Type: 2c83. or a subtype
     of *Note PyInt_Type: 2c83.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyInt_CheckExact (PyObject *o)
     Return true if `o' is of type *Note PyInt_Type: 2c83, but not a
     subtype of *Note PyInt_Type: 2c83.

     New in version 2.2.


 -- C Function: PyObject* PyInt_FromString (char *str, char **pend,
          int base)
     `Return value: New reference.'  Return a new *Note PyIntObject:
     2c82. or *Note PyLongObject: 2c87. based on the string value in
     `str', which is interpreted according to the radix in `base'.  If
     `pend' is non-`NULL', `*pend' will point to the first character in
     `str' which follows the representation of the number.  If `base'
     is `0', the radix will be determined based on the leading
     characters of `str': if `str' starts with `'0x'' or `'0X'', radix
     16 will be used; if `str' starts with `'0'', radix 8 will be used;
     otherwise radix 10 will be used.  If `base' is not `0', it must be
     between `2' and `36', inclusive.  Leading spaces are ignored.  If
     there are no digits, *Note ValueError: 236. will be raised.  If
     the string represents a number too large to be contained within
     the machine’s `long int' type and overflow warnings are being
     suppressed, a *Note PyLongObject: 2c87. will be returned.  If
     overflow warnings are not being suppressed, `NULL' will be
     returned in this case.

 -- C Function: PyObject* PyInt_FromLong (long ival)
     `Return value: New reference.'  Create a new integer object with a
     value of `ival'.

     The current implementation keeps an array of integer objects for
     all integers between `-5' and `256', when you create an int in
     that range you actually just get back a reference to the existing
     object. So it should be possible to change the value of `1'.  I
     suspect the behaviour of Python in this case is undefined. :-)

 -- C Function: PyObject* PyInt_FromSsize_t (Py_ssize_t ival)
     `Return value: New reference.'  Create a new integer object with a
     value of `ival'. If the value is larger than `LONG_MAX' or smaller
     than `LONG_MIN', a long integer object is returned.

     New in version 2.5.


 -- C Function: PyObject* PyInt_FromSize_t (size_t ival)
     Create a new integer object with a value of `ival'. If the value
     exceeds `LONG_MAX', a long integer object is returned.

     New in version 2.5.


 -- C Function: long PyInt_AsLong (PyObject *io)
     Will first attempt to cast the object to a *Note PyIntObject:
     2c82, if it is not already one, and then return its value. If
     there is an error, `-1' is returned, and the caller should check
     `PyErr_Occurred()' to find out whether there was an error, or
     whether the value just happened to be `-1'.

 -- C Function: long PyInt_AS_LONG (PyObject *io)
     Return the value of the object `io'.  No error checking is
     performed.

 -- C Function: unsigned long PyInt_AsUnsignedLongMask (PyObject *io)
     Will first attempt to cast the object to a *Note PyIntObject:
     2c82. or *Note PyLongObject: 2c87, if it is not already one, and
     then return its value as unsigned long.  This function does not
     check for overflow.

     New in version 2.3.


 -- C Function: unsigned PY_LONG_LONG PyInt_AsUnsignedLongLongMask
          (PyObject *io)
     Will first attempt to cast the object to a *Note PyIntObject:
     2c82. or *Note PyLongObject: 2c87, if it is not already one, and
     then return its value as unsigned long long, without checking for
     overflow.

     New in version 2.3.


 -- C Function: Py_ssize_t PyInt_AsSsize_t (PyObject *io)
     Will first attempt to cast the object to a *Note PyIntObject:
     2c82. or *Note PyLongObject: 2c87, if it is not already one, and
     then return its value as `Py_ssize_t'.

     New in version 2.5.


 -- C Function: long PyInt_GetMax ()
     Return the system’s idea of the largest integer it can handle
     (`LONG_MAX', as defined in the system header files).

 -- C Function: int PyInt_ClearFreeList ()
     Clear the integer free list. Return the number of items that could
     not be freed.

     New in version 2.6.



File: python.info,  Node: Boolean Objects<2>,  Next: Long Integer Objects,  Prev: Plain Integer Objects,  Up: Numeric Objects

7.7.2.2 Boolean Objects
.......................

Booleans in Python are implemented as a subclass of integers.  There
are only two booleans, `Py_False' and `Py_True'.  As such, the normal
creation and deletion functions don’t apply to booleans.  The
following macros are available, however.

 -- C Function: int PyBool_Check (PyObject *o)
     Return true if `o' is of type `PyBool_Type'.

     New in version 2.3.


 -- C Variable: PyObject* Py_False
     The Python `False' object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Variable: PyObject* Py_True
     The Python `True' object.  This object has no methods.  It needs
     to be treated just like any other object with respect to reference
     counts.

 -- C Macro: Py_RETURN_FALSE
     Return `Py_False' from a function, properly incrementing its
     reference count.

     New in version 2.4.


 -- C Macro: Py_RETURN_TRUE
     Return `Py_True' from a function, properly incrementing its
     reference count.

     New in version 2.4.


 -- C Function: PyObject* PyBool_FromLong (long v)
     `Return value: New reference.'  Return a new reference to
     `Py_True' or `Py_False' depending on the truth value of `v'.

     New in version 2.3.



File: python.info,  Node: Long Integer Objects,  Next: Floating Point Objects,  Prev: Boolean Objects<2>,  Up: Numeric Objects

7.7.2.3 Long Integer Objects
............................

 -- C Type: PyLongObject
     This subtype of *Note PyObject: 3be. represents a Python long
     integer object.

 -- C Variable: PyTypeObject PyLong_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     long integer type.  This is the same object as `long' and
     `types.LongType'.

 -- C Function: int PyLong_Check (PyObject *p)
     Return true if its argument is a *Note PyLongObject: 2c87. or a
     subtype of *Note PyLongObject: 2c87.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyLong_CheckExact (PyObject *p)
     Return true if its argument is a *Note PyLongObject: 2c87, but not
     a subtype of *Note PyLongObject: 2c87.

     New in version 2.2.


 -- C Function: PyObject* PyLong_FromLong (long v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from `v', or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLong (unsigned long v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from a C `unsigned long', or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromSsize_t (Py_ssize_t v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from a C `Py_ssize_t', or `NULL' on failure.

     New in version 2.6.


 -- C Function: PyObject* PyLong_FromSize_t (size_t v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from a C `size_t', or `NULL' on failure.

     New in version 2.6.


 -- C Function: PyObject* PyLong_FromLongLong (PY_LONG_LONG v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from a C `long long', or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromUnsignedLongLong (unsigned
          PY_LONG_LONG v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from a C `unsigned long long', or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromDouble (double v)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. object from the integer part of `v', or `NULL' on failure.

 -- C Function: PyObject* PyLong_FromString (char *str, char **pend,
          int base)
     `Return value: New reference.'  Return a new *Note PyLongObject:
     2c87. based on the string value in `str', which is interpreted
     according to the radix in `base'.  If `pend' is non-`NULL',
     `*pend' will point to the first character in `str' which follows
     the representation of the number.  If `base' is `0', the radix
     will be determined based on the leading characters of `str': if
     `str' starts with `'0x'' or `'0X'', radix 16 will be used; if
     `str' starts with `'0'', radix 8 will be used; otherwise radix 10
     will be used.  If `base' is not `0', it must be between `2' and
     `36', inclusive.  Leading spaces are ignored.  If there are no
     digits, *Note ValueError: 236. will be raised.

 -- C Function: PyObject* PyLong_FromUnicode (Py_UNICODE *u,
          Py_ssize_t length, int base)
     `Return value: New reference.'  Convert a sequence of Unicode
     digits to a Python long integer value.  The first parameter, `u',
     points to the first character of the Unicode string, `length'
     gives the number of characters, and `base' is the radix for the
     conversion.  The radix must be in the range [2, 36]; if it is out
     of range, *Note ValueError: 236.  will be raised.

     New in version 1.6.

     Changed in version 2.5: This function used an `int' for `length'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: PyObject* PyLong_FromVoidPtr (void *p)
     `Return value: New reference.'  Create a Python integer or long
     integer from the pointer `p'. The pointer value can be retrieved
     from the resulting value using *Note PyLong_AsVoidPtr(): 2ca8.

     New in version 1.5.2.

     Changed in version 2.5: If the integer is larger than LONG_MAX, a
     positive long integer is returned.


 -- C Function: long PyLong_AsLong (PyObject *pylong)
     Return a C `long' representation of the contents of `pylong'.  If
     `pylong' is greater than `LONG_MAX', an *Note OverflowError: 2dd.
     is raised and `-1' will be returned.

 -- C Function: long PyLong_AsLongAndOverflow (PyObject *pylong,
          int *overflow)
     Return a C `long' representation of the contents of `pylong'.  If
     `pylong' is greater than `LONG_MAX' or less than `LONG_MIN', set
     `*overflow' to `1' or `-1', respectively, and return `-1';
     otherwise, set `*overflow' to `0'.  If any other exception occurs
     (for example a TypeError or MemoryError), then `-1' will be
     returned and `*overflow' will be `0'.

     New in version 2.7.


 -- C Function: PY_LONG_LONG PyLong_AsLongLongAndOverflow
          (PyObject *pylong, int *overflow)
     Return a C `long long' representation of the contents of `pylong'.
     If `pylong' is greater than `PY_LLONG_MAX' or less than
     `PY_LLONG_MIN', set `*overflow' to `1' or `-1', respectively, and
     return `-1'; otherwise, set `*overflow' to `0'.  If any other
     exception occurs (for example a TypeError or MemoryError), then
     `-1' will be returned and `*overflow' will be `0'.

     New in version 2.7.


 -- C Function: Py_ssize_t PyLong_AsSsize_t (PyObject *pylong)
     Return a C `Py_ssize_t' representation of the contents of
     `pylong'.  If `pylong' is greater than `PY_SSIZE_T_MAX', an *Note
     OverflowError: 2dd. is raised and `-1' will be returned.

     New in version 2.6.


 -- C Function: unsigned long PyLong_AsUnsignedLong (PyObject *pylong)
     Return a C `unsigned long' representation of the contents of
     `pylong'.  If `pylong' is greater than `ULONG_MAX', an *Note
     OverflowError: 2dd. is raised.

 -- C Function: PY_LONG_LONG PyLong_AsLongLong (PyObject *pylong)
     Return a C `long long' from a Python long integer.  If `pylong'
     cannot be represented as a `long long', an *Note OverflowError:
     2dd. is raised and `-1' is returned.

     New in version 2.2.


 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLong
          (PyObject *pylong)
     Return a C `unsigned long long' from a Python long integer. If
     `pylong' cannot be represented as an `unsigned long long', an
     *Note OverflowError: 2dd. is raised and `(unsigned long long)-1' is
     returned.

     New in version 2.2.

     Changed in version 2.7: A negative `pylong' now raises *Note
     OverflowError: 2dd, not *Note TypeError: 218.


 -- C Function: unsigned long PyLong_AsUnsignedLongMask (PyObject *io)
     Return a C `unsigned long' from a Python long integer, without
     checking for overflow.

     New in version 2.3.


 -- C Function: unsigned PY_LONG_LONG PyLong_AsUnsignedLongLongMask
          (PyObject *io)
     Return a C `unsigned long long' from a Python long integer, without
     checking for overflow.

     New in version 2.3.


 -- C Function: double PyLong_AsDouble (PyObject *pylong)
     Return a C `double' representation of the contents of `pylong'.  If
     `pylong' cannot be approximately represented as a `double', an
     *Note OverflowError: 2dd. exception is raised and `-1.0' will be
     returned.

 -- C Function: void* PyLong_AsVoidPtr (PyObject *pylong)
     Convert a Python integer or long integer `pylong' to a C `void'
     pointer.  If `pylong' cannot be converted, an *Note OverflowError:
     2dd. will be raised.  This is only assured to produce a usable
     `void' pointer for values created with *Note PyLong_FromVoidPtr():
     2ca7.

     New in version 1.5.2.

     Changed in version 2.5: For values outside 0..LONG_MAX, both
     signed and unsigned integers are accepted.



File: python.info,  Node: Floating Point Objects,  Next: Complex Number Objects,  Prev: Long Integer Objects,  Up: Numeric Objects

7.7.2.4 Floating Point Objects
..............................

 -- C Type: PyFloatObject
     This subtype of *Note PyObject: 3be. represents a Python floating
     point object.

 -- C Variable: PyTypeObject PyFloat_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     floating point type.  This is the same object as `float' and
     `types.FloatType'.

 -- C Function: int PyFloat_Check (PyObject *p)
     Return true if its argument is a *Note PyFloatObject: 2cb4. or a
     subtype of *Note PyFloatObject: 2cb4.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyFloat_CheckExact (PyObject *p)
     Return true if its argument is a *Note PyFloatObject: 2cb4, but
     not a subtype of *Note PyFloatObject: 2cb4.

     New in version 2.2.


 -- C Function: PyObject* PyFloat_FromString (PyObject *str,
          char **pend)
     `Return value: New reference.'  Create a *Note PyFloatObject:
     2cb4. object based on the string value in `str', or `NULL' on
     failure.  The `pend' argument is ignored.  It remains only for
     backward compatibility.

 -- C Function: PyObject* PyFloat_FromDouble (double v)
     `Return value: New reference.'  Create a *Note PyFloatObject:
     2cb4. object from `v', or `NULL' on failure.

 -- C Function: double PyFloat_AsDouble (PyObject *pyfloat)
     Return a C `double' representation of the contents of `pyfloat'.
     If `pyfloat' is not a Python floating point object but has a *Note
     __float__(): 785.  method, this method will first be called to
     convert `pyfloat' into a float.  This method returns `-1.0' upon
     failure, so one should call *Note PyErr_Occurred(): 2a63. to check
     for errors.

 -- C Function: double PyFloat_AS_DOUBLE (PyObject *pyfloat)
     Return a C `double' representation of the contents of `pyfloat',
     but without error checking.

 -- C Function: PyObject* PyFloat_GetInfo (void)
     Return a structseq instance which contains information about the
     precision, minimum and maximum values of a float. It’s a thin
     wrapper around the header file `float.h'.

     New in version 2.6.


 -- C Function: double PyFloat_GetMax ()
     Return the maximum representable finite float `DBL_MAX' as C
     `double'.

     New in version 2.6.


 -- C Function: double PyFloat_GetMin ()
     Return the minimum normalized positive float `DBL_MIN' as C
     `double'.

     New in version 2.6.


 -- C Function: int PyFloat_ClearFreeList ()
     Clear the float free list. Return the number of items that could
     not be freed.

     New in version 2.6.


 -- C Function: void PyFloat_AsString (char *buf, PyFloatObject *v)
     Convert the argument `v' to a string, using the same rules as
     *Note str(): 1ea. The length of `buf' should be at least 100.

     This function is unsafe to call because it writes to a buffer whose
     length it does not know.

     Deprecated since version 2.7: Use `PyObject_Str()' or
     `PyOS_double_to_string()' instead.


 -- C Function: void PyFloat_AsReprString (char *buf, PyFloatObject *v)
     Same as PyFloat_AsString, except uses the same rules as *Note
     repr(): 1c6.  The length of `buf' should be at least 100.

     This function is unsafe to call because it writes to a buffer whose
     length it does not know.

     Deprecated since version 2.7: Use `PyObject_Repr()' or
     `PyOS_double_to_string()' instead.



File: python.info,  Node: Complex Number Objects,  Prev: Floating Point Objects,  Up: Numeric Objects

7.7.2.5 Complex Number Objects
..............................

Python’s complex number objects are implemented as two distinct types
when viewed from the C API:  one is the Python object exposed to Python
programs, and the other is a C structure which represents the actual
complex number value.  The API provides functions for working with both.

* Menu:

* Complex Numbers as C Structures::
* Complex Numbers as Python Objects::


File: python.info,  Node: Complex Numbers as C Structures,  Next: Complex Numbers as Python Objects,  Up: Complex Number Objects

7.7.2.6 Complex Numbers as C Structures
.......................................

Note that the functions which accept these structures as parameters and
return them as results do so `by value' rather than dereferencing them
through pointers.  This is consistent throughout the API.

 -- C Type: Py_complex
     The C structure which corresponds to the value portion of a Python
     complex number object.  Most of the functions for dealing with
     complex number objects use structures of this type as input or
     output values, as appropriate.  It is defined as:

         typedef struct {
            double real;
            double imag;
         } Py_complex;

 -- C Function: Py_complex _Py_c_sum (Py_complex left, Py_complex right)
     Return the sum of two complex numbers, using the C *Note
     Py_complex: 2bba.  representation.

 -- C Function: Py_complex _Py_c_diff (Py_complex left,
          Py_complex right)
     Return the difference between two complex numbers, using the C
     *Note Py_complex: 2bba. representation.

 -- C Function: Py_complex _Py_c_neg (Py_complex complex)
     Return the negation of the complex number `complex', using the C
     *Note Py_complex: 2bba. representation.

 -- C Function: Py_complex _Py_c_prod (Py_complex left,
          Py_complex right)
     Return the product of two complex numbers, using the C *Note
     Py_complex: 2bba.  representation.

 -- C Function: Py_complex _Py_c_quot (Py_complex dividend,
          Py_complex divisor)
     Return the quotient of two complex numbers, using the C *Note
     Py_complex: 2bba.  representation.

     If `divisor' is null, this method returns zero and sets `errno' to
     `EDOM'.

 -- C Function: Py_complex _Py_c_pow (Py_complex num, Py_complex exp)
     Return the exponentiation of `num' by `exp', using the C *Note
     Py_complex: 2bba.  representation.

     If `num' is null and `exp' is not a positive real number, this
     method returns zero and sets `errno' to `EDOM'.


File: python.info,  Node: Complex Numbers as Python Objects,  Prev: Complex Numbers as C Structures,  Up: Complex Number Objects

7.7.2.7 Complex Numbers as Python Objects
.........................................

 -- C Type: PyComplexObject
     This subtype of *Note PyObject: 3be. represents a Python complex
     number object.

 -- C Variable: PyTypeObject PyComplex_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     complex number type. It is the same object as `complex' and
     `types.ComplexType'.

 -- C Function: int PyComplex_Check (PyObject *p)
     Return true if its argument is a *Note PyComplexObject: 2cca. or a
     subtype of *Note PyComplexObject: 2cca.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyComplex_CheckExact (PyObject *p)
     Return true if its argument is a *Note PyComplexObject: 2cca, but
     not a subtype of *Note PyComplexObject: 2cca.

     New in version 2.2.


 -- C Function: PyObject* PyComplex_FromCComplex (Py_complex v)
     `Return value: New reference.'  Create a new Python complex number
     object from a C *Note Py_complex: 2bba. value.

 -- C Function: PyObject* PyComplex_FromDoubles (double real,
          double imag)
     `Return value: New reference.'  Return a new *Note
     PyComplexObject: 2cca. object from `real' and `imag'.

 -- C Function: double PyComplex_RealAsDouble (PyObject *op)
     Return the real part of `op' as a C `double'.

 -- C Function: double PyComplex_ImagAsDouble (PyObject *op)
     Return the imaginary part of `op' as a C `double'.

 -- C Function: Py_complex PyComplex_AsCComplex (PyObject *op)
     Return the *Note Py_complex: 2bba. value of the complex number
     `op'.  Upon failure, this method returns `-1.0' as a real value.

     Changed in version 2.6: If `op' is not a Python complex number
     object but has a *Note __complex__(): 2fa.  method, this method
     will first be called to convert `op' to a Python complex number
     object.



File: python.info,  Node: Sequence Objects,  Next: Mapping Objects,  Prev: Numeric Objects,  Up: Concrete Objects Layer

7.7.3 Sequence Objects
----------------------

Generic operations on sequence objects were discussed in the previous
chapter; this section deals with the specific kinds of sequence objects
that are intrinsic to the Python language.

* Menu:

* Byte Array Objects::
* String/Bytes Objects::
* Unicode Objects and Codecs::
* Buffers and Memoryview Objects::
* Tuple Objects::
* List Objects::


File: python.info,  Node: Byte Array Objects,  Next: String/Bytes Objects,  Up: Sequence Objects

7.7.3.1 Byte Array Objects
..........................

New in version 2.6.

 -- C Type: PyByteArrayObject
     This subtype of *Note PyObject: 3be. represents a Python bytearray
     object.

 -- C Variable: PyTypeObject PyByteArray_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     bytearray type; it is the same object as `bytearray' in the Python
     layer.

* Menu:

* Type check macros::
* Direct API functions::
* Macros::


File: python.info,  Node: Type check macros,  Next: Direct API functions,  Up: Byte Array Objects

7.7.3.2 Type check macros
.........................

 -- C Function: int PyByteArray_Check (PyObject *o)
     Return true if the object `o' is a bytearray object or an instance
     of a subtype of the bytearray type.

 -- C Function: int PyByteArray_CheckExact (PyObject *o)
     Return true if the object `o' is a bytearray object, but not an
     instance of a subtype of the bytearray type.


File: python.info,  Node: Direct API functions,  Next: Macros,  Prev: Type check macros,  Up: Byte Array Objects

7.7.3.3 Direct API functions
............................

 -- C Function: PyObject* PyByteArray_FromObject (PyObject *o)
     Return a new bytearray object from any object, `o', that
     implements the buffer protocol.


 -- C Function: PyObject* PyByteArray_FromStringAndSize (const
          char *string, Py_ssize_t len)
     Create a new bytearray object from `string' and its length, `len'.
     On failure, `NULL' is returned.

 -- C Function: PyObject* PyByteArray_Concat (PyObject *a, PyObject *b)
     Concat bytearrays `a' and `b' and return a new bytearray with the
     result.

 -- C Function: Py_ssize_t PyByteArray_Size (PyObject *bytearray)
     Return the size of `bytearray' after checking for a `NULL' pointer.

 -- C Function: char* PyByteArray_AsString (PyObject *bytearray)
     Return the contents of `bytearray' as a char array after checking
     for a `NULL' pointer.

 -- C Function: int PyByteArray_Resize (PyObject *bytearray,
          Py_ssize_t len)
     Resize the internal buffer of `bytearray' to `len'.


File: python.info,  Node: Macros,  Prev: Direct API functions,  Up: Byte Array Objects

7.7.3.4 Macros
..............

These macros trade safety for speed and they don’t check pointers.

 -- C Function: char* PyByteArray_AS_STRING (PyObject *bytearray)
     Macro version of *Note PyByteArray_AsString(): 2cdf.

 -- C Function: Py_ssize_t PyByteArray_GET_SIZE (PyObject *bytearray)
     Macro version of *Note PyByteArray_Size(): 2cde.


File: python.info,  Node: String/Bytes Objects,  Next: Unicode Objects and Codecs,  Prev: Byte Array Objects,  Up: Sequence Objects

7.7.3.5 String/Bytes Objects
............................

These functions raise *Note TypeError: 218. when expecting a string
parameter and are called with a non-string parameter.

     Note: These functions have been renamed to PyBytes_* in Python
     3.x. Unless otherwise noted, the PyBytes functions available in
     3.x are aliased to their PyString_* equivalents to help porting.

 -- C Type: PyStringObject
     This subtype of *Note PyObject: 3be. represents a Python string
     object.

 -- C Variable: PyTypeObject PyString_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     string type; it is the same object as `str' and `types.StringType'
     in the Python layer. .

 -- C Function: int PyString_Check (PyObject *o)
     Return true if the object `o' is a string object or an instance of
     a subtype of the string type.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyString_CheckExact (PyObject *o)
     Return true if the object `o' is a string object, but not an
     instance of a subtype of the string type.

     New in version 2.2.


 -- C Function: PyObject* PyString_FromString (const char *v)
     `Return value: New reference.'  Return a new string object with a
     copy of the string `v' as value on success, and `NULL' on failure.
     The parameter `v' must not be `NULL'; it will not be checked.

 -- C Function: PyObject* PyString_FromStringAndSize (const char *v,
          Py_ssize_t len)
     `Return value: New reference.'  Return a new string object with a
     copy of the string `v' as value and length `len' on success, and
     `NULL' on failure.  If `v' is `NULL', the contents of the string
     are uninitialized.

     Changed in version 2.5: This function used an `int' type for
     `len'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyString_FromFormat (const char *format, ...)
     `Return value: New reference.'  Take a C `printf()'-style `format'
     string and a variable number of arguments, calculate the size of
     the resulting Python string and return a string with the values
     formatted into it.  The variable arguments must be C types and
     must correspond exactly to the format characters in the `format'
     string.  The following format characters are allowed:

     Format Characters       Type                Comment
     --------------------------------------------------------------------------------- 
     `%%'                    `n/a'               The literal % character.
     `%c'                    int                 A single character, represented as
                                                 a C int.
     `%d'                    int                 Exactly equivalent to
                                                 `printf("%d")'.
     `%u'                    unsigned int        Exactly equivalent to
                                                 `printf("%u")'.
     `%ld'                   long                Exactly equivalent to
                                                 `printf("%ld")'.
     `%lu'                   unsigned long       Exactly equivalent to
                                                 `printf("%lu")'.
     `%lld'                  long long           Exactly equivalent to
                                                 `printf("%lld")'.
     `%llu'                  unsigned long long  Exactly equivalent to
                                                 `printf("%llu")'.
     `%zd'                   Py_ssize_t          Exactly equivalent to
                                                 `printf("%zd")'.
     `%zu'                   size_t              Exactly equivalent to
                                                 `printf("%zu")'.
     `%i'                    int                 Exactly equivalent to
                                                 `printf("%i")'.
     `%x'                    int                 Exactly equivalent to
                                                 `printf("%x")'.
     `%s'                    char*               A null-terminated C character array.
     `%p'                    void*               The hex representation of a C
                                                 pointer. Mostly equivalent to
                                                 `printf("%p")' except that it is
                                                 guaranteed to start with the
                                                 literal `0x' regardless of what the
                                                 platform’s `printf' yields.

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

          Note: The `“%lld”' and `“%llu”' format specifiers are
          only available when `HAVE_LONG_LONG' is defined.

     Changed in version 2.7: Support for `“%lld”' and `“%llu”'
     added.


 -- C Function: PyObject* PyString_FromFormatV (const char *format,
          va_list vargs)
     `Return value: New reference.'  Identical to *Note
     PyString_FromFormat(): 2b49. except that it takes exactly two
     arguments.

 -- C Function: Py_ssize_t PyString_Size (PyObject *string)
     Return the length of the string in string object `string'.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: Py_ssize_t PyString_GET_SIZE (PyObject *string)
     Macro form of *Note PyString_Size(): 2cec. but without error
     checking.

     Changed in version 2.5: This macro returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: char* PyString_AsString (PyObject *string)
     Return a NUL-terminated representation of the contents of
     `string'.  The pointer refers to the internal buffer of `string',
     not a copy.  The data must not be modified in any way, unless the
     string was just created using `PyString_FromStringAndSize(NULL,
     size)'. It must not be deallocated.  If `string' is a Unicode
     object, this function computes the default encoding of `string'
     and operates on that.  If `string' is not a string object at all,
     *Note PyString_AsString(): 2cee. returns `NULL' and raises *Note
     TypeError: 218.

 -- C Function: char* PyString_AS_STRING (PyObject *string)
     Macro form of *Note PyString_AsString(): 2cee. but without error
     checking.  Only string objects are supported; no Unicode objects
     should be passed.

 -- C Function: int PyString_AsStringAndSize (PyObject *obj,
          char **buffer, Py_ssize_t *length)
     Return a NUL-terminated representation of the contents of the
     object `obj' through the output variables `buffer' and `length'.

     The function accepts both string and Unicode objects as input. For
     Unicode objects it returns the default encoded version of the
     object.  If `length' is `NULL', the resulting buffer may not
     contain NUL characters; if it does, the function returns `-1' and
     a *Note TypeError: 218. is raised.

     The buffer refers to an internal string buffer of `obj', not a
     copy. The data must not be modified in any way, unless the string
     was just created using `PyString_FromStringAndSize(NULL, size)'.
     It must not be deallocated.  If `string' is a Unicode object, this
     function computes the default encoding of `string' and operates on
     that.  If `string' is not a string object at all, *Note
     PyString_AsStringAndSize(): 2cf0. returns `-1' and raises *Note
     TypeError: 218.

     Changed in version 2.5: This function used an `int *' type for
     `length'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: void PyString_Concat (PyObject **string,
          PyObject *newpart)
     Create a new string object in `*string' containing the contents of
     `newpart' appended to `string'; the caller will own the new
     reference.  The reference to the old value of `string' will be
     stolen.  If the new string cannot be created, the old reference to
     `string' will still be discarded and the value of `*string' will
     be set to `NULL'; the appropriate exception will be set.

 -- C Function: void PyString_ConcatAndDel (PyObject **string,
          PyObject *newpart)
     Create a new string object in `*string' containing the contents of
     `newpart' appended to `string'.  This version decrements the
     reference count of `newpart'.

 -- C Function: int _PyString_Resize (PyObject **string,
          Py_ssize_t newsize)
     A way to resize a string object even though it is “immutable”.
     Only use this to build up a brand new string object; don’t use
     this if the string may already be known in other parts of the
     code.  It is an error to call this function if the refcount on the
     input string object is not one. Pass the address of an existing
     string object as an lvalue (it may be written into), and the new
     size desired.  On success, `*string' holds the resized string
     object and `0' is returned; the address in `*string' may differ
     from its input value.  If the reallocation fails, the original
     string object at `*string' is deallocated, `*string' is set to
     `NULL', a memory exception is set, and `-1' is returned.

     Changed in version 2.5: This function used an `int' type for
     `newsize'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyString_Format (PyObject *format,
          PyObject *args)
     `Return value: New reference.'  Return a new string object from
     `format' and `args'. Analogous to `format % args'.  The `args'
     argument must be a tuple or dict.

 -- C Function: void PyString_InternInPlace (PyObject **string)
     Intern the argument `*string' in place.  The argument must be the
     address of a pointer variable pointing to a Python string object.
     If there is an existing interned string that is the same as
     `*string', it sets `*string' to it (decrementing the reference
     count of the old string object and incrementing the reference
     count of the interned string object), otherwise it leaves `*string'
     alone and interns it (incrementing its reference count).
     (Clarification: even though there is a lot of talk about reference
     counts, think of this function as reference-count-neutral; you own
     the object after the call if and only if you owned it before the
     call.)

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_InternFromString (const char *v)
     `Return value: New reference.'  A combination of *Note
     PyString_FromString(): 2af1. and *Note PyString_InternInPlace():
     2cf5, returning either a new string object that has been interned,
     or a new (“owned”) reference to an earlier interned string
     object with the same value.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     `Return value: New reference.'  Create an object by decoding
     `size' bytes of the encoded buffer `s' using the codec registered
     for `encoding'.  `encoding' and `errors' have the same meaning as
     the parameters of the same name in the *Note unicode(): 1f5.
     built-in function.  The codec to be used is looked up using the
     Python codec registry.  Return `NULL' if an exception was raised
     by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyString_AsDecodedObject (PyObject *str,
          const char *encoding, const char *errors)
     `Return value: New reference.'  Decode a string object by passing
     it to the codec registered for `encoding' and return the result as
     Python object. `encoding' and `errors' have the same meaning as
     the parameters of the same name in the string `encode()' method.
     The codec to be used is looked up using the Python codec registry.
     Return `NULL' if an exception was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

 -- C Function: PyObject* PyString_Encode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     `Return value: New reference.'  Encode the `char' buffer of the
     given size by passing it to the codec registered for `encoding'
     and return a Python object. `encoding' and `errors' have the same
     meaning as the parameters of the same name in the string
     `encode()' method. The codec to be used is looked up using the
     Python codec registry.  Return `NULL' if an exception was raised
     by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyString_AsEncodedObject (PyObject *str,
          const char *encoding, const char *errors)
     `Return value: New reference.'  Encode a string object using the
     codec registered for `encoding' and return the result as Python
     object. `encoding' and `errors' have the same meaning as the
     parameters of the same name in the string `encode()' method. The
     codec to be used is looked up using the Python codec registry.
     Return `NULL' if an exception was raised by the codec.

          Note: This function is not available in 3.x and does not have
          a PyBytes alias.


File: python.info,  Node: Unicode Objects and Codecs,  Next: Buffers and Memoryview Objects,  Prev: String/Bytes Objects,  Up: Sequence Objects

7.7.3.6 Unicode Objects and Codecs
..................................

* Menu:

* Unicode Objects::
* Built-in Codecs::
* Methods and Slot Functions::


File: python.info,  Node: Unicode Objects,  Next: Built-in Codecs,  Up: Unicode Objects and Codecs

7.7.3.7 Unicode Objects
.......................

* Menu:

* Unicode Type::
* Unicode Character Properties::
* Plain Py_UNICODE::
* wchar_t Support::


File: python.info,  Node: Unicode Type,  Next: Unicode Character Properties,  Up: Unicode Objects

7.7.3.8 Unicode Type
....................

These are the basic Unicode object types used for the Unicode
implementation in Python:

 -- C Type: Py_UNICODE
     This type represents the storage type which is used by Python
     internally as basis for holding Unicode ordinals.  Python’s
     default builds use a 16-bit type for *Note Py_UNICODE: ab3. and
     store Unicode values internally as UCS2. It is also possible to
     build a UCS4 version of Python (most recent Linux distributions
     come with UCS4 builds of Python). These builds then use a 32-bit
     type for *Note Py_UNICODE: ab3. and store Unicode data internally
     as UCS4. On platforms where `wchar_t' is available and compatible
     with the chosen Python Unicode build variant, *Note Py_UNICODE:
     ab3. is a typedef alias for `wchar_t' to enhance native platform
     compatibility. On all other platforms, *Note Py_UNICODE: ab3. is a
     typedef alias for either `unsigned short' (UCS2) or `unsigned
     long' (UCS4).

Note that UCS2 and UCS4 Python builds are not binary compatible. Please
keep this in mind when writing extensions or interfaces.

 -- C Type: PyUnicodeObject
     This subtype of *Note PyObject: 3be. represents a Python Unicode
     object.

 -- C Variable: PyTypeObject PyUnicode_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     Unicode type.  It is exposed to Python code as `unicode' and
     `types.UnicodeType'.

The following APIs are really C macros and can be used to do fast
checks and to access internal read-only data of Unicode objects:

 -- C Function: int PyUnicode_Check (PyObject *o)
     Return true if the object `o' is a Unicode object or an instance
     of a Unicode subtype.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyUnicode_CheckExact (PyObject *o)
     Return true if the object `o' is a Unicode object, but not an
     instance of a subtype.

     New in version 2.2.


 -- C Function: Py_ssize_t PyUnicode_GET_SIZE (PyObject *o)
     Return the size of the object.  `o' has to be a *Note
     PyUnicodeObject: 2d00. (not checked).

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: Py_ssize_t PyUnicode_GET_DATA_SIZE (PyObject *o)
     Return the size of the object’s internal buffer in bytes.  `o'
     has to be a *Note PyUnicodeObject: 2d00. (not checked).

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: Py_UNICODE* PyUnicode_AS_UNICODE (PyObject *o)
     Return a pointer to the internal *Note Py_UNICODE: ab3. buffer of
     the object.  `o' has to be a *Note PyUnicodeObject: 2d00. (not
     checked).

 -- C Function: const char* PyUnicode_AS_DATA (PyObject *o)
     Return a pointer to the internal buffer of the object. `o' has to
     be a *Note PyUnicodeObject: 2d00. (not checked).

 -- C Function: int PyUnicode_ClearFreeList ()
     Clear the free list. Return the total number of freed items.

     New in version 2.6.



File: python.info,  Node: Unicode Character Properties,  Next: Plain Py_UNICODE,  Prev: Unicode Type,  Up: Unicode Objects

7.7.3.9 Unicode Character Properties
....................................

Unicode provides many different character properties. The most often
needed ones are available through these macros which are mapped to C
functions depending on the Python configuration.

 -- C Function: int Py_UNICODE_ISSPACE (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a whitespace
     character.

 -- C Function: int Py_UNICODE_ISLOWER (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a lowercase
     character.

 -- C Function: int Py_UNICODE_ISUPPER (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is an uppercase
     character.

 -- C Function: int Py_UNICODE_ISTITLE (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a titlecase
     character.

 -- C Function: int Py_UNICODE_ISLINEBREAK (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a linebreak
     character.

 -- C Function: int Py_UNICODE_ISDECIMAL (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a decimal character.

 -- C Function: int Py_UNICODE_ISDIGIT (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a digit character.

 -- C Function: int Py_UNICODE_ISNUMERIC (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is a numeric character.

 -- C Function: int Py_UNICODE_ISALPHA (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is an alphabetic
     character.

 -- C Function: int Py_UNICODE_ISALNUM (Py_UNICODE ch)
     Return `1' or `0' depending on whether `ch' is an alphanumeric
     character.

These APIs can be used for fast direct character conversions:

 -- C Function: Py_UNICODE Py_UNICODE_TOLOWER (Py_UNICODE ch)
     Return the character `ch' converted to lower case.

 -- C Function: Py_UNICODE Py_UNICODE_TOUPPER (Py_UNICODE ch)
     Return the character `ch' converted to upper case.

 -- C Function: Py_UNICODE Py_UNICODE_TOTITLE (Py_UNICODE ch)
     Return the character `ch' converted to title case.

 -- C Function: int Py_UNICODE_TODECIMAL (Py_UNICODE ch)
     Return the character `ch' converted to a decimal positive integer.
     Return `-1' if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: int Py_UNICODE_TODIGIT (Py_UNICODE ch)
     Return the character `ch' converted to a single digit integer.
     Return `-1' if this is not possible.  This macro does not raise
     exceptions.

 -- C Function: double Py_UNICODE_TONUMERIC (Py_UNICODE ch)
     Return the character `ch' converted to a double. Return `-1.0' if
     this is not possible.  This macro does not raise exceptions.


File: python.info,  Node: Plain Py_UNICODE,  Next: wchar_t Support,  Prev: Unicode Character Properties,  Up: Unicode Objects

7.7.3.10 Plain Py_UNICODE
.........................

To create Unicode objects and access their basic sequence properties,
use these APIs:

 -- C Function: PyObject* PyUnicode_FromUnicode (const Py_UNICODE *u,
          Py_ssize_t size)
     `Return value: New reference.'  Create a Unicode object from the
     Py_UNICODE buffer `u' of the given size. `u' may be `NULL' which
     causes the contents to be undefined. It is the user’s
     responsibility to fill in the needed data.  The buffer is copied
     into the new object. If the buffer is not `NULL', the return value
     might be a shared object.  Therefore, modification of the
     resulting Unicode object is only allowed when `u' is `NULL'.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_FromStringAndSize (const char *u,
          Py_ssize_t size)
     `Return value: New reference.'  Create a Unicode object from the
     char buffer `u'.  The bytes will be interpreted as being UTF-8
     encoded.  `u' may also be `NULL' which causes the contents to be
     undefined. It is the user’s responsibility to fill in the needed
     data.  The buffer is copied into the new object. If the buffer is
     not `NULL', the return value might be a shared object. Therefore,
     modification of the resulting Unicode object is only allowed when
     `u' is `NULL'.

     New in version 2.6.


 -- C Function: PyObject *PyUnicode_FromString (const char *u)
     `Return value: New reference.'  Create a Unicode object from a
     UTF-8 encoded null-terminated char buffer `u'.

     New in version 2.6.


 -- C Function: PyObject* PyUnicode_FromFormat (const char *format, ...)
     `Return value: New reference.'  Take a C `printf()'-style `format'
     string and a variable number of arguments, calculate the size of
     the resulting Python unicode string and return a string with the
     values formatted into it.  The variable arguments must be C types
     and must correspond exactly to the format characters in the
     `format' string.  The following format characters are allowed:

     Format Characters       Type                      Comment
     --------------------------------------------------------------------------------------- 
     `%%'                    `n/a'                     The literal % character.
     `%c'                    int                       A single character, represented as
                                                       a C int.
     `%d'                    int                       Exactly equivalent to
                                                       `printf("%d")'.
     `%u'                    unsigned int              Exactly equivalent to
                                                       `printf("%u")'.
     `%ld'                   long                      Exactly equivalent to
                                                       `printf("%ld")'.
     `%lu'                   unsigned long             Exactly equivalent to
                                                       `printf("%lu")'.
     `%zd'                   Py_ssize_t                Exactly equivalent to
                                                       `printf("%zd")'.
     `%zu'                   size_t                    Exactly equivalent to
                                                       `printf("%zu")'.
     `%i'                    int                       Exactly equivalent to
                                                       `printf("%i")'.
     `%x'                    int                       Exactly equivalent to
                                                       `printf("%x")'.
     `%s'                    char*                     A null-terminated C character array.
     `%p'                    void*                     The hex representation of a C
                                                       pointer. Mostly equivalent to
                                                       `printf("%p")' except that it is
                                                       guaranteed to start with the
                                                       literal `0x' regardless of what the
                                                       platform’s `printf' yields.
     `%U'                    PyObject*                 A unicode object.
     `%V'                    PyObject*, char *         A unicode object (which may be
                                                       `NULL') and a null-terminated C
                                                       character array as a second
                                                       parameter (which will be used, if
                                                       the first parameter is `NULL').
     `%S'                    PyObject*                 The result of calling
                                                       `PyObject_Unicode()'.
     `%R'                    PyObject*                 The result of calling
                                                       `PyObject_Repr()'.

     An unrecognized format character causes all the rest of the format
     string to be copied as-is to the result string, and any extra
     arguments discarded.

     New in version 2.6.


 -- C Function: PyObject* PyUnicode_FromFormatV (const char *format,
          va_list vargs)
     `Return value: New reference.'  Identical to
     `PyUnicode_FromFormat()' except that it takes exactly two
     arguments.

     New in version 2.6.


 -- C Function: Py_UNICODE* PyUnicode_AsUnicode (PyObject *unicode)
     Return a read-only pointer to the Unicode object’s internal
     *Note Py_UNICODE: ab3. buffer, `NULL' if `unicode' is not a
     Unicode object.  Note that the resulting *Note Py_UNICODE*: ab3.
     string may contain embedded null characters, which would cause the
     string to be truncated when used in most C functions.

 -- C Function: Py_ssize_t PyUnicode_GetSize (PyObject *unicode)
     Return the length of the Unicode object.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: PyObject* PyUnicode_FromEncodedObject (PyObject *obj,
          const char *encoding, const char *errors)
     `Return value: New reference.'  Coerce an encoded object `obj' to
     a Unicode object and return a reference with incremented refcount.

     String and other char buffer compatible objects are decoded
     according to the given encoding and using the error handling
     defined by errors.  Both can be `NULL' to have the interface use
     the default values (see the next section for details).

     All other objects, including Unicode objects, cause a *Note
     TypeError: 218. to be set.

     The API returns `NULL' if there was an error.  The caller is
     responsible for decref’ing the returned objects.

 -- C Function: PyObject* PyUnicode_FromObject (PyObject *obj)
     `Return value: New reference.'  Shortcut for
     `PyUnicode_FromEncodedObject(obj, NULL, "strict")' which is used
     throughout the interpreter whenever coercion to Unicode is needed.

If the platform supports `wchar_t' and provides a header file wchar.h,
Python can interface directly to this type using the following
functions.  Support is optimized if Python’s own *Note Py_UNICODE:
ab3. type is identical to the system’s `wchar_t'.


File: python.info,  Node: wchar_t Support,  Prev: Plain Py_UNICODE,  Up: Unicode Objects

7.7.3.11 wchar_t Support
........................

`wchar_t' support for platforms which support it:

 -- C Function: PyObject* PyUnicode_FromWideChar (const wchar_t *w,
          Py_ssize_t size)
     `Return value: New reference.'  Create a Unicode object from the
     `wchar_t' buffer `w' of the given `size'.  Return `NULL' on
     failure.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: Py_ssize_t PyUnicode_AsWideChar
          (PyUnicodeObject *unicode, wchar_t *w, Py_ssize_t size)
     Copy the Unicode object contents into the `wchar_t' buffer `w'.
     At most `size' `wchar_t' characters are copied (excluding a
     possibly trailing 0-termination character).  Return the number of
     `wchar_t' characters copied or `-1' in case of an error.  Note
     that the resulting `wchar_t' string may or may not be
     0-terminated.  It is the responsibility of the caller to make sure
     that the `wchar_t' string is 0-terminated in case this is required
     by the application. Also, note that the `wchar_t*' string might
     contain null characters, which would cause the string to be
     truncated when used with most C functions.

     Changed in version 2.5: This function returned an `int' type and
     used an `int' type for `size'. This might require changes in your
     code for properly supporting 64-bit systems.



File: python.info,  Node: Built-in Codecs,  Next: Methods and Slot Functions,  Prev: Unicode Objects,  Up: Unicode Objects and Codecs

7.7.3.12 Built-in Codecs
........................

Python provides a set of built-in codecs which are written in C for
speed. All of these codecs are directly usable via the following
functions.

Many of the following APIs take two arguments encoding and errors, and
they have the same semantics as the ones of the built-in *Note
unicode(): 1f5. Unicode object constructor.

Setting encoding to `NULL' causes the default encoding to be used which
is ASCII.  The file system calls should use
`Py_FileSystemDefaultEncoding' as the encoding for file names. This
variable should be treated as read-only: on some systems, it will be a
pointer to a static string, on others, it will change at run-time (such
as when the application invokes setlocale).

Error handling is set by errors which may also be set to `NULL' meaning
to use the default handling defined for the codec.  Default error
handling for all built-in codecs is “strict” (*Note ValueError:
236. is raised).

The codecs all use a similar interface.  Only deviation from the
following generic ones are documented for simplicity.

* Menu:

* Generic Codecs::
* UTF-8 Codecs::
* UTF-32 Codecs::
* UTF-16 Codecs::
* UTF-7 Codecs::
* Unicode-Escape Codecs::
* Raw-Unicode-Escape Codecs::
* Latin-1 Codecs::
* ASCII Codecs::
* Character Map Codecs::
* MBCS codecs for Windows::
* Methods & Slots::


File: python.info,  Node: Generic Codecs,  Next: UTF-8 Codecs,  Up: Built-in Codecs

7.7.3.13 Generic Codecs
.......................

These are the generic codec APIs:

 -- C Function: PyObject* PyUnicode_Decode (const char *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the encoded string `s'.  `encoding' and
     `errors' have the same meaning as the parameters of the same name
     in the *Note unicode(): 1f5. built-in function.  The codec to be
     used is looked up using the Python codec registry.  Return `NULL'
     if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_Encode (const Py_UNICODE *s,
          Py_ssize_t size, const char *encoding, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer `s' of the given `size' and return a Python string object.
     `encoding' and `errors' have the same meaning as the parameters of
     the same name in the Unicode `encode()' method.  The codec to be
     used is looked up using the Python codec registry.  Return `NULL'
     if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsEncodedString (PyObject *unicode,
          const char *encoding, const char *errors)
     `Return value: New reference.'  Encode a Unicode object and return
     the result as Python string object.  `encoding' and `errors' have
     the same meaning as the parameters of the same name in the Unicode
     `encode()' method. The codec to be used is looked up using the
     Python codec registry. Return `NULL' if an exception was raised by
     the codec.


File: python.info,  Node: UTF-8 Codecs,  Next: UTF-32 Codecs,  Prev: Generic Codecs,  Up: Built-in Codecs

7.7.3.14 UTF-8 Codecs
.....................

These are the UTF-8 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF8 (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the UTF-8 encoded string `s'. Return
     `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_DecodeUTF8Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     `Return value: New reference.'  If `consumed' is `NULL', behave
     like *Note PyUnicode_DecodeUTF8(): 2d2e. If `consumed' is not
     `NULL', trailing incomplete UTF-8 byte sequences will not be
     treated as an error. Those bytes will not be decoded and the
     number of bytes that have been decoded will be stored in
     `consumed'.

     New in version 2.4.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeUTF8 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer `s' of the given `size' using UTF-8 and return a Python
     string object.  Return `NULL' if an exception was raised by the
     codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsUTF8String (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     UTF-8 and return the result as Python string object.  Error
     handling is “strict”.  Return `NULL' if an exception was raised
     by the codec.


File: python.info,  Node: UTF-32 Codecs,  Next: UTF-16 Codecs,  Prev: UTF-8 Codecs,  Up: Built-in Codecs

7.7.3.15 UTF-32 Codecs
......................

These are the UTF-32 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF32 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     Decode `size' bytes from a UTF-32 encoded buffer string and return
     the corresponding Unicode object.  `errors' (if non-`NULL')
     defines the error handling. It defaults to “strict”.

     If `byteorder' is non-`NULL', the decoder starts decoding using
     the given byte order:

         *byteorder == -1: little endian
         *byteorder == 0:  native order
         *byteorder == 1:  big endian

     If `*byteorder' is zero, and the first four bytes of the input
     data are a byte order mark (BOM), the decoder switches to this
     byte order and the BOM is not copied into the resulting Unicode
     string.  If `*byteorder' is `-1' or `1', any byte order mark is
     copied to the output.

     After completion, `*byteorder' is set to the current byte order at
     the end of input data.

     In a narrow build code points outside the BMP will be decoded as
     surrogate pairs.

     If `byteorder' is `NULL', the codec starts in native order mode.

     Return `NULL' if an exception was raised by the codec.

     New in version 2.6.


 -- C Function: PyObject* PyUnicode_DecodeUTF32Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     If `consumed' is `NULL', behave like *Note
     PyUnicode_DecodeUTF32(): 2d33. If `consumed' is not `NULL', *Note
     PyUnicode_DecodeUTF32Stateful(): 2d34. will not treat trailing
     incomplete UTF-32 byte sequences (such as a number of bytes not
     divisible by four) as an error. Those bytes will not be decoded
     and the number of bytes that have been decoded will be stored in
     `consumed'.

     New in version 2.6.


 -- C Function: PyObject* PyUnicode_EncodeUTF32 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     Return a Python bytes object holding the UTF-32 encoded value of
     the Unicode data in `s'.  Output is written according to the
     following byte order:

         byteorder == -1: little endian
         byteorder == 0:  native byte order (writes a BOM mark)
         byteorder == 1:  big endian

     If byteorder is `0', the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If `Py_UNICODE_WIDE' is not defined, surrogate pairs will be output
     as a single code point.

     Return `NULL' if an exception was raised by the codec.

     New in version 2.6.


 -- C Function: PyObject* PyUnicode_AsUTF32String (PyObject *unicode)
     Return a Python string using the UTF-32 encoding in native byte
     order. The string always starts with a BOM mark.  Error handling
     is “strict”.  Return `NULL' if an exception was raised by the
     codec.

     New in version 2.6.



File: python.info,  Node: UTF-16 Codecs,  Next: UTF-7 Codecs,  Prev: UTF-32 Codecs,  Up: Built-in Codecs

7.7.3.16 UTF-16 Codecs
......................

These are the UTF-16 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF16 (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder)
     `Return value: New reference.'  Decode `size' bytes from a UTF-16
     encoded buffer string and return the corresponding Unicode object.
     `errors' (if non-`NULL') defines the error handling. It defaults
     to “strict”.

     If `byteorder' is non-`NULL', the decoder starts decoding using
     the given byte order:

         *byteorder == -1: little endian
         *byteorder == 0:  native order
         *byteorder == 1:  big endian

     If `*byteorder' is zero, and the first two bytes of the input data
     are a byte order mark (BOM), the decoder switches to this byte
     order and the BOM is not copied into the resulting Unicode string.
     If `*byteorder' is `-1' or `1', any byte order mark is copied to
     the output (where it will result in either a `\ufeff' or a
     `\ufffe' character).

     After completion, `*byteorder' is set to the current byte order at
     the end of input data.

     If `byteorder' is `NULL', the codec starts in native order mode.

     Return `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_DecodeUTF16Stateful (const char *s,
          Py_ssize_t size, const char *errors, int *byteorder,
          Py_ssize_t *consumed)
     `Return value: New reference.'  If `consumed' is `NULL', behave
     like *Note PyUnicode_DecodeUTF16(): 2d38. If `consumed' is not
     `NULL', *Note PyUnicode_DecodeUTF16Stateful(): 2d39. will not treat
     trailing incomplete UTF-16 byte sequences (such as an odd number
     of bytes or a split surrogate pair) as an error. Those bytes will
     not be decoded and the number of bytes that have been decoded will
     be stored in `consumed'.

     New in version 2.4.

     Changed in version 2.5: This function used an `int' type for
     `size' and an `int *' type for `consumed'. This might require
     changes in your code for properly supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeUTF16 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors, int byteorder)
     `Return value: New reference.'  Return a Python string object
     holding the UTF-16 encoded value of the Unicode data in `s'.
     Output is written according to the following byte order:

         byteorder == -1: little endian
         byteorder == 0:  native byte order (writes a BOM mark)
         byteorder == 1:  big endian

     If byteorder is `0', the output string will always start with the
     Unicode BOM mark (U+FEFF). In the other two modes, no BOM mark is
     prepended.

     If `Py_UNICODE_WIDE' is defined, a single *Note Py_UNICODE: ab3.
     value may get represented as a surrogate pair. If it is not
     defined, each *Note Py_UNICODE: ab3.  values is interpreted as a
     UCS-2 character.

     Return `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsUTF16String (PyObject *unicode)
     `Return value: New reference.'  Return a Python string using the
     UTF-16 encoding in native byte order. The string always starts
     with a BOM mark.  Error handling is “strict”.  Return `NULL'
     if an exception was raised by the codec.


File: python.info,  Node: UTF-7 Codecs,  Next: Unicode-Escape Codecs,  Prev: UTF-16 Codecs,  Up: Built-in Codecs

7.7.3.17 UTF-7 Codecs
.....................

These are the UTF-7 codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUTF7 (const char *s,
          Py_ssize_t size, const char *errors)
     Create a Unicode object by decoding `size' bytes of the UTF-7
     encoded string `s'.  Return `NULL' if an exception was raised by
     the codec.

 -- C Function: PyObject* PyUnicode_DecodeUTF7Stateful (const char *s,
          Py_ssize_t size, const char *errors, Py_ssize_t *consumed)
     If `consumed' is `NULL', behave like *Note PyUnicode_DecodeUTF7():
     2d3d.  If `consumed' is not `NULL', trailing incomplete UTF-7
     base-64 sections will not be treated as an error.  Those bytes
     will not be decoded and the number of bytes that have been decoded
     will be stored in `consumed'.

 -- C Function: PyObject* PyUnicode_EncodeUTF7 (const Py_UNICODE *s,
          Py_ssize_t size, int base64SetO, int base64WhiteSpace, const
          char *errors)
     Encode the *Note Py_UNICODE: ab3. buffer of the given size using
     UTF-7 and return a Python bytes object.  Return `NULL' if an
     exception was raised by the codec.

     If `base64SetO' is nonzero, “Set O” (punctuation that has no
     otherwise special meaning) will be encoded in base-64.  If
     `base64WhiteSpace' is nonzero, whitespace will be encoded in
     base-64.  Both are set to zero for the Python “utf-7” codec.


File: python.info,  Node: Unicode-Escape Codecs,  Next: Raw-Unicode-Escape Codecs,  Prev: UTF-7 Codecs,  Up: Built-in Codecs

7.7.3.18 Unicode-Escape Codecs
..............................

These are the “Unicode Escape” codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeUnicodeEscape (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the Unicode-Escape encoded string `s'.
     Return `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer of the given `size' using Unicode-Escape and return a
     Python string object.  Return `NULL' if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsUnicodeEscapeString
          (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     Unicode-Escape and return the result as Python string object.
     Error handling is “strict”. Return `NULL' if an exception was
     raised by the codec.


File: python.info,  Node: Raw-Unicode-Escape Codecs,  Next: Latin-1 Codecs,  Prev: Unicode-Escape Codecs,  Up: Built-in Codecs

7.7.3.19 Raw-Unicode-Escape Codecs
..................................

These are the “Raw Unicode Escape” codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeRawUnicodeEscape (const
          char *s, Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the Raw-Unicode-Escape encoded string
     `s'.  Return `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeRawUnicodeEscape (const
          Py_UNICODE *s, Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer of the given `size' using Raw-Unicode-Escape and return a
     Python string object.  Return `NULL' if an exception was raised by
     the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsRawUnicodeEscapeString
          (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     Raw-Unicode-Escape and return the result as Python string object.
     Error handling is “strict”. Return `NULL' if an exception was
     raised by the codec.


File: python.info,  Node: Latin-1 Codecs,  Next: ASCII Codecs,  Prev: Raw-Unicode-Escape Codecs,  Up: Built-in Codecs

7.7.3.20 Latin-1 Codecs
.......................

These are the Latin-1 codec APIs: Latin-1 corresponds to the first 256
Unicode ordinals and only these are accepted by the codecs during
encoding.

 -- C Function: PyObject* PyUnicode_DecodeLatin1 (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the Latin-1 encoded string `s'.  Return
     `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeLatin1 (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer of the given `size' using Latin-1 and return a Python
     string object.  Return `NULL' if an exception was raised by the
     codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsLatin1String (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     Latin-1 and return the result as Python string object.  Error
     handling is “strict”.  Return `NULL' if an exception was raised
     by the codec.


File: python.info,  Node: ASCII Codecs,  Next: Character Map Codecs,  Prev: Latin-1 Codecs,  Up: Built-in Codecs

7.7.3.21 ASCII Codecs
.....................

These are the ASCII codec APIs.  Only 7-bit ASCII data is accepted. All
other codes generate errors.

 -- C Function: PyObject* PyUnicode_DecodeASCII (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the ASCII encoded string `s'.  Return
     `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeASCII (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer of the given `size' using ASCII and return a Python string
     object.  Return `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsASCIIString (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using
     ASCII and return the result as Python string object.  Error
     handling is “strict”.  Return `NULL' if an exception was raised
     by the codec.


File: python.info,  Node: Character Map Codecs,  Next: MBCS codecs for Windows,  Prev: ASCII Codecs,  Up: Built-in Codecs

7.7.3.22 Character Map Codecs
.............................

This codec is special in that it can be used to implement many
different codecs (and this is in fact what was done to obtain most of
the standard codecs included in the `encodings' package). The codec
uses mapping to encode and decode characters.

Decoding mappings must map single string characters to single Unicode
characters, integers (which are then interpreted as Unicode ordinals)
or `None' (meaning “undefined mapping” and causing an error).

Encoding mappings must map single Unicode characters to single string
characters, integers (which are then interpreted as Latin-1 ordinals)
or `None' (meaning “undefined mapping” and causing an error).

The mapping objects provided must only support the __getitem__ mapping
interface.

If a character lookup fails with a LookupError, the character is copied
as-is meaning that its ordinal value will be interpreted as Unicode or
Latin-1 ordinal resp. Because of this, mappings only need to contain
those mappings which map characters to different code points.

These are the mapping codec APIs:

 -- C Function: PyObject* PyUnicode_DecodeCharmap (const char *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the encoded string `s' using the given
     `mapping' object.  Return `NULL' if an exception was raised by the
     codec. If `mapping' is `NULL' latin-1 decoding will be done. Else
     it can be a dictionary mapping byte or a unicode string, which is
     treated as a lookup table.  Byte values greater that the length of
     the string and U+FFFE “characters” are treated as “undefined
     mapping”.

     Changed in version 2.4: Allowed unicode string as mapping argument.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_EncodeCharmap (const Py_UNICODE *s,
          Py_ssize_t size, PyObject *mapping, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer of the given `size' using the given `mapping' object and
     return a Python string object. Return `NULL' if an exception was
     raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsCharmapString (PyObject *unicode,
          PyObject *mapping)
     `Return value: New reference.'  Encode a Unicode object using the
     given `mapping' object and return the result as Python string
     object.  Error handling is “strict”.  Return `NULL' if an
     exception was raised by the codec.

The following codec API is special in that maps Unicode to Unicode.

 -- C Function: PyObject* PyUnicode_TranslateCharmap (const
          Py_UNICODE *s, Py_ssize_t size, PyObject *table, const
          char *errors)
     `Return value: New reference.'  Translate a *Note Py_UNICODE: ab3.
     buffer of the given `size' by applying a character mapping `table'
     to it and return the resulting Unicode object.  Return `NULL' when
     an exception was raised by the codec.

     The `mapping' table must map Unicode ordinal integers to Unicode
     ordinal integers or `None' (causing deletion of the character).

     Mapping tables need only provide the *Note __getitem__(): 468.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *Note LookupError: 8b9.)
     are left untouched and are copied as-is.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


