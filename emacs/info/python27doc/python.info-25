This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: Why can’t lambda expressions contain statements?,  Next: Can Python be compiled to machine code C or some other language?,  Prev: Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?,  Up: Design and History FAQ

11.3.12 Why can’t lambda expressions contain statements?
----------------------------------------------------------

Python lambda expressions cannot contain statements because Python’s
syntactic framework can’t handle statements nested inside
expressions.  However, in Python, this is not a serious problem.
Unlike lambda forms in other languages, where they add functionality,
Python lambdas are only a shorthand notation if you’re too lazy to
define a function.

Functions are already first class objects in Python, and can be
declared in a local scope.  Therefore the only advantage of using a
lambda instead of a locally-defined function is that you don’t need
to invent a name for the function – but that’s just a local
variable to which the function object (which is exactly the same type
of object that a lambda expression yields) is assigned!


File: python.info,  Node: Can Python be compiled to machine code C or some other language?,  Next: How does Python manage memory?,  Prev: Why can’t lambda expressions contain statements?,  Up: Design and History FAQ

11.3.13 Can Python be compiled to machine code, C or some other language?
-------------------------------------------------------------------------

Not easily.  Python’s high level data types, dynamic typing of
objects and run-time invocation of the interpreter (using *Note eval():
378. or *Note exec: 41d.)  together mean that a “compiled” Python
program would probably consist mostly of calls into the Python run-time
system, even for seemingly simple operations like `x+1'.

Several projects described in the Python newsgroup or at past Python
conferences(1) have shown that this approach is feasible, although the
speedups reached so far are only modest (e.g. 2x).  Jython uses the
same strategy for compiling to Java bytecode.  (Jim Hugunin has
demonstrated that in combination with whole-program analysis, speedups
of 1000x are feasible for small demo programs.  See the proceedings
from the 1997 Python conference(2) for more information.)

Internally, Python source code is always translated into a bytecode
representation, and this bytecode is then executed by the Python virtual
machine.  In order to avoid the overhead of repeatedly parsing and
translating modules that rarely change, this byte code is written into
a file whose name ends in “.pyc” whenever a module is parsed.  When
the corresponding .py file is changed, it is parsed and translated
again and the .pyc file is rewritten.

There is no performance difference once the .pyc file has been loaded,
as the bytecode read from the .pyc file is exactly the same as the
bytecode created by direct translation.  The only difference is that
loading code from a .pyc file is faster than parsing and translating a
.py file, so the presence of precompiled .pyc files improves the
start-up time of Python scripts.  If desired, the Lib/compileall.py
module can be used to create valid .pyc files for a given set of
modules.

Note that the main script executed by Python, even if its filename ends
in .py, is not compiled to a .pyc file.  It is compiled to bytecode,
but the bytecode is not saved to a file.  Usually main scripts are
quite short, so this doesn’t cost much speed.

There are also several programs which make it easier to intermingle
Python and C code in various ways to increase performance.  See, for
example, Cython(3) , Psyco(4), Pyrex(5), PyInline(6), Py2Cmod(7), and
Weave(8).

---------- Footnotes ----------

(1) https://www.python.org/community/workshops/

(2) http://legacy.python.org/workshops/1997-10/proceedings/

(3) http://cython.org/

(4) http://psyco.sourceforge.net/

(5) https://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/

(6) http://pyinline.sourceforge.net/

(7) http://sourceforge.net/projects/py2cmod/

(8) https://docs.scipy.org/doc/scipy-dev/reference/tutorial/weave.html


File: python.info,  Node: How does Python manage memory?,  Next: Why isn’t all memory freed when Python exits?,  Prev: Can Python be compiled to machine code C or some other language?,  Up: Design and History FAQ

11.3.14 How does Python manage memory?
--------------------------------------

The details of Python memory management depend on the implementation.
The standard C implementation of Python uses reference counting to
detect inaccessible objects, and another mechanism to collect reference
cycles, periodically executing a cycle detection algorithm which looks
for inaccessible cycles and deletes the objects involved. The *Note gc:
dc. module provides functions to perform a garbage collection, obtain
debugging statistics, and tune the collector’s parameters.

Jython relies on the Java runtime so the JVM’s garbage collector is
used.  This difference can cause some subtle porting problems if your
Python code depends on the behavior of the reference counting
implementation.

Sometimes objects get stuck in tracebacks temporarily and hence are not
deallocated when you might expect.  Clear the tracebacks with:

    import sys
    sys.exc_clear()
    sys.exc_traceback = sys.last_traceback = None

Tracebacks are used for reporting errors, implementing debuggers and
related things.  They contain a portion of the program state extracted
during the handling of an exception (usually the most recent exception).

In the absence of circularities and tracebacks, Python programs do not
need to manage memory explicitly.

Why doesn’t Python use a more traditional garbage collection scheme?
For one thing, this is not a C standard feature and hence it’s not
portable.  (Yes, we know about the Boehm GC library.  It has bits of
assembler code for `most' common platforms, not for all of them, and
although it is mostly transparent, it isn’t completely transparent;
patches are required to get Python to work with it.)

Traditional GC also becomes a problem when Python is embedded into other
applications.  While in a standalone Python it’s fine to replace the
standard malloc() and free() with versions provided by the GC library,
an application embedding Python may want to have its `own' substitute
for malloc() and free(), and may not want Python’s.  Right now,
Python works with anything that implements malloc() and free() properly.

In Jython, the following code (which is fine in CPython) will probably
run out of file descriptors long before it runs out of memory:

    for file in very_long_list_of_files:
        f = open(file)
        c = f.read(1)

Using the current reference counting and destructor scheme, each new
assignment to f closes the previous file.  Using GC, this is not
guaranteed.  If you want to write code that will work with any Python
implementation, you should explicitly close the file or use the *Note
with: 1c1. statement; this will work regardless of GC:

    for file in very_long_list_of_files:
        with open(file) as f:
            c = f.read(1)


File: python.info,  Node: Why isn’t all memory freed when Python exits?,  Next: Why are there separate tuple and list data types?,  Prev: How does Python manage memory?,  Up: Design and History FAQ

11.3.15 Why isn’t all memory freed when Python exits?
-------------------------------------------------------

Objects referenced from the global namespaces of Python modules are not
always deallocated when Python exits.  This may happen if there are
circular references.  There are also certain bits of memory that are
allocated by the C library that are impossible to free (e.g. a tool
like Purify will complain about these).  Python is, however, aggressive
about cleaning up memory on exit and does try to destroy every single
object.

If you want to force Python to delete certain things on deallocation
use the *Note atexit: 12. module to run a function that will force
those deletions.


File: python.info,  Node: Why are there separate tuple and list data types?,  Next: How are lists implemented?,  Prev: Why isn’t all memory freed when Python exits?,  Up: Design and History FAQ

11.3.16 Why are there separate tuple and list data types?
---------------------------------------------------------

Lists and tuples, while similar in many respects, are generally used in
fundamentally different ways.  Tuples can be thought of as being
similar to Pascal records or C structs; they’re small collections of
related data which may be of different types which are operated on as a
group.  For example, a Cartesian coordinate is appropriately
represented as a tuple of two or three numbers.

Lists, on the other hand, are more like arrays in other languages.
They tend to hold a varying number of objects all of which have the
same type and which are operated on one-by-one.  For example,
`os.listdir('.')' returns a list of strings representing the files in
the current directory.  Functions which operate on this output would
generally not break if you added another file or two to the directory.

Tuples are immutable, meaning that once a tuple has been created, you
can’t replace any of its elements with a new value.  Lists are
mutable, meaning that you can always change a list’s elements.  Only
immutable elements can be used as dictionary keys, and hence only
tuples and not lists can be used as keys.


File: python.info,  Node: How are lists implemented?,  Next: How are dictionaries implemented?,  Prev: Why are there separate tuple and list data types?,  Up: Design and History FAQ

11.3.17 How are lists implemented?
----------------------------------

Python’s lists are really variable-length arrays, not Lisp-style
linked lists.  The implementation uses a contiguous array of references
to other objects, and keeps a pointer to this array and the array’s
length in a list head structure.

This makes indexing a list `a[i]' an operation whose cost is
independent of the size of the list or the value of the index.

When items are appended or inserted, the array of references is
resized.  Some cleverness is applied to improve the performance of
appending items repeatedly; when the array must be grown, some extra
space is allocated so the next few times don’t require an actual
resize.


File: python.info,  Node: How are dictionaries implemented?,  Next: Why must dictionary keys be immutable?,  Prev: How are lists implemented?,  Up: Design and History FAQ

11.3.18 How are dictionaries implemented?
-----------------------------------------

Python’s dictionaries are implemented as resizable hash tables.
Compared to B-trees, this gives better performance for lookup (the most
common operation by far) under most circumstances, and the
implementation is simpler.

Dictionaries work by computing a hash code for each key stored in the
dictionary using the *Note hash(): 733. built-in function.  The hash
code varies widely depending on the key; for example, “Python”
hashes to -539294296 while “python”, a string that differs by a
single bit, hashes to 1142331976.  The hash code is then used to
calculate a location in an internal array where the value will be
stored.  Assuming that you’re storing keys that all have different
hash values, this means that dictionaries take constant time – O(1),
in computer science notation – to retrieve a key.  It also means that
no sorted order of the keys is maintained, and traversing the array as
the `.keys()' and `.items()' do will output the dictionary’s content
in some arbitrary jumbled order.


File: python.info,  Node: Why must dictionary keys be immutable?,  Next: Why doesn’t list sort return the sorted list?,  Prev: How are dictionaries implemented?,  Up: Design and History FAQ

11.3.19 Why must dictionary keys be immutable?
----------------------------------------------

The hash table implementation of dictionaries uses a hash value
calculated from the key value to find the key.  If the key were a
mutable object, its value could change, and thus its hash could also
change.  But since whoever changes the key object can’t tell that it
was being used as a dictionary key, it can’t move the entry around in
the dictionary.  Then, when you try to look up the same object in the
dictionary it won’t be found because its hash value is different.  If
you tried to look up the old value it wouldn’t be found either,
because the value of the object found in that hash bin would be
different.

If you want a dictionary indexed with a list, simply convert the list
to a tuple first; the function `tuple(L)' creates a tuple with the same
entries as the list `L'.  Tuples are immutable and can therefore be
used as dictionary keys.

Some unacceptable solutions that have been proposed:

   - Hash lists by their address (object ID).  This doesn’t work
     because if you construct a new list with the same value it won’t
     be found; e.g.:

         mydict = {[1, 2]: '12'}
         print mydict[[1, 2]]

     would raise a KeyError exception because the id of the `[1, 2]'
     used in the second line differs from that in the first line.  In
     other words, dictionary keys should be compared using `==', not
     using *Note is: 717.

   - Make a copy when using a list as a key.  This doesn’t work
     because the list, being a mutable object, could contain a
     reference to itself, and then the copying code would run into an
     infinite loop.

   - Allow lists as keys but tell the user not to modify them.  This
     would allow a class of hard-to-track bugs in programs when you
     forgot or modified a list by accident. It also invalidates an
     important invariant of dictionaries: every value in `d.keys()' is
     usable as a key of the dictionary.

   - Mark lists as read-only once they are used as a dictionary key.
     The problem is that it’s not just the top-level object that
     could change its value; you could use a tuple containing a list as
     a key.  Entering anything as a key into a dictionary would require
     marking all objects reachable from there as read-only – and
     again, self-referential objects could cause an infinite loop.

There is a trick to get around this if you need to, but use it at your
own risk: You can wrap a mutable structure inside a class instance
which has both a *Note __eq__(): 21c. and a *Note __hash__(): 349.
method.  You must then make sure that the hash value for all such
wrapper objects that reside in a dictionary (or other hash based
structure), remain fixed while the object is in the dictionary (or
other structure).

    class ListWrapper:
        def __init__(self, the_list):
            self.the_list = the_list

        def __eq__(self, other):
            return self.the_list == other.the_list

        def __hash__(self):
            l = self.the_list
            result = 98767 - len(l)*555
            for i, el in enumerate(l):
                try:
                    result = result + (hash(el) % 9999999) * 1001 + i
                except Exception:
                    result = (result % 7777777) + i * 333
            return result

Note that the hash computation is complicated by the possibility that
some members of the list may be unhashable and also by the possibility
of arithmetic overflow.

Furthermore it must always be the case that if `o1 == o2' (ie
`o1.__eq__(o2) is True') then `hash(o1) == hash(o2)' (ie,
`o1.__hash__() == o2.__hash__()'), regardless of whether the object is
in a dictionary or not.  If you fail to meet these restrictions
dictionaries and other hash based structures will misbehave.

In the case of ListWrapper, whenever the wrapper object is in a
dictionary the wrapped list must not change to avoid anomalies.
Don’t do this unless you are prepared to think hard about the
requirements and the consequences of not meeting them correctly.
Consider yourself warned.


File: python.info,  Node: Why doesn’t list sort return the sorted list?,  Next: How do you specify and enforce an interface spec in Python?,  Prev: Why must dictionary keys be immutable?,  Up: Design and History FAQ

11.3.20 Why doesn’t list.sort() return the sorted list?
---------------------------------------------------------

In situations where performance matters, making a copy of the list just
to sort it would be wasteful. Therefore, `list.sort()' sorts the list
in place. In order to remind you of that fact, it does not return the
sorted list.  This way, you won’t be fooled into accidentally
overwriting a list when you need a sorted copy but also need to keep
the unsorted version around.

In Python 2.4 a new built-in function – *Note sorted(): 223. – has
been added.  This function creates a new list from a provided iterable,
sorts it and returns it.  For example, here’s how to iterate over the
keys of a dictionary in sorted order:

    for key in sorted(mydict):
        ...  # do whatever with mydict[key]...


File: python.info,  Node: How do you specify and enforce an interface spec in Python?,  Next: Why is there no goto?,  Prev: Why doesn’t list sort return the sorted list?,  Up: Design and History FAQ

11.3.21 How do you specify and enforce an interface spec in Python?
-------------------------------------------------------------------

An interface specification for a module as provided by languages such
as C++ and Java describes the prototypes for the methods and functions
of the module.  Many feel that compile-time enforcement of interface
specifications helps in the construction of large programs.

Python 2.6 adds an *Note abc: 4. module that lets you define Abstract
Base Classes (ABCs).  You can then use *Note isinstance(): 332. and
*Note issubclass(): 333. to check whether an instance or a class
implements a particular ABC.  The *Note collections: 65. module defines
a set of useful ABCs such as *Note Iterable: ba4, *Note Container: ba2,
and *Note MutableMapping: bac.

For Python, many of the advantages of interface specifications can be
obtained by an appropriate test discipline for components.  There is
also a tool, PyChecker, which can be used to find problems due to
subclassing.

A good test suite for a module can both provide a regression test and
serve as a module interface specification and a set of examples.  Many
Python modules can be run as a script to provide a simple “self
test.”  Even modules which use complex external interfaces can often
be tested in isolation using trivial “stub” emulations of the
external interface.  The *Note doctest: b5. and *Note unittest: 187.
modules or third-party test frameworks can be used to construct
exhaustive test suites that exercise every line of code in a module.

An appropriate testing discipline can help build large complex
applications in Python as well as having interface specifications
would.  In fact, it can be better because an interface specification
cannot test certain properties of a program.  For example, the
`append()' method is expected to add new elements to the end of some
internal list; an interface specification cannot test that your
`append()' implementation will actually do this correctly, but it’s
trivial to check this property in a test suite.

Writing test suites is very helpful, and you might want to design your
code with an eye to making it easily tested.  One increasingly popular
technique, test-directed development, calls for writing parts of the
test suite first, before you write any of the actual code.  Of course
Python allows you to be sloppy and not write test cases at all.


File: python.info,  Node: Why is there no goto?,  Next: Why can’t raw strings r-strings end with a backslash?,  Prev: How do you specify and enforce an interface spec in Python?,  Up: Design and History FAQ

11.3.22 Why is there no goto?
-----------------------------

You can use exceptions to provide a “structured goto” that even
works across function calls.  Many feel that exceptions can
conveniently emulate all reasonable uses of the “go” or “goto”
constructs of C, Fortran, and other languages.  For example:

    class label: pass  # declare a label

    try:
        ...
        if condition: raise label()  # goto label
        ...
    except label:  # where to goto
        pass
    ...

This doesn’t allow you to jump into the middle of a loop, but
that’s usually considered an abuse of goto anyway.  Use sparingly.


File: python.info,  Node: Why can’t raw strings r-strings end with a backslash?,  Next: Why doesn’t Python have a “with” statement for attribute assignments?,  Prev: Why is there no goto?,  Up: Design and History FAQ

11.3.23 Why can’t raw strings (r-strings) end with a backslash?
-----------------------------------------------------------------

More precisely, they can’t end with an odd number of backslashes: the
unpaired backslash at the end escapes the closing quote character,
leaving an unterminated string.

Raw strings were designed to ease creating input for processors
(chiefly regular expression engines) that want to do their own
backslash escape processing. Such processors consider an unmatched
trailing backslash to be an error anyway, so raw strings disallow that.
In return, they allow you to pass on the string quote character by
escaping it with a backslash.  These rules work well when r-strings are
used for their intended purpose.

If you’re trying to build Windows pathnames, note that all Windows
system calls accept forward slashes too:

    f = open("/mydir/file.txt")  # works fine!

If you’re trying to build a pathname for a DOS command, try e.g. one
of

    dir = r"\this\is\my\dos\dir" "\\"
    dir = r"\this\is\my\dos\dir\ "[:-1]
    dir = "\\this\\is\\my\\dos\\dir\\"


File: python.info,  Node: Why doesn’t Python have a “with” statement for attribute assignments?,  Next: Why are colons required for the if/while/def/class statements?,  Prev: Why can’t raw strings r-strings end with a backslash?,  Up: Design and History FAQ

11.3.24 Why doesn’t Python have a “with” statement for attribute assignments?
-----------------------------------------------------------------------------------

Python has a ‘with’ statement that wraps the execution of a block,
calling code on the entrance and exit from the block.  Some language
have a construct that looks like this:

    with obj:
        a = 1               # equivalent to obj.a = 1
        total = total + 1   # obj.total = obj.total + 1

In Python, such a construct would be ambiguous.

Other languages, such as Object Pascal, Delphi, and C++, use static
types, so it’s possible to know, in an unambiguous way, what member
is being assigned to. This is the main point of static typing – the
compiler `always' knows the scope of every variable at compile time.

Python uses dynamic types. It is impossible to know in advance which
attribute will be referenced at runtime. Member attributes may be added
or removed from objects on the fly. This makes it impossible to know,
from a simple reading, what attribute is being referenced: a local one,
a global one, or a member attribute?

For instance, take the following incomplete snippet:

    def foo(a):
        with a:
            print x

The snippet assumes that “a” must have a member attribute called
“x”.  However, there is nothing in Python that tells the
interpreter this. What should happen if “a” is, let us say, an
integer?  If there is a global variable named “x”, will it be used
inside the with block?  As you see, the dynamic nature of Python makes
such choices much harder.

The primary benefit of “with” and similar language features
(reduction of code volume) can, however, easily be achieved in Python
by assignment.  Instead of:

    function(args).mydict[index][index].a = 21
    function(args).mydict[index][index].b = 42
    function(args).mydict[index][index].c = 63

write this:

    ref = function(args).mydict[index][index]
    ref.a = 21
    ref.b = 42
    ref.c = 63

This also has the side-effect of increasing execution speed because name
bindings are resolved at run-time in Python, and the second version
only needs to perform the resolution once.


File: python.info,  Node: Why are colons required for the if/while/def/class statements?,  Next: Why does Python allow commas at the end of lists and tuples?,  Prev: Why doesn’t Python have a “with” statement for attribute assignments?,  Up: Design and History FAQ

11.3.25 Why are colons required for the if/while/def/class statements?
----------------------------------------------------------------------

The colon is required primarily to enhance readability (one of the
results of the experimental ABC language).  Consider this:

    if a == b
        print a

versus

    if a == b:
        print a

Notice how the second one is slightly easier to read.  Notice further
how a colon sets off the example in this FAQ answer; it’s a standard
usage in English.

Another minor reason is that the colon makes it easier for editors with
syntax highlighting; they can look for colons to decide when
indentation needs to be increased instead of having to do a more
elaborate parsing of the program text.


File: python.info,  Node: Why does Python allow commas at the end of lists and tuples?,  Prev: Why are colons required for the if/while/def/class statements?,  Up: Design and History FAQ

11.3.26 Why does Python allow commas at the end of lists and tuples?
--------------------------------------------------------------------

Python lets you add a trailing comma at the end of lists, tuples, and
dictionaries:

    [1, 2, 3,]
    ('a', 'b', 'c',)
    d = {
        "A": [1, 5],
        "B": [6, 7],  # last trailing comma is optional but good style
    }

There are several reasons to allow this.

When you have a literal value for a list, tuple, or dictionary spread
across multiple lines, it’s easier to add more elements because you
don’t have to remember to add a comma to the previous line.  The
lines can also be reordered without creating a syntax error.

Accidentally omitting the comma can lead to errors that are hard to
diagnose.  For example:

    x = [
      "fee",
      "fie"
      "foo",
      "fum"
    ]

This list looks like it has four elements, but it actually contains
three: “fee”, “fiefoo” and “fum”.  Always adding the comma
avoids this source of error.

Allowing the trailing comma may also make programmatic code generation
easier.


File: python.info,  Node: Library and Extension FAQ,  Next: Extending/Embedding FAQ,  Prev: Design and History FAQ,  Up: Python Frequently Asked Questions

11.4 Library and Extension FAQ
==============================

* Menu:

* General Library Questions::
* Common tasks::
* Threads::
* Input and Output: Input and Output<2>.
* Network/Internet Programming::
* Databases::
* Mathematics and Numerics::


File: python.info,  Node: General Library Questions,  Next: Common tasks,  Up: Library and Extension FAQ

11.4.1 General Library Questions
--------------------------------

* Menu:

* How do I find a module or application to perform task X?::
* Where is the math.py (socket.py, regex.py, etc.) source file?: Where is the math py socket py regex py etc source file?.
* How do I make a Python script executable on Unix?::
* Is there a curses/termcap package for Python?::
* Is there an equivalent to C’s onexit() in Python?: Is there an equivalent to C’s onexit in Python?.
* Why don’t my signal handlers work?::


File: python.info,  Node: How do I find a module or application to perform task X?,  Next: Where is the math py socket py regex py etc source file?,  Up: General Library Questions

11.4.1.1 How do I find a module or application to perform task X?
.................................................................

Check *Note the Library Reference: 515. to see if there’s a relevant
standard library module.  (Eventually you’ll learn what’s in the
standard library and will be able to skip this step.)

For third-party packages, search the Python Package Index(1) or try
Google(2) or another Web search engine.  Searching for “Python”
plus a keyword or two for your topic of interest will usually find
something helpful.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi

(2) https://www.google.com


File: python.info,  Node: Where is the math py socket py regex py etc source file?,  Next: How do I make a Python script executable on Unix?,  Prev: How do I find a module or application to perform task X?,  Up: General Library Questions

11.4.1.2 Where is the math.py (socket.py, regex.py, etc.) source file?
......................................................................

If you can’t find a source file for a module it may be a built-in or
dynamically loaded module implemented in C, C++ or other compiled
language.  In this case you may not have the source file or it may be
something like `mathmodule.c', somewhere in a C source directory (not
on the Python Path).

There are (at least) three kinds of modules in Python:

  1. modules written in Python (.py);

  2. modules written in C and dynamically loaded (.dll, .pyd, .so, .sl,
     etc);

  3. modules written in C and linked with the interpreter; to get a
     list of these, type:

         import sys
         print sys.builtin_module_names


File: python.info,  Node: How do I make a Python script executable on Unix?,  Next: Is there a curses/termcap package for Python?,  Prev: Where is the math py socket py regex py etc source file?,  Up: General Library Questions

11.4.1.3 How do I make a Python script executable on Unix?
..........................................................

You need to do two things: the script file’s mode must be executable
and the first line must begin with `#!' followed by the path of the
Python interpreter.

The first is done by executing `chmod +x scriptfile' or perhaps `chmod
755 scriptfile'.

The second can be done in a number of ways.  The most straightforward
way is to write

    #!/usr/local/bin/python

as the very first line of your file, using the pathname for where the
Python interpreter is installed on your platform.

If you would like the script to be independent of where the Python
interpreter lives, you can use the `env' program.  Almost all Unix
variants support the following, assuming the Python interpreter is in a
directory on the user’s `PATH':

    #!/usr/bin/env python

`Don’t' do this for CGI scripts.  The `PATH' variable for CGI scripts
is often very minimal, so you need to use the actual absolute pathname
of the interpreter.

Occasionally, a user’s environment is so full that the `/usr/bin/env'
program fails; or there’s no env program at all.  In that case, you
can try the following hack (due to Alex Rezinsky):

    #! /bin/sh
    """:"
    exec python $0 ${1+"$@"}
    """

The minor disadvantage is that this defines the script’s __doc__
string.  However, you can fix that by adding

    __doc__ = """...Whatever..."""


File: python.info,  Node: Is there a curses/termcap package for Python?,  Next: Is there an equivalent to C’s onexit in Python?,  Prev: How do I make a Python script executable on Unix?,  Up: General Library Questions

11.4.1.4 Is there a curses/termcap package for Python?
......................................................

For Unix variants the standard Python source distribution comes with a
curses module in the Modules(1) subdirectory, though it’s not
compiled by default.  (Note that this is not available in the Windows
distribution – there is no curses module for Windows.)

The *Note curses: 79. module supports basic curses features as well as
many additional functions from ncurses and SYSV curses such as colour,
alternative character set support, pads, and mouse support. This means
the module isn’t compatible with operating systems that only have BSD
curses, but there don’t seem to be any currently maintained OSes that
fall into this category.

For Windows: use the consolelib module(2).

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Modules

(2) http://effbot.org/zone/console-index.htm


File: python.info,  Node: Is there an equivalent to C’s onexit in Python?,  Next: Why don’t my signal handlers work?,  Prev: Is there a curses/termcap package for Python?,  Up: General Library Questions

11.4.1.5 Is there an equivalent to C’s onexit() in Python?
............................................................

The *Note atexit: 12. module provides a register function that is
similar to C’s `onexit()'.


File: python.info,  Node: Why don’t my signal handlers work?,  Prev: Is there an equivalent to C’s onexit in Python?,  Up: General Library Questions

11.4.1.6 Why don’t my signal handlers work?
.............................................

The most common problem is that the signal handler is declared with the
wrong argument list.  It is called as

    handler(signum, frame)

so it should be declared with two arguments:

    def handler(signum, frame):
        ...


File: python.info,  Node: Common tasks,  Next: Threads,  Prev: General Library Questions,  Up: Library and Extension FAQ

11.4.2 Common tasks
-------------------

* Menu:

* How do I test a Python program or component?::
* How do I create documentation from doc strings?::
* How do I get a single keypress at a time?::


File: python.info,  Node: How do I test a Python program or component?,  Next: How do I create documentation from doc strings?,  Up: Common tasks

11.4.2.1 How do I test a Python program or component?
.....................................................

Python comes with two testing frameworks.  The *Note doctest: b5.
module finds examples in the docstrings for a module and runs them,
comparing the output with the expected output given in the docstring.

The *Note unittest: 187. module is a fancier testing framework modelled
on Java and Smalltalk testing frameworks.

To make testing easier, you should use good modular design in your
program.  Your program should have almost all functionality
encapsulated in either functions or class methods – and this
sometimes has the surprising and delightful effect of making the
program run faster (because local variable accesses are faster than
global accesses).  Furthermore the program should avoid depending on
mutating global variables, since this makes testing much more difficult
to do.

The “global main logic” of your program may be as simple as

    if __name__ == "__main__":
        main_logic()

at the bottom of the main module of your program.

Once your program is organized as a tractable collection of functions
and class behaviours you should write test functions that exercise the
behaviours.  A test suite that automates a sequence of tests can be
associated with each module.  This sounds like a lot of work, but since
Python is so terse and flexible it’s surprisingly easy.  You can make
coding much more pleasant and fun by writing your test functions in
parallel with the “production code”, since this makes it easy to
find bugs and even design flaws earlier.

“Support modules” that are not intended to be the main module of a
program may include a self-test of the module.

    if __name__ == "__main__":
        self_test()

Even programs that interact with complex external interfaces may be
tested when the external interfaces are unavailable by using “fake”
interfaces implemented in Python.


File: python.info,  Node: How do I create documentation from doc strings?,  Next: How do I get a single keypress at a time?,  Prev: How do I test a Python program or component?,  Up: Common tasks

11.4.2.2 How do I create documentation from doc strings?
........................................................

The *Note pydoc: 140. module can create HTML from the doc strings in
your Python source code.  An alternative for creating API documentation
purely from docstrings is epydoc(1).  Sphinx(2) can also include
docstring content.

---------- Footnotes ----------

(1) http://epydoc.sourceforge.net/

(2) http://sphinx-doc.org


File: python.info,  Node: How do I get a single keypress at a time?,  Prev: How do I create documentation from doc strings?,  Up: Common tasks

11.4.2.3 How do I get a single keypress at a time?
..................................................

For Unix variants there are several solutions.  It’s straightforward
to do this using curses, but curses is a fairly large module to learn.
Here’s a solution without curses:

    import termios, fcntl, sys, os
    fd = sys.stdin.fileno()

    oldterm = termios.tcgetattr(fd)
    newattr = termios.tcgetattr(fd)
    newattr[3] = newattr[3] & ~termios.ICANON & ~termios.ECHO
    termios.tcsetattr(fd, termios.TCSANOW, newattr)

    oldflags = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, oldflags | os.O_NONBLOCK)

    try:
        while 1:
            try:
                c = sys.stdin.read(1)
                print "Got character", repr(c)
            except IOError: pass
    finally:
        termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)
        fcntl.fcntl(fd, fcntl.F_SETFL, oldflags)

You need the *Note termios: 174. and the *Note fcntl: cb. module for
any of this to work, and I’ve only tried it on Linux, though it
should work elsewhere.  In this code, characters are read and printed
one at a time.

*Note termios.tcsetattr(): 286b. turns off stdin’s echoing and
disables canonical mode.  `fcntl.fnctl()' is used to obtain stdin’s
file descriptor flags and modify them for non-blocking mode.  Since
reading stdin when it is empty results in an *Note IOError: 1fa, this
error is caught and ignored.


File: python.info,  Node: Threads,  Next: Input and Output<2>,  Prev: Common tasks,  Up: Library and Extension FAQ

11.4.3 Threads
--------------

* Menu:

* How do I program using threads?::
* None of my threads seem to run; why?: None of my threads seem to run why?.
* How do I parcel out work among a bunch of worker threads?::
* What kinds of global value mutation are thread-safe?::
* Can’t we get rid of the Global Interpreter Lock?::


File: python.info,  Node: How do I program using threads?,  Next: None of my threads seem to run why?,  Up: Threads

11.4.3.1 How do I program using threads?
........................................

Be sure to use the *Note threading: 179. module and not the *Note
thread: 178. module.  The *Note threading: 179. module builds
convenient abstractions on top of the low-level primitives provided by
the *Note thread: 178. module.

Aahz has a set of slides from his threading tutorial that are helpful;
see <http://www.pythoncraft.com/OSCON2001/>.


File: python.info,  Node: None of my threads seem to run why?,  Next: How do I parcel out work among a bunch of worker threads?,  Prev: How do I program using threads?,  Up: Threads

11.4.3.2 None of my threads seem to run: why?
.............................................

As soon as the main thread exits, all threads are killed.  Your main
thread is running too quickly, giving the threads no time to do any
work.

A simple fix is to add a sleep to the end of the program that’s long
enough for all the threads to finish:

    import threading, time

    def thread_task(name, n):
        for i in range(n): print name, i

    for i in range(10):
        T = threading.Thread(target=thread_task, args=(str(i), i))
        T.start()

    time.sleep(10) # <----------------------------!

But now (on many platforms) the threads don’t run in parallel, but
appear to run sequentially, one at a time!  The reason is that the OS
thread scheduler doesn’t start a new thread until the previous thread
is blocked.

A simple fix is to add a tiny sleep to the start of the run function:

    def thread_task(name, n):
        time.sleep(0.001) # <---------------------!
        for i in range(n): print name, i

    for i in range(10):
        T = threading.Thread(target=thread_task, args=(str(i), i))
        T.start()

    time.sleep(10)

Instead of trying to guess a good delay value for *Note time.sleep():
1223, it’s better to use some kind of semaphore mechanism.  One idea
is to use the *Note Queue: 141. module to create a queue object, let
each thread append a token to the queue when it finishes, and let the
main thread read as many tokens from the queue as there are threads.


File: python.info,  Node: How do I parcel out work among a bunch of worker threads?,  Next: What kinds of global value mutation are thread-safe?,  Prev: None of my threads seem to run why?,  Up: Threads

11.4.3.3 How do I parcel out work among a bunch of worker threads?
..................................................................

Use the *Note Queue: 141. module to create a queue containing a list of
jobs.  The *Note Queue: 316. class maintains a list of objects and has
a `.put(obj)' method that adds items to the queue and a `.get()' method
to return them.  The class will take care of the locking necessary to
ensure that each job is handed out exactly once.

Here’s a trivial example:

    import threading, Queue, time

    # The worker thread gets jobs off the queue.  When the queue is empty, it
    # assumes there will be no more work and exits.
    # (Realistically workers will run until terminated.)
    def worker():
        print 'Running worker'
        time.sleep(0.1)
        while True:
            try:
                arg = q.get(block=False)
            except Queue.Empty:
                print 'Worker', threading.currentThread(),
                print 'queue empty'
                break
            else:
                print 'Worker', threading.currentThread(),
                print 'running with argument', arg
                time.sleep(0.5)

    # Create queue
    q = Queue.Queue()

    # Start a pool of 5 workers
    for i in range(5):
        t = threading.Thread(target=worker, name='worker %i' % (i+1))
        t.start()

    # Begin adding work to the queue
    for i in range(50):
        q.put(i)

    # Give threads time to run
    print 'Main thread sleeping'
    time.sleep(5)

When run, this will produce the following output:

    Running worker
    Running worker
    Running worker
    Running worker
    Running worker
    Main thread sleeping
    Worker <Thread(worker 1, started)> running with argument 0
    Worker <Thread(worker 2, started)> running with argument 1
    Worker <Thread(worker 3, started)> running with argument 2
    Worker <Thread(worker 4, started)> running with argument 3
    Worker <Thread(worker 5, started)> running with argument 4
    Worker <Thread(worker 1, started)> running with argument 5
    ...

Consult the module’s documentation for more details; the *Note Queue:
316.  class provides a featureful interface.


File: python.info,  Node: What kinds of global value mutation are thread-safe?,  Next: Can’t we get rid of the Global Interpreter Lock?,  Prev: How do I parcel out work among a bunch of worker threads?,  Up: Threads

11.4.3.4 What kinds of global value mutation are thread-safe?
.............................................................

A *Note global interpreter lock: 1584. (GIL) is used internally to
ensure that only one thread runs in the Python VM at a time.  In
general, Python offers to switch among threads only between bytecode
instructions; how frequently it switches can be set via *Note
sys.setcheckinterval(): 2484.  Each bytecode instruction and therefore
all the C implementation code reached from each instruction is
therefore atomic from the point of view of a Python program.

In theory, this means an exact accounting requires an exact
understanding of the PVM bytecode implementation.  In practice, it
means that operations on shared variables of built-in data types (ints,
lists, dicts, etc) that “look atomic” really are.

For example, the following operations are all atomic (L, L1, L2 are
lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):

    L.append(x)
    L1.extend(L2)
    x = L[i]
    x = L.pop()
    L1[i:j] = L2
    L.sort()
    x = y
    x.field = y
    D[x] = y
    D1.update(D2)
    D.keys()

These aren’t:

    i = i+1
    L.append(L[-1])
    L[i] = L[j]
    D[x] = D[x] + 1

Operations that replace other objects may invoke those other objects’
*Note __del__(): 731. method when their reference count reaches zero,
and that can affect things.  This is especially true for the mass
updates to dictionaries and lists.  When in doubt, use a mutex!


File: python.info,  Node: Can’t we get rid of the Global Interpreter Lock?,  Prev: What kinds of global value mutation are thread-safe?,  Up: Threads

11.4.3.5 Can’t we get rid of the Global Interpreter Lock?
...........................................................

The *Note global interpreter lock: 1584. (GIL) is often seen as a
hindrance to Python’s deployment on high-end multiprocessor server
machines, because a multi-threaded Python program effectively only uses
one CPU, due to the insistence that (almost) all Python code can only
run while the GIL is held.

Back in the days of Python 1.5, Greg Stein actually implemented a
comprehensive patch set (the “free threading” patches) that removed
the GIL and replaced it with fine-grained locking.  Unfortunately, even
on Windows (where locks are very efficient) this ran ordinary Python
code about twice as slow as the interpreter using the GIL.  On Linux
the performance loss was even worse because pthread locks aren’t as
efficient.

Since then, the idea of getting rid of the GIL has occasionally come up
but nobody has found a way to deal with the expected slowdown, and
users who don’t use threads would not be happy if their code ran at
half the speed.  Greg’s free threading patch set has not been kept
up-to-date for later Python versions.

This doesn’t mean that you can’t make good use of Python on
multi-CPU machines!  You just have to be creative with dividing the
work up between multiple `processes' rather than multiple `threads'.
Judicious use of C extensions will also help; if you use a C extension
to perform a time-consuming task, the extension can release the GIL
while the thread of execution is in the C code and allow other threads
to get some work done.

It has been suggested that the GIL should be a per-interpreter-state
lock rather than truly global; interpreters then wouldn’t be able to
share objects.  Unfortunately, this isn’t likely to happen either.
It would be a tremendous amount of work, because many object
implementations currently have global state.  For example, small
integers and short strings are cached; these caches would have to be
moved to the interpreter state.  Other object types have their own free
list; these free lists would have to be moved to the interpreter state.
And so on.

And I doubt that it can even be done in finite time, because the same
problem exists for 3rd party extensions.  It is likely that 3rd party
extensions are being written at a faster rate than you can convert them
to store all their global state in the interpreter state.

And finally, once you have multiple interpreters not sharing any state,
what have you gained over running each interpreter in a separate
process?


File: python.info,  Node: Input and Output<2>,  Next: Network/Internet Programming,  Prev: Threads,  Up: Library and Extension FAQ

11.4.4 Input and Output
-----------------------

* Menu:

* How do I delete a file? (And other file questions…): How do I delete a file? And other file questions….
* How do I copy a file?::
* How do I read (or write) binary data?: How do I read or write binary data?.
* I can’t seem to use os.read() on a pipe created with os.popen(); why?: I can’t seem to use os read on a pipe created with os popen ; why?.
* How do I run a subprocess with pipes connected to both input and output?::
* How do I access the serial (RS232) port?: How do I access the serial RS232 port?.
* Why doesn’t closing sys.stdout (stdin, stderr) really close it?: Why doesn’t closing sys stdout stdin stderr really close it?.


File: python.info,  Node: How do I delete a file? And other file questions…,  Next: How do I copy a file?,  Up: Input and Output<2>

11.4.4.1 How do I delete a file? (And other file questions…)
..............................................................

Use `os.remove(filename)' or `os.unlink(filename)'; for documentation,
see the *Note os: 129. module.  The two functions are identical;
`unlink()' is simply the name of the Unix system call for this function.

To remove a directory, use *Note os.rmdir(): ed6.; use *Note
os.mkdir(): 1181. to create one.  `os.makedirs(path)' will create any
intermediate directories in `path' that don’t exist.
`os.removedirs(path)' will remove intermediate directories as long as
they’re empty; if you want to delete an entire directory tree and its
contents, use *Note shutil.rmtree(): ed4.

To rename a file, use `os.rename(old_path, new_path)'.

To truncate a file, open it using `f = open(filename, "r+")', and use
`f.truncate(offset)'; offset defaults to the current seek position.
There’s also `os.ftruncate(fd, offset)' for files opened with *Note
os.open(): 600, where `fd' is the file descriptor (a small integer).

The *Note shutil: 154. module also contains a number of functions to
work on files including *Note copyfile(): 24c, *Note copytree(): 24d,
and *Note rmtree(): ed4.


File: python.info,  Node: How do I copy a file?,  Next: How do I read or write binary data?,  Prev: How do I delete a file? And other file questions…,  Up: Input and Output<2>

11.4.4.2 How do I copy a file?
..............................

The *Note shutil: 154. module contains a *Note copyfile(): 24c.
function.  Note that on MacOS 9 it doesn’t copy the resource fork and
Finder info.


File: python.info,  Node: How do I read or write binary data?,  Next: I can’t seem to use os read on a pipe created with os popen ; why?,  Prev: How do I copy a file?,  Up: Input and Output<2>

11.4.4.3 How do I read (or write) binary data?
..............................................

To read or write complex binary data formats, it’s best to use the
*Note struct: 166.  module.  It allows you to take a string containing
binary data (usually numbers) and convert it to Python objects; and
vice versa.

For example, the following code reads two 2-byte integers and one
4-byte integer in big-endian format from a file:

    import struct

    f = open(filename, "rb")  # Open in binary mode for portability
    s = f.read(8)
    x, y, z = struct.unpack(">hhl", s)

The ‘>’ in the format string forces big-endian data; the letter
‘h’ reads one “short integer” (2 bytes), and ‘l’ reads one
“long integer” (4 bytes) from the string.

For data that is more regular (e.g. a homogeneous list of ints or
floats), you can also use the *Note array: e. module.


File: python.info,  Node: I can’t seem to use os read on a pipe created with os popen ; why?,  Next: How do I run a subprocess with pipes connected to both input and output?,  Prev: How do I read or write binary data?,  Up: Input and Output<2>

11.4.4.4 I can’t seem to use os.read() on a pipe created with os.popen(); why?
................................................................................

*Note os.read(): 936. is a low-level function which takes a file
descriptor, a small integer representing the opened file.  *Note
os.popen(): 728. creates a high-level file object, the same type
returned by the built-in *Note open(): 2d9. function.  Thus, to read
`n' bytes from a pipe `p' created with *Note os.popen(): 728, you need
to use `p.read(n)'.


File: python.info,  Node: How do I run a subprocess with pipes connected to both input and output?,  Next: How do I access the serial RS232 port?,  Prev: I can’t seem to use os read on a pipe created with os popen ; why?,  Up: Input and Output<2>

11.4.4.5 How do I run a subprocess with pipes connected to both input and output?
.................................................................................

Use the *Note popen2: 135. module.  For example:

    import popen2
    fromchild, tochild = popen2.popen2("command")
    tochild.write("input\n")
    tochild.flush()
    output = fromchild.readline()

Warning: in general it is unwise to do this because you can easily
cause a deadlock where your process is blocked waiting for output from
the child while the child is blocked waiting for input from you.  This
can be caused by the parent expecting the child to output more text
than it does or by data being stuck in stdio buffers due to lack of
flushing.  The Python parent can of course explicitly flush the data it
sends to the child before it reads any output, but if the child is a
naive C program it may have been written to never explicitly flush its
output, even if it is interactive, since flushing is normally automatic.

Note that a deadlock is also possible if you use `popen3()' to read
stdout and stderr. If one of the two is too large for the internal
buffer (increasing the buffer size does not help) and you `read()' the
other one first, there is a deadlock, too.

Note on a bug in popen2: unless your program calls `wait()' or
`waitpid()', finished child processes are never removed, and eventually
calls to popen2 will fail because of a limit on the number of child
processes.  Calling *Note os.waitpid(): 11b9. with the *Note
os.WNOHANG: 11c1. option can prevent this; a good place to insert such
a call would be before calling `popen2' again.

In many cases, all you really need is to run some data through a
command and get the result back.  Unless the amount of data is very
large, the easiest way to do this is to write it to a temporary file
and run the command with that temporary file as input.  The standard
module *Note tempfile: 173. exports a *Note mktemp(): eb3. function to
generate unique temporary file names.

    import tempfile
    import os

    class Popen3:
        """
        This is a deadlock-safe version of popen that returns
        an object with errorlevel, out (a string) and err (a string).
        (capturestderr may not work under windows.)
        Example: print Popen3('grep spam','\n\nhere spam\n\n').out
        """
        def __init__(self,command,input=None,capturestderr=None):
            outfile=tempfile.mktemp()
            command="( %s ) > %s" % (command,outfile)
            if input:
                infile=tempfile.mktemp()
                open(infile,"w").write(input)
                command=command+" <"+infile
            if capturestderr:
                errfile=tempfile.mktemp()
                command=command+" 2>"+errfile
            self.errorlevel=os.system(command) >> 8
            self.out=open(outfile,"r").read()
            os.remove(outfile)
            if input:
                os.remove(infile)
            if capturestderr:
                self.err=open(errfile,"r").read()
                os.remove(errfile)

Note that many interactive programs (e.g. vi) don’t work well with
pipes substituted for standard input and output.  You will have to use
pseudo ttys (“ptys”) instead of pipes. Or you can use a Python
interface to Don Libes’ “expect” library.  A Python extension
that interfaces to expect is called “expy” and available from
<http://expectpy.sourceforge.net>.  A pure Python solution that works
like expect is pexpect(1).

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/pexpect/


File: python.info,  Node: How do I access the serial RS232 port?,  Next: Why doesn’t closing sys stdout stdin stderr really close it?,  Prev: How do I run a subprocess with pipes connected to both input and output?,  Up: Input and Output<2>

11.4.4.6 How do I access the serial (RS232) port?
.................................................

For Win32, POSIX (Linux, BSD, etc.), Jython:

     <http://pyserial.sourceforge.net>

For Unix, see a Usenet post by Mitch Chapman:

     <https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com>


File: python.info,  Node: Why doesn’t closing sys stdout stdin stderr really close it?,  Prev: How do I access the serial RS232 port?,  Up: Input and Output<2>

11.4.4.7 Why doesn’t closing sys.stdout (stdin, stderr) really close it?
..........................................................................

Python file objects are a high-level layer of abstraction on top of C
streams, which in turn are a medium-level layer of abstraction on top
of (among other things) low-level C file descriptors.

For most file objects you create in Python via the built-in `file'
constructor, `f.close()' marks the Python file object as being closed
from Python’s point of view, and also arranges to close the
underlying C stream.  This also happens automatically in `f'’s
destructor, when `f' becomes garbage.

But stdin, stdout and stderr are treated specially by Python, because
of the special status also given to them by C.  Running
`sys.stdout.close()' marks the Python-level file object as being
closed, but does `not' close the associated C stream.

To close the underlying C stream for one of these three, you should
first be sure that’s what you really want to do (e.g., you may
confuse extension modules trying to do I/O).  If it is, use os.close:

    os.close(0)   # close C's stdin stream
    os.close(1)   # close C's stdout stream
    os.close(2)   # close C's stderr stream


File: python.info,  Node: Network/Internet Programming,  Next: Databases,  Prev: Input and Output<2>,  Up: Library and Extension FAQ

11.4.5 Network/Internet Programming
-----------------------------------

* Menu:

* What WWW tools are there for Python?::
* How can I mimic CGI form submission (METHOD=POST)?: How can I mimic CGI form submission METHOD=POST ?.
* What module should I use to help with generating HTML?::
* How do I send mail from a Python script?::
* How do I avoid blocking in the connect() method of a socket?: How do I avoid blocking in the connect method of a socket?.


File: python.info,  Node: What WWW tools are there for Python?,  Next: How can I mimic CGI form submission METHOD=POST ?,  Up: Network/Internet Programming

11.4.5.1 What WWW tools are there for Python?
.............................................

See the chapters titled *Note Internet Protocols and Support: 1c6a. and
*Note Internet Data Handling: 1863. in the Library Reference Manual.
Python has many modules that will help you build server-side and
client-side web systems.

A summary of available frameworks is maintained by Paul Boddie at
<https://wiki.python.org/moin/WebProgramming>.

Cameron Laird maintains a useful set of pages about Python web
technologies at <http://phaseit.net/claird/comp.lang.python/web_python>.


File: python.info,  Node: How can I mimic CGI form submission METHOD=POST ?,  Next: What module should I use to help with generating HTML?,  Prev: What WWW tools are there for Python?,  Up: Network/Internet Programming

11.4.5.2 How can I mimic CGI form submission (METHOD=POST)?
...........................................................

I would like to retrieve web pages that are the result of POSTing a
form. Is there existing code that would let me do this easily?

Yes. Here’s a simple example that uses httplib:

    #!/usr/local/bin/python

    import httplib, sys, time

    # build the query string
    qs = "First=Josephine&MI=Q&Last=Public"

    # connect and send the server a path
    httpobj = httplib.HTTP('www.some-server.out-there', 80)
    httpobj.putrequest('POST', '/cgi-bin/some-cgi-script')
    # now generate the rest of the HTTP headers...
    httpobj.putheader('Accept', '*/*')
    httpobj.putheader('Connection', 'Keep-Alive')
    httpobj.putheader('Content-type', 'application/x-www-form-urlencoded')
    httpobj.putheader('Content-length', '%d' % len(qs))
    httpobj.endheaders()
    httpobj.send(qs)
    # find out what the server said in response...
    reply, msg, hdrs = httpobj.getreply()
    if reply != 200:
        sys.stdout.write(httpobj.getfile().read())

Note that in general for percent-encoded POST operations, query strings
must be quoted using *Note urllib.urlencode(): 13b7.  For example, to
send `name=Guy Steele, Jr.':

    >>> import urllib
    >>> urllib.urlencode({'name': 'Guy Steele, Jr.'})
    'name=Guy+Steele%2C+Jr.'


File: python.info,  Node: What module should I use to help with generating HTML?,  Next: How do I send mail from a Python script?,  Prev: How can I mimic CGI form submission METHOD=POST ?,  Up: Network/Internet Programming

11.4.5.3 What module should I use to help with generating HTML?
...............................................................

You can find a collection of useful links on the Web Programming wiki
page(1).

---------- Footnotes ----------

(1) https://wiki.python.org/moin/WebProgramming


File: python.info,  Node: How do I send mail from a Python script?,  Next: How do I avoid blocking in the connect method of a socket?,  Prev: What module should I use to help with generating HTML?,  Up: Network/Internet Programming

11.4.5.4 How do I send mail from a Python script?
.................................................

Use the standard library module *Note smtplib: 15a.

Here’s a very simple interactive mail sender that uses it.  This
method will work on any host that supports an SMTP listener.

    import sys, smtplib

    fromaddr = raw_input("From: ")
    toaddrs  = raw_input("To: ").split(',')
    print "Enter message, end with ^D:"
    msg = ''
    while True:
        line = sys.stdin.readline()
        if not line:
            break
        msg += line

    # The actual mail send
    server = smtplib.SMTP('localhost')
    server.sendmail(fromaddr, toaddrs, msg)
    server.quit()

A Unix-only alternative uses sendmail.  The location of the sendmail
program varies between systems; sometimes it is `/usr/lib/sendmail',
sometimes `/usr/sbin/sendmail'.  The sendmail manual page will help you
out.  Here’s some sample code:

    import os

    SENDMAIL = "/usr/sbin/sendmail"  # sendmail location
    p = os.popen("%s -t -i" % SENDMAIL, "w")
    p.write("To: receiver@example.com\n")
    p.write("Subject: test\n")
    p.write("\n") # blank line separating headers from body
    p.write("Some text\n")
    p.write("some more text\n")
    sts = p.close()
    if sts != 0:
        print "Sendmail exit status", sts


File: python.info,  Node: How do I avoid blocking in the connect method of a socket?,  Prev: How do I send mail from a Python script?,  Up: Network/Internet Programming

11.4.5.5 How do I avoid blocking in the connect() method of a socket?
.....................................................................

The select module is commonly used to help with asynchronous I/O on
sockets.

To prevent the TCP connect from blocking, you can set the socket to
non-blocking mode.  Then when you do the `connect()', you will either
connect immediately (unlikely) or get an exception that contains the
error number as `.errno'.  `errno.EINPROGRESS' indicates that the
connection is in progress, but hasn’t finished yet.  Different OSes
will return different values, so you’re going to have to check
what’s returned on your system.

You can use the `connect_ex()' method to avoid creating an exception.
It will just return the errno value.  To poll, you can call
`connect_ex()' again later – 0 or `errno.EISCONN' indicate that
you’re connected – or you can pass this socket to select to check
if it’s writable.


File: python.info,  Node: Databases,  Next: Mathematics and Numerics,  Prev: Network/Internet Programming,  Up: Library and Extension FAQ

11.4.6 Databases
----------------

* Menu:

* Are there any interfaces to database packages in Python?::
* How do you implement persistent objects in Python?::
* Why is cPickle so slow?::
* If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?.
* I tried to open Berkeley DB file, but bsddb produces bsddb.error; (22, ‘Invalid argument’). Help! How can I restore my data?: I tried to open Berkeley DB file but bsddb produces bsddb error 22 ‘Invalid argument’ Help! How can I restore my data?.


File: python.info,  Node: Are there any interfaces to database packages in Python?,  Next: How do you implement persistent objects in Python?,  Up: Databases

11.4.6.1 Are there any interfaces to database packages in Python?
.................................................................

Yes.

Python 2.3 includes the *Note bsddb: 1c. package which provides an
interface to the BerkeleyDB library.  Interfaces to disk-based hashes
such as *Note DBM: 7f.  and *Note GDBM: dd. are also included with
standard Python.

Support for most relational databases is available.  See the
DatabaseProgramming wiki page(1) for details.

---------- Footnotes ----------

(1) https://wiki.python.org/moin/DatabaseProgramming


File: python.info,  Node: How do you implement persistent objects in Python?,  Next: Why is cPickle so slow?,  Prev: Are there any interfaces to database packages in Python?,  Up: Databases

11.4.6.2 How do you implement persistent objects in Python?
...........................................................

The *Note pickle: 12e. library module solves this in a very general way
(though you still can’t store things like open files, sockets or
windows), and the *Note shelve: 152. library module uses pickle and
(g)dbm to create persistent mappings containing arbitrary Python
objects.  For better performance, you can use the *Note cPickle: 73.
module.

A more awkward way of doing things is to use pickle’s little sister,
marshal.  The *Note marshal: 10c. module provides very fast ways to
store noncircular basic Python types to files and strings, and back
again.  Although marshal does not do fancy things like store instances
or handle shared references properly, it does run extremely fast.  For
example, loading a half megabyte of data may take less than a third of
a second.  This often beats doing something more complex and general
such as using gdbm with pickle/shelve.


File: python.info,  Node: Why is cPickle so slow?,  Next: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Prev: How do you implement persistent objects in Python?,  Up: Databases

11.4.6.3 Why is cPickle so slow?
................................

By default *Note pickle: 12e. uses a relatively old and slow format for
backward compatibility.  You can however specify other protocol
versions that are faster:

    largeString = 'z' * (100 * 1024)
    myPickle = cPickle.dumps(largeString, protocol=1)


File: python.info,  Node: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Next: I tried to open Berkeley DB file but bsddb produces bsddb error 22 ‘Invalid argument’ Help! How can I restore my data?,  Prev: Why is cPickle so slow?,  Up: Databases

11.4.6.4 If my program crashes with a bsddb (or anydbm) database open, it gets corrupted. How come?
...................................................................................................

Databases opened for write access with the bsddb module (and often by
the anydbm module, since it will preferentially use bsddb) must
explicitly be closed using the `.close()' method of the database.  The
underlying library caches database contents which need to be converted
to on-disk form and written.

If you have initialized a new bsddb database but not written anything
to it before the program crashes, you will often wind up with a
zero-length file and encounter an exception the next time the file is
opened.


File: python.info,  Node: I tried to open Berkeley DB file but bsddb produces bsddb error 22 ‘Invalid argument’ Help! How can I restore my data?,  Prev: If my program crashes with a bsddb or anydbm database open it gets corrupted How come?,  Up: Databases

11.4.6.5 I tried to open Berkeley DB file, but bsddb produces bsddb.error: (22, ‘Invalid argument’). Help! How can I restore my data?
.........................................................................................................................................

Don’t panic! Your data is probably intact. The most frequent cause
for the error is that you tried to open an earlier Berkeley DB file
with a later version of the Berkeley DB library.

Many Linux systems now have all three versions of Berkeley DB
available.  If you are migrating from version 1 to a newer version use
db_dump185 to dump a plain text version of the database.  If you are
migrating from version 2 to version 3 use db2_dump to create a plain
text version of the database.  In either case, use db_load to create a
new native database for the latest version installed on your computer.
If you have version 3 of Berkeley DB installed, you should be able to
use db2_load to create a native version 2 database.

You should move away from Berkeley DB version 1 files because the hash
file code contains known bugs that can corrupt your data.


File: python.info,  Node: Mathematics and Numerics,  Prev: Databases,  Up: Library and Extension FAQ

11.4.7 Mathematics and Numerics
-------------------------------

* Menu:

* How do I generate random numbers in Python?::


File: python.info,  Node: How do I generate random numbers in Python?,  Up: Mathematics and Numerics

11.4.7.1 How do I generate random numbers in Python?
....................................................

The standard module *Note random: 143. implements a random number
generator.  Usage is simple:

    import random
    random.random()

This returns a random floating point number in the range [0, 1).

There are also many other specialized generators in this module, such
as:

   * `randrange(a, b)' chooses an integer in the range [a, b).

   * `uniform(a, b)' chooses a floating point number in the range [a,
     b).

   * `normalvariate(mean, sdev)' samples the normal (Gaussian)
     distribution.

Some higher-level functions operate on sequences directly, such as:

   * `choice(S)' chooses random element from a given sequence

   * `shuffle(L)' shuffles a list in-place, i.e. permutes it randomly

There’s also a `Random' class you can instantiate to create
independent multiple random number generators.


File: python.info,  Node: Extending/Embedding FAQ,  Next: Python on Windows FAQ,  Prev: Library and Extension FAQ,  Up: Python Frequently Asked Questions

11.5 Extending/Embedding FAQ
============================

* Menu:

* Can I create my own functions in C?::
* Can I create my own functions in C++?::
* Writing C is hard; are there any alternatives?::
* How can I execute arbitrary Python statements from C?::
* How can I evaluate an arbitrary Python expression from C?::
* How do I extract C values from a Python object?::
* How do I use Py_BuildValue() to create a tuple of arbitrary length?: How do I use Py_BuildValue to create a tuple of arbitrary length?.
* How do I call an object’s method from C?::
* How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?.
* How do I access a module written in Python from C?::
* How do I interface to C++ objects from Python?::
* I added a module using the Setup file and the make fails; why?::
* How do I debug an extension?::
* I want to compile a Python module on my Linux system, but some files are missing. Why?: I want to compile a Python module on my Linux system but some files are missing Why?.
* What does “SystemError; _PyImport_FixupExtension; module yourmodule not loaded” mean?: What does “SystemError _PyImport_FixupExtension module yourmodule not loaded” mean?.
* How do I tell “incomplete input” from “invalid input”?::
* How do I find undefined g++ symbols __builtin_new or __pure_virtual?::
* Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?.
* When importing module X, why do I get “undefined symbol; PyUnicodeUCS2*”?: When importing module X why do I get “undefined symbol PyUnicodeUCS2*”?.


File: python.info,  Node: Can I create my own functions in C?,  Next: Can I create my own functions in C++?,  Up: Extending/Embedding FAQ

11.5.1 Can I create my own functions in C?
------------------------------------------

Yes, you can create built-in modules containing functions, variables,
exceptions and even new types in C.  This is explained in the document
*Note Extending and Embedding the Python Interpreter: 517.

Most intermediate or advanced Python books will also cover this topic.


File: python.info,  Node: Can I create my own functions in C++?,  Next: Writing C is hard; are there any alternatives?,  Prev: Can I create my own functions in C?,  Up: Extending/Embedding FAQ

11.5.2 Can I create my own functions in C++?
--------------------------------------------

Yes, using the C compatibility features found in C++.  Place `extern
"C" { ... }' around the Python include files and put `extern "C"'
before each function that is going to be called by the Python
interpreter.  Global or static C++ objects with constructors are
probably not a good idea.


File: python.info,  Node: Writing C is hard; are there any alternatives?,  Next: How can I execute arbitrary Python statements from C?,  Prev: Can I create my own functions in C++?,  Up: Extending/Embedding FAQ

11.5.3 Writing C is hard; are there any alternatives?
-----------------------------------------------------

There are a number of alternatives to writing your own C extensions,
depending on what you’re trying to do.

If you need more speed, Psyco(1) generates x86 assembly code from
Python bytecode.  You can use Psyco to compile the most time-critical
functions in your code, and gain a significant improvement with very
little effort, as long as you’re running on a machine with an
x86-compatible processor.

Cython(2) and its relative Pyrex(3) are compilers that accept a
slightly modified form of Python and generate the corresponding C code.
Pyrex makes it possible to write an extension without having to learn
Python’s C API.

If you need to interface to some C or C++ library for which no Python
extension currently exists, you can try wrapping the library’s data
types and functions with a tool such as SWIG(4).  SIP(5), CXX(6)
Boost(7), or Weave(8) are also alternatives for wrapping C++ libraries.

---------- Footnotes ----------

(1) http://psyco.sourceforge.net/

(2) http://cython.org

(3) https://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/

(4) http://www.swig.org

(5) https://riverbankcomputing.com/software/sip/intro

(6) http://cxx.sourceforge.net/

(7) http://www.boost.org/libs/python/doc/index.html

(8) https://scipy.github.io/devdocs/tutorial/weave.html


File: python.info,  Node: How can I execute arbitrary Python statements from C?,  Next: How can I evaluate an arbitrary Python expression from C?,  Prev: Writing C is hard; are there any alternatives?,  Up: Extending/Embedding FAQ

11.5.4 How can I execute arbitrary Python statements from C?
------------------------------------------------------------

The highest-level function to do this is *Note PyRun_SimpleString():
2ae8. which takes a single string argument to be executed in the
context of the module `__main__' and returns 0 for success and -1 when
an exception occurred (including `SyntaxError').  If you want more
control, use *Note PyRun_String(): 2b2e.; see the source for *Note
PyRun_SimpleString(): 2ae8. in `Python/pythonrun.c'.


File: python.info,  Node: How can I evaluate an arbitrary Python expression from C?,  Next: How do I extract C values from a Python object?,  Prev: How can I execute arbitrary Python statements from C?,  Up: Extending/Embedding FAQ

11.5.5 How can I evaluate an arbitrary Python expression from C?
----------------------------------------------------------------

Call the function *Note PyRun_String(): 2b2e. from the previous
question with the start symbol *Note Py_eval_input: 2b3b.; it parses an
expression, evaluates it and returns its value.


File: python.info,  Node: How do I extract C values from a Python object?,  Next: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Prev: How can I evaluate an arbitrary Python expression from C?,  Up: Extending/Embedding FAQ

11.5.6 How do I extract C values from a Python object?
------------------------------------------------------

That depends on the object’s type.  If it’s a tuple, *Note
PyTuple_Size(): 2d97.  returns its length and *Note PyTuple_GetItem():
2a87. returns the item at a specified index.  Lists have similar
functions, `PyListSize()' and *Note PyList_GetItem(): 2a88.

For strings, *Note PyString_Size(): 2cec. returns its length and *Note
PyString_AsString(): 2cee. a pointer to its value.  Note that Python
strings may contain null bytes so C’s `strlen()' should not be used.

To test the type of an object, first make sure it isn’t `NULL', and
then use *Note PyString_Check(): 2ce8, *Note PyTuple_Check(): 2d93,
*Note PyList_Check(): 2da1, etc.

There is also a high-level API to Python objects which is provided by
the so-called ‘abstract’ interface – read `Include/abstract.h'
for further details.  It allows interfacing with any kind of Python
sequence using calls like *Note PySequence_Length(): 2c3a, *Note
PySequence_GetItem(): 2b0a, etc.)  as well as many other useful
protocols.


File: python.info,  Node: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Next: How do I call an object’s method from C?,  Prev: How do I extract C values from a Python object?,  Up: Extending/Embedding FAQ

11.5.7 How do I use Py_BuildValue() to create a tuple of arbitrary length?
--------------------------------------------------------------------------

You can’t.  Use `t = PyTuple_New(n)' instead, and fill it with
objects using `PyTuple_SetItem(t, i, o)' – note that this “eats”
a reference count of `o', so you have to *Note Py_INCREF(): 2a62. it.
Lists have similar functions `PyList_New(n)' and `PyList_SetItem(l, i,
o)'.  Note that you `must' set all the tuple items to some value before
you pass the tuple to Python code – `PyTuple_New(n)' initializes them
to NULL, which isn’t a valid Python value.


File: python.info,  Node: How do I call an object’s method from C?,  Next: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Prev: How do I use Py_BuildValue to create a tuple of arbitrary length?,  Up: Extending/Embedding FAQ

11.5.8 How do I call an object’s method from C?
-------------------------------------------------

The *Note PyObject_CallMethod(): 2bfd. function can be used to call an
arbitrary method of an object.  The parameters are the object, the name
of the method to call, a format string like that used with *Note
Py_BuildValue(): 3c0, and the argument values:

    PyObject *
    PyObject_CallMethod(PyObject *object, char *method_name,
                        char *arg_format, ...);

This works for any object that has methods – whether built-in or
user-defined.  You are responsible for eventually *Note Py_DECREF():
2a68.’ing the return value.

To call, e.g., a file object’s “seek” method with arguments 10, 0
(assuming the file object pointer is “f”):

    res = PyObject_CallMethod(f, "seek", "(ii)", 10, 0);
    if (res == NULL) {
            ... an exception occurred ...
    }
    else {
            Py_DECREF(res);
    }

Note that since *Note PyObject_CallObject(): 2a79. `always' wants a
tuple for the argument list, to call a function without arguments, pass
“()” for the format, and to call a function with one argument,
surround the argument in parentheses, e.g. “(i)”.


File: python.info,  Node: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Next: How do I access a module written in Python from C?,  Prev: How do I call an object’s method from C?,  Up: Extending/Embedding FAQ

11.5.9 How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?
-----------------------------------------------------------------------------------------------

In Python code, define an object that supports the `write()' method.
Assign this object to *Note sys.stdout: 8b2. and *Note sys.stderr: 672.
Call print_error, or just allow the standard traceback mechanism to
work. Then, the output will go wherever your `write()' method sends it.

The easiest way to do this is to use the StringIO class in the standard
library.

Sample code and use for catching stdout:

    >>> class StdoutCatcher:
    ...     def __init__(self):
    ...         self.data = ''
    ...     def write(self, stuff):
    ...         self.data = self.data + stuff
    ...
    >>> import sys
    >>> sys.stdout = StdoutCatcher()
    >>> print 'foo'
    >>> print 'hello world!'
    >>> sys.stderr.write(sys.stdout.data)
    foo
    hello world!


File: python.info,  Node: How do I access a module written in Python from C?,  Next: How do I interface to C++ objects from Python?,  Prev: How do I catch the output from PyErr_Print or anything that prints to stdout/stderr ?,  Up: Extending/Embedding FAQ

11.5.10 How do I access a module written in Python from C?
----------------------------------------------------------

You can get a pointer to the module object as follows:

    module = PyImport_ImportModule("<modulename>");

If the module hasn’t been imported yet (i.e. it is not yet present in
*Note sys.modules: 84c.), this initializes the module; otherwise it
simply returns the value of `sys.modules["<modulename>"]'.  Note that
it doesn’t enter the module into any namespace – it only ensures it
has been initialized and is stored in *Note sys.modules: 84c.

You can then access the module’s attributes (i.e. any name defined in
the module) as follows:

    attr = PyObject_GetAttrString(module, "<attrname>");

Calling *Note PyObject_SetAttrString(): 2bef. to assign to variables in
the module also works.


File: python.info,  Node: How do I interface to C++ objects from Python?,  Next: I added a module using the Setup file and the make fails; why?,  Prev: How do I access a module written in Python from C?,  Up: Extending/Embedding FAQ

11.5.11 How do I interface to C++ objects from Python?
------------------------------------------------------

Depending on your requirements, there are many approaches.  To do this
manually, begin by reading *Note the “Extending and Embedding”
document: 517.  Realize that for the Python run-time system, there
isn’t a whole lot of difference between C and C++ – so the strategy
of building a new Python type around a C structure (pointer) type will
also work for C++ objects.

For C++ libraries, see *Note Writing C is hard; are there any
alternatives?: 3118.


File: python.info,  Node: I added a module using the Setup file and the make fails; why?,  Next: How do I debug an extension?,  Prev: How do I interface to C++ objects from Python?,  Up: Extending/Embedding FAQ

11.5.12 I added a module using the Setup file and the make fails; why?
----------------------------------------------------------------------

Setup must end in a newline, if there is no newline there, the build
process fails.  (Fixing this requires some ugly shell script hackery,
and this bug is so minor that it doesn’t seem worth the effort.)


File: python.info,  Node: How do I debug an extension?,  Next: I want to compile a Python module on my Linux system but some files are missing Why?,  Prev: I added a module using the Setup file and the make fails; why?,  Up: Extending/Embedding FAQ

11.5.13 How do I debug an extension?
------------------------------------

When using GDB with dynamically loaded extensions, you can’t set a
breakpoint in your extension until your extension is loaded.

In your `.gdbinit' file (or interactively), add the command:

    br _PyImport_LoadDynamicModule

Then, when you run GDB:

    $ gdb /local/bin/python
    gdb) run myscript.py
    gdb) continue # repeat until your extension is loaded
    gdb) finish   # so that your extension is loaded
    gdb) br myfunction.c:50
    gdb) continue


File: python.info,  Node: I want to compile a Python module on my Linux system but some files are missing Why?,  Next: What does “SystemError _PyImport_FixupExtension module yourmodule not loaded” mean?,  Prev: How do I debug an extension?,  Up: Extending/Embedding FAQ

11.5.14 I want to compile a Python module on my Linux system, but some files are missing. Why?
----------------------------------------------------------------------------------------------

Most packaged versions of Python don’t include the
`/usr/lib/python2.`x'/config/' directory, which contains various files
required for compiling Python extensions.

For Red Hat, install the python-devel RPM to get the necessary files.

For Debian, run `apt-get install python-dev'.


File: python.info,  Node: What does “SystemError _PyImport_FixupExtension module yourmodule not loaded” mean?,  Next: How do I tell “incomplete input” from “invalid input”?,  Prev: I want to compile a Python module on my Linux system but some files are missing Why?,  Up: Extending/Embedding FAQ

11.5.15 What does “SystemError: _PyImport_FixupExtension: module yourmodule not loaded” mean?
-------------------------------------------------------------------------------------------------

This means that you have created an extension module named
“yourmodule”, but your module init function does not initialize
with that name.

Every module init function will have a line similar to:

    module = Py_InitModule("yourmodule", yourmodule_functions);

If the string passed to this function is not the same name as your
extension module, the *Note SystemError: 97a. exception will be raised.


File: python.info,  Node: How do I tell “incomplete input” from “invalid input”?,  Next: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Prev: What does “SystemError _PyImport_FixupExtension module yourmodule not loaded” mean?,  Up: Extending/Embedding FAQ

11.5.16 How do I tell “incomplete input” from “invalid input”?
----------------------------------------------------------------------

Sometimes you want to emulate the Python interactive interpreter’s
behavior, where it gives you a continuation prompt when the input is
incomplete (e.g. you typed the start of an “if” statement or you
didn’t close your parentheses or triple string quotes), but it gives
you a syntax error message immediately when the input is invalid.

In Python you can use the *Note codeop: 64. module, which approximates
the parser’s behavior sufficiently.  IDLE uses this, for example.

The easiest way to do it in C is to call *Note PyRun_InteractiveLoop():
2b21. (perhaps in a separate thread) and let the Python interpreter
handle the input for you. You can also set the
`PyOS_ReadlineFunctionPointer()' to point at your custom input
function. See `Modules/readline.c' and `Parser/myreadline.c' for more
hints.

However sometimes you have to run the embedded Python interpreter in
the same thread as your rest application and you can’t allow the
*Note PyRun_InteractiveLoop(): 2b21. to stop while waiting for user
input.  The one solution then is to call `PyParser_ParseString()' and
test for `e.error' equal to `E_EOF', which means the input is
incomplete).  Here’s a sample code fragment, untested, inspired by
code from Alex Farber:

    #include <Python.h>
    #include <node.h>
    #include <errcode.h>
    #include <grammar.h>
    #include <parsetok.h>
    #include <compile.h>

    int testcomplete(char *code)
      /* code should end in \n */
      /* return -1 for error, 0 for incomplete, 1 for complete */
    {
      node *n;
      perrdetail e;

      n = PyParser_ParseString(code, &_PyParser_Grammar,
                               Py_file_input, &e);
      if (n == NULL) {
        if (e.error == E_EOF)
          return 0;
        return -1;
      }

      PyNode_Free(n);
      return 1;
    }

Another solution is trying to compile the received string with *Note
Py_CompileString(): 2b34. If it compiles without errors, try to execute
the returned code object by calling *Note PyEval_EvalCode(): 2b36.
Otherwise save the input for later. If the compilation fails, find out
if it’s an error or just more input is required - by extracting the
message string from the exception tuple and comparing it to the string
“unexpected EOF while parsing”.  Here is a complete example using
the GNU readline library (you may want to ignore `SIGINT' while calling
readline()):

    #include <stdio.h>
    #include <readline.h>

    #include <Python.h>
    #include <object.h>
    #include <compile.h>
    #include <eval.h>

    int main (int argc, char* argv[])
    {
      int i, j, done = 0;                          /* lengths of line, code */
      char ps1[] = ">>> ";
      char ps2[] = "... ";
      char *prompt = ps1;
      char *msg, *line, *code = NULL;
      PyObject *src, *glb, *loc;
      PyObject *exc, *val, *trb, *obj, *dum;

      Py_Initialize ();
      loc = PyDict_New ();
      glb = PyDict_New ();
      PyDict_SetItemString (glb, "__builtins__", PyEval_GetBuiltins ());

      while (!done)
      {
        line = readline (prompt);

        if (NULL == line)                          /* Ctrl-D pressed */
        {
          done = 1;
        }
        else
        {
          i = strlen (line);

          if (i > 0)
            add_history (line);                    /* save non-empty lines */

          if (NULL == code)                        /* nothing in code yet */
            j = 0;
          else
            j = strlen (code);

          code = realloc (code, i + j + 2);
          if (NULL == code)                        /* out of memory */
            exit (1);

          if (0 == j)                              /* code was empty, so */
            code[0] = '\0';                        /* keep strncat happy */

          strncat (code, line, i);                 /* append line to code */
          code[i + j] = '\n';                      /* append '\n' to code */
          code[i + j + 1] = '\0';

          src = Py_CompileString (code, "<stdin>", Py_single_input);

          if (NULL != src)                         /* compiled just fine - */
          {
            if (ps1  == prompt ||                  /* ">>> " or */
                '\n' == code[i + j - 1])           /* "... " and double '\n' */
            {                                               /* so execute it */
              dum = PyEval_EvalCode ((PyCodeObject *)src, glb, loc);
              Py_XDECREF (dum);
              Py_XDECREF (src);
              free (code);
              code = NULL;
              if (PyErr_Occurred ())
                PyErr_Print ();
              prompt = ps1;
            }
          }                                        /* syntax error or E_EOF? */
          else if (PyErr_ExceptionMatches (PyExc_SyntaxError))
          {
            PyErr_Fetch (&exc, &val, &trb);        /* clears exception! */

            if (PyArg_ParseTuple (val, "sO", &msg, &obj) &&
                !strcmp (msg, "unexpected EOF while parsing")) /* E_EOF */
            {
              Py_XDECREF (exc);
              Py_XDECREF (val);
              Py_XDECREF (trb);
              prompt = ps2;
            }
            else                                   /* some other syntax error */
            {
              PyErr_Restore (exc, val, trb);
              PyErr_Print ();
              free (code);
              code = NULL;
              prompt = ps1;
            }
          }
          else                                     /* some non-syntax error */
          {
            PyErr_Print ();
            free (code);
            code = NULL;
            prompt = ps1;
          }

          free (line);
        }
      }

      Py_XDECREF(glb);
      Py_XDECREF(loc);
      Py_Finalize();
      exit(0);
    }


File: python.info,  Node: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Next: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Prev: How do I tell “incomplete input” from “invalid input”?,  Up: Extending/Embedding FAQ

11.5.17 How do I find undefined g++ symbols __builtin_new or __pure_virtual?
----------------------------------------------------------------------------

To dynamically load g++ extension modules, you must recompile Python,
relink it using g++ (change LINKCC in the Python Modules Makefile), and
link your extension module using g++ (e.g., `g++ -shared -o mymodule.so
mymodule.o').


File: python.info,  Node: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Next: When importing module X why do I get “undefined symbol PyUnicodeUCS2*”?,  Prev: How do I find undefined g++ symbols __builtin_new or __pure_virtual?,  Up: Extending/Embedding FAQ

11.5.18 Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?
------------------------------------------------------------------------------------------------------------------------

Yes, you can inherit from built-in classes such as *Note int: 1f2,
*Note list: 3d6, *Note dict: 319, etc.

The Boost Python Library (BPL,
<http://www.boost.org/libs/python/doc/index.html>) provides a way of
doing this from C++ (i.e. you can inherit from an extension class
written in C++ using the BPL).


File: python.info,  Node: When importing module X why do I get “undefined symbol PyUnicodeUCS2*”?,  Prev: Can I create an object class with some methods implemented in C and others in Python e g through inheritance ?,  Up: Extending/Embedding FAQ

11.5.19 When importing module X, why do I get “undefined symbol: PyUnicodeUCS2*”?
-------------------------------------------------------------------------------------

You are using a version of Python that uses a 4-byte representation for
Unicode characters, but some C extension module you are importing was
compiled using a Python that uses a 2-byte representation for Unicode
characters (the default).

If instead the name of the undefined symbol starts with
`PyUnicodeUCS4', the problem is the reverse: Python was built using
2-byte Unicode characters, and the extension module was compiled using
a Python with 4-byte Unicode characters.

This can easily occur when using pre-built extension packages.  RedHat
Linux 7.x, in particular, provided a “python2” binary that is
compiled with 4-byte Unicode.  This only causes the link failure if the
extension uses any of the `PyUnicode_*()' functions.  It is also a
problem if an extension uses any of the Unicode-related format
specifiers for *Note Py_BuildValue(): 3c0. (or similar) or parameter
specifications for *Note PyArg_ParseTuple(): 32f.

You can check the size of the Unicode character a Python interpreter is
using by checking the value of sys.maxunicode:

    >>> import sys
    >>> if sys.maxunicode > 65535:
    ...     print 'UCS4 build'
    ... else:
    ...     print 'UCS2 build'

The only way to solve this problem is to use extension modules compiled
with a Python binary built using the same size for Unicode characters.


File: python.info,  Node: Python on Windows FAQ,  Next: Graphic User Interface FAQ,  Prev: Extending/Embedding FAQ,  Up: Python Frequently Asked Questions

11.6 Python on Windows FAQ
==========================

* Menu:

* How do I run a Python program under Windows?::
* How do I make Python scripts executable?::
* Why does Python sometimes take so long to start?::
* How do I make an executable from a Python script?::
* Is a *.pyd file the same as a DLL?: Is a * pyd file the same as a DLL?.
* How can I embed Python into a Windows application?::
* How do I keep editors from inserting tabs into my Python source?::
* How do I check for a keypress without blocking?::
* How do I emulate os.kill() in Windows?: How do I emulate os kill in Windows?.
* How do I extract the downloaded documentation on Windows?::


File: python.info,  Node: How do I run a Python program under Windows?,  Next: How do I make Python scripts executable?,  Up: Python on Windows FAQ

11.6.1 How do I run a Python program under Windows?
---------------------------------------------------

This is not necessarily a straightforward question. If you are already
familiar with running programs from the Windows command line then
everything will seem obvious; otherwise, you might need a little more
guidance.

Python Development on XP
........................

Python Development on XP(1)

This series of screencasts aims to get you up and running with Python on
Windows XP.  The knowledge is distilled into 1.5 hours and will get you
up and running with the right Python distribution, coding in your
choice of IDE, and debugging and writing solid code with unit-tests.

Unless you use some sort of integrated development environment, you
will end up `typing' Windows commands into what is variously referred
to as a “DOS window” or “Command prompt window”.  Usually you
can create such a window from your Start menu; under Windows 7 the menu
selection is Start ‣ Programs ‣ Accessories ‣ Command Prompt.
You should be able to recognize when you have started such a window
because you will see a Windows “command prompt”, which usually
looks like this:

    C:\>

The letter may be different, and there might be other things after it,
so you might just as easily see something like:

    D:\YourName\Projects\Python>

depending on how your computer has been set up and what else you have
recently done with it.  Once you have started such a window, you are
well on the way to running Python programs.

You need to realize that your Python scripts have to be processed by
another program called the Python `interpreter'.  The interpreter reads
your script, compiles it into bytecodes, and then executes the
bytecodes to run your program. So, how do you arrange for the
interpreter to handle your Python?

First, you need to make sure that your command window recognises the
word “python” as an instruction to start the interpreter.  If you
have opened a command window, you should try entering the command
`python' and hitting return.:

    C:\Users\YourName> python

You should then see something like:

    Python 2.7.3 (default, Apr 10 2012, 22.71:26) [MSC v.1500 32 bit (Intel)] on win32
    Type "help", "copyright", "credits" or "license" for more information.
    >>>

You have started the interpreter in “interactive mode”. That means
you can enter Python statements or expressions interactively and have
them executed or evaluated while you wait.  This is one of Python’s
strongest features.  Check it by entering a few expressions of your
choice and seeing the results:

    >>> print "Hello"
    Hello
    >>> "Hello" * 3
    'HelloHelloHello'

Many people use the interactive mode as a convenient yet highly
programmable calculator.  When you want to end your interactive Python
session, hold the `Ctrl' key down while you enter a `Z', then hit the
“`Enter'” key to get back to your Windows command prompt.

You may also find that you have a Start-menu entry such as Start ‣
Programs ‣ Python 2.7 ‣ Python (command line) that results in you
seeing the `>>>' prompt in a new window.  If so, the window will
disappear after you enter the `Ctrl-Z' character; Windows is running a
single “python” command in the window, and closes it when you
terminate the interpreter.

If the `python' command, instead of displaying the interpreter prompt
`>>>', gives you a message like:

    'python' is not recognized as an internal or external command, operable program or batch file.

Adding Python to DOS Path
.........................

Adding Python to DOS Path(2)

Python is not added to the DOS path by default.  This screencast will
walk you through the steps to add the correct entry to the `System
Path', allowing Python to be executed from the command-line by all
users.

or:

    Bad command or filename

then you need to make sure that your computer knows where to find the
Python interpreter.  To do this you will have to modify a setting
called PATH, which is a list of directories where Windows will look for
programs.

You should arrange for Python’s installation directory to be added to
the PATH of every command window as it starts.  If you installed Python
fairly recently then the command

    dir C:\py*

will probably tell you where it is installed; the usual location is
something like `C:\Python27'.  Otherwise you will be reduced to a
search of your whole disk … use Tools ‣ Find or hit the Search
button and look for “python.exe”.  Supposing you discover that
Python is installed in the `C:\Python27' directory (the default at the
time of writing), you should make sure that entering the command

    c:\Python27\python

starts up the interpreter as above (and don’t forget you’ll need a
“`Ctrl-Z'” and an “`Enter'” to get out of it). Once you have
verified the directory, you can add it to the system path to make it
easier to start Python by just running the `python' command. This is
currently an option in the installer as of CPython 2.7.

More information about environment variables can be found on the *Note
Using Python on Windows: 698. page.

---------- Footnotes ----------

(1)
http://showmedo.com/videotutorials/series?name=pythonOzsvaldPyNewbieSeries

(2) http://showmedo.com/videotutorials/video?name=960000&fromSeriesID=96


File: python.info,  Node: How do I make Python scripts executable?,  Next: Why does Python sometimes take so long to start?,  Prev: How do I run a Python program under Windows?,  Up: Python on Windows FAQ

11.6.2 How do I make Python scripts executable?
-----------------------------------------------

On Windows, the standard Python installer already associates the .py
extension with a file type (Python.File) and gives that file type an
open command that runs the interpreter (`D:\Program
Files\Python\python.exe "%1" %*').  This is enough to make scripts
executable from the command prompt as ‘foo.py’.  If you’d rather
be able to execute the script by simple typing ‘foo’ with no
extension you need to add .py to the PATHEXT environment variable.


File: python.info,  Node: Why does Python sometimes take so long to start?,  Next: How do I make an executable from a Python script?,  Prev: How do I make Python scripts executable?,  Up: Python on Windows FAQ

11.6.3 Why does Python sometimes take so long to start?
-------------------------------------------------------

Usually Python starts very quickly on Windows, but occasionally there
are bug reports that Python suddenly begins to take a long time to
start up.  This is made even more puzzling because Python will work
fine on other Windows systems which appear to be configured identically.

The problem may be caused by a misconfiguration of virus checking
software on the problem machine.  Some virus scanners have been known
to introduce startup overhead of two orders of magnitude when the
scanner is configured to monitor all reads from the filesystem.  Try
checking the configuration of virus scanning software on your systems
to ensure that they are indeed configured identically.  McAfee, when
configured to scan all file system read activity, is a particular
offender.


File: python.info,  Node: How do I make an executable from a Python script?,  Next: Is a * pyd file the same as a DLL?,  Prev: Why does Python sometimes take so long to start?,  Up: Python on Windows FAQ

11.6.4 How do I make an executable from a Python script?
--------------------------------------------------------

See <http://www.py2exe.org/> for a distutils extension that allows you
to create console and GUI executables from Python code.


File: python.info,  Node: Is a * pyd file the same as a DLL?,  Next: How can I embed Python into a Windows application?,  Prev: How do I make an executable from a Python script?,  Up: Python on Windows FAQ

11.6.5 Is a `*.pyd' file the same as a DLL?
-------------------------------------------

Yes, .pyd files are dll’s, but there are a few differences.  If you
have a DLL named `foo.pyd', then it must have a function `initfoo()'.
You can then write Python “import foo”, and Python will search for
foo.pyd (as well as foo.py, foo.pyc) and if it finds it, will attempt
to call `initfoo()' to initialize it.  You do not link your .exe with
foo.lib, as that would cause Windows to require the DLL to be present.

Note that the search path for foo.pyd is PYTHONPATH, not the same as
the path that Windows uses to search for foo.dll.  Also, foo.pyd need
not be present to run your program, whereas if you linked your program
with a dll, the dll is required.  Of course, foo.pyd is required if you
want to say `import foo'.  In a DLL, linkage is declared in the source
code with `__declspec(dllexport)'.  In a .pyd, linkage is defined in a
list of available functions.


File: python.info,  Node: How can I embed Python into a Windows application?,  Next: How do I keep editors from inserting tabs into my Python source?,  Prev: Is a * pyd file the same as a DLL?,  Up: Python on Windows FAQ

11.6.6 How can I embed Python into a Windows application?
---------------------------------------------------------

Embedding the Python interpreter in a Windows app can be summarized as
follows:

  1. Do _not_ build Python into your .exe file directly.  On Windows,
     Python must be a DLL to handle importing modules that are
     themselves DLL’s.  (This is the first key undocumented fact.)
     Instead, link to `python`NN'.dll'; it is typically installed in
     `C:\Windows\System'.  `NN' is the Python version, a number such as
     “27” for Python 2.7.

     You can link to Python in two different ways.  Load-time linking
     means linking against `python`NN'.lib', while run-time linking
     means linking against `python`NN'.dll'.  (General note:
     `python`NN'.lib' is the so-called “import lib” corresponding
     to `python`NN'.dll'.  It merely defines symbols for the linker.)

     Run-time linking greatly simplifies link options; everything
     happens at run time.  Your code must load `python`NN'.dll' using
     the Windows `LoadLibraryEx()' routine.  The code must also use
     access routines and data in `python`NN'.dll' (that is, Python’s
     C API’s) using pointers obtained by the Windows
     `GetProcAddress()' routine.  Macros can make using these pointers
     transparent to any C code that calls routines in Python’s C API.

     Borland note: convert `python`NN'.lib' to OMF format using
     Coff2Omf.exe first.

  2. If you use SWIG, it is easy to create a Python “extension
     module” that will make the app’s data and methods available to
     Python.  SWIG will handle just about all the grungy details for
     you.  The result is C code that you link `into' your .exe file (!)
     You do _not_ have to create a DLL file, and this also simplifies
     linking.

  3. SWIG will create an init function (a C function) whose name
     depends on the name of the extension module.  For example, if the
     name of the module is leo, the init function will be called
     initleo().  If you use SWIG shadow classes, as you should, the
     init function will be called initleoc().  This initializes a
     mostly hidden helper class used by the shadow class.

     The reason you can link the C code in step 2 into your .exe file
     is that calling the initialization function is equivalent to
     importing the module into Python! (This is the second key
     undocumented fact.)

  4. In short, you can use the following code to initialize the Python
     interpreter with your extension module.

         #include "python.h"
         ...
         Py_Initialize();  // Initialize Python.
         initmyAppc();  // Initialize (import) the helper class.
         PyRun_SimpleString("import myApp");  // Import the shadow class.

  5. There are two problems with Python’s C API which will become
     apparent if you use a compiler other than MSVC, the compiler used
     to build pythonNN.dll.

     Problem 1: The so-called “Very High Level” functions that take
     FILE * arguments will not work in a multi-compiler environment
     because each compiler’s notion of a struct FILE will be
     different.  From an implementation standpoint these are very _low_
     level functions.

     Problem 2: SWIG generates the following code when generating
     wrappers to void functions:

         Py_INCREF(Py_None);
         _resultobj = Py_None;
         return _resultobj;

     Alas, Py_None is a macro that expands to a reference to a complex
     data structure called _Py_NoneStruct inside pythonNN.dll.  Again,
     this code will fail in a mult-compiler environment.  Replace such
     code by:

         return Py_BuildValue("");

     It may be possible to use SWIG’s `%typemap' command to make the
     change automatically, though I have not been able to get this to
     work (I’m a complete SWIG newbie).

  6. Using a Python shell script to put up a Python interpreter window
     from inside your Windows app is not a good idea; the resulting
     window will be independent of your app’s windowing system.
     Rather, you (or the wxPythonWindow class) should create a
     “native” interpreter window.  It is easy to connect that
     window to the Python interpreter.  You can redirect Python’s i/o
     to _any_ object that supports read and write, so all you need is a
     Python object (defined in your extension module) that contains
     read() and write() methods.


File: python.info,  Node: How do I keep editors from inserting tabs into my Python source?,  Next: How do I check for a keypress without blocking?,  Prev: How can I embed Python into a Windows application?,  Up: Python on Windows FAQ

11.6.7 How do I keep editors from inserting tabs into my Python source?
-----------------------------------------------------------------------

The FAQ does not recommend using tabs, and the Python style guide, PEP
8(1), recommends 4 spaces for distributed Python code; this is also the
Emacs python-mode default.

Under any editor, mixing tabs and spaces is a bad idea.  MSVC is no
different in this respect, and is easily configured to use spaces: Take
Tools ‣ Options ‣ Tabs, and for file type “Default” set “Tab
size” and “Indent size” to 4, and select the “Insert spaces”
radio button.

If you suspect mixed tabs and spaces are causing problems in leading
whitespace, run Python with the *Note -t: 66b. switch or run
`Tools/Scripts/tabnanny.py' to check a directory tree in batch mode.

---------- Footnotes ----------

(1) https://www.python.org/dev/peps/pep-0008


File: python.info,  Node: How do I check for a keypress without blocking?,  Next: How do I emulate os kill in Windows?,  Prev: How do I keep editors from inserting tabs into my Python source?,  Up: Python on Windows FAQ

11.6.8 How do I check for a keypress without blocking?
------------------------------------------------------

Use the msvcrt module.  This is a standard Windows-specific extension
module.  It defines a function `kbhit()' which checks whether a
keyboard hit is present, and `getch()' which gets one character without
echoing it.


File: python.info,  Node: How do I emulate os kill in Windows?,  Next: How do I extract the downloaded documentation on Windows?,  Prev: How do I check for a keypress without blocking?,  Up: Python on Windows FAQ

11.6.9 How do I emulate os.kill() in Windows?
---------------------------------------------

Prior to Python 2.7 and 3.2, to terminate a process, you can use *Note
ctypes: 78.:

    import ctypes

    def kill(pid):
        """kill function for Win32"""
        kernel32 = ctypes.windll.kernel32
        handle = kernel32.OpenProcess(1, 0, pid)
        return (0 != kernel32.TerminateProcess(handle, 0))

In 2.7 and 3.2, *Note os.kill(): 2d4. is implemented similar to the
above function, with the additional feature of being able to send
`Ctrl+C' and `Ctrl+Break' to console subprocesses which are designed to
handle those signals. See *Note os.kill(): 2d4. for further details.


File: python.info,  Node: How do I extract the downloaded documentation on Windows?,  Prev: How do I emulate os kill in Windows?,  Up: Python on Windows FAQ

11.6.10 How do I extract the downloaded documentation on Windows?
-----------------------------------------------------------------

Sometimes, when you download the documentation package to a Windows
machine using a web browser, the file extension of the saved file ends
up being .EXE.  This is a mistake; the extension should be .TGZ.

Simply rename the downloaded file to have the .TGZ extension, and
WinZip will be able to handle it.  (If your copy of WinZip doesn’t,
get a newer one from <https://www.winzip.com>.)


File: python.info,  Node: Graphic User Interface FAQ,  Next: “Why is Python Installed on my Computer?” FAQ,  Prev: Python on Windows FAQ,  Up: Python Frequently Asked Questions

11.7 Graphic User Interface FAQ
===============================

* Menu:

* What platform-independent GUI toolkits exist for Python?::
* What platform-specific GUI toolkits exist for Python?::
* Tkinter questions::


File: python.info,  Node: What platform-independent GUI toolkits exist for Python?,  Next: What platform-specific GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

11.7.1 What platform-independent GUI toolkits exist for Python?
---------------------------------------------------------------

Depending on what platform(s) you are aiming at, there are several.

* Menu:

* Tkinter::
* wxWidgets::
* Qt::
* Gtk+::
* FLTK::
* FOX::
* OpenGL::


File: python.info,  Node: Tkinter,  Next: wxWidgets,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.1 Tkinter
................

Standard builds of Python include an object-oriented interface to the
Tcl/Tk widget set, called Tkinter.  This is probably the easiest to
install and use.  For more info about Tk, including pointers to the
source, see the Tcl/Tk home page at <https://www.tcl.tk>.  Tcl/Tk is
fully portable to the Mac OS X, Windows, and Unix platforms.


File: python.info,  Node: wxWidgets,  Next: Qt,  Prev: Tkinter,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.2 wxWidgets
..................

wxWidgets (<https://www.wxwidgets.org>) is a free, portable GUI class
library written in C++ that provides a native look and feel on a number
of platforms, with Windows, Mac OS X, GTK, X11, all listed as current
stable targets.  Language bindings are available for a number of
languages including Python, Perl, Ruby, etc.

wxPython (<http://www.wxpython.org>) is the Python binding for
wxwidgets.  While it often lags slightly behind the official wxWidgets
releases, it also offers a number of features via pure Python
extensions that are not available in other language bindings.  There is
an active wxPython user and developer community.

Both wxWidgets and wxPython are free, open source, software with
permissive licences that allow their use in commercial products as well
as in freeware or shareware.


File: python.info,  Node: Qt,  Next: Gtk+,  Prev: wxWidgets,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.3 Qt
...........

There are bindings available for the Qt toolkit (using either PyQt(1)
or PySide(2)) and for KDE (PyKDE4(3)).  PyQt is currently more mature
than PySide, but you must buy a PyQt license from Riverbank Computing(4)
if you want to write proprietary applications.  PySide is free for all
applications.

Qt 4.5 upwards is licensed under the LGPL license; also, commercial
licenses are available from The Qt Company(5).

---------- Footnotes ----------

(1) https://riverbankcomputing.com/software/pyqt/intro

(2) https://wiki.qt.io/PySide

(3) https://techbase.kde.org/Languages/Python/Using_PyKDE_4

(4) https://www.riverbankcomputing.com/commercial/license-faq

(5) https://www.qt.io/licensing/


File: python.info,  Node: Gtk+,  Next: FLTK,  Prev: Qt,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.4 Gtk+
.............

PyGtk bindings for the Gtk+ toolkit(1) have been implemented by James
Henstridge; see <<http://www.pygtk.org>>.

---------- Footnotes ----------

(1) http://www.gtk.org


File: python.info,  Node: FLTK,  Next: FOX,  Prev: Gtk+,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.5 FLTK
.............

Python bindings for the FLTK toolkit(1), a simple yet powerful and
mature cross-platform windowing system, are available from the PyFLTK
project(2).

---------- Footnotes ----------

(1) http://www.fltk.org

(2) http://pyfltk.sourceforge.net


File: python.info,  Node: FOX,  Next: OpenGL,  Prev: FLTK,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.6 FOX
............

A wrapper for the FOX toolkit(1) called FXpy(2) is available.  FOX
supports both Unix variants and Windows.

---------- Footnotes ----------

(1) http://www.fox-toolkit.org/

(2) http://fxpy.sourceforge.net/


File: python.info,  Node: OpenGL,  Prev: FOX,  Up: What platform-independent GUI toolkits exist for Python?

11.7.1.7 OpenGL
...............

For OpenGL bindings, see PyOpenGL(1).

---------- Footnotes ----------

(1) http://pyopengl.sourceforge.net


File: python.info,  Node: What platform-specific GUI toolkits exist for Python?,  Next: Tkinter questions,  Prev: What platform-independent GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

11.7.2 What platform-specific GUI toolkits exist for Python?
------------------------------------------------------------

By installing the PyObjc Objective-C bridge(1), Python programs can use
Mac OS X’s Cocoa libraries.

*Note Pythonwin: 3129. by Mark Hammond includes an interface to the
Microsoft Foundation Classes and a Python programming environment
that’s written mostly in Python using the MFC classes.

---------- Footnotes ----------

(1) https://pythonhosted.org/pyobjc/


File: python.info,  Node: Tkinter questions,  Prev: What platform-specific GUI toolkits exist for Python?,  Up: Graphic User Interface FAQ

11.7.3 Tkinter questions
------------------------

* Menu:

* How do I freeze Tkinter applications?::
* Can I have Tk events handled while waiting for I/O?::
* I can’t get key bindings to work in Tkinter; why?: I can’t get key bindings to work in Tkinter why?.


File: python.info,  Node: How do I freeze Tkinter applications?,  Next: Can I have Tk events handled while waiting for I/O?,  Up: Tkinter questions

11.7.3.1 How do I freeze Tkinter applications?
..............................................

Freeze is a tool to create stand-alone applications.  When freezing
Tkinter applications, the applications will not be truly stand-alone,
as the application will still need the Tcl and Tk libraries.

One solution is to ship the application with the Tcl and Tk libraries,
and point to them at run-time using the `TCL_LIBRARY' and `TK_LIBRARY'
environment variables.

To get truly stand-alone applications, the Tcl scripts that form the
library have to be integrated into the application as well. One tool
supporting that is SAM (stand-alone modules), which is part of the Tix
distribution (<http://tix.sourceforge.net/>).

Build Tix with SAM enabled, perform the appropriate call to
`Tclsam_init()', etc. inside Python’s `Modules/tkappinit.c', and link
with libtclsam and libtksam (you might include the Tix libraries as
well).


File: python.info,  Node: Can I have Tk events handled while waiting for I/O?,  Next: I can’t get key bindings to work in Tkinter why?,  Prev: How do I freeze Tkinter applications?,  Up: Tkinter questions

11.7.3.2 Can I have Tk events handled while waiting for I/O?
............................................................

On platforms other than Windows, yes, and you don’t even need
threads!  But you’ll have to restructure your I/O code a bit.  Tk has
the equivalent of Xt’s `XtAddInput()' call, which allows you to
register a callback function which will be called from the Tk mainloop
when I/O is possible on a file descriptor.  See *Note File Handlers:
2132.


File: python.info,  Node: I can’t get key bindings to work in Tkinter why?,  Prev: Can I have Tk events handled while waiting for I/O?,  Up: Tkinter questions

11.7.3.3 I can’t get key bindings to work in Tkinter: why?
............................................................

An often-heard complaint is that event handlers bound to events with the
`bind()' method don’t get handled even when the appropriate key is
pressed.

The most common cause is that the widget to which the binding applies
doesn’t have “keyboard focus”.  Check out the Tk documentation
for the focus command.  Usually a widget is given the keyboard focus by
clicking in it (but not for labels; see the takefocus option).


File: python.info,  Node: “Why is Python Installed on my Computer?” FAQ,  Prev: Graphic User Interface FAQ,  Up: Python Frequently Asked Questions

11.8 “Why is Python Installed on my Computer?” FAQ
======================================================

* Menu:

* What is Python?: What is Python?<2>.
* Why is Python installed on my machine?::
* Can I delete Python?::


File: python.info,  Node: What is Python?<2>,  Next: Why is Python installed on my machine?,  Up: “Why is Python Installed on my Computer?” FAQ

11.8.1 What is Python?
----------------------

Python is a programming language.  It’s used for many different
applications.  It’s used in some high schools and colleges as an
introductory programming language because Python is easy to learn, but
it’s also used by professional software developers at places such as
Google, NASA, and Lucasfilm Ltd.

If you wish to learn more about Python, start with the Beginner's Guide
to Python(1).

---------- Footnotes ----------

(1) https://wiki.python.org/moin/BeginnersGuide


File: python.info,  Node: Why is Python installed on my machine?,  Next: Can I delete Python?,  Prev: What is Python?<2>,  Up: “Why is Python Installed on my Computer?” FAQ

11.8.2 Why is Python installed on my machine?
---------------------------------------------

If you find Python installed on your system but don’t remember
installing it, there are several possible ways it could have gotten
there.

   * Perhaps another user on the computer wanted to learn programming
     and installed it; you’ll have to figure out who’s been using
     the machine and might have installed it.

   * A third-party application installed on the machine might have been
     written in Python and included a Python installation.  For a home
     computer, the most common such application is PySol(1), a
     solitaire game that includes over 1000 different games and
     variations.

   * Some Windows machines also have Python installed.  At this writing
     we’re aware of computers from Hewlett-Packard and Compaq that
     include Python.  Apparently some of HP/Compaq’s administrative
     tools are written in Python.

   * All Apple computers running Mac OS X have Python installed; it’s
     included in the base installation.

---------- Footnotes ----------

(1) http://pysolfc.sourceforge.net/


File: python.info,  Node: Can I delete Python?,  Prev: Why is Python installed on my machine?,  Up: “Why is Python Installed on my Computer?” FAQ

11.8.3 Can I delete Python?
---------------------------

That depends on where Python came from.

If someone installed it deliberately, you can remove it without hurting
anything.  On Windows, use the Add/Remove Programs icon in the Control
Panel.

If Python was installed by a third-party application, you can also
remove it, but that application will no longer work.  You should use
that application’s uninstaller rather than removing Python directly.

If Python came with your operating system, removing it is not
recommended.  If you remove it, whatever tools were written in Python
will no longer run, and some of them might be important to you.
Reinstalling the whole system would then be required to fix things
again.


File: python.info,  Node: Glossary,  Next: About these documents,  Prev: Python Frequently Asked Questions,  Up: Top

12 Glossary
***********

`>>>'
     The default Python prompt of the interactive shell.  Often seen
     for code examples which can be executed interactively in the
     interpreter.

`...'
     The default Python prompt of the interactive shell when entering
     code for an indented code block or within a pair of matching left
     and right delimiters (parentheses, square brackets or curly
     braces).

2to3
     A tool that tries to convert Python 2.x code to Python 3.x code by
     handling most of the incompatibilities which can be detected by
     parsing the source and traversing the parse tree.

     2to3 is available in the standard library as *Note lib2to3: ff.; a
     standalone entry point is provided as `Tools/scripts/2to3'.  See
     *Note 2to3 - Automated Python 2 to 3 code translation: 2360.

abstract base class
     Abstract base classes complement *Note duck-typing: 314c. by
     providing a way to define interfaces when other techniques like
     *Note hasattr(): 344. would be clumsy or subtly wrong (for example
     with *Note magic methods: 739.).  ABCs introduce virtual
     subclasses, which are classes that don’t inherit from a class
     but are still recognized by *Note isinstance(): 332. and *Note
     issubclass(): 333.; see the *Note abc: 4. module documentation.
     Python comes with many built-in ABCs for data structures (in the
     *Note collections: 65. module), numbers (in the *Note numbers:
     126. module), and streams (in the *Note io: fa. module). You can
     create your own ABCs with the *Note abc: 4. module.

argument
     A value passed to a *Note function: 7e8. (or *Note method: 314d.)
     when calling the function.  There are two types of arguments:

        * `keyword argument': an argument preceded by an identifier
          (e.g.  `name=') in a function call or passed as a value in a
          dictionary preceded by `**'.  For example, `3' and `5' are
          both keyword arguments in the following calls to *Note
          complex(): 1ec.:

              complex(real=3, imag=5)
              complex(**{'real': 3, 'imag': 5})

        * `positional argument': an argument that is not a keyword
          argument.  Positional arguments can appear at the beginning
          of an argument list and/or be passed as elements of an *Note
          iterable: 8f4. preceded by `*'.  For example, `3' and `5' are
          both positional arguments in the following calls:

              complex(3, 5)
              complex(*(3, 5))

     Arguments are assigned to the named local variables in a function
     body.  See the *Note Calls: 722. section for the rules governing
     this assignment.  Syntactically, any expression can be used to
     represent an argument; the evaluated value is assigned to the
     local variable.

     See also the *Note parameter: 7ef. glossary entry and the FAQ
     question on *Note the difference between arguments and parameters:
     3098.

attribute
     A value associated with an object which is referenced by name using
     dotted expressions.  For example, if an object `o' has an attribute
     `a' it would be referenced as `o.a'.

BDFL
     Benevolent Dictator For Life, a.k.a. Guido van Rossum(1),
     Python’s creator.

bytes-like object
     An object that supports the *Note buffer protocol: 974, like *Note
     str: 1ea, *Note bytearray: 1f7. or *Note memoryview: 1c4.
     Bytes-like objects can be used for various operations that expect
     binary data, such as compression, saving to a binary file or
     sending over a socket. Some operations need the binary data to be
     mutable, in which case not all bytes-like objects can apply.

bytecode
     Python source code is compiled into bytecode, the internal
     representation of a Python program in the CPython interpreter.
     The bytecode is also cached in `.pyc' and `.pyo' files so that
     executing the same file is faster the second time (recompilation
     from source to bytecode can be avoided).  This “intermediate
     language” is said to run on a *Note virtual machine: 3150. that
     executes the machine code corresponding to each bytecode. Do note
     that bytecodes are not expected to work between different Python
     virtual machines, nor to be stable between Python releases.

     A list of bytecode instructions can be found in the documentation
     for *Note the dis module: 26bb.

class
     A template for creating user-defined objects. Class definitions
     normally contain method definitions which operate on instances of
     the class.

classic class
     Any class which does not inherit from *Note object: 1f1.  See
     *Note new-style class: 5ec.  Classic classes have been removed in
     Python 3.

coercion
     The implicit conversion of an instance of one type to another
     during an operation which involves two arguments of the same type.
     For example, `int(3.15)' converts the floating point number to
     the integer `3', but in `3+4.5', each argument is of a different
     type (one int, one float), and both must be converted to the same
     type before they can be added or it will raise a `TypeError'.
     Coercion between two operands can be performed with the `coerce'
     built-in function; thus, `3+4.5' is equivalent to calling
     `operator.add(*coerce(3, 4.5))' and results in `operator.add(3.0,
     4.5)'.  Without coercion, all arguments of even compatible types
     would have to be normalized to the same value by the programmer,
     e.g., `float(3)+4.5' rather than just `3+4.5'.

complex number
     An extension of the familiar real number system in which all
     numbers are expressed as a sum of a real part and an imaginary
     part.  Imaginary numbers are real multiples of the imaginary unit
     (the square root of `-1'), often written `i' in mathematics or `j'
     in engineering.  Python has built-in support for complex numbers,
     which are written with this latter notation; the imaginary part is
     written with a `j' suffix, e.g., `3+1j'.  To get access to complex
     equivalents of the *Note math: 10d. module, use *Note cmath: 60.
     Use of complex numbers is a fairly advanced mathematical feature.
     If you’re not aware of a need for them, it’s almost certain
     you can safely ignore them.

context manager
     An object which controls the environment seen in a *Note with: 1c1.
     statement by defining *Note __enter__(): 1ff. and *Note
     __exit__(): 200. methods.  See PEP 343(2).

CPython
     The canonical implementation of the Python programming language, as
     distributed on python.org(3).  The term “CPython” is used when
     necessary to distinguish this implementation from others such as
     Jython or IronPython.

decorator
     A function returning another function, usually applied as a
     function transformation using the `@wrapper' syntax.  Common
     examples for decorators are *Note classmethod(): 40f. and *Note
     staticmethod(): 40e.

     The decorator syntax is merely syntactic sugar, the following two
     function definitions are semantically equivalent:

         def f(...):
             ...
         f = staticmethod(f)

         @staticmethod
         def f(...):
             ...

     The same concept exists for classes, but is less commonly used
     there.  See the documentation for *Note function definitions: 723.
     and *Note class definitions: 351. for more about decorators.

descriptor
     Any `new-style' object which defines the methods *Note __get__():
     73b, *Note __set__(): 73c, or *Note __delete__(): 73d.  When a
     class attribute is a descriptor, its special binding behavior is
     triggered upon attribute lookup.  Normally, using `a.b' to get,
     set or delete an attribute looks up the object named `b' in the
     class dictionary for `a', but if `b' is a descriptor, the
     respective descriptor method gets called.  Understanding
     descriptors is a key to a deep understanding of Python because
     they are the basis for many features including functions, methods,
     properties, class methods, static methods, and reference to super
     classes.

     For more information about descriptors’ methods, see *Note
     Implementing Descriptors: 726.

dictionary
     An associative array, where arbitrary keys are mapped to values.
     The keys can be any object with *Note __hash__(): 349.  and *Note
     __eq__(): 21c. methods.  Called a hash in Perl.

dictionary view
     The objects returned from *Note dict.viewkeys(): 1e4, *Note
     dict.viewvalues(): 1e5, and *Note dict.viewitems(): 1e6. are
     called dictionary views. They provide a dynamic view on the
     dictionary’s entries, which means that when the dictionary
     changes, the view reflects these changes. To force the dictionary
     view to become a full list use `list(dictview)'.  See *Note
     Dictionary view objects: 92f.

docstring
     A string literal which appears as the first expression in a class,
     function or module.  While ignored when the suite is executed, it
     is recognized by the compiler and put into the `__doc__' attribute
     of the enclosing class, function or module.  Since it is available
     via introspection, it is the canonical place for documentation of
     the object.

duck-typing
     A programming style which does not look at an object’s type to
     determine if it has the right interface; instead, the method or
     attribute is simply called or used (“If it looks like a duck and
     quacks like a duck, it must be a duck.”)  By emphasizing
     interfaces rather than specific types, well-designed code improves
     its flexibility by allowing polymorphic substitution.  Duck-typing
     avoids tests using *Note type(): 4ac. or *Note isinstance(): 332.
     (Note, however, that duck-typing can be complemented with *Note
     abstract base classes: 8af.)  Instead, it typically employs *Note
     hasattr(): 344. tests or *Note EAFP: 1171. programming.

EAFP
     Easier to ask for forgiveness than permission.  This common Python
     coding style assumes the existence of valid keys or attributes and
     catches exceptions if the assumption proves false.  This clean and
     fast style is characterized by the presence of many *Note try:
     3ad. and *Note except: 3af.  statements.  The technique contrasts
     with the *Note LBYL: 3156. style common to many other languages
     such as C.

expression
     A piece of syntax which can be evaluated to some value.  In other
     words, an expression is an accumulation of expression elements
     like literals, names, attribute access, operators or function
     calls which all return a value.  In contrast to many other
     languages, not all language constructs are expressions.  There are
     also *Note statement: df3.s which cannot be used as expressions,
     such as *Note print: 4fd. or *Note if: 445.  Assignments are also
     statements, not expressions.

extension module
     A module written in C or C++, using Python’s C API to interact
     with the core and with user code.

file object
     An object exposing a file-oriented API (with methods such as
     `read()' or `write()') to an underlying resource.  Depending on
     the way it was created, a file object can mediate access to a real
     on-disk file or to another type of storage or communication device
     (for example standard input/output, in-memory buffers, sockets,
     pipes, etc.).  File objects are also called `file-like objects' or
     `streams'.

     There are actually three categories of file objects: raw binary
     files, buffered binary files and text files.  Their interfaces are
     defined in the *Note io: fa. module.  The canonical way to create
     a file object is by using the *Note open(): 2d9. function.

file-like object
     A synonym for *Note file object: 5bf.

finder
     An object that tries to find the *Note loader: 84f. for a module.
     It must implement a method named `find_module()'. See PEP 302(4)
     for details.

floor division
     Mathematical division that rounds down to nearest integer.  The
     floor division operator is `//'.  For example, the expression `11
     // 4' evaluates to `2' in contrast to the `2.75' returned by float
     true division.  Note that `(-11) // 4' is `-3' because that is
     `-2.75' rounded `downward'. See PEP 238(5).

function
     A series of statements which returns some value to a caller. It
     can also be passed zero or more *Note arguments: 7e9. which may be
     used in the execution of the body. See also *Note parameter: 7ef,
     *Note method: 314d, and the *Note Function definitions: 723.
     section.

__future__
     A pseudo-module which programmers can use to enable new language
     features which are not compatible with the current interpreter.
     For example, the expression `11/4' currently evaluates to `2'. If
     the module in which it is executed had enabled `true division' by
     executing:

         from __future__ import division

     the expression `11/4' would evaluate to `2.75'.  By importing the
     *Note __future__: 1. module and evaluating its variables, you can
     see when a new feature was first added to the language and when it
     will become the default:

         >>> import __future__
         >>> __future__.division
         _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)

garbage collection
     The process of freeing memory when it is not used anymore.  Python
     performs garbage collection via reference counting and a cyclic
     garbage collector that is able to detect and break reference
     cycles.

generator
     A function which returns an iterator.  It looks like a normal
     function except that it contains *Note yield: 30a. statements for
     producing a series of values usable in a for-loop or that can be
     retrieved one at a time with the *Note next(): 3b1. function. Each
     *Note yield: 30a. temporarily suspends processing, remembering the
     location execution state (including local variables and pending
     try-statements).  When the generator resumes, it picks-up where it
     left-off (in contrast to functions which start fresh on every
     invocation).

generator expression
     An expression that returns an iterator.  It looks like a normal
     expression followed by a *Note for: 303. expression defining a
     loop variable, range, and an optional *Note if: 445. expression.
     The combined expression generates values for an enclosing function:

         >>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81
         285

GIL
     See *Note global interpreter lock: 1584.

global interpreter lock
     The mechanism used by the *Note CPython: 3154. interpreter to
     assure that only one thread executes Python *Note bytecode: 59e.
     at a time.  This simplifies the CPython implementation by making
     the object model (including critical built-in types such as *Note
     dict: 319.) implicitly safe against concurrent access.  Locking
     the entire interpreter makes it easier for the interpreter to be
     multi-threaded, at the expense of much of the parallelism afforded
     by multi-processor machines.

     However, some extension modules, either standard or third-party,
     are designed so as to release the GIL when doing
     computationally-intensive tasks such as compression or hashing.
     Also, the GIL is always released when doing I/O.

     Past efforts to create a “free-threaded” interpreter (one
     which locks shared data at a much finer granularity) have not been
     successful because performance suffered in the common
     single-processor case. It is believed that overcoming this
     performance issue would make the implementation much more
     complicated and therefore costlier to maintain.

hashable
     An object is `hashable' if it has a hash value which never changes
     during its lifetime (it needs a *Note __hash__(): 349. method),
     and can be compared to other objects (it needs an *Note __eq__():
     21c. or *Note __cmp__(): 221. method).  Hashable objects which
     compare equal must have the same hash value.

     Hashability makes an object usable as a dictionary key and a set
     member, because these data structures use the hash value
     internally.

     All of Python’s immutable built-in objects are hashable, while
     no mutable containers (such as lists or dictionaries) are.
     Objects which are instances of user-defined classes are hashable
     by default; they all compare unequal (except with themselves), and
     their hash value is derived from their *Note id(): 3ca.

IDLE
     An Integrated Development Environment for Python.  IDLE is a basic
     editor and interpreter environment which ships with the standard
     distribution of Python.

immutable
     An object with a fixed value.  Immutable objects include numbers,
     strings and tuples.  Such an object cannot be altered.  A new
     object has to be created if a different value has to be stored.
     They play an important role in places where a constant hash value
     is needed, for example as a key in a dictionary.

integer division
     Mathematical division discarding any remainder.  For example, the
     expression `11/4' currently evaluates to `2' in contrast to the
     `2.75' returned by float division.  Also called `floor division'.
     When dividing two integers the outcome will always be another
     integer (having the floor function applied to it). However, if one
     of the operands is another numeric type (such as a *Note float:
     1eb.), the result will be coerced (see *Note coercion: ab6.) to a
     common type.  For example, an integer divided by a float will
     result in a float value, possibly with a decimal fraction.
     Integer division can be forced by using the `//' operator instead
     of the `/' operator.  See also *Note __future__: 3158.

importing
     The process by which Python code in one module is made available to
     Python code in another module.

importer
     An object that both finds and loads a module; both a *Note finder:
     84e. and *Note loader: 84f. object.

interactive
     Python has an interactive interpreter which means you can enter
     statements and expressions at the interpreter prompt, immediately
     execute them and see their results.  Just launch `python' with no
     arguments (possibly by selecting it from your computer’s main
     menu). It is a very powerful way to test out new ideas or inspect
     modules and packages (remember `help(x)').

interpreted
     Python is an interpreted language, as opposed to a compiled one,
     though the distinction can be blurry because of the presence of the
     bytecode compiler.  This means that source files can be run
     directly without explicitly creating an executable which is then
     run.  Interpreted languages typically have a shorter
     development/debug cycle than compiled ones, though their programs
     generally also run more slowly.  See also *Note interactive: 315e.

iterable
     An object capable of returning its members one at a time. Examples
     of iterables include all sequence types (such as *Note list: 3d6,
     *Note str: 1ea, and *Note tuple: 421.) and some non-sequence types
     like *Note dict: 319.  and *Note file: 1f9. and objects of any
     classes you define with an *Note __iter__(): 335. or *Note
     __getitem__(): 468. method.  Iterables can be used in a *Note for:
     303. loop and in many other places where a sequence is needed
     (*Note zip(): 41e, *Note map(): 318, …).  When an iterable
     object is passed as an argument to the built-in function *Note
     iter(): 334, it returns an iterator for the object.  This iterator
     is good for one pass over the set of values.  When using
     iterables, it is usually not necessary to call *Note iter(): 334.
     or deal with iterator objects yourself.  The `for' statement does
     that automatically for you, creating a temporary unnamed variable
     to hold the iterator for the duration of the loop.  See also *Note
     iterator: 8a8, *Note sequence: 544, and *Note generator: 5f7.

iterator
     An object representing a stream of data.  Repeated calls to the
     iterator’s *Note next(): 5f8. method return successive items in
     the stream.  When no more data are available a *Note
     StopIteration: 347. exception is raised instead.  At this point,
     the iterator object is exhausted and any further calls to its
     *Note next(): 5f8. method just raise *Note StopIteration: 347.
     again.  Iterators are required to have an *Note __iter__(): 335.
     method that returns the iterator object itself so every iterator
     is also iterable and may be used in most places where other
     iterables are accepted.  One notable exception is code which
     attempts multiple iteration passes.  A container object (such as a
     *Note list: 3d6.) produces a fresh new iterator each time you pass
     it to the *Note iter(): 334. function or use it in a *Note for:
     303. loop.  Attempting this with an iterator will just return the
     same exhausted iterator object used in the previous iteration
     pass, making it appear like an empty container.

     More information can be found in *Note Iterator Types: 754.

key function
     A key function or collation function is a callable that returns a
     value used for sorting or ordering.  For example, *Note
     locale.strxfrm(): 20d1. is used to produce a sort key that is
     aware of locale specific sort conventions.

     A number of tools in Python accept key functions to control how
     elements are ordered or grouped.  They include *Note min(): 224,
     *Note max(): 225, *Note sorted(): 223, `list.sort()', *Note
     heapq.nsmallest(): bbb, *Note heapq.nlargest(): bba, and *Note
     itertools.groupby(): d91.

     There are several ways to create a key function.  For example. the
     *Note str.lower(): 8f5. method can serve as a key function for
     case insensitive sorts.  Alternatively, an ad-hoc key function can
     be built from a *Note lambda: 41c. expression such as `lambda r:
     (r[0], r[2])'.  Also, the *Note operator: 127. module provides
     three key function constructors: *Note attrgetter(): e15, *Note
     itemgetter(): e16, and *Note methodcaller(): e17.  See the *Note
     Sorting HOW TO: 8b5. for examples of how to create and use key
     functions.

keyword argument
     See *Note argument: 7e9.

lambda
     An anonymous inline function consisting of a single *Note
     expression: 247d.  which is evaluated when the function is called.
     The syntax to create a lambda function is `lambda [arguments]:
     expression'

LBYL
     Look before you leap.  This coding style explicitly tests for
     pre-conditions before making calls or lookups.  This style
     contrasts with the *Note EAFP: 1171. approach and is characterized
     by the presence of many *Note if: 445. statements.

     In a multi-threaded environment, the LBYL approach can risk
     introducing a race condition between “the looking” and “the
     leaping”.  For example, the code, `if key in mapping: return
     mapping[key]' can fail if another thread removes `key' from
     `mapping' after the test, but before the lookup.  This issue can
     be solved with locks or by using the EAFP approach.

list
     A built-in Python *Note sequence: 544.  Despite its name it is
     more akin to an array in other languages than to a linked list
     since access to elements are O(1).

list comprehension
     A compact way to process all or part of the elements in a sequence
     and return a list with the results.  `result = ["0x%02x" % x for x
     in range(256) if x % 2 == 0]' generates a list of strings
     containing even hex numbers (0x..) in the range from 0 to 255. The
     *Note if: 445.  clause is optional.  If omitted, all elements in
     `range(256)' are processed.

loader
     An object that loads a module. It must define a method named
     `load_module()'. A loader is typically returned by a *Note finder:
     84e. See PEP 302(6) for details.

mapping
     A container object that supports arbitrary key lookups and
     implements the methods specified in the *Note Mapping: 20d. or
     *Note MutableMapping: bac.  *Note abstract base classes: b86.
     Examples include *Note dict: 319, *Note collections.defaultdict:
     922, *Note collections.OrderedDict: 1b6. and *Note
     collections.Counter: 1b7.

metaclass
     The class of a class.  Class definitions create a class name, a
     class dictionary, and a list of base classes.  The metaclass is
     responsible for taking those three arguments and creating the
     class.  Most object oriented programming languages provide a
     default implementation.  What makes Python special is that it is
     possible to create custom metaclasses.  Most users never need this
     tool, but when the need arises, metaclasses can provide powerful,
     elegant solutions.  They have been used for logging attribute
     access, adding thread-safety, tracking object creation,
     implementing singletons, and many other tasks.

     More information can be found in *Note Customizing class creation:
     744.

method
     A function which is defined inside a class body.  If called as an
     attribute of an instance of that class, the method will get the
     instance object as its first *Note argument: 7e9. (which is
     usually called `self').  See *Note function: 7e8. and *Note nested
     scope: 3162.

method resolution order
     Method Resolution Order is the order in which base classes are
     searched for a member during lookup. See The Python 2.3 Method
     Resolution Order(7) for details of the algorithm used by the
     Python interpreter since the 2.3 release.

module
     An object that serves as an organizational unit of Python code.
     Modules have a namespace containing arbitrary Python objects.
     Modules are loaded into Python by the process of *Note importing:
     315c.

     See also *Note package: 3165.

MRO
     See *Note method resolution order: 3163.

mutable
     Mutable objects can change their value but keep their *Note id():
     3ca.  See also *Note immutable: 53b.

named tuple
     Any tuple-like class whose indexable elements are also accessible
     using named attributes (for example, *Note time.localtime(): b19.
     returns a tuple-like object where the `year' is accessible either
     with an index such as `t[0]' or with a named attribute like
     `t.tm_year').

     A named tuple can be a built-in type such as *Note
     time.struct_time: b18, or it can be created with a regular class
     definition.  A full featured named tuple can also be created with
     the factory function *Note collections.namedtuple(): 1d1.  The
     latter approach automatically provides extra features such as a
     self-documenting representation like `Employee(name='jones',
     title='programmer')'.

namespace
     The place where a variable is stored.  Namespaces are implemented
     as dictionaries.  There are the local, global and built-in
     namespaces as well as nested namespaces in objects (in methods).
     Namespaces support modularity by preventing naming conflicts.  For
     instance, the functions `__builtin__.open()' and *Note os.open():
     600. are distinguished by their namespaces.  Namespaces also aid
     readability and maintainability by making it clear which module
     implements a function.  For instance, writing *Note random.seed():
     d78. or *Note itertools.izip(): 41f. makes it clear that those
     functions are implemented by the *Note random: 143. and *Note
     itertools: fb.  modules, respectively.

nested scope
     The ability to refer to a variable in an enclosing definition.  For
     instance, a function defined inside another function can refer to
     variables in the outer function.  Note that nested scopes work
     only for reference and not for assignment which will always write
     to the innermost scope.  In contrast, local variables both read
     and write in the innermost scope.  Likewise, global variables read
     and write to the global namespace.

new-style class
     Any class which inherits from *Note object: 1f1.  This includes
     all built-in types like *Note list: 3d6. and *Note dict: 319.
     Only new-style classes can use Python’s newer, versatile
     features like `__slots__', descriptors, properties, and *Note
     __getattribute__(): 34f.

     More information can be found in *Note New-style and classic
     classes: 72c.

object
     Any data with state (attributes or value) and defined behavior
     (methods).  Also the ultimate base class of any *Note new-style
     class: 5ec.

package
     A Python *Note module: 3164. which can contain submodules or
     recursively, subpackages.  Technically, a package is a Python
     module with an `__path__' attribute.

parameter
     A named entity in a *Note function: 7e8. (or method) definition
     that specifies an *Note argument: 7e9. (or in some cases,
     arguments) that the function can accept.  There are four types of
     parameters:

        * `positional-or-keyword': specifies an argument that can be
          passed either *Note positionally: 7e9. or as a *Note keyword
          argument: 7e9.  This is the default kind of parameter, for
          example `foo' and `bar' in the following:

              def func(foo, bar=None): ...

        * `positional-only': specifies an argument that can be supplied
          only by position.  Python has no syntax for defining
          positional-only parameters.  However, some built-in functions
          have positional-only parameters (e.g. *Note abs(): 5da.).

        * `var-positional': specifies that an arbitrary sequence of
          positional arguments can be provided (in addition to any
          positional arguments already accepted by other parameters).
          Such a parameter can be defined by prepending the parameter
          name with `*', for example `args' in the following:

              def func(*args, **kwargs): ...

        * `var-keyword': specifies that arbitrarily many keyword
          arguments can be provided (in addition to any keyword
          arguments already accepted by other parameters).  Such a
          parameter can be defined by prepending the parameter name
          with `**', for example `kwargs' in the example above.

     Parameters can specify both optional and required arguments, as
     well as default values for some optional arguments.

     See also the *Note argument: 7e9. glossary entry, the FAQ question
     on *Note the difference between arguments and parameters: 3098,
     and the *Note Function definitions: 723. section.

positional argument
     See *Note argument: 7e9.

Python 3000
     Nickname for the Python 3.x release line (coined long ago when the
     release of version 3 was something in the distant future.)  This
     is also abbreviated “Py3k”.

Pythonic
     An idea or piece of code which closely follows the most common
     idioms of the Python language, rather than implementing code using
     concepts common to other languages.  For example, a common idiom
     in Python is to loop over all elements of an iterable using a
     *Note for: 303.  statement.  Many other languages don’t have
     this type of construct, so people unfamiliar with Python sometimes
     use a numerical counter instead:

         for i in range(len(food)):
             print food[i]

     As opposed to the cleaner, Pythonic method:

         for piece in food:
             print piece

reference count
     The number of references to an object.  When the reference count
     of an object drops to zero, it is deallocated.  Reference counting
     is generally not visible to Python code, but it is a key element
     of the *Note CPython: 3154. implementation.  The *Note sys: 16d.
     module defines a *Note getrefcount(): 2485. function that
     programmers can call to return the reference count for a
     particular object.

__slots__
     A declaration inside a *Note new-style class: 5ec. that saves
     memory by pre-declaring space for instance attributes and
     eliminating instance dictionaries.  Though popular, the technique
     is somewhat tricky to get right and is best reserved for rare
     cases where there are large numbers of instances in a
     memory-critical application.

sequence
     An *Note iterable: 8f4. which supports efficient element access
     using integer indices via the *Note __getitem__(): 468. special
     method and defines a *Note len(): 53c. method that returns the
     length of the sequence.  Some built-in sequence types are *Note
     list: 3d6, *Note str: 1ea, *Note tuple: 421, and *Note unicode:
     1f5. Note that *Note dict: 319. also supports *Note __getitem__():
     468. and *Note __len__(): 423, but is considered a mapping rather
     than a sequence because the lookups use arbitrary *Note immutable:
     53b. keys rather than integers.

slice
     An object usually containing a portion of a *Note sequence: 544.
     A slice is created using the subscript notation, `[]' with colons
     between numbers when several are given, such as in
     `variable_name[1:3:5]'.  The bracket (subscript) notation uses
     *Note slice: 469. objects internally (or in older versions, *Note
     __getslice__(): 74d. and *Note __setslice__(): 75b.).

special method
     A method that is called implicitly by Python to execute a certain
     operation on a type, such as addition.  Such methods have names
     starting and ending with double underscores.  Special methods are
     documented in *Note Special method names: 6e4.

statement
     A statement is part of a suite (a “block” of code).  A
     statement is either an *Note expression: 247d. or one of several
     constructs with a keyword, such as *Note if: 445, *Note while:
     548. or *Note for: 303.

struct sequence
     A tuple with named elements. Struct sequences expose an interface
     similiar to *Note named tuple: a4a. in that elements can either be
     accessed either by index or as an attribute. However, they do not
     have any of the named tuple methods like *Note _make(): b9c. or
     *Note _asdict(): 1d0. Examples of struct sequences include *Note
     sys.float_info: 8d1. and the return value of *Note os.stat(): 3de.

triple-quoted string
     A string which is bound by three instances of either a quotation
     mark (“) or an apostrophe (‘).  While they don’t provide any
     functionality not available with single-quoted strings, they are
     useful for a number of reasons.  They allow you to include
     unescaped single and double quotes within a string and they can
     span multiple lines without the use of the continuation character,
     making them especially useful when writing docstrings.

type
     The type of a Python object determines what kind of object it is;
     every object has a type.  An object’s type is accessible as its
     *Note __class__: 472. attribute or can be retrieved with
     `type(obj)'.

universal newlines
     A manner of interpreting text streams in which all of the
     following are recognized as ending a line: the Unix end-of-line
     convention `'\n'', the Windows convention `'\r\n'', and the old
     Macintosh convention `'\r''.  See PEP 278(8) and PEP 3116(9), as
     well as *Note str.splitlines(): 8ff. for an additional use.

virtual environment
     A cooperatively isolated runtime environment that allows Python
     users and applications to install and upgrade Python distribution
     packages without interfering with the behaviour of other Python
     applications running on the same system.

virtual machine
     A computer defined entirely in software.  Python’s virtual
     machine executes the *Note bytecode: 59e. emitted by the bytecode
     compiler.

Zen of Python
     Listing of Python design principles and philosophies that are
     helpful in understanding and using the language.  The listing can
     be found by typing “`import this'” at the interactive prompt.

---------- Footnotes ----------

(1) https://www.python.org/~guido/

(2) https://www.python.org/dev/peps/pep-0343

(3) https://www.python.org

(4) https://www.python.org/dev/peps/pep-0302

(5) https://www.python.org/dev/peps/pep-0238

(6) https://www.python.org/dev/peps/pep-0302

(7) https://www.python.org/download/releases/2.3/mro/

(8) https://www.python.org/dev/peps/pep-0278

(9) https://www.python.org/dev/peps/pep-3116


File: python.info,  Node: About these documents,  Next: Reporting Bugs,  Prev: Glossary,  Up: Top

13 About these documents
************************

These documents are generated from reStructuredText(1) sources by
Sphinx(2), a document processor specifically written for the Python
documentation.

Development of the documentation and its toolchain is an entirely
volunteer effort, just like Python itself.  If you want to contribute,
please take a look at the *Note Reporting Bugs: 2af8. page for
information on how to do so.  New volunteers are always welcome!

Many thanks go to:

   * Fred L. Drake, Jr., the creator of the original Python
     documentation toolset and writer of much of the content;

   * the Docutils(3) project for creating reStructuredText and the
     Docutils suite;

   * Fredrik Lundh for his Alternative Python Reference(4) project from
     which Sphinx got many good ideas.

* Menu:

* Contributors to the Python Documentation::

---------- Footnotes ----------

(1) http://docutils.sourceforge.net/rst.html

(2) http://sphinx-doc.org/

(3) http://docutils.sourceforge.net/

(4) http://effbot.org/zone/pyref.htm


File: python.info,  Node: Contributors to the Python Documentation,  Up: About these documents

13.1 Contributors to the Python Documentation
=============================================

Many people have contributed to the Python language, the Python standard
library, and the Python documentation.  See Misc/ACKS(1) in the Python
source distribution for a partial list of contributors.

It is only with the input and contributions of the Python community
that Python has such wonderful documentation – Thank You!

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Misc/ACKS


File: python.info,  Node: Reporting Bugs,  Next: Copyright,  Prev: About these documents,  Up: Top

14 Reporting Bugs
*****************

Python is a mature programming language which has established a
reputation for stability.  In order to maintain this reputation, the
developers would like to know of any deficiencies you find in Python.

* Menu:

* Documentation bugs::
* Using the Python issue tracker::
* Getting started contributing to Python yourself::


File: python.info,  Node: Documentation bugs,  Next: Using the Python issue tracker,  Up: Reporting Bugs

14.1 Documentation bugs
=======================

If you find a bug in this documentation or would like to propose an
improvement, please submit a bug report on the *Note tracker: 3179.  If
you have a suggestion how to fix it, include that as well.

If you’re short on time, you can also email documentation bug reports
to <docs@python.org> (behavioral bugs can be sent to
<python-list@python.org>).  ‘docs@’ is a mailing list run by
volunteers; your request will be noticed, though it may take a while to
be processed.

See also
........

Documentation bugs(1) on the Python issue tracker

---------- Footnotes ----------

(1)
https://bugs.python.org/issue?@filter=status&@filter=components&components=4&status=1&@columns=id,activity,title,status&@sort=-activity


File: python.info,  Node: Using the Python issue tracker,  Next: Getting started contributing to Python yourself,  Prev: Documentation bugs,  Up: Reporting Bugs

14.2 Using the Python issue tracker
===================================

Bug reports for Python itself should be submitted via the Python Bug
Tracker (<https://bugs.python.org/>).  The bug tracker offers a Web
form which allows pertinent information to be entered and submitted to
the developers.

The first step in filing a report is to determine whether the problem
has already been reported.  The advantage in doing so, aside from
saving the developers time, is that you learn what has been done to fix
it; it may be that the problem has already been fixed for the next
release, or additional information is needed (in which case you are
welcome to provide it if you can!).  To do this, search the bug
database using the search box on the top of the page.

If the problem you’re reporting is not already in the bug tracker, go
back to the Python Bug Tracker and log in.  If you don’t already have
a tracker account, select the “Register” link or, if you use
OpenID, one of the OpenID provider logos in the sidebar.  It is not
possible to submit a bug report anonymously.

Being now logged in, you can submit a bug.  Select the “Create New”
link in the sidebar to open the bug reporting form.

The submission form has a number of fields.  For the “Title” field,
enter a `very' short description of the problem; less than ten words is
good.  In the “Type” field, select the type of your problem; also
select the “Component” and “Versions” to which the bug relates.

In the “Comment” field, describe the problem in detail, including
what you expected to happen and what did happen.  Be sure to include
whether any extension modules were involved, and what hardware and
software platform you were using (including version information as
appropriate).

Each bug report will be assigned to a developer who will determine what
needs to be done to correct the problem.  You will receive an update
each time action is taken on the bug.

See also
........

How to Report Bugs Effectively(1)
     Article which goes into some detail about how to create a useful
     bug report.  This describes what kind of information is useful and
     why it is useful.

Bug Writing Guidelines(2)
     Information about writing a good bug report.  Some of this is
     specific to the Mozilla project, but describes general good
     practices.

---------- Footnotes ----------

(1) http://www.chiark.greenend.org.uk/~sgtatham/bugs.html

(2)
https://developer.mozilla.org/en-US/docs/Mozilla/QA/Bug_writing_guidelines


File: python.info,  Node: Getting started contributing to Python yourself,  Prev: Using the Python issue tracker,  Up: Reporting Bugs

14.3 Getting started contributing to Python yourself
====================================================

Beyond just reporting bugs that you find, you are also welcome to submit
patches to fix them.  You can find more information on how to get
started patching Python in the Python Developer's Guide(1).  If you
have questions, the core-mentorship mailing list(2) is a friendly place
to get answers to any and all questions pertaining to the process of
fixing issues in Python.

---------- Footnotes ----------

(1) https://docs.python.org/devguide/

(2) https://mail.python.org/mailman/listinfo/core-mentorship/


File: python.info,  Node: Copyright,  Next: History and License,  Prev: Reporting Bugs,  Up: Top

15 Copyright
************

Python and this documentation is:

Copyright © 2001-2016 Python Software Foundation. All rights reserved.

Copyright © 2000 BeOpen.com. All rights reserved.

Copyright © 1995-2000 Corporation for National Research Initiatives.
All rights reserved.

Copyright © 1991-1995 Stichting Mathematisch Centrum. All rights
reserved.

__________________________________________________________________

See *Note History and License: 317f. for complete license and
permissions information.


File: python.info,  Node: History and License,  Next: Distributing Python Modules Legacy version,  Prev: Copyright,  Up: Top

16 History and License
**********************

* Menu:

* History of the software::
* Terms and conditions for accessing or otherwise using Python::
* Licenses and Acknowledgements for Incorporated Software::


File: python.info,  Node: History of the software,  Next: Terms and conditions for accessing or otherwise using Python,  Up: History and License

16.1 History of the software
============================

Python was created in the early 1990s by Guido van Rossum at Stichting
Mathematisch Centrum (CWI, see <https://www.cwi.nl/>) in the
Netherlands as a successor of a language called ABC.  Guido remains
Python’s principal author, although it includes many contributions
from others.

In 1995, Guido continued his work on Python at the Corporation for
National Research Initiatives (CNRI, see
<https://www.cnri.reston.va.us/>) in Reston, Virginia where he released
several versions of the software.

In May 2000, Guido and the Python core development team moved to
BeOpen.com to form the BeOpen PythonLabs team.  In October of the same
year, the PythonLabs team moved to Digital Creations (now Zope
Corporation; see <http://www.zope.com/>).  In 2001, the Python Software
Foundation (PSF, see <https://www.python.org/psf/>) was formed, a
non-profit organization created specifically to own Python-related
Intellectual Property.  Zope Corporation is a sponsoring member of the
PSF.

All Python releases are Open Source (see <https://opensource.org/> for
the Open Source Definition). Historically, most, but not all, Python
releases have also been GPL-compatible; the table below summarizes the
various releases.

Release              Derived from       Year            Owner            GPL compatible?
----------------------------------------------------------------------------------------------- 
0.9.0 thru 1.2       n/a                1991-1995       CWI              yes
1.3 thru 1.5.2       1.2                1995-1999       CNRI             yes
1.6                  1.5.2              2000            CNRI             no
2.0                  1.6                2000            BeOpen.com       no
1.6.1                1.6                2001            CNRI             no
2.1                  2.0+1.6.1          2001            PSF              no
2.0.1                2.0+1.6.1          2001            PSF              yes
2.1.1                2.1+2.0.1          2001            PSF              yes
2.1.2                2.1.1              2002            PSF              yes
2.1.3                2.1.2              2002            PSF              yes
2.2 and above        2.1.1              2001-now        PSF              yes

     Note: GPL-compatible doesn’t mean that we’re distributing
     Python under the GPL.  All Python licenses, unlike the GPL, let
     you distribute a modified version without making your changes open
     source. The GPL-compatible licenses make it possible to combine
     Python with other software that is released under the GPL; the
     others don’t.

Thanks to the many outside volunteers who have worked under Guido’s
direction to make these releases possible.


File: python.info,  Node: Terms and conditions for accessing or otherwise using Python,  Next: Licenses and Acknowledgements for Incorporated Software,  Prev: History of the software,  Up: History and License

16.2 Terms and conditions for accessing or otherwise using Python
=================================================================

* Menu:

* PSF LICENSE AGREEMENT FOR PYTHON 2.7.13: PSF LICENSE AGREEMENT FOR PYTHON 2 7 13.
* BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0: BEOPEN COM LICENSE AGREEMENT FOR PYTHON 2 0.
* CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1: CNRI LICENSE AGREEMENT FOR PYTHON 1 6 1.
* CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2: CWI LICENSE AGREEMENT FOR PYTHON 0 9 0 THROUGH 1 2.


File: python.info,  Node: PSF LICENSE AGREEMENT FOR PYTHON 2 7 13,  Next: BEOPEN COM LICENSE AGREEMENT FOR PYTHON 2 0,  Up: Terms and conditions for accessing or otherwise using Python

16.2.1 PSF LICENSE AGREEMENT FOR PYTHON 2.7.13
----------------------------------------------

    1. This LICENSE AGREEMENT is between the Python Software Foundation ("PSF"), and
       the Individual or Organization ("Licensee") accessing and otherwise using Python
       2.7.13 software in source or binary form and its associated documentation.

    2. Subject to the terms and conditions of this License Agreement, PSF hereby
       grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
       analyze, test, perform and/or display publicly, prepare derivative works,
       distribute, and otherwise use Python 2.7.13 alone or in any derivative
       version, provided, however, that PSF's License Agreement and PSF's notice of
       copyright, i.e., "Copyright © 2001-2016 Python Software Foundation; All Rights
       Reserved" are retained in Python 2.7.13 alone or in any derivative version
       prepared by Licensee.

    3. In the event Licensee prepares a derivative work that is based on or
       incorporates Python 2.7.13 or any part thereof, and wants to make the
       derivative work available to others as provided herein, then Licensee hereby
       agrees to include in any such work a brief summary of the changes made to Python
       2.7.13.

    4. PSF is making Python 2.7.13 available to Licensee on an "AS IS" basis.
       PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF
       EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
       WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
       USE OF PYTHON 2.7.13 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

    5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.7.13
       FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
       MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.7.13, OR ANY DERIVATIVE
       THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

    6. This License Agreement will automatically terminate upon a material breach of
       its terms and conditions.

    7. Nothing in this License Agreement shall be deemed to create any relationship
       of agency, partnership, or joint venture between PSF and Licensee.  This License
       Agreement does not grant permission to use PSF trademarks or trade name in a
       trademark sense to endorse or promote products or services of Licensee, or any
       third party.

    8. By copying, installing or otherwise using Python 2.7.13, Licensee agrees
       to be bound by the terms and conditions of this License Agreement.


File: python.info,  Node: BEOPEN COM LICENSE AGREEMENT FOR PYTHON 2 0,  Next: CNRI LICENSE AGREEMENT FOR PYTHON 1 6 1,  Prev: PSF LICENSE AGREEMENT FOR PYTHON 2 7 13,  Up: Terms and conditions for accessing or otherwise using Python

16.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0
--------------------------------------------------

BEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1

    1. This LICENSE AGREEMENT is between BeOpen.com ("BeOpen"), having an office at
       160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization
       ("Licensee") accessing and otherwise using this software in source or binary
       form and its associated documentation ("the Software").

    2. Subject to the terms and conditions of this BeOpen Python License Agreement,
       BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license
       to reproduce, analyze, test, perform and/or display publicly, prepare derivative
       works, distribute, and otherwise use the Software alone or in any derivative
       version, provided, however, that the BeOpen Python License is retained in the
       Software, alone or in any derivative version prepared by Licensee.

    3. BeOpen is making the Software available to Licensee on an "AS IS" basis.
       BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF
       EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR
       WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE
       USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

    4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR
       ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,
       MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF
       ADVISED OF THE POSSIBILITY THEREOF.

    5. This License Agreement will automatically terminate upon a material breach of
       its terms and conditions.

    6. This License Agreement shall be governed by and interpreted in all respects
       by the law of the State of California, excluding conflict of law provisions.
       Nothing in this License Agreement shall be deemed to create any relationship of
       agency, partnership, or joint venture between BeOpen and Licensee.  This License
       Agreement does not grant permission to use BeOpen trademarks or trade names in a
       trademark sense to endorse or promote products or services of Licensee, or any
       third party.  As an exception, the "BeOpen Python" logos available at
       <http://www.pythonlabs.com/logos.html> may be used according to the permissions
       granted on that web page.

    7. By copying, installing or otherwise using the software, Licensee agrees to be
       bound by the terms and conditions of this License Agreement.


File: python.info,  Node: CNRI LICENSE AGREEMENT FOR PYTHON 1 6 1,  Next: CWI LICENSE AGREEMENT FOR PYTHON 0 9 0 THROUGH 1 2,  Prev: BEOPEN COM LICENSE AGREEMENT FOR PYTHON 2 0,  Up: Terms and conditions for accessing or otherwise using Python

16.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1
----------------------------------------------

    1. This LICENSE AGREEMENT is between the Corporation for National Research
       Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191
       ("CNRI"), and the Individual or Organization ("Licensee") accessing and
       otherwise using Python 1.6.1 software in source or binary form and its
       associated documentation.

    2. Subject to the terms and conditions of this License Agreement, CNRI hereby
       grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,
       analyze, test, perform and/or display publicly, prepare derivative works,
       distribute, and otherwise use Python 1.6.1 alone or in any derivative version,
       provided, however, that CNRI's License Agreement and CNRI's notice of copyright,
       i.e., "Copyright © 1995-2001 Corporation for National Research Initiatives; All
       Rights Reserved" are retained in Python 1.6.1 alone or in any derivative version
       prepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,
       Licensee may substitute the following text (omitting the quotes): "Python 1.6.1
       is made available subject to the terms and conditions in CNRI's License
       Agreement.  This Agreement together with Python 1.6.1 may be located on the
       Internet using the following unique, persistent identifier (known as a handle):
       1895.22/1013.  This Agreement may also be obtained from a proxy server on the
       Internet using the following URL: <http://hdl.handle.net/1895.22/1013>."

    3. In the event Licensee prepares a derivative work that is based on or
       incorporates Python 1.6.1 or any part thereof, and wants to make the derivative
       work available to others as provided herein, then Licensee hereby agrees to
       include in any such work a brief summary of the changes made to Python 1.6.1.

    4. CNRI is making Python 1.6.1 available to Licensee on an "AS IS" basis.  CNRI
       MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,
       BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY
       OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF
       PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.

    5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR
       ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF
       MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE
       THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.

    6. This License Agreement will automatically terminate upon a material breach of
       its terms and conditions.

    7. This License Agreement shall be governed by the federal intellectual property
       law of the United States, including without limitation the federal copyright
       law, and, to the extent such U.S. federal law does not apply, by the law of the
       Commonwealth of Virginia, excluding Virginia's conflict of law provisions.
       Notwithstanding the foregoing, with regard to derivative works based on Python
       1.6.1 that incorporate non-separable material that was previously distributed
       under the GNU General Public License (GPL), the law of the Commonwealth of
       Virginia shall govern this License Agreement only as to issues arising under or
       with respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in
       this License Agreement shall be deemed to create any relationship of agency,
       partnership, or joint venture between CNRI and Licensee.  This License Agreement
       does not grant permission to use CNRI trademarks or trade name in a trademark
       sense to endorse or promote products or services of Licensee, or any third
       party.

    8. By clicking on the "ACCEPT" button where indicated, or by copying, installing
       or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and
       conditions of this License Agreement.


File: python.info,  Node: CWI LICENSE AGREEMENT FOR PYTHON 0 9 0 THROUGH 1 2,  Prev: CNRI LICENSE AGREEMENT FOR PYTHON 1 6 1,  Up: Terms and conditions for accessing or otherwise using Python

16.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2
---------------------------------------------------------

    Copyright © 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The
    Netherlands.  All rights reserved.

    Permission to use, copy, modify, and distribute this software and its
    documentation for any purpose and without fee is hereby granted, provided that
    the above copyright notice appear in all copies and that both that copyright
    notice and this permission notice appear in supporting documentation, and that
    the name of Stichting Mathematisch Centrum or CWI not be used in advertising or
    publicity pertaining to distribution of the software without specific, written
    prior permission.

    STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO
    EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT
    OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
    DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
    ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
    SOFTWARE.


File: python.info,  Node: Licenses and Acknowledgements for Incorporated Software,  Prev: Terms and conditions for accessing or otherwise using Python,  Up: History and License

16.3 Licenses and Acknowledgements for Incorporated Software
============================================================

This section is an incomplete, but growing list of licenses and
acknowledgements for third-party software incorporated in the Python
distribution.

* Menu:

* Mersenne Twister::
* Sockets: Sockets<2>.
* Floating point exception control::
* MD5 message digest algorithm::
* Asynchronous socket services::
* Cookie management::
* Execution tracing::
* UUencode and UUdecode functions::
* XML Remote Procedure Calls::
* test_epoll::
* Select kqueue::
* strtod and dtoa::
* OpenSSL::
* expat::
* libffi::
* zlib::


File: python.info,  Node: Mersenne Twister,  Next: Sockets<2>,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.1 Mersenne Twister
-----------------------

The `_random' module includes code based on a download from
<http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html>.
The following are the verbatim comments from the original code:

    A C-program for MT19937, with initialization improved 2002/1/26.
    Coded by Takuji Nishimura and Makoto Matsumoto.

    Before using, initialize the state by using init_genrand(seed)
    or init_by_array(init_key, key_length).

    Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


    Any feedback is very welcome.
    http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
    email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)


File: python.info,  Node: Sockets<2>,  Next: Floating point exception control,  Prev: Mersenne Twister,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.2 Sockets
--------------

The *Note socket: 15c. module uses the functions, `getaddrinfo()', and
`getnameinfo()', which are coded in separate source files from the WIDE
Project, <http://www.wide.ad.jp/>.

    Copyright (C) 1995, 1996, 1997, and 1998 WIDE Project.
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.
    3. Neither the name of the project nor the names of its contributors
       may be used to endorse or promote products derived from this software
       without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.


File: python.info,  Node: Floating point exception control,  Next: MD5 message digest algorithm,  Prev: Sockets<2>,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.3 Floating point exception control
---------------------------------------

The source for the *Note fpectl: d5. module includes the following
notice:

      ---------------------------------------------------------------------
     /                       Copyright (c) 1996.                           \
    |          The Regents of the University of California.                 |
    |                        All rights reserved.                           |
    |                                                                       |
    |   Permission to use, copy, modify, and distribute this software for   |
    |   any purpose without fee is hereby granted, provided that this en-   |
    |   tire notice is included in all copies of any software which is or   |
    |   includes  a  copy  or  modification  of  this software and in all   |
    |   copies of the supporting documentation for such software.           |
    |                                                                       |
    |   This  work was produced at the University of California, Lawrence   |
    |   Livermore National Laboratory under  contract  no.  W-7405-ENG-48   |
    |   between  the  U.S.  Department  of  Energy and The Regents of the   |
    |   University of California for the operation of UC LLNL.              |
    |                                                                       |
    |                              DISCLAIMER                               |
    |                                                                       |
    |   This  software was prepared as an account of work sponsored by an   |
    |   agency of the United States Government. Neither the United States   |
    |   Government  nor the University of California nor any of their em-   |
    |   ployees, makes any warranty, express or implied, or  assumes  any   |
    |   liability  or  responsibility  for the accuracy, completeness, or   |
    |   usefulness of any information,  apparatus,  product,  or  process   |
    |   disclosed,   or  represents  that  its  use  would  not  infringe   |
    |   privately-owned rights. Reference herein to any specific  commer-   |
    |   cial  products,  process,  or  service  by trade name, trademark,   |
    |   manufacturer, or otherwise, does not  necessarily  constitute  or   |
    |   imply  its endorsement, recommendation, or favoring by the United   |
    |   States Government or the University of California. The views  and   |
    |   opinions  of authors expressed herein do not necessarily state or   |
    |   reflect those of the United States Government or  the  University   |
    |   of  California,  and shall not be used for advertising or product   |
     \  endorsement purposes.                                              /
      ---------------------------------------------------------------------


File: python.info,  Node: MD5 message digest algorithm,  Next: Asynchronous socket services,  Prev: Floating point exception control,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.4 MD5 message digest algorithm
-----------------------------------

The source code for the *Note md5: 10e. module contains the following
notice:

    Copyright (C) 1999, 2002 Aladdin Enterprises.  All rights reserved.

    This software is provided 'as-is', without any express or implied
    warranty.  In no event will the authors be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.
    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.
    3. This notice may not be removed or altered from any source distribution.

    L. Peter Deutsch
    ghost@aladdin.com

    Independent implementation of MD5 (RFC 1321).

    This code implements the MD5 Algorithm defined in RFC 1321, whose
    text is available at
          http://www.ietf.org/rfc/rfc1321.txt
    The code is derived from the text of the RFC, including the test suite
    (section A.5) but excluding the rest of Appendix A.  It does not include
    any code or documentation that is identified in the RFC as being
    copyrighted.

    The original and principal author of md5.h is L. Peter Deutsch
    <ghost@aladdin.com>.  Other authors are noted in the change history
    that follows (in reverse chronological order):

    2002-04-13 lpd Removed support for non-ANSI compilers; removed
          references to Ghostscript; clarified derivation from RFC 1321;
          now handles byte order either statically or dynamically.
    1999-11-04 lpd Edited comments slightly for automatic TOC extraction.
    1999-10-18 lpd Fixed typo in header comment (ansi2knr rather than md5);
          added conditionalization for C++ compilation from Martin
          Purschke <purschke@bnl.gov>.
    1999-05-03 lpd Original version.


File: python.info,  Node: Asynchronous socket services,  Next: Cookie management,  Prev: MD5 message digest algorithm,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.5 Asynchronous socket services
-----------------------------------

The *Note asynchat: 10. and *Note asyncore: 11. modules contain the
following notice:

    Copyright 1996 by Sam Rushing

                            All Rights Reserved

    Permission to use, copy, modify, and distribute this software and
    its documentation for any purpose and without fee is hereby
    granted, provided that the above copyright notice appear in all
    copies and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of Sam
    Rushing not be used in advertising or publicity pertaining to
    distribution of the software without specific, written prior
    permission.

    SAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
    INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN
    NO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR
    CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
    OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
    NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
    CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


File: python.info,  Node: Cookie management,  Next: Execution tracing,  Prev: Asynchronous socket services,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.6 Cookie management
------------------------

The *Note Cookie: 6f. module contains the following notice:

    Copyright 2000 by Timothy O'Malley <timo@alum.mit.edu>

                   All Rights Reserved

    Permission to use, copy, modify, and distribute this software
    and its documentation for any purpose and without fee is hereby
    granted, provided that the above copyright notice appear in all
    copies and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of
    Timothy O'Malley  not be used in advertising or publicity
    pertaining to distribution of the software without specific, written
    prior permission.

    Timothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
    SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR
    ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
    WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
    ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.


File: python.info,  Node: Execution tracing,  Next: UUencode and UUdecode functions,  Prev: Cookie management,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.7 Execution tracing
------------------------

The *Note trace: 180. module contains the following notice:

    portions copyright 2001, Autonomous Zones Industries, Inc., all rights...
    err...  reserved and offered to the public under the terms of the
    Python 2.2 license.
    Author: Zooko O'Whielacronx
    http://zooko.com/
    mailto:zooko@zooko.com

    Copyright 2000, Mojam Media, Inc., all rights reserved.
    Author: Skip Montanaro

    Copyright 1999, Bioreason, Inc., all rights reserved.
    Author: Andrew Dalke

    Copyright 1995-1997, Automatrix, Inc., all rights reserved.
    Author: Skip Montanaro

    Copyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.


    Permission to use, copy, modify, and distribute this Python software and
    its associated documentation for any purpose without fee is hereby
    granted, provided that the above copyright notice appears in all copies,
    and that both that copyright notice and this permission notice appear in
    supporting documentation, and that the name of neither Automatrix,
    Bioreason or Mojam Media be used in advertising or publicity pertaining to
    distribution of the software without specific, written prior permission.


File: python.info,  Node: UUencode and UUdecode functions,  Next: XML Remote Procedure Calls,  Prev: Execution tracing,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.8 UUencode and UUdecode functions
--------------------------------------

The *Note uu: 18f. module contains the following notice:

    Copyright 1994 by Lance Ellinghouse
    Cathedral City, California Republic, United States of America.
                           All Rights Reserved
    Permission to use, copy, modify, and distribute this software and its
    documentation for any purpose and without fee is hereby granted,
    provided that the above copyright notice appear in all copies and that
    both that copyright notice and this permission notice appear in
    supporting documentation, and that the name of Lance Ellinghouse
    not be used in advertising or publicity pertaining to distribution
    of the software without specific, written prior permission.
    LANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO
    THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE
    FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
    WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
    ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
    OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

    Modified by Jack Jansen, CWI, July 1995:
    - Use binascii module to do the actual line-by-line conversion
      between ascii and binary. This results in a 1000-fold speedup. The C
      version is still 5 times faster, though.
    - Arguments more compliant with Python standard


File: python.info,  Node: XML Remote Procedure Calls,  Next: test_epoll,  Prev: UUencode and UUdecode functions,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.9 XML Remote Procedure Calls
---------------------------------

The *Note xmlrpclib: 1aa. module contains the following notice:

        The XML-RPC client interface is

    Copyright (c) 1999-2002 by Secret Labs AB
    Copyright (c) 1999-2002 by Fredrik Lundh

    By obtaining, using, and/or copying this software and/or its
    associated documentation, you agree that you have read, understood,
    and will comply with the following terms and conditions:

    Permission to use, copy, modify, and distribute this software and
    its associated documentation for any purpose and without fee is
    hereby granted, provided that the above copyright notice appears in
    all copies, and that both that copyright notice and this permission
    notice appear in supporting documentation, and that the name of
    Secret Labs AB or the author not be used in advertising or publicity
    pertaining to distribution of the software without specific, written
    prior permission.

    SECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD
    TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-
    ABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR
    BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
    DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
    WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
    ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
    OF THIS SOFTWARE.


File: python.info,  Node: test_epoll,  Next: Select kqueue,  Prev: XML Remote Procedure Calls,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.10 test_epoll
------------------

The `test_epoll' contains the following notice:

    Copyright (c) 2001-2006 Twisted Matrix Laboratories.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


File: python.info,  Node: Select kqueue,  Next: strtod and dtoa,  Prev: test_epoll,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.11 Select kqueue
---------------------

The *Note select: 14e. and contains the following notice for the kqueue
interface:

    Copyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.


File: python.info,  Node: strtod and dtoa,  Next: OpenSSL,  Prev: Select kqueue,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.12 strtod and dtoa
-----------------------

The file `Python/dtoa.c', which supplies C functions dtoa and strtod
for conversion of C doubles to and from strings, is derived from the
file of the same name by David M. Gay, currently available from
<http://www.netlib.org/fp/>.  The original file, as retrieved on March
16, 2009, contains the following copyright and licensing notice:

    /****************************************************************
     *
     * The author of this software is David M. Gay.
     *
     * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.
     *
     * Permission to use, copy, modify, and distribute this software for any
     * purpose without fee is hereby granted, provided that this entire notice
     * is included in all copies of any software which is or includes a copy
     * or modification of this software and in all copies of the supporting
     * documentation for such software.
     *
     * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
     * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY
     * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY
     * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.
     *
     ***************************************************************/


File: python.info,  Node: OpenSSL,  Next: expat,  Prev: strtod and dtoa,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.13 OpenSSL
---------------

The modules *Note hashlib: e7, *Note posix: 137, *Note ssl: 160, *Note
crypt: 75. use the OpenSSL library for added performance if made
available by the operating system. Additionally, the Windows and Mac OS
X installers for Python may include a copy of the OpenSSL libraries, so
we include a copy of the OpenSSL license here:

    LICENSE ISSUES
    ==============

    The OpenSSL toolkit stays under a dual license, i.e. both the conditions of
    the OpenSSL License and the original SSLeay license apply to the toolkit.
    See below for the actual license texts. Actually both licenses are BSD-style
    Open Source licenses. In case of any license issues related to OpenSSL
    please contact openssl-core@openssl.org.

    OpenSSL License
    ---------------

      /* ====================================================================
       * Copyright (c) 1998-2008 The OpenSSL Project.  All rights reserved.
       *
       * Redistribution and use in source and binary forms, with or without
       * modification, are permitted provided that the following conditions
       * are met:
       *
       * 1. Redistributions of source code must retain the above copyright
       *    notice, this list of conditions and the following disclaimer.
       *
       * 2. Redistributions in binary form must reproduce the above copyright
       *    notice, this list of conditions and the following disclaimer in
       *    the documentation and/or other materials provided with the
       *    distribution.
       *
       * 3. All advertising materials mentioning features or use of this
       *    software must display the following acknowledgment:
       *    "This product includes software developed by the OpenSSL Project
       *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
       *
       * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
       *    endorse or promote products derived from this software without
       *    prior written permission. For written permission, please contact
       *    openssl-core@openssl.org.
       *
       * 5. Products derived from this software may not be called "OpenSSL"
       *    nor may "OpenSSL" appear in their names without prior written
       *    permission of the OpenSSL Project.
       *
       * 6. Redistributions of any form whatsoever must retain the following
       *    acknowledgment:
       *    "This product includes software developed by the OpenSSL Project
       *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
       *
       * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
       * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
       * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
       * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
       * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
       * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
       * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
       * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
       * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
       * OF THE POSSIBILITY OF SUCH DAMAGE.
       * ====================================================================
       *
       * This product includes cryptographic software written by Eric Young
       * (eay@cryptsoft.com).  This product includes software written by Tim
       * Hudson (tjh@cryptsoft.com).
       *
       */

    Original SSLeay License
    -----------------------

      /* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
       * All rights reserved.
       *
       * This package is an SSL implementation written
       * by Eric Young (eay@cryptsoft.com).
       * The implementation was written so as to conform with Netscapes SSL.
       *
       * This library is free for commercial and non-commercial use as long as
       * the following conditions are aheared to.  The following conditions
       * apply to all code found in this distribution, be it the RC4, RSA,
       * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
       * included with this distribution is covered by the same copyright terms
       * except that the holder is Tim Hudson (tjh@cryptsoft.com).
       *
       * Copyright remains Eric Young's, and as such any Copyright notices in
       * the code are not to be removed.
       * If this package is used in a product, Eric Young should be given attribution
       * as the author of the parts of the library used.
       * This can be in the form of a textual message at program startup or
       * in documentation (online or textual) provided with the package.
       *
       * Redistribution and use in source and binary forms, with or without
       * modification, are permitted provided that the following conditions
       * are met:
       * 1. Redistributions of source code must retain the copyright
       *    notice, this list of conditions and the following disclaimer.
       * 2. Redistributions in binary form must reproduce the above copyright
       *    notice, this list of conditions and the following disclaimer in the
       *    documentation and/or other materials provided with the distribution.
       * 3. All advertising materials mentioning features or use of this software
       *    must display the following acknowledgement:
       *    "This product includes cryptographic software written by
       *     Eric Young (eay@cryptsoft.com)"
       *    The word 'cryptographic' can be left out if the rouines from the library
       *    being used are not cryptographic related :-).
       * 4. If you include any Windows specific code (or a derivative thereof) from
       *    the apps directory (application code) you must include an acknowledgement:
       *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
       *
       * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
       * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
       * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
       * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
       * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
       * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
       * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
       * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
       * SUCH DAMAGE.
       *
       * The licence and distribution terms for any publically available version or
       * derivative of this code cannot be changed.  i.e. this code cannot simply be
       * copied and put under another distribution licence
       * [including the GNU Public Licence.]
       */


File: python.info,  Node: expat,  Next: libffi,  Prev: OpenSSL,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.14 expat
-------------

The `pyexpat' extension is built using an included copy of the expat
sources unless the build is configured `--with-system-expat':

    Copyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd
                                   and Clark Cooper

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


File: python.info,  Node: libffi,  Next: zlib,  Prev: expat,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.15 libffi
--------------

The `_ctypes' extension is built using an included copy of the libffi
sources unless the build is configured `--with-system-libffi':

    Copyright (c) 1996-2008  Red Hat, Inc and others.

    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    ``Software''), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.


File: python.info,  Node: zlib,  Prev: libffi,  Up: Licenses and Acknowledgements for Incorporated Software

16.3.16 zlib
------------

The *Note zlib: 1ad. extension is built using an included copy of the
zlib sources if the zlib version found on the system is too old to be
used for the build:

    Copyright (C) 1995-2010 Jean-loup Gailly and Mark Adler

    This software is provided 'as-is', without any express or implied
    warranty.  In no event will the authors be held liable for any damages
    arising from the use of this software.

    Permission is granted to anyone to use this software for any purpose,
    including commercial applications, and to alter it and redistribute it
    freely, subject to the following restrictions:

    1. The origin of this software must not be misrepresented; you must not
       claim that you wrote the original software. If you use this software
       in a product, an acknowledgment in the product documentation would be
       appreciated but is not required.

    2. Altered source versions must be plainly marked as such, and must not be
       misrepresented as being the original software.

    3. This notice may not be removed or altered from any source distribution.

    Jean-loup Gailly        Mark Adler
    jloup@gzip.org          madler@alumni.caltech.edu


File: python.info,  Node: Distributing Python Modules Legacy version,  Next: Installing Python Modules Legacy version,  Prev: History and License,  Up: Top

17 Distributing Python Modules (Legacy version)
***********************************************

Authors: Greg Ward, Anthony Baxter

Email: <distutils-sig@python.org>

See also
........

*Note Distributing Python Modules: 2ef.
     The up to date module distribution documentations

This document describes the Python Distribution Utilities
(“Distutils”) from the module developer’s point of view,
describing how to use the Distutils to make Python modules and
extensions easily available to a wider audience with very little
overhead for build/release/install mechanics.

     Note: This guide only covers the basic tools for building and
     distributing extensions that are provided as part of this version
     of Python. Third party tools offer easier to use and more secure
     alternatives. Refer to the quick recommendations section(1) in the
     Python Packaging User Guide for more information.

* Menu:

* An Introduction to Distutils::
* Writing the Setup Script::
* Writing the Setup Configuration File::
* Creating a Source Distribution::
* Creating Built Distributions::
* The Python Package Index (PyPI): The Python Package Index PyPI.
* Examples: Examples<24>.
* Extending Distutils::
* Command Reference::
* API Reference::

---------- Footnotes ----------

(1) https://packaging.python.org/en/latest/current/


File: python.info,  Node: An Introduction to Distutils,  Next: Writing the Setup Script,  Up: Distributing Python Modules Legacy version

17.1 An Introduction to Distutils
=================================

This document covers using the Distutils to distribute your Python
modules, concentrating on the role of developer/distributor: if
you’re looking for information on installing Python modules, you
should refer to the *Note Installing Python Modules (Legacy version):
2f0. chapter.

* Menu:

* Concepts & Terminology::
* A Simple Example: A Simple Example<2>.
* General Python terminology::
* Distutils-specific terminology::


File: python.info,  Node: Concepts & Terminology,  Next: A Simple Example<2>,  Up: An Introduction to Distutils

17.1.1 Concepts & Terminology
-----------------------------

Using the Distutils is quite simple, both for module developers and for
users/administrators installing third-party modules.  As a developer,
your responsibilities (apart from writing solid, well-documented and
well-tested code, of course!) are:

   * write a setup script (`setup.py' by convention)

   * (optional) write a setup configuration file

   * create a source distribution

   * (optional) create one or more built (binary) distributions

Each of these tasks is covered in this document.

Not all module developers have access to a multitude of platforms, so
it’s not always feasible to expect them to create a multitude of
built distributions.  It is hoped that a class of intermediaries,
called `packagers', will arise to address this need.  Packagers will
take source distributions released by module developers, build them on
one or more platforms, and release the resulting built distributions.
Thus, users on the most popular platforms will be able to install most
popular Python module distributions in the most natural way for their
platform, without having to run a single setup script or compile a line
of code.


File: python.info,  Node: A Simple Example<2>,  Next: General Python terminology,  Prev: Concepts & Terminology,  Up: An Introduction to Distutils

17.1.2 A Simple Example
-----------------------

The setup script is usually quite simple, although since it’s written
in Python, there are no arbitrary limits to what you can do with it,
though you should be careful about putting arbitrarily expensive
operations in your setup script.  Unlike, say, Autoconf-style configure
scripts, the setup script may be run multiple times in the course of
building and installing your module distribution.

If all you want to do is distribute a module called `foo', contained in
a file `foo.py', then your setup script can be as simple as this:

    from distutils.core import setup
    setup(name='foo',
          version='1.0',
          py_modules=['foo'],
          )

Some observations:

   * most information that you supply to the Distutils is supplied as
     keyword arguments to the `setup()' function

   * those keyword arguments fall into two categories: package metadata
     (name, version number) and information about what’s in the
     package (a list of pure Python modules, in this case)

   * modules are specified by module name, not filename (the same will
     hold true for packages and extensions)

   * it’s recommended that you supply a little more metadata, in
     particular your name, email address and a URL for the project (see
     section *Note Writing the Setup Script: 31a2.  for an example)

To create a source distribution for this module, you would create a
setup script, `setup.py', containing the above code, and run this
command from a terminal:

    python setup.py sdist

For Windows, open a command prompt windows (Start ‣ Accessories) and
change the command to:

    setup.py sdist

`sdist' will create an archive file (e.g., tarball on Unix, ZIP file on
Windows) containing your setup script `setup.py', and your module
`foo.py'.  The archive file will be named `foo-1.0.tar.gz' (or `.zip'),
and will unpack into a directory `foo-1.0'.

If an end-user wishes to install your `foo' module, all she has to do is
download `foo-1.0.tar.gz' (or `.zip'), unpack it, and—from the
`foo-1.0' directory—run

    python setup.py install

which will ultimately copy `foo.py' to the appropriate directory for
third-party modules in their Python installation.

This simple example demonstrates some fundamental concepts of the
Distutils.  First, both developers and installers have the same basic
user interface, i.e.  the setup script.  The difference is which
Distutils `commands' they use: the `sdist' command is almost
exclusively for module developers, while `install' is more often for
installers (although most developers will want to install their own
code occasionally).

If you want to make things really easy for your users, you can create
one or more built distributions for them.  For instance, if you are
running on a Windows machine, and want to make things easy for other
Windows users, you can create an executable installer (the most
appropriate type of built distribution for this platform) with the
`bdist_wininst' command.  For example:

    python setup.py bdist_wininst

will create an executable installer, `foo-1.0.win32.exe', in the current
directory.

Other useful built distribution formats are RPM, implemented by the
`bdist_rpm' command, Solaris `pkgtool' (`bdist_pkgtool'), and HP-UX
`swinstall' (`bdist_sdux').  For example, the following command will
create an RPM file called `foo-1.0.noarch.rpm':

    python setup.py bdist_rpm

(The `bdist_rpm' command uses the `rpm' executable, therefore this has
to be run on an RPM-based system such as Red Hat Linux, SuSE Linux, or
Mandrake Linux.)

You can find out what distribution formats are available at any time by
running

    python setup.py bdist --help-formats


File: python.info,  Node: General Python terminology,  Next: Distutils-specific terminology,  Prev: A Simple Example<2>,  Up: An Introduction to Distutils

17.1.3 General Python terminology
---------------------------------

If you’re reading this document, you probably have a good idea of
what modules, extensions, and so forth are.  Nevertheless, just to be
sure that everyone is operating from a common starting point, we offer
the following glossary of common Python terms:

module
     the basic unit of code reusability in Python: a block of code
     imported by some other code.  Three types of modules concern us
     here: pure Python modules, extension modules, and packages.

pure Python module
     a module written in Python and contained in a single `.py' file
     (and possibly associated `.pyc' and/or `.pyo' files).  Sometimes
     referred to as a “pure module.”

extension module
     a module written in the low-level language of the Python
     implementation: C/C++ for Python, Java for Jython. Typically
     contained in a single dynamically loadable pre-compiled file, e.g.
     a shared object (`.so') file for Python extensions on Unix, a DLL
     (given the `.pyd' extension) for Python extensions on Windows, or
     a Java class file for Jython extensions.  (Note that currently,
     the Distutils only handles C/C++ extensions for Python.)

package
     a module that contains other modules; typically contained in a
     directory in the filesystem and distinguished from other
     directories by the presence of a file `__init__.py'.

root package
     the root of the hierarchy of packages.  (This isn’t really a
     package, since it doesn’t have an `__init__.py' file.  But we
     have to call it something.)  The vast majority of the standard
     library is in the root package, as are many small, standalone
     third-party modules that don’t belong to a larger module
     collection. Unlike regular packages, modules in the root package
     can be found in many directories: in fact, every directory listed
     in `sys.path' contributes modules to the root package.


File: python.info,  Node: Distutils-specific terminology,  Prev: General Python terminology,  Up: An Introduction to Distutils

17.1.4 Distutils-specific terminology
-------------------------------------

The following terms apply more specifically to the domain of
distributing Python modules using the Distutils:

module distribution
     a collection of Python modules distributed together as a single
     downloadable resource and meant to be installed `en masse'.
     Examples of some well-known module distributions are Numeric
     Python, PyXML, PIL (the Python Imaging Library), or mxBase.  (This
     would be called a `package', except that term is already taken in
     the Python context: a single module distribution may contain zero,
     one, or many Python packages.)

pure module distribution
     a module distribution that contains only pure Python modules and
     packages.  Sometimes referred to as a “pure distribution.”

non-pure module distribution
     a module distribution that contains at least one extension module.
     Sometimes referred to as a “non-pure distribution.”

distribution root
     the top-level directory of your source tree (or  source
     distribution); the directory where `setup.py' exists.  Generally
     `setup.py' will be run from this directory.


File: python.info,  Node: Writing the Setup Script,  Next: Writing the Setup Configuration File,  Prev: An Introduction to Distutils,  Up: Distributing Python Modules Legacy version

17.2 Writing the Setup Script
=============================

The setup script is the centre of all activity in building,
distributing, and installing modules using the Distutils.  The main
purpose of the setup script is to describe your module distribution to
the Distutils, so that the various commands that operate on your
modules do the right thing.  As we saw in section *Note A Simple
Example: 31a0. above, the setup script consists mainly of a call to
`setup()', and most information supplied to the Distutils by the module
developer is supplied as keyword arguments to `setup()'.

Here’s a slightly more involved example, which we’ll follow for the
next couple of sections: the Distutils’ own setup script.  (Keep in
mind that although the Distutils are included with Python 1.6 and
later, they also have an independent existence so that Python 1.5.2
users can use them to install other module distributions.  The
Distutils’ own setup script, shown here, is used to install the
package into Python 1.5.2.)

    #!/usr/bin/env python

    from distutils.core import setup

    setup(name='Distutils',
          version='1.0',
          description='Python Distribution Utilities',
          author='Greg Ward',
          author_email='gward@python.net',
          url='https://www.python.org/sigs/distutils-sig/',
          packages=['distutils', 'distutils.command'],
         )

There are only two differences between this and the trivial one-file
distribution presented in section *Note A Simple Example: 31a0.: more
metadata, and the specification of pure Python modules by package,
rather than by module.  This is important since the Distutils consist
of a couple of dozen modules split into (so far) two packages; an
explicit list of every module would be tedious to generate and
difficult to maintain.  For more information on the additional
meta-data, see section *Note Additional meta-data: 31a9.

Note that any pathnames (files or directories) supplied in the setup
script should be written using the Unix convention, i.e.
slash-separated.  The Distutils will take care of converting this
platform-neutral representation into whatever is appropriate on your
current platform before actually using the pathname.  This makes your
setup script portable across operating systems, which of course is one
of the major goals of the Distutils.  In this spirit, all pathnames in
this document are slash-separated.

This, of course, only applies to pathnames given to Distutils
functions.  If you, for example, use standard Python functions such as
*Note glob.glob(): 35c. or *Note os.listdir(): 2d5. to specify files,
you should be careful to write portable code instead of hardcoding path
separators:

    glob.glob(os.path.join('mydir', 'subdir', '*.html'))
    os.listdir(os.path.join('mydir', 'subdir'))

* Menu:

* Listing whole packages::
* Listing individual modules::
* Describing extension modules::
* Relationships between Distributions and Packages::
* Installing Scripts::
* Installing Package Data::
* Installing Additional Files::
* Additional meta-data::
* Debugging the setup script::


File: python.info,  Node: Listing whole packages,  Next: Listing individual modules,  Up: Writing the Setup Script

17.2.1 Listing whole packages
-----------------------------

The `packages' option tells the Distutils to process (build, distribute,
install, etc.) all pure Python modules found in each package mentioned
in the `packages' list.  In order to do this, of course, there has to
be a correspondence between package names and directories in the
filesystem.  The default correspondence is the most obvious one, i.e.
package *Note distutils: 85. is found in the directory `distutils'
relative to the distribution root.  Thus, when you say `packages =
['foo']' in your setup script, you are promising that the Distutils
will find a file `foo/__init__.py' (which might be spelled differently
on your system, but you get the idea) relative to the directory where
your setup script lives.  If you break this promise, the Distutils will
issue a warning but still process the broken package anyway.

If you use a different convention to lay out your source directory,
that’s no problem: you just have to supply the `package_dir' option
to tell the Distutils about your convention.  For example, say you keep
all Python source under `lib', so that modules in the “root
package” (i.e., not in any package at all) are in `lib', modules in
the `foo' package are in `lib/foo', and so forth.  Then you would put

    package_dir = {'': 'lib'}

in your setup script.  The keys to this dictionary are package names,
and an empty package name stands for the root package.  The values are
directory names relative to your distribution root.  In this case, when
you say `packages = ['foo']', you are promising that the file
`lib/foo/__init__.py' exists.

Another possible convention is to put the `foo' package right in `lib',
the `foo.bar' package in `lib/bar', etc.  This would be written in the
setup script as

    package_dir = {'foo': 'lib'}

A `package: dir' entry in the `package_dir' dictionary implicitly
applies to all packages below `package', so the `foo.bar' case is
automatically handled here.  In this example, having `packages = ['foo',
'foo.bar']' tells the Distutils to look for `lib/__init__.py' and
`lib/bar/__init__.py'.  (Keep in mind that although `package_dir'
applies recursively, you must explicitly list all packages in
`packages': the Distutils will `not' recursively scan your source tree
looking for any directory with an `__init__.py' file.)


File: python.info,  Node: Listing individual modules,  Next: Describing extension modules,  Prev: Listing whole packages,  Up: Writing the Setup Script

17.2.2 Listing individual modules
---------------------------------

For a small module distribution, you might prefer to list all modules
rather than listing packages—especially the case of a single module
that goes in the “root package” (i.e., no package at all).  This
simplest case was shown in section *Note A Simple Example: 31a0.; here
is a slightly more involved example:

    py_modules = ['mod1', 'pkg.mod2']

This describes two modules, one of them in the “root” package, the
other in the `pkg' package.  Again, the default package/directory
layout implies that these two modules can be found in `mod1.py' and
`pkg/mod2.py', and that `pkg/__init__.py' exists as well. And again,
you can override the package/directory correspondence using the
`package_dir' option.


File: python.info,  Node: Describing extension modules,  Next: Relationships between Distributions and Packages,  Prev: Listing individual modules,  Up: Writing the Setup Script

17.2.3 Describing extension modules
-----------------------------------

Just as writing Python extension modules is a bit more complicated than
writing pure Python modules, describing them to the Distutils is a bit
more complicated.  Unlike pure modules, it’s not enough just to list
modules or packages and expect the Distutils to go out and find the
right files; you have to specify the extension name, source file(s),
and any compile/link requirements (include directories, libraries to
link with, etc.).

All of this is done through another keyword argument to `setup()', the
`ext_modules' option.  `ext_modules' is just a list of *Note Extension:
31b0. instances, each of which describes a single extension module.
Suppose your distribution includes a single extension, called `foo' and
implemented by `foo.c'.  If no additional instructions to the
compiler/linker are needed, describing this extension is quite simple:

    Extension('foo', ['foo.c'])

The `Extension' class can be imported from *Note distutils.core: a0.
along with `setup()'.  Thus, the setup script for a module distribution
that contains only this one extension and nothing else might be:

    from distutils.core import setup, Extension
    setup(name='foo',
          version='1.0',
          ext_modules=[Extension('foo', ['foo.c'])],
          )

The `Extension' class (actually, the underlying extension-building
machinery implemented by the `build_ext' command) supports a great deal
of flexibility in describing Python extensions, which is explained in
the following sections.

* Menu:

* Extension names and packages::
* Extension source files::
* Preprocessor options::
* Library options::
* Other options: Other options<2>.


File: python.info,  Node: Extension names and packages,  Next: Extension source files,  Up: Describing extension modules

17.2.3.1 Extension names and packages
.....................................

The first argument to the *Note Extension: 31b0. constructor is always
the name of the extension, including any package names.  For example,

    Extension('foo', ['src/foo1.c', 'src/foo2.c'])

describes an extension that lives in the root package, while

    Extension('pkg.foo', ['src/foo1.c', 'src/foo2.c'])

describes the same extension in the `pkg' package.  The source files and
resulting object code are identical in both cases; the only difference
is where in the filesystem (and therefore where in Python’s namespace
hierarchy) the resulting extension lives.

If you have a number of extensions all in the same package (or all
under the same base package), use the `ext_package' keyword argument to
`setup()'.  For example,

    setup(...,
          ext_package='pkg',
          ext_modules=[Extension('foo', ['foo.c']),
                       Extension('subpkg.bar', ['bar.c'])],
         )

will compile `foo.c' to the extension `pkg.foo', and `bar.c' to
`pkg.subpkg.bar'.


File: python.info,  Node: Extension source files,  Next: Preprocessor options,  Prev: Extension names and packages,  Up: Describing extension modules

17.2.3.2 Extension source files
...............................

The second argument to the *Note Extension: 31b0. constructor is a list
of source files.  Since the Distutils currently only support C, C++,
and Objective-C extensions, these are normally C/C++/Objective-C source
files.  (Be sure to use appropriate extensions to distinguish C++
source files: `.cc' and `.cpp' seem to be recognized by both Unix and
Windows compilers.)

However, you can also include SWIG interface (`.i') files in the list;
the `build_ext' command knows how to deal with SWIG extensions: it will
run SWIG on the interface file and compile the resulting C/C++ file
into your extension.

This warning notwithstanding, options to SWIG can be currently passed
like this:

    setup(...,
          ext_modules=[Extension('_foo', ['foo.i'],
                                 swig_opts=['-modern', '-I../include'])],
          py_modules=['foo'],
         )

Or on the commandline like this:

    > python setup.py build_ext --swig-opts="-modern -I../include"

On some platforms, you can include non-source files that are processed
by the compiler and included in your extension.  Currently, this just
means Windows message text (`.mc') files and resource definition
(`.rc') files for Visual C++. These will be compiled to binary resource
(`.res') files and linked into the executable.


File: python.info,  Node: Preprocessor options,  Next: Library options,  Prev: Extension source files,  Up: Describing extension modules

17.2.3.3 Preprocessor options
.............................

Three optional arguments to *Note Extension: 31b0. will help if you
need to specify include directories to search or preprocessor macros to
define/undefine: `include_dirs', `define_macros', and `undef_macros'.

For example, if your extension requires header files in the `include'
directory under your distribution root, use the `include_dirs' option:

    Extension('foo', ['foo.c'], include_dirs=['include'])

You can specify absolute directories there; if you know that your
extension will only be built on Unix systems with X11R6 installed to
`/usr', you can get away with

    Extension('foo', ['foo.c'], include_dirs=['/usr/include/X11'])

You should avoid this sort of non-portable usage if you plan to
distribute your code: it’s probably better to write C code like

    #include <X11/Xlib.h>

If you need to include header files from some other Python extension,
you can take advantage of the fact that header files are installed in a
consistent way by the Distutils `install_headers' command.  For
example, the Numerical Python header files are installed (on a standard
Unix installation) to `/usr/local/include/python1.5/Numerical'. (The
exact location will differ according to your platform and Python
installation.)  Since the Python include
directory—`/usr/local/include/python1.5' in this case—is always
included in the search path when building Python extensions, the best
approach is to write C code like

    #include <Numerical/arrayobject.h>

If you must put the `Numerical' include directory right into your header
search path, though, you can find that directory using the Distutils
*Note distutils.sysconfig: af. module:

    from distutils.sysconfig import get_python_inc
    incdir = os.path.join(get_python_inc(plat_specific=1), 'Numerical')
    setup(...,
          Extension(..., include_dirs=[incdir]),
          )

Even though this is quite portable—it will work on any Python
installation, regardless of platform—it’s probably easier to just
write your C code in the sensible way.

You can define and undefine pre-processor macros with the
`define_macros' and `undef_macros' options. `define_macros' takes a
list of `(name, value)' tuples, where `name' is the name of the macro
to define (a string) and `value' is its value: either a string or
`None'.  (Defining a macro `FOO' to `None' is the equivalent of a bare
`#define FOO' in your C source: with most compilers, this sets `FOO' to
the string `1'.)  `undef_macros' is just a list of macros to undefine.

For example:

    Extension(...,
              define_macros=[('NDEBUG', '1'),
                             ('HAVE_STRFTIME', None)],
              undef_macros=['HAVE_FOO', 'HAVE_BAR'])

is the equivalent of having this at the top of every C source file:

    #define NDEBUG 1
    #define HAVE_STRFTIME
    #undef HAVE_FOO
    #undef HAVE_BAR


File: python.info,  Node: Library options,  Next: Other options<2>,  Prev: Preprocessor options,  Up: Describing extension modules

17.2.3.4 Library options
........................

You can also specify the libraries to link against when building your
extension, and the directories to search for those libraries.  The
`libraries' option is a list of libraries to link against,
`library_dirs' is a list of directories to search for libraries at
link-time, and `runtime_library_dirs' is a list of directories to
search for shared (dynamically loaded) libraries at run-time.

For example, if you need to link against libraries known to be in the
standard library search path on target systems

    Extension(...,
              libraries=['gdbm', 'readline'])

If you need to link with libraries in a non-standard location, you’ll
have to include the location in `library_dirs':

    Extension(...,
              library_dirs=['/usr/X11R6/lib'],
              libraries=['X11', 'Xt'])

(Again, this sort of non-portable construct should be avoided if you
intend to distribute your code.)


File: python.info,  Node: Other options<2>,  Prev: Library options,  Up: Describing extension modules

17.2.3.5 Other options
......................

There are still some other options which can be used to handle special
cases.

The `extra_objects' option is a list of object files to be passed to the
linker. These files must not have extensions, as the default extension
for the compiler is used.

`extra_compile_args' and `extra_link_args' can be used to specify
additional command line options for the respective compiler and linker
command lines.

`export_symbols' is only useful on Windows.  It can contain a list of
symbols (functions or variables) to be exported. This option is not
needed when building compiled extensions: Distutils  will automatically
add `initmodule' to the list of exported symbols.

The `depends' option is a list of files that the extension depends on
(for example header files). The build command will call the compiler on
the sources to rebuild extension if any on this files has been modified
since the previous build.


File: python.info,  Node: Relationships between Distributions and Packages,  Next: Installing Scripts,  Prev: Describing extension modules,  Up: Writing the Setup Script

17.2.4 Relationships between Distributions and Packages
-------------------------------------------------------

A distribution may relate to packages in three specific ways:

  1. It can require packages or modules.

  2. It can provide packages or modules.

  3. It can obsolete packages or modules.

These relationships can be specified using keyword arguments to the
*Note distutils.core.setup(): 31b7. function.

Dependencies on other Python modules and packages can be specified by
supplying the `requires' keyword argument to `setup()'. The value must
be a list of strings.  Each string specifies a package that is
required, and optionally what versions are sufficient.

To specify that any version of a module or package is required, the
string should consist entirely of the module or package name. Examples
include `'mymodule'' and `'xml.parsers.expat''.

If specific versions are required, a sequence of qualifiers can be
supplied in parentheses.  Each qualifier may consist of a comparison
operator and a version number.  The accepted comparison operators are:

    <    >    ==
    <=   >=   !=

These can be combined by using multiple qualifiers separated by commas
(and optional whitespace).  In this case, all of the qualifiers must be
matched; a logical AND is used to combine the evaluations.

Let’s look at a bunch of examples:

Requires Expression           Explanation
--------------------------------------------------------------------------------- 
`==1.0'                       Only version `1.0' is compatible
`>1.0, !=1.5.1, <2.0'         Any version after `1.0' and before `2.0' is
                              compatible, except `1.5.1'

Now that we can specify dependencies, we also need to be able to
specify what we provide that other distributions can require.  This is
done using the `provides' keyword argument to `setup()'. The value for
this keyword is a list of strings, each of which names a Python module
or package, and optionally identifies the version.  If the version is
not specified, it is assumed to match that of the distribution.

Some examples:

Provides Expression       Explanation
----------------------------------------------------------------------------- 
`mypkg'                   Provide `mypkg', using the distribution version
`mypkg (1.1)'             Provide `mypkg' version 1.1, regardless of the
                          distribution version

A package can declare that it obsoletes other packages using the
`obsoletes' keyword argument.  The value for this is similar to that of
the `requires' keyword: a list of strings giving module or package
specifiers.  Each specifier consists of a module or package name
optionally followed by one or more version qualifiers.  Version
qualifiers are given in parentheses after the module or package name.

The versions identified by the qualifiers are those that are obsoleted
by the distribution being described.  If no qualifiers are given, all
versions of the named module or package are understood to be obsoleted.


File: python.info,  Node: Installing Scripts,  Next: Installing Package Data,  Prev: Relationships between Distributions and Packages,  Up: Writing the Setup Script

17.2.5 Installing Scripts
-------------------------

So far we have been dealing with pure and non-pure Python modules,
which are usually not run by themselves but imported by scripts.

Scripts are files containing Python source code, intended to be started
from the command line.  Scripts don’t require Distutils to do
anything very complicated.  The only clever feature is that if the
first line of the script starts with `#!' and contains the word
“python”, the Distutils will adjust the first line to refer to the
current interpreter location. By default, it is replaced with the
current interpreter location.  The `--executable' (or `-e') option will
allow the interpreter path to be explicitly overridden.

The `scripts' option simply is a list of files to be handled in this
way.  From the PyXML setup script:

    setup(...,
          scripts=['scripts/xmlproc_parse', 'scripts/xmlproc_val']
          )

Changed in version 2.7: All the scripts will also be added to the
`MANIFEST' file if no template is provided. See *Note Specifying the
files to distribute: 31ba.


File: python.info,  Node: Installing Package Data,  Next: Installing Additional Files,  Prev: Installing Scripts,  Up: Writing the Setup Script

17.2.6 Installing Package Data
------------------------------

Often, additional files need to be installed into a package.  These
files are often data that’s closely related to the package’s
implementation, or text files containing documentation that might be of
interest to programmers using the package.  These files are called
`package data'.

Package data can be added to packages using the `package_data' keyword
argument to the `setup()' function.  The value must be a mapping from
package name to a list of relative path names that should be copied
into the package.  The paths are interpreted as relative to the
directory containing the package (information from the `package_dir'
mapping is used if appropriate); that is, the files are expected to be
part of the package in the source directories. They may contain glob
patterns as well.

The path names may contain directory portions; any necessary
directories will be created in the installation.

For example, if a package should contain a subdirectory with several
data files, the files can be arranged like this in the source tree:

    setup.py
    src/
        mypkg/
            __init__.py
            module.py
            data/
                tables.dat
                spoons.dat
                forks.dat

The corresponding call to `setup()' might be:

    setup(...,
          packages=['mypkg'],
          package_dir={'mypkg': 'src/mypkg'},
          package_data={'mypkg': ['data/*.dat']},
          )

New in version 2.4.

Changed in version 2.7: All the files that match `package_data' will be
added to the `MANIFEST' file if no template is provided. See *Note
Specifying the files to distribute: 31ba.


File: python.info,  Node: Installing Additional Files,  Next: Additional meta-data,  Prev: Installing Package Data,  Up: Writing the Setup Script

17.2.7 Installing Additional Files
----------------------------------

The `data_files' option can be used to specify additional files needed
by the module distribution: configuration files, message catalogs, data
files, anything which doesn’t fit in the previous categories.

`data_files' specifies a sequence of (`directory', `files') pairs in the
following way:

    setup(...,
          data_files=[('bitmaps', ['bm/b1.gif', 'bm/b2.gif']),
                      ('config', ['cfg/data.cfg']),
                      ('/etc/init.d', ['init-script'])]
         )

Note that you can specify the directory names where the data files will
be installed, but you cannot rename the data files themselves.

Each (`directory', `files') pair in the sequence specifies the
installation directory and the files to install there.  If `directory'
is a relative path, it is interpreted relative to the installation
prefix (Python’s `sys.prefix' for pure-Python packages,
`sys.exec_prefix' for packages that contain extension modules).  Each
file name in `files' is interpreted relative to the `setup.py' script
at the top of the package source distribution.  No directory
information from `files' is used to determine the final location of the
installed file; only the name of the file is used.

You can specify the `data_files' options as a simple sequence of files
without specifying a target directory, but this is not recommended, and
the `install' command will print a warning in this case. To install data
files directly in the target directory, an empty string should be given
as the directory.

Changed in version 2.7: All the files that match `data_files' will be
added to the `MANIFEST' file if no template is provided. See *Note
Specifying the files to distribute: 31ba.


File: python.info,  Node: Additional meta-data,  Next: Debugging the setup script,  Prev: Installing Additional Files,  Up: Writing the Setup Script

17.2.8 Additional meta-data
---------------------------

The setup script may include additional meta-data beyond the name and
version.  This information includes:

Meta-Data                  Description                     Value                 Notes
---------------------------------------------------------------------------------------------- 
`name'                     name of the package             short string          (1)
`version'                  version of this release         short string          (1)(2)
`author'                   package author’s name         short string          (3)
`author_email'             email address of the package    email address         (3)
                           author                                                
`maintainer'               package maintainer’s name     short string          (3)
`maintainer_email'         email address of the package    email address         (3)
                           maintainer                                            
`url'                      home page for the package       URL                   (1)
`description'              short, summary description of   short string          
                           the package                                           
`long_description'         longer description of the       long string           (5)
                           package                                               
`download_url'             location where the package may  URL                   (4)
                           be downloaded                                         
`classifiers'              a list of classifiers           list of strings       (4)
`platforms'                a list of platforms             list of strings       
`license'                  license for the package         short string          (6)

Notes:

  1. These fields are required.

  2. It is recommended that versions take the form
     `major.minor[.patch[.sub]]'.

  3. Either the author or the maintainer must be identified. If
     maintainer is provided, distutils lists it as the author in
     `PKG-INFO'.

  4. These fields should not be used if your package is to be
     compatible with Python versions prior to 2.2.3 or 2.3.  The list
     is available from the PyPI website(1).

  5. The `long_description' field is used by PyPI when you are *Note
     registering: 31c0. a package, to *Note build its home page: 31c1.

  6. The `license' field is a text indicating the license covering the
     package where the license is not a selection from the
     “License” Trove classifiers. See the `Classifier' field.
     Notice that there’s a `licence' distribution option which is
     deprecated but still acts as an alias for `license'.

‘short string’
     A single line of text, not more than 200 characters.

‘long string’
     Multiple lines of plain text in reStructuredText format (see
     <http://docutils.sourceforge.net/>).

‘list of strings’
     See below.

None of the string values may be Unicode.

Encoding the version information is an art in itself. Python packages
generally adhere to the version format `major.minor[.patch][sub]'. The
major number is 0 for initial, experimental releases of software. It is
incremented for releases that represent major milestones in a package.
The minor number is incremented when important new features are added
to the package. The patch number increments when bug-fix releases are
made. Additional trailing version information is sometimes used to
indicate sub-releases.  These are “a1,a2,…,aN” (for alpha
releases, where functionality and API may change), “b1,b2,…,bN”
(for beta releases, which only fix bugs) and “pr1,pr2,…,prN” (for
final pre-release release testing). Some examples:

0.1.0
     the first, experimental release of a package

1.0.1a2
     the second alpha release of the first patch version of 1.0

`classifiers' are specified in a Python list:

    setup(...,
          classifiers=[
              'Development Status :: 4 - Beta',
              'Environment :: Console',
              'Environment :: Web Environment',
              'Intended Audience :: End Users/Desktop',
              'Intended Audience :: Developers',
              'Intended Audience :: System Administrators',
              'License :: OSI Approved :: Python Software Foundation License',
              'Operating System :: MacOS :: MacOS X',
              'Operating System :: Microsoft :: Windows',
              'Operating System :: POSIX',
              'Programming Language :: Python',
              'Topic :: Communications :: Email',
              'Topic :: Office/Business',
              'Topic :: Software Development :: Bug Tracking',
              ],
          )

If you wish to include classifiers in your `setup.py' file and also wish
to remain backwards-compatible with Python releases prior to 2.2.3,
then you can include the following code fragment in your `setup.py'
before the `setup()' call.

    # patch distutils if it can't cope with the "classifiers" or
    # "download_url" keywords
    from sys import version
    if version < '2.2.3':
        from distutils.dist import DistributionMetadata
        DistributionMetadata.classifiers = None
        DistributionMetadata.download_url = None

---------- Footnotes ----------

(1) https://pypi.python.org/pypi


File: python.info,  Node: Debugging the setup script,  Prev: Additional meta-data,  Up: Writing the Setup Script

17.2.9 Debugging the setup script
---------------------------------

Sometimes things go wrong, and the setup script doesn’t do what the
developer wants.

Distutils catches any exceptions when running the setup script, and
print a simple error message before the script is terminated.  The
motivation for this behaviour is to not confuse administrators who
don’t know much about Python and are trying to install a package.  If
they get a big long traceback from deep inside the guts of Distutils,
they may think the package or the Python installation is broken because
they don’t read all the way down to the bottom and see that it’s a
permission problem.

On the other hand, this doesn’t help the developer to find the cause
of the failure. For this purpose, the `DISTUTILS_DEBUG' environment
variable can be set to anything except an empty string, and distutils
will now print detailed information about what it is doing, dump the
full traceback when an exception occurs, and print the whole command
line when an external program (like a C compiler) fails.


File: python.info,  Node: Writing the Setup Configuration File,  Next: Creating a Source Distribution,  Prev: Writing the Setup Script,  Up: Distributing Python Modules Legacy version

17.3 Writing the Setup Configuration File
=========================================

Often, it’s not possible to write down everything needed to build a
distribution `a priori': you may need to get some information from the
user, or from the user’s system, in order to proceed.  As long as
that information is fairly simple—a list of directories to search for
C header files or libraries, for example—then providing a
configuration file, `setup.cfg', for users to edit is a cheap and easy
way to solicit it.  Configuration files also let you provide default
values for any command option, which the installer can then override
either on the command-line or by editing the config file.

The setup configuration file is a useful middle-ground between the
setup script —which, ideally, would be opaque to installers (1)—and
the command-line to the setup script, which is outside of your control
and entirely up to the installer.  In fact, `setup.cfg' (and any other
Distutils configuration files present on the target system) are
processed after the contents of the setup script, but before the
command-line.  This has  several useful consequences:

   * installers can override some of what you put in `setup.py' by
     editing `setup.cfg'

   * you can provide non-standard defaults for options that are not
     easily set in `setup.py'

   * installers can override anything in `setup.cfg' using the
     command-line options to `setup.py'

The basic syntax of the configuration file is simple:

    [command]
    option=value
    ...

where `command' is one of the Distutils commands (e.g. `build_py',
`install'), and `option' is one of the options that command supports.
Any number of options can be supplied for each command, and any number
of command sections can be included in the file.  Blank lines are
ignored, as are comments, which run from a `'#'' character until the
end of the line.  Long option values can be split across multiple lines
simply by indenting the continuation lines.

You can find out the list of options supported by a particular command
with the universal `--help' option, e.g.

    > python setup.py --help build_ext
    [...]
    Options for 'build_ext' command:
      --build-lib (-b)     directory for compiled extension modules
      --build-temp (-t)    directory for temporary files (build by-products)
      --inplace (-i)       ignore build-lib and put compiled extensions into the
                           source directory alongside your pure Python modules
      --include-dirs (-I)  list of directories to search for header files
      --define (-D)        C preprocessor macros to define
      --undef (-U)         C preprocessor macros to undefine
      --swig-opts          list of SWIG command line options
    [...]

Note that an option spelled `--foo-bar' on the command-line  is spelled
`foo_bar' in configuration files.

For example, say you want your extensions to be built
“in-place”—that is, you have an extension `pkg.ext', and you want
the compiled extension file (`ext.so' on Unix, say) to be put in the
same source directory as your pure Python modules `pkg.mod1' and
`pkg.mod2'.  You can always use the `--inplace' option on the
command-line to ensure this:

    python setup.py build_ext --inplace

But this requires that you always specify the `build_ext' command
explicitly, and remember to provide `--inplace'. An easier way is to
“set and forget” this option, by encoding it in `setup.cfg', the
configuration file for this distribution:

    [build_ext]
    inplace=1

This will affect all builds of this module distribution, whether or not
you explicitly specify `build_ext'.  If you include `setup.cfg' in your
source distribution, it will also affect end-user builds—which is
probably a bad idea for this option, since always building extensions
in-place would break installation of the module distribution.  In
certain peculiar cases, though, modules are built right in their
installation directory, so this is conceivably a useful ability.
(Distributing extensions that expect to be built in their installation
directory is almost always a bad idea, though.)

Another example: certain commands take a lot of options that don’t
change from run to run; for example, `bdist_rpm' needs to know
everything required to generate a “spec” file for creating an RPM
distribution.  Some of this information comes from the setup script,
and some is automatically generated by the Distutils (such as the list
of files installed).  But some of it has to be supplied as options to
`bdist_rpm', which would be very tedious to do on the command-line for
every run.  Hence, here is a snippet from the Distutils’ own
`setup.cfg':

    [bdist_rpm]
    release = 1
    packager = Greg Ward <gward@python.net>
    doc_files = CHANGES.txt
                README.txt
                USAGE.txt
                doc/
                examples/

Note that the `doc_files' option is simply a whitespace-separated string
split across multiple lines for readability.

See also
........

*Note Syntax of config files: 31c8. in “Installing Python Modules”
     More information on the configuration files is available in the
     manual for system administrators.

---------- Footnotes ----------

(1) This ideal probably won’t be achieved until auto-configuration is
fully supported by the Distutils.


File: python.info,  Node: Creating a Source Distribution,  Next: Creating Built Distributions,  Prev: Writing the Setup Configuration File,  Up: Distributing Python Modules Legacy version

17.4 Creating a Source Distribution
===================================

As shown in section *Note A Simple Example: 31a0, you use the `sdist'
command to create a source distribution.  In the simplest case,

    python setup.py sdist

(assuming you haven’t specified any `sdist' options in the setup
script or config file), `sdist' creates the archive of the default
format for the current platform.  The default format is a gzip’ed tar
file (`.tar.gz') on Unix, and ZIP file on Windows.

You can specify as many formats as you like using the `--formats'
option, for example:

    python setup.py sdist --formats=gztar,zip

to create a gzipped tarball and a zip file.  The available formats are:

Format          Description                   Notes
------------------------------------------------------------ 
`zip'           zip file (`.zip')             (1),(3)
`gztar'         gzip’ed tar file            (2)
                (`.tar.gz')                   
`bztar'         bzip2’ed tar file           
                (`.tar.bz2')                  
`ztar'          compressed tar file           (4)
                (`.tar.Z')                    
`tar'           tar file (`.tar')             

Notes:

  1. default on Windows

  2. default on Unix

  3. requires either external `zip' utility or *Note zipfile: 1ab.
     module (part of the standard Python library since Python 1.6)

  4. requires the `compress' program.

When using any `tar' format (`gztar', `bztar', `ztar' or `tar') under
Unix, you can specify the `owner' and `group' names that will be set
for each member of the archive.

For example, if you want all files of the archive to be owned by root:

    python setup.py sdist --owner=root --group=root

* Menu:

* Specifying the files to distribute::
* Manifest-related options::
* The MANIFEST.in template: The MANIFEST in template.


File: python.info,  Node: Specifying the files to distribute,  Next: Manifest-related options,  Up: Creating a Source Distribution

17.4.1 Specifying the files to distribute
-----------------------------------------

If you don’t supply an explicit list of files (or instructions on how
to generate one), the `sdist' command puts a minimal default set into
the source distribution:

   * all Python source files implied by the `py_modules' and `packages'
     options

   * all C source files mentioned in the `ext_modules' or `libraries'
     options

   * scripts identified by the `scripts' option See *Note Installing
     Scripts: 31b9.

   * anything that looks like a test script: `test/test*.py'
     (currently, the Distutils don’t do anything with test scripts
     except include them in source distributions, but in the future
     there will be a standard for testing Python module distributions)

   * `README.txt' (or `README'), `setup.py' (or whatever  you called
     your setup script), and `setup.cfg'

   * all files that matches the `package_data' metadata.  See *Note
     Installing Package Data: 31bc.

   * all files that matches the `data_files' metadata.  See *Note
     Installing Additional Files: 31be.

Sometimes this is enough, but usually you will want to specify
additional files to distribute.  The typical way to do this is to write
a `manifest template', called `MANIFEST.in' by default.  The manifest
template is just a list of instructions for how to generate your
manifest file, `MANIFEST', which is the exact list of files to include
in your source distribution.  The `sdist' command processes this
template and generates a manifest based on its instructions and what it
finds in the filesystem.

If you prefer to roll your own manifest file, the format is simple: one
filename per line, regular files (or symlinks to them) only.  If you do
supply your own `MANIFEST', you must specify everything: the default
set of files described above does not apply in this case.

Changed in version 2.7: An existing generated `MANIFEST' will be
regenerated without `sdist' comparing its modification time to the one
of `MANIFEST.in' or `setup.py'.

Changed in version 2.7.1: `MANIFEST' files start with a comment
indicating they are generated.  Files without this comment are not
overwritten or removed.

Changed in version 2.7.3: `sdist' will read a `MANIFEST' file if no
`MANIFEST.in' exists, like it did before 2.7.

See *Note The MANIFEST.in template: 31cd. section for a syntax
reference.


File: python.info,  Node: Manifest-related options,  Next: The MANIFEST in template,  Prev: Specifying the files to distribute,  Up: Creating a Source Distribution

17.4.2 Manifest-related options
-------------------------------

The normal course of operations for the `sdist' command is as follows:

   * if the manifest file (`MANIFEST' by default) exists and the first
     line does not have a comment indicating it is generated from
     `MANIFEST.in', then it is used as is, unaltered

   * if the manifest file doesn’t exist or has been previously
     automatically generated, read `MANIFEST.in' and create the manifest

   * if neither `MANIFEST' nor `MANIFEST.in' exist, create a manifest
     with just the default file set

   * use the list of files now in `MANIFEST' (either just generated or
     read in) to create the source distribution archive(s)

There are a couple of options that modify this behaviour.  First, use
the `--no-defaults' and `--no-prune' to disable the standard
“include” and “exclude” sets.

Second, you might just want to (re)generate the manifest, but not
create a source distribution:

    python setup.py sdist --manifest-only

`-o' is a shortcut for `--manifest-only'.


File: python.info,  Node: The MANIFEST in template,  Prev: Manifest-related options,  Up: Creating a Source Distribution

17.4.3 The MANIFEST.in template
-------------------------------

A `MANIFEST.in' file can be added in a project to define the list of
files to include in the distribution built by the `sdist' command.

When `sdist' is run, it will look for the `MANIFEST.in' file and
interpret it to generate the `MANIFEST' file that contains the list of
files that will be included in the package.

This mechanism can be used when the default list of files is not enough.
(See *Note Specifying the files to distribute: 31ba.).

* Menu:

* Principle::
* Commands::


File: python.info,  Node: Principle,  Next: Commands,  Up: The MANIFEST in template

17.4.3.1 Principle
..................

The manifest template has one command per line, where each command
specifies a set of files to include or exclude from the source
distribution.  For an example, let’s look at the Distutils’ own
manifest template:

    include *.txt
    recursive-include examples *.txt *.py
    prune examples/sample?/build

The meanings should be fairly clear: include all files in the
distribution root matching `*.txt', all files anywhere under the
`examples' directory matching `*.txt' or `*.py', and exclude all
directories matching `examples/sample?/build'.  All of this is done
`after' the standard include set, so you can exclude files from the
standard set with explicit instructions in the manifest template.  (Or,
you can use the `--no-defaults' option to disable the standard set
entirely.)

The order of commands in the manifest template matters: initially, we
have the list of default files as described above, and each command in
the template adds to or removes from that list of files.  Once we have
fully processed the manifest template, we remove files that should not
be included in the source distribution:

   * all files in the Distutils “build” tree (default `build/')

   * all files in directories named `RCS', `CVS', `.svn', `.hg',
     `.git', `.bzr' or `_darcs'

Now we have our complete list of files, which is written to the
manifest for future reference, and then used to build the source
distribution archive(s).

You can disable the default set of included files with the
`--no-defaults' option, and you can disable the standard exclude set
with `--no-prune'.

Following the Distutils’ own manifest template, let’s trace how the
`sdist' command builds the list of files to include in the Distutils
source distribution:

  1. include all Python source files in the `distutils' and
     `distutils/command' subdirectories (because packages corresponding
     to those two directories were mentioned in the `packages' option
     in the setup script—see section *Note Writing the Setup Script:
     31a2.)

  2. include `README.txt', `setup.py', and `setup.cfg' (standard files)

  3. include `test/test*.py' (standard files)

  4. include `*.txt' in the distribution root (this will find
     `README.txt' a second time, but such redundancies are weeded out
     later)

  5. include anything matching `*.txt' or `*.py' in the sub-tree under
     `examples',

  6. exclude all files in the sub-trees starting at directories matching
     `examples/sample?/build'—this may exclude files included by the
     previous two steps, so it’s important that the `prune' command
     in the manifest template comes after the `recursive-include'
     command

  7. exclude the entire `build' tree, and any `RCS', `CVS', `.svn',
     `.hg', `.git', `.bzr' and `_darcs' directories

Just like in the setup script, file and directory names in the manifest
template should always be slash-separated; the Distutils will take care
of converting them to the standard representation on your platform.
That way, the manifest template is portable across operating systems.


File: python.info,  Node: Commands,  Prev: Principle,  Up: The MANIFEST in template

17.4.3.2 Commands
.................

The manifest template commands are:

Command                                         Description
---------------------------------------------------------------------------------------------------- 
`include pat1 pat2 ...'                         include all files matching any of the listed
                                                patterns
`exclude pat1 pat2 ...'                         exclude all files matching any of the listed
                                                patterns
`recursive-include dir pat1 pat2 ...'           include all files under `dir' matching any of the
                                                listed patterns
`recursive-exclude dir pat1 pat2 ...'           exclude all files under `dir' matching any of the
                                                listed patterns
`global-include pat1 pat2 ...'                  include all files anywhere in the source tree
                                                matching — & any of the listed patterns
`global-exclude pat1 pat2 ...'                  exclude all files anywhere in the source tree
                                                matching — & any of the listed patterns
`prune dir'                                     exclude all files under `dir'
`graft dir'                                     include all files under `dir'

The patterns here are Unix-style “glob” patterns: `*' matches any
sequence of regular filename characters, `?' matches any single regular
filename character, and `[range]' matches any of the characters in
`range' (e.g., `a-z', `a-zA-Z', `a-f0-9_.').  The definition of
“regular filename character” is platform-specific: on Unix it is
anything except slash; on Windows anything except backslash or colon.


File: python.info,  Node: Creating Built Distributions,  Next: The Python Package Index PyPI,  Prev: Creating a Source Distribution,  Up: Distributing Python Modules Legacy version

17.5 Creating Built Distributions
=================================

A “built distribution” is what you’re probably used to thinking
of either as a “binary package” or an “installer” (depending on
your background).  It’s not necessarily binary, though, because it
might contain only Python source code and/or byte-code; and we don’t
call it a package, because that word is already spoken for in Python.
(And “installer” is a term specific to the world of mainstream
desktop systems.)

A built distribution is how you make life as easy as possible for
installers of your module distribution: for users of RPM-based Linux
systems, it’s a binary RPM; for Windows users, it’s an executable
installer; for Debian-based Linux users, it’s a Debian package; and
so forth.  Obviously, no one person will be able to create built
distributions for every platform under the sun, so the Distutils are
designed to enable module developers to concentrate on their
specialty—writing code and creating source distributions—while an
intermediary species called `packagers' springs up to turn source
distributions into built distributions for as many platforms as there
are packagers.

Of course, the module developer could be his own packager; or the
packager could be a volunteer “out there” somewhere who has access
to a platform which the original developer does not; or it could be
software periodically grabbing new source distributions and turning
them into built distributions for as many platforms as the software has
access to.  Regardless of who they are, a packager uses the setup
script and the `bdist' command family to generate built distributions.

As a simple example, if I run the following command in the Distutils
source tree:

    python setup.py bdist

then the Distutils builds my module distribution (the Distutils itself
in this case), does a “fake” installation (also in the `build'
directory), and creates the default type of built distribution for my
platform.  The default format for built distributions is a “dumb”
tar file on Unix, and a simple executable installer on Windows.  (That
tar file is considered “dumb” because it has to be unpacked in a
specific location to work.)

Thus, the above command on a Unix system creates
`Distutils-1.0.`plat'.tar.gz'; unpacking this tarball from the right
place installs the Distutils just as though you had downloaded the
source distribution and run `python setup.py install'.  (The “right
place” is either the root of the filesystem or  Python’s ``prefix''
directory, depending on the options given to the `bdist_dumb' command;
the default is to make dumb distributions relative to ``prefix''.)

Obviously, for pure Python distributions, this isn’t any simpler than
just running `python setup.py install'—but for non-pure
distributions, which include extensions that would need to be compiled,
it can mean the difference between someone being able to use your
extensions or not.  And creating “smart” built distributions, such
as an RPM package or an executable installer for Windows, is far more
convenient for users even if your distribution doesn’t include any
extensions.

The `bdist' command has a `--formats' option, similar to the `sdist'
command, which you can use to select the types of built distribution to
generate: for example,

    python setup.py bdist --format=zip

would, when run on a Unix system, create
`Distutils-1.0.`plat'.zip'—again, this archive would be unpacked from
the root directory to install the Distutils.

The available formats for built distributions are:

Format            Description                        Notes
------------------------------------------------------------------- 
`gztar'           gzipped tar file (`.tar.gz')       (1),(3)
`ztar'            compressed tar file (`.tar.Z')     (3)
`tar'             tar file (`.tar')                  (3)
`zip'             zip file (`.zip')                  (2),(4)
`rpm'             RPM                                (5)
`pkgtool'         Solaris `pkgtool'                  
`sdux'            HP-UX `swinstall'                  
`wininst'         self-extracting ZIP file for       (4)
                  Windows                            
`msi'             Microsoft Installer.               

Notes:

  1. default on Unix

  2. default on Windows

  3. requires external utilities: `tar' and possibly one of `gzip',
     `bzip2', or `compress'

  4. requires either external `zip' utility or *Note zipfile: 1ab.
     module (part of the standard Python library since Python 1.6)

  5. requires external `rpm' utility, version 3.0.4 or better (use `rpm
     --version' to find out which version you have)

You don’t have to use the `bdist' command with the `--formats'
option; you can also use the command that directly implements the
format you’re interested in.  Some of these `bdist'
“sub-commands” actually generate several similar formats; for
instance, the `bdist_dumb' command generates all the “dumb” archive
formats (`tar', `ztar', `gztar', and `zip'), and `bdist_rpm' generates
both binary and source RPMs.  The `bdist' sub-commands, and the formats
generated by each, are:

Command                        Formats
----------------------------------------------------------- 
`bdist_dumb'                   tar, ztar, gztar, zip
`bdist_rpm'                    rpm, srpm
`bdist_wininst'                wininst
`bdist_msi'                    msi

The following sections give details on the individual `bdist_*'
commands.

* Menu:

* Creating dumb built distributions::
* Creating RPM packages::
* Creating Windows Installers::
* Cross-compiling on Windows::
* Vista User Access Control (UAC): Vista User Access Control UAC.


File: python.info,  Node: Creating dumb built distributions,  Next: Creating RPM packages,  Up: Creating Built Distributions

17.5.1 Creating dumb built distributions
----------------------------------------


File: python.info,  Node: Creating RPM packages,  Next: Creating Windows Installers,  Prev: Creating dumb built distributions,  Up: Creating Built Distributions

17.5.2 Creating RPM packages
----------------------------

The RPM format is used by many popular Linux distributions, including
Red Hat, SuSE, and Mandrake.  If one of these (or any of the other
RPM-based Linux distributions) is your usual environment, creating RPM
packages for other users of that same distribution is trivial.
Depending on the complexity of your module distribution and differences
between Linux distributions, you may also be able to create RPMs that
work on different RPM-based distributions.

The usual way to create an RPM of your module distribution is to run the
`bdist_rpm' command:

    python setup.py bdist_rpm

or the `bdist' command with the `--format' option:

    python setup.py bdist --formats=rpm

The former allows you to specify RPM-specific options; the latter
allows  you to easily specify multiple formats in one run.  If you need
to do both, you can explicitly specify multiple `bdist_*' commands and
their options:

    python setup.py bdist_rpm --packager="John Doe <jdoe@example.org>" \
                    bdist_wininst --target-version="2.0"

Creating RPM packages is driven by a `.spec' file, much as using the
Distutils is driven by the setup script.  To make your life easier, the
`bdist_rpm' command normally creates a `.spec' file based on the
information you supply in the setup script, on the command line, and in
any Distutils configuration files.  Various options and sections in the
`.spec' file are derived from options in the setup script as follows:

RPM `.spec' file option or section             Distutils setup script option
-------------------------------------------------------------------------------------------------- 
Name                                           `name'
Summary (in preamble)                          `description'
Version                                        `version'
Vendor                                         `author' and `author_email', or  — &
                                               `maintainer' and `maintainer_email'
Copyright                                      `license'
Url                                            `url'
%description (section)                         `long_description'

Additionally, there are many options in `.spec' files that don’t have
corresponding options in the setup script.  Most of these are handled
through options to the `bdist_rpm' command as follows:

RPM `.spec' file option or section  `bdist_rpm' option                default value
---------------------------------------------------------------------------------------------------- 
Release                             `release'                         “1”
Group                               `group'                           “Development/Libraries”
Vendor                              `vendor'                          (see above)
Packager                            `packager'                        (none)
Provides                            `provides'                        (none)
Requires                            `requires'                        (none)
Conflicts                           `conflicts'                       (none)
Obsoletes                           `obsoletes'                       (none)
Distribution                        `distribution_name'               (none)
BuildRequires                       `build_requires'                  (none)
Icon                                `icon'                            (none)

Obviously, supplying even a few of these options on the command-line
would be tedious and error-prone, so it’s usually best to put them in
the setup configuration file, `setup.cfg'—see section *Note Writing
the Setup Configuration File: 31c6.  If you distribute or package many
Python module distributions, you might want to put options that apply
to all of them in your personal Distutils configuration file
(`~/.pydistutils.cfg').  If you want to temporarily disable this file,
you can pass the –no-user-cfg option to setup.py.

There are three steps to building a binary RPM package, all of which are
handled automatically by the Distutils:

  1. create a `.spec' file, which describes the package (analogous  to
     the Distutils setup script; in fact, much of the information in
     the  setup script winds up in the `.spec' file)

  2. create the source RPM

  3. create the “binary” RPM (which may or may not contain binary
     code, depending on whether your module distribution contains
     Python extensions)

Normally, RPM bundles the last two steps together; when you use the
Distutils, all three steps are typically bundled together.

If you wish, you can separate these three steps.  You can use the
`--spec-only' option to make `bdist_rpm' just create the `.spec' file
and exit; in this case, the `.spec' file will be written to the
“distribution directory”—normally `dist/', but customizable with
the `--dist-dir' option.  (Normally, the `.spec' file winds up deep in
the “build tree,” in a temporary directory created by `bdist_rpm'.)


File: python.info,  Node: Creating Windows Installers,  Next: Cross-compiling on Windows,  Prev: Creating RPM packages,  Up: Creating Built Distributions

17.5.3 Creating Windows Installers
----------------------------------

Executable installers are the natural format for binary distributions on
Windows.  They display a nice graphical user interface, display some
information about the module distribution to be installed taken from
the metadata in the setup script, let the user select a few options,
and start or cancel the installation.

Since the metadata is taken from the setup script, creating Windows
installers is usually as easy as running:

    python setup.py bdist_wininst

or the `bdist' command with the `--formats' option:

    python setup.py bdist --formats=wininst

If you have a pure module distribution (only containing pure Python
modules and packages), the resulting installer will be version
independent and have a name like `foo-1.0.win32.exe'.  These installers
can even be created on Unix platforms or Mac OS X.

If you have a non-pure distribution, the extensions can only be created
on a Windows platform, and will be Python version dependent. The
installer filename will reflect this and now has the form
`foo-1.0.win32-py2.0.exe'.  You have to create a separate installer for
every Python version you want to support.

The installer will try to compile pure modules into *Note bytecode:
59e. after installation on the target system in normal and optimizing
mode.  If you don’t want this to happen for some reason, you can run
the `bdist_wininst' command with the `--no-target-compile' and/or the
`--no-target-optimize' option.

By default the installer will display the cool “Python Powered”
logo when it is run, but you can also supply your own 152x261 bitmap
which must be a Windows `.bmp' file with the `--bitmap' option.

The installer will also display a large title on the desktop background
window when it is run, which is constructed from the name of your
distribution and the version number.  This can be changed to another
text by using the `--title' option.

The installer file will be written to the “distribution directory”
— normally `dist/', but customizable with the `--dist-dir' option.


File: python.info,  Node: Cross-compiling on Windows,  Next: Vista User Access Control UAC,  Prev: Creating Windows Installers,  Up: Creating Built Distributions

17.5.4 Cross-compiling on Windows
---------------------------------

Starting with Python 2.6, distutils is capable of cross-compiling
between Windows platforms.  In practice, this means that with the
correct tools installed, you can use a 32bit version of Windows to
create 64bit extensions and vice-versa.

To build for an alternate platform, specify the `--plat-name' option to
the build command.  Valid values are currently ‘win32’,
‘win-amd64’ and ‘win-ia64’.  For example, on a 32bit version of
Windows, you could execute:

    python setup.py build --plat-name=win-amd64

to build a 64bit version of your extension.  The Windows Installers also
support this option, so the command:

    python setup.py build --plat-name=win-amd64 bdist_wininst

would create a 64bit installation executable on your 32bit version of
Windows.

To cross-compile, you must download the Python source code and
cross-compile Python itself for the platform you are targeting - it is
not possible from a binary installation of Python (as the .lib etc file
for other platforms are not included.)  In practice, this means the
user of a 32 bit operating system will need to use Visual Studio 2008
to open the `PCBuild/PCbuild.sln' solution in the Python source tree
and build the “x64” configuration of the ‘pythoncore’ project
before cross-compiling extensions is possible.

Note that by default, Visual Studio 2008 does not install 64bit
compilers or tools.  You may need to reexecute the Visual Studio setup
process and select these tools (using Control Panel->[Add/Remove]
Programs is a convenient way to check or modify your existing install.)

* Menu:

* The Postinstallation script::


File: python.info,  Node: The Postinstallation script,  Up: Cross-compiling on Windows

17.5.4.1 The Postinstallation script
....................................

Starting with Python 2.3, a postinstallation script can be specified
with the `--install-script' option.  The basename of the script must be
specified, and the script filename must also be listed in the scripts
argument to the setup function.

This script will be run at installation time on the target system after
all the files have been copied, with `argv[1]' set to `-install', and
again at uninstallation time before the files are removed with
`argv[1]' set to `-remove'.

The installation script runs embedded in the windows installer, every
output (`sys.stdout', `sys.stderr') is redirected into a buffer and
will be displayed in the GUI after the script has finished.

Some functions especially useful in this context are available as
additional built-in functions in the installation script.

 -- Function: directory_created (path)
 -- Function: file_created (path)
     These functions should be called when a directory or file is
     created by the postinstall script at installation time.  It will
     register `path' with the uninstaller, so that it will be removed
     when the distribution is uninstalled.  To be safe, directories are
     only removed if they are empty.

 -- Function: get_special_folder_path (csidl_string)
     This function can be used to retrieve special folder locations on
     Windows like the Start Menu or the Desktop.  It returns the full
     path to the folder.  `csidl_string' must be one of the following
     strings:

         "CSIDL_APPDATA"

         "CSIDL_COMMON_STARTMENU"
         "CSIDL_STARTMENU"

         "CSIDL_COMMON_DESKTOPDIRECTORY"
         "CSIDL_DESKTOPDIRECTORY"

         "CSIDL_COMMON_STARTUP"
         "CSIDL_STARTUP"

         "CSIDL_COMMON_PROGRAMS"
         "CSIDL_PROGRAMS"

         "CSIDL_FONTS"

     If the folder cannot be retrieved, *Note OSError: 231. is raised.

     Which folders are available depends on the exact Windows version,
     and probably also the configuration.  For details refer to
     Microsoft’s documentation of the `SHGetSpecialFolderPath()'
     function.

 -- Function: create_shortcut (target, description, filename[,
          arguments[, workdir[, iconpath[, iconindex]]]])
     This function creates a shortcut. `target' is the path to the
     program to be started by the shortcut. `description' is the
     description of the shortcut.  `filename' is the title of the
     shortcut that the user will see. `arguments' specifies the command
     line arguments, if any. `workdir' is the working directory for the
     program. `iconpath' is the file containing the icon for the
     shortcut, and `iconindex' is the index of the icon in the file
     `iconpath'.  Again, for details consult the Microsoft
     documentation for the `IShellLink' interface.


File: python.info,  Node: Vista User Access Control UAC,  Prev: Cross-compiling on Windows,  Up: Creating Built Distributions

17.5.5 Vista User Access Control (UAC)
--------------------------------------

Starting with Python 2.6, bdist_wininst supports a
`--user-access-control' option.  The default is ‘none’ (meaning no
UAC handling is done), and other valid values are ‘auto’ (meaning
prompt for UAC elevation if Python was installed for all users) and
‘force’ (meaning always prompt for elevation).


File: python.info,  Node: The Python Package Index PyPI,  Next: Examples<24>,  Prev: Creating Built Distributions,  Up: Distributing Python Modules Legacy version

17.6 The Python Package Index (PyPI)
====================================

The Python Package Index (PyPI)(1) stores *Note meta-data: 31a9.
describing distributions packaged with distutils, as well as package
data like distribution files if a package author wishes.

Distutils provides the `register' and `upload' commands for pushing
meta-data and distribution files to PyPI, respectively.  See *Note
Distutils commands: 31e8. for information on these commands.

* Menu:

* PyPI overview::
* Distutils commands::
* PyPI package display::

---------- Footnotes ----------

(1) https://pypi.python.org/pypi


File: python.info,  Node: PyPI overview,  Next: Distutils commands,  Up: The Python Package Index PyPI

17.6.1 PyPI overview
--------------------

PyPI lets you submit any number of versions of your distribution to the
index.  If you alter the meta-data for a particular version, you can
submit it again and the index will be updated.

PyPI holds a record for each (name, version) combination submitted.
The first user to submit information for a given name is designated the
Owner of that name.  Changes can be submitted through the `register'
command or through the web interface.  Owners can designate other users
as Owners or Maintainers.  Maintainers can edit the package
information, but not designate new Owners or Maintainers.

By default PyPI displays only the newest version of a given package.
The web interface lets one change this default behavior and manually
select which versions to display and hide.

For each version, PyPI displays a home page.  The home page is created
from the `long_description' which can be submitted via the `register'
command.  See *Note PyPI package display: 31c1. for more information.


File: python.info,  Node: Distutils commands,  Next: PyPI package display,  Prev: PyPI overview,  Up: The Python Package Index PyPI

17.6.2 Distutils commands
-------------------------

Distutils exposes two commands for submitting package data to PyPI: the
*Note register: 31c0. command for submitting meta-data to PyPI and the
*Note upload: 31eb. command for submitting distribution files.  Both
commands read configuration data from a special file called a *Note
.pypirc file: 31ec.

* Menu:

* The register command::
* The upload command::
* Additional command options::
* The .pypirc file: The pypirc file.

