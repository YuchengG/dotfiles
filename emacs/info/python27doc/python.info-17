This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: Layouts,  Up: Ttk Styling

5.24.2.36 Layouts
.................

A layout can be just `None', if it takes no options, or a dict of
options specifying how to arrange the element. The layout mechanism
uses a simplified version of the pack geometry manager: given an
initial cavity, each element is allocated a parcel. Valid
options/values are:

        *
         side: whichside
               Specifies which side of the cavity to place the element;
               one of top, right, bottom or left. If omitted, the
               element occupies the entire cavity.

        *
         sticky: nswe
               Specifies where the element is placed inside its
               allocated parcel.

        *
         unit: 0 or 1
               If set to 1, causes the element and all of its
               descendants to be treated as a single element for the
               purposes of *Note Widget.identify(): 214c. et al. It’s
               used for things like scrollbar thumbs with grips.

        *
         children: [sublayout… ]
               Specifies a list of elements to place inside the
               element. Each element is a tuple (or other sequence
               type) where the first item is the layout name, and the
               other is a *Note Layout: 219d.


File: python.info,  Node: Tix — Extension widgets for Tk,  Next: ScrolledText — Scrolled Text Widget,  Prev: ttk — Tk themed widgets,  Up: Graphical User Interfaces with Tk

5.24.3 `Tix' — Extension widgets for Tk
-----------------------------------------

The *Note Tix: 17c. (Tk Interface Extension) module provides an
additional rich set of widgets. Although the standard Tk library has
many useful widgets, they are far from complete. The *Note Tix: 17c.
library provides most of the commonly needed widgets that are missing
from standard Tk: *Note HList: 21a9, *Note ComboBox: 21aa, *Note
Control: 21ab. (a.k.a. SpinBox) and an assortment of scrollable widgets.
*Note Tix: 17c. also includes many more widgets that are generally
useful in a wide range of applications: *Note NoteBook: 21ac, *Note
FileEntry: 21ad, *Note PanedWindow: 21ae, etc; there are more than 40
of them.

With all these new widgets, you can introduce new interaction
techniques into applications, creating more useful and more intuitive
user interfaces. You can design your application by choosing the most
appropriate widgets to match the special needs of your application and
users.

     Note: *Note Tix: 17c. has been renamed to `tkinter.tix' in Python
     3.  The *Note 2to3: c05. tool will automatically adapt imports
     when converting your sources to Python 3.

See also
........

Tix Homepage(1)
     The home page for *Note Tix: 17c.  This includes links to
     additional documentation and downloads.

Tix Man Pages(2)
     On-line version of the man pages and reference material.

Tix Programming Guide(3)
     On-line version of the programmer’s reference material.

Tix Development Applications(4)
     Tix applications for development of Tix and Tkinter programs. Tide
     applications work under Tk or Tkinter, and include `TixInspect',
     an inspector to remotely modify and debug Tix/Tk/Tkinter
     applications.

* Menu:

* Using Tix::
* Tix Widgets::
* Tix Commands::

---------- Footnotes ----------

(1) http://tix.sourceforge.net/

(2) http://tix.sourceforge.net/dist/current/man/

(3) http://tix.sourceforge.net/dist/current/docs/tix-book/tix.book.html

(4) http://tix.sourceforge.net/Tixapps/src/Tide.html


File: python.info,  Node: Using Tix,  Next: Tix Widgets,  Up: Tix — Extension widgets for Tk

5.24.3.1 Using Tix
..................

 -- Class: Tix.Tix (screenName[, baseName[, className]])
     Toplevel widget of Tix which represents mostly the main window of
     an application. It has an associated Tcl interpreter.

     Classes in the *Note Tix: 17c. module subclasses the classes in
     the *Note Tkinter: 17d.  module. The former imports the latter, so
     to use *Note Tix: 17c. with Tkinter, all you need to do is to
     import one module. In general, you can just import *Note Tix: 17c,
     and replace the toplevel call to *Note Tkinter.Tk: 211d. with
     `Tix.Tk':

         import Tix
         from Tkconstants import *
         root = Tix.Tk()

To use *Note Tix: 17c, you must have the *Note Tix: 17c. widgets
installed, usually alongside your installation of the Tk widgets. To
test your installation, try the following:

    import Tix
    root = Tix.Tk()
    root.tk.eval('package require Tix')

If this fails, you have a Tk installation problem which must be
resolved before proceeding. Use the environment variable `TIX_LIBRARY'
to point to the installed *Note Tix: 17c. library directory, and make
sure you have the dynamic object library (`tix8183.dll' or
`libtix8183.so') in  the same directory that contains your Tk dynamic
object library (`tk8183.dll' or `libtk8183.so'). The directory with the
dynamic object library should also have a file called `pkgIndex.tcl'
(case sensitive), which contains the line:

    package ifneeded Tix 8.1 [list load "[file join $dir tix8183.dll]" Tix]


File: python.info,  Node: Tix Widgets,  Next: Tix Commands,  Prev: Using Tix,  Up: Tix — Extension widgets for Tk

5.24.3.2 Tix Widgets
....................

Tix(1) introduces over 40 widget classes to the *Note Tkinter: 17d.
repertoire.  There is a demo of all the *Note Tix: 17c. widgets in the
`Demo/tix' directory of the standard distribution.

* Menu:

* Basic Widgets::
* File Selectors::
* Hierarchical ListBox::
* Tabular ListBox::
* Manager Widgets::
* Image Types::
* Miscellaneous Widgets::
* Form Geometry Manager::

---------- Footnotes ----------

(1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/TixIntro.htm


File: python.info,  Node: Basic Widgets,  Next: File Selectors,  Up: Tix Widgets

5.24.3.3 Basic Widgets
......................

 -- Class: Tix.Balloon
     A Balloon(1) that pops up over a widget to provide help.  When the
     user moves the cursor inside a widget to which a Balloon widget
     has been bound, a small pop-up window with a descriptive message
     will be shown on the screen.

 -- Class: Tix.ButtonBox
     The ButtonBox(2) widget creates a box of buttons, such as is
     commonly used for `Ok Cancel'.

 -- Class: Tix.ComboBox
     The ComboBox(3) widget is similar to the combo box control in MS
     Windows. The user can select a choice by either typing in the
     entry subwidget or selecting from the listbox subwidget.

 -- Class: Tix.Control
     The Control(4) widget is also known as the `SpinBox' widget. The
     user can adjust the value by pressing the two arrow buttons or by
     entering the value directly into the entry. The new value will be
     checked against the user-defined upper and lower limits.

 -- Class: Tix.LabelEntry
     The LabelEntry(5) widget packages an entry widget and a label into
     one mega widget. It can be used to simplify the creation of
     “entry-form” type of interface.

 -- Class: Tix.LabelFrame
     The LabelFrame(6) widget packages a frame widget and a label into
     one mega widget.  To create widgets inside a LabelFrame widget,
     one creates the new widgets relative to the `frame' subwidget and
     manage them inside the `frame' subwidget.

 -- Class: Tix.Meter
     The Meter(7) widget can be used to show the progress of a
     background job which may take a long time to execute.

 -- Class: Tix.OptionMenu
     The OptionMenu(8) creates a menu button of options.

 -- Class: Tix.PopupMenu
     The PopupMenu(9) widget can be used as a replacement of the
     `tk_popup' command. The advantage of the *Note Tix: 17c. *Note
     PopupMenu: 21b9. widget is it requires less application code to
     manipulate.

 -- Class: Tix.Select
     The Select(10) widget is a container of button subwidgets. It can
     be used to provide radio-box or check-box style of selection
     options for the user.

 -- Class: Tix.StdButtonBox
     The StdButtonBox(11) widget is a group of standard buttons for
     Motif-like dialog boxes.

---------- Footnotes ----------

(1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixBalloon.htm

(2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixButtonBox.htm

(3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixComboBox.htm

(4)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixControl.htm

(5)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelEntry.htm

(6)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixLabelFrame.htm

(7) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixMeter.htm

(8)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixOptionMenu.htm

(9)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPopupMenu.htm

(10)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixSelect.htm

(11)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixStdButtonBox.htm


File: python.info,  Node: File Selectors,  Next: Hierarchical ListBox,  Prev: Basic Widgets,  Up: Tix Widgets

5.24.3.4 File Selectors
.......................

 -- Class: Tix.DirList
     The DirList(1) widget displays a list view of a directory, its
     previous directories and its sub-directories. The user can choose
     one of the directories displayed in the list or change to another
     directory.

 -- Class: Tix.DirTree
     The DirTree(2) widget displays a tree view of a directory, its
     previous directories and its sub-directories. The user can choose
     one of the directories displayed in the list or change to another
     directory.

 -- Class: Tix.DirSelectDialog
     The DirSelectDialog(3) widget presents the directories in the file
     system in a dialog window.  The user can use this dialog window to
     navigate through the file system to select the desired directory.

 -- Class: Tix.DirSelectBox
     The *Note DirSelectBox: 21c0. is similar to the standard Motif(TM)
     directory-selection box. It is generally used for the user to
     choose a directory.  DirSelectBox stores the directories mostly
     recently selected into a ComboBox widget so that they can be
     quickly selected again.

 -- Class: Tix.ExFileSelectBox
     The ExFileSelectBox(4) widget is usually embedded in a
     tixExFileSelectDialog widget. It provides a convenient method for
     the user to select files. The style of the *Note ExFileSelectBox:
     21c1. widget is very similar to the standard file dialog on MS
     Windows 3.1.

 -- Class: Tix.FileSelectBox
     The FileSelectBox(5) is similar to the standard Motif(TM)
     file-selection box. It is generally used for the user to choose a
     file. FileSelectBox stores the files mostly recently selected into
     a *Note ComboBox: 21aa. widget so that they can be quickly selected
     again.

 -- Class: Tix.FileEntry
     The FileEntry(6) widget can be used to input a filename. The user
     can type in the filename manually. Alternatively, the user can
     press the button widget that sits next to the entry, which will
     bring up a file selection dialog.

---------- Footnotes ----------

(1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirList.htm

(2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirTree.htm

(3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixDirSelectDialog.htm

(4)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixExFileSelectBox.htm

(5)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileSelectBox.htm

(6)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixFileEntry.htm


File: python.info,  Node: Hierarchical ListBox,  Next: Tabular ListBox,  Prev: File Selectors,  Up: Tix Widgets

5.24.3.5 Hierarchical ListBox
.............................

 -- Class: Tix.HList
     The HList(1) widget can be used to display any data that have a
     hierarchical structure, for example, file system directory trees.
     The list entries are indented and connected by branch lines
     according to their places in the hierarchy.

 -- Class: Tix.CheckList
     The CheckList(2) widget displays a list of items to be selected by
     the user. CheckList acts similarly to the Tk checkbutton or
     radiobutton widgets, except it is capable of handling many more
     items than checkbuttons or radiobuttons.

 -- Class: Tix.Tree
     The Tree(3) widget can be used to display hierarchical data in a
     tree form. The user can adjust the view of the tree by opening or
     closing parts of the tree.

---------- Footnotes ----------

(1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixHList.htm

(2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixCheckList.htm

(3) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTree.htm


File: python.info,  Node: Tabular ListBox,  Next: Manager Widgets,  Prev: Hierarchical ListBox,  Up: Tix Widgets

5.24.3.6 Tabular ListBox
........................

 -- Class: Tix.TList
     The TList(1) widget can be used to display data in a tabular
     format. The list entries of a *Note TList: 21c7. widget are
     similar to the entries in the Tk listbox widget.  The main
     differences are (1) the *Note TList: 21c7. widget can display the
     list entries in a two dimensional format and (2) you can use
     graphical images as well as multiple colors and fonts for the list
     entries.

---------- Footnotes ----------

(1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixTList.htm


File: python.info,  Node: Manager Widgets,  Next: Image Types,  Prev: Tabular ListBox,  Up: Tix Widgets

5.24.3.7 Manager Widgets
........................

 -- Class: Tix.PanedWindow
     The PanedWindow(1) widget allows the user to interactively
     manipulate the sizes of several panes.  The panes can be arranged
     either vertically or horizontally.  The user changes the sizes of
     the panes by dragging the resize handle between two panes.

 -- Class: Tix.ListNoteBook
     The ListNoteBook(2) widget is very similar to the `TixNoteBook'
     widget: it can be used to display many windows in a limited space
     using a notebook metaphor. The notebook is divided into a stack of
     pages (windows). At one time only one of these pages can be shown.
     The user can navigate through these pages by choosing the name of
     the desired page in the `hlist' subwidget.

 -- Class: Tix.NoteBook
     The NoteBook(3) widget can be used to display many windows in a
     limited space using a notebook metaphor. The notebook is divided
     into a stack of pages. At one time only one of these pages can be
     shown. The user can navigate through these pages by choosing the
     visual “tabs” at the top of the NoteBook widget.

---------- Footnotes ----------

(1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixPanedWindow.htm

(2)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixListNoteBook.htm

(3)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixNoteBook.htm


File: python.info,  Node: Image Types,  Next: Miscellaneous Widgets,  Prev: Manager Widgets,  Up: Tix Widgets

5.24.3.8 Image Types
....................

The *Note Tix: 17c. module adds:

   * pixmap(1) capabilities to all *Note Tix: 17c. and *Note Tkinter:
     17d. widgets to create color images from XPM files.

   * Compound(2) image types can be used to create images that consists
     of multiple horizontal lines; each line is composed of a series of
     items (texts, bitmaps, images or spaces) arranged from left to
     right. For example, a compound image can be used to display a
     bitmap and a text string simultaneously in a Tk `Button' widget.


---------- Footnotes ----------

(1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/pixmap.htm

(2) http://tix.sourceforge.net/dist/current/man/html/TixCmd/compound.htm


File: python.info,  Node: Miscellaneous Widgets,  Next: Form Geometry Manager,  Prev: Image Types,  Up: Tix Widgets

5.24.3.9 Miscellaneous Widgets
..............................

 -- Class: Tix.InputOnly
     The InputOnly(1) widgets are to accept inputs from the user, which
     can be done with the `bind' command (Unix only).

---------- Footnotes ----------

(1)
http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixInputOnly.htm


File: python.info,  Node: Form Geometry Manager,  Prev: Miscellaneous Widgets,  Up: Tix Widgets

5.24.3.10 Form Geometry Manager
...............................

In addition, *Note Tix: 17c. augments *Note Tkinter: 17d. by providing:

 -- Class: Tix.Form
     The Form(1) geometry manager based on attachment rules for all Tk
     widgets.

---------- Footnotes ----------

(1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tixForm.htm


File: python.info,  Node: Tix Commands,  Prev: Tix Widgets,  Up: Tix — Extension widgets for Tk

5.24.3.11 Tix Commands
......................

 -- Class: Tix.tixCommand
     The tix commands(1) provide access to miscellaneous elements of
     *Note Tix: 17c.’s internal state and the *Note Tix: 17c.
     application context.  Most of the information manipulated by these
     methods pertains to the application as a whole, or to a screen or
     display, rather than to a particular window.

     To view the current settings, the common usage is:

         import Tix
         root = Tix.Tk()
         print root.tix_configure()

 -- Method: tixCommand.tix_configure (cnf=None **kw)
     Query or modify the configuration options of the Tix application
     context. If no option is specified, returns a dictionary all of
     the available options.  If option is specified with no value, then
     the method returns a list describing the one named option (this
     list will be identical to the corresponding sublist of the value
     returned if no option is specified).  If one or more option-value
     pairs are specified, then the method modifies the given option(s)
     to have the given value(s); in this case the method returns an
     empty string. Option may be any of the configuration options.

 -- Method: tixCommand.tix_cget (option)
     Returns the current value of the configuration option given by
     `option'. Option may be any of the configuration options.

 -- Method: tixCommand.tix_getbitmap (name)
     Locates a bitmap file of the name `name.xpm' or `name' in one of
     the bitmap directories (see the *Note tix_addbitmapdir(): 21d4.
     method).  By using *Note tix_getbitmap(): 21d3, you can avoid hard
     coding the pathnames of the bitmap files in your application. When
     successful, it returns the complete pathname of the bitmap file,
     prefixed with the character `@'.  The returned value can be used
     to configure the `bitmap' option of the Tk and Tix widgets.

 -- Method: tixCommand.tix_addbitmapdir (directory)
     Tix maintains a list of directories under which the *Note
     tix_getimage(): 21d5. and *Note tix_getbitmap(): 21d3. methods
     will search for image files.  The standard bitmap directory is
     `$TIX_LIBRARY/bitmaps'. The *Note tix_addbitmapdir(): 21d4. method
     adds `directory' into this list. By using this method, the image
     files of an applications can also be located using the *Note
     tix_getimage(): 21d5. or *Note tix_getbitmap(): 21d3. method.

 -- Method: tixCommand.tix_filedialog ([dlgclass])
     Returns the file selection dialog that may be shared among
     different calls from this application.  This method will create a
     file selection dialog widget when it is called the first time.
     This dialog will be returned by all subsequent calls to *Note
     tix_filedialog(): 21d6.  An optional dlgclass parameter can be
     passed as a string to specified what type of file selection dialog
     widget is desired.  Possible options are `tix', `FileSelectDialog'
     or `tixExFileSelectDialog'.

 -- Method: tixCommand.tix_getimage (self, name)
     Locates an image file of the name `name.xpm', `name.xbm' or
     `name.ppm' in one of the bitmap directories (see the *Note
     tix_addbitmapdir(): 21d4. method above). If more than one file
     with the same name (but different extensions) exist, then the
     image type is chosen according to the depth of the X display: xbm
     images are chosen on monochrome displays and color images are
     chosen on color displays. By using *Note tix_getimage(): 21d5, you
     can avoid hard coding the pathnames of the image files in your
     application. When successful, this method returns the name of the
     newly created image, which can be used to configure the `image'
     option of the Tk and Tix widgets.

 -- Method: tixCommand.tix_option_get (name)
     Gets the options maintained by the Tix scheme mechanism.

 -- Method: tixCommand.tix_resetoptions (newScheme, newFontSet[,
          newScmPrio])
     Resets the scheme and fontset of the Tix application to
     `newScheme' and `newFontSet', respectively.  This affects only
     those widgets created after this call.  Therefore, it is best to
     call the resetoptions method before the creation of any widgets in
     a Tix application.

     The optional parameter `newScmPrio' can be given to reset the
     priority level of the Tk options set by the Tix schemes.

     Because of the way Tk handles the X option database, after Tix has
     been has imported and inited, it is not possible to reset the
     color schemes and font sets using the `tix_config()' method.
     Instead, the *Note tix_resetoptions(): 21d8.  method must be used.

---------- Footnotes ----------

(1) http://tix.sourceforge.net/dist/current/man/html/TixCmd/tix.htm


File: python.info,  Node: ScrolledText — Scrolled Text Widget,  Next: turtle — Turtle graphics for Tk,  Prev: Tix — Extension widgets for Tk,  Up: Graphical User Interfaces with Tk

5.24.4 `ScrolledText' — Scrolled Text Widget
----------------------------------------------

The *Note ScrolledText: 14d. module provides a class of the same name
which implements a basic text widget which has a vertical scroll bar
configured to do the “right thing.”  Using the `ScrolledText' class
is a lot easier than setting up a text widget and scroll bar directly.
The constructor is the same as that of the `Tkinter.Text' class.

     Note: *Note ScrolledText: 14d. has been renamed to
     `tkinter.scrolledtext' in Python 3.  The *Note 2to3: c05. tool
     will automatically adapt imports when converting your sources to
     Python 3.

The text widget and scrollbar are packed together in a `Frame', and the
methods of the `Grid' and `Pack' geometry managers are acquired from
the `Frame' object.  This allows the `ScrolledText' widget to be used
directly to achieve most normal geometry management behavior.

Should more specific control be necessary, the following attributes are
available:

 -- Attribute: ScrolledText.frame
     The frame which surrounds the text and scroll bar widgets.

 -- Attribute: ScrolledText.vbar
     The scroll bar widget.


File: python.info,  Node: turtle — Turtle graphics for Tk,  Next: IDLE,  Prev: ScrolledText — Scrolled Text Widget,  Up: Graphical User Interfaces with Tk

5.24.5 `turtle' — Turtle graphics for Tk
------------------------------------------

* Menu:

* Introduction: Introduction<9>.
* Overview over available Turtle and Screen methods::
* Methods of RawTurtle/Turtle and corresponding functions::
* Methods of TurtleScreen/Screen and corresponding functions::
* The public classes of the module turtle::
* Help and configuration::
* Demo scripts::


File: python.info,  Node: Introduction<9>,  Next: Overview over available Turtle and Screen methods,  Up: turtle — Turtle graphics for Tk

5.24.5.1 Introduction
.....................

Turtle graphics is a popular way for introducing programming to kids.
It was part of the original Logo programming language developed by
Wally Feurzig and Seymour Papert in 1966.

Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an
`import turtle', give it the command `turtle.forward(15)', and it moves
(on-screen!) 15 pixels in the direction it is facing, drawing a line as
it moves.  Give it the command `turtle.right(25)', and it rotates
in-place 25 degrees clockwise.

By combining together these and similar commands, intricate shapes and
pictures can easily be drawn.

The *Note turtle: 184. module is an extended reimplementation of the
same-named module from the Python standard distribution up to version
Python 2.5.

It tries to keep the merits of the old turtle module and to be (nearly)
100% compatible with it.  This means in the first place to enable the
learning programmer to use all the commands, classes and methods
interactively when using the module from within IDLE run with the `-n'
switch.

The turtle module provides turtle graphics primitives, in both
object-oriented and procedure-oriented ways.  Because it uses *Note
Tkinter: 17d. for the underlying graphics, it needs a version of Python
installed with Tk support.

The object-oriented interface uses essentially two+two classes:

  1. The *Note TurtleScreen: 21e0. class defines graphics windows as a
     playground for the drawing turtles.  Its constructor needs a
     `Tkinter.Canvas' or a *Note ScrolledCanvas: 21e1. as argument.  It
     should be used when *Note turtle: 184. is used as part of some
     application.

     The function *Note Screen(): 21e2. returns a singleton object of a
     *Note TurtleScreen: 21e0. subclass. This function should be used
     when *Note turtle: 184. is used as a standalone tool for doing
     graphics.  As a singleton object, inheriting from its class is not
     possible.

     All methods of TurtleScreen/Screen also exist as functions, i.e.
     as part of the procedure-oriented interface.

  2. *Note RawTurtle: 21e3. (alias: *Note RawPen: 21e4.) defines Turtle
     objects which draw on a *Note TurtleScreen: 21e0.  Its constructor
     needs a Canvas, ScrolledCanvas or TurtleScreen as argument, so the
     RawTurtle objects know where to draw.

     Derived from RawTurtle is the subclass *Note Turtle: 21e5. (alias:
     `Pen'), which draws on “the” *Note Screen: 21e2. - instance
     which is automatically created, if not already present.

     All methods of RawTurtle/Turtle also exist as functions, i.e. part
     of the procedure-oriented interface.

The procedural interface provides functions which are derived from the
methods of the classes *Note Screen: 21e2. and *Note Turtle: 21e5.
They have the same names as the corresponding methods.  A screen object
is automatically created whenever a function derived from a Screen
method is called.  An (unnamed) turtle object is automatically created
whenever any of the functions derived from a Turtle method is called.

To use multiple turtles an a screen one has to use the object-oriented
interface.

     Note: In the following documentation the argument list for
     functions is given.  Methods, of course, have the additional first
     argument `self' which is omitted here.


File: python.info,  Node: Overview over available Turtle and Screen methods,  Next: Methods of RawTurtle/Turtle and corresponding functions,  Prev: Introduction<9>,  Up: turtle — Turtle graphics for Tk

5.24.5.2 Overview over available Turtle and Screen methods
..........................................................

* Menu:

* Turtle methods::
* Methods of TurtleScreen/Screen::


File: python.info,  Node: Turtle methods,  Next: Methods of TurtleScreen/Screen,  Up: Overview over available Turtle and Screen methods

5.24.5.3 Turtle methods
.......................

Turtle motion

    Move and draw
              *Note forward(): 21e8. | *Note fd(): 21e9. 
              *Note backward(): 21ea. | *Note bk(): 21eb. | *Note back(): 21ec. 
              *Note right(): 21ed. | *Note rt(): 21ee. 
              *Note left(): 21ef. | *Note lt(): 21f0. 
              *Note goto(): 21f1. | *Note setpos(): 21f2. | *Note setposition(): 21f3. 
              *Note setx(): 21f4. 
              *Note sety(): 21f5. 
              *Note setheading(): 21f6. | *Note seth(): 21f7. 
              *Note home(): 21f8. 
              *Note circle(): 21f9. 
              *Note dot(): 21fa. 
              *Note stamp(): 21fb. 
              *Note clearstamp(): 21fc. 
              *Note clearstamps(): 21fd. 
              *Note undo(): 21fe. 
              *Note speed(): 21ff. 

    Tell Turtle’s state
              *Note position(): 2200. | *Note pos(): 2201. 
              *Note towards(): 2202. 
              *Note xcor(): 2203. 
              *Note ycor(): 2204. 
              *Note heading(): 2205. 
              *Note distance(): 2206. 

    Setting and measurement
              *Note degrees(): 2207. 
              *Note radians(): 2208. 


Pen control

    Drawing state
              *Note pendown(): 2209. | *Note pd(): 220a. | *Note down(): 220b. 
              *Note penup(): 220c. | *Note pu(): 220d. | *Note up(): 220e. 
              *Note pensize(): 220f. | *Note width(): 2210. 
              *Note pen(): 2211. 
              *Note isdown(): 2212. 

    Color control
              *Note color(): 2213. 
              *Note pencolor(): 2214. 
              *Note fillcolor(): 2215. 

    Filling
              *Note fill(): 2216. 
              *Note begin_fill(): 2217. 
              *Note end_fill(): 2218. 

    More drawing control
              *Note reset(): 2219. 
              *Note clear(): 221a. 
              *Note write(): 221b. 


Turtle state

    Visibility
              *Note showturtle(): 221c. | *Note st(): 221d. 
              *Note hideturtle(): 221e. | *Note ht(): 221f. 
              *Note isvisible(): 2220. 

    Appearance
              *Note shape(): 2221. 
              *Note resizemode(): 2222. 
              *Note shapesize(): 2223. | *Note turtlesize(): 2224. 
              *Note settiltangle(): 2225. 
              *Note tiltangle(): 2226. 
              *Note tilt(): 2227. 


Using events
         *Note onclick(): 2228. 
         *Note onrelease(): 2229. 
         *Note ondrag(): 222a. 
         *Note mainloop(): 222b. | *Note done(): 222c. 

Special Turtle methods
         *Note begin_poly(): 222d. 
         *Note end_poly(): 222e. 
         *Note get_poly(): 222f. 
         *Note clone(): 2230. 
         *Note getturtle(): 2231. | *Note getpen(): 2232. 
         *Note getscreen(): 2233. 
         *Note setundobuffer(): 2234. 
         *Note undobufferentries(): 2235. 
         *Note tracer(): 2236. 
         *Note window_width(): 2237. 
         *Note window_height(): 2238. 



File: python.info,  Node: Methods of TurtleScreen/Screen,  Prev: Turtle methods,  Up: Overview over available Turtle and Screen methods

5.24.5.4 Methods of TurtleScreen/Screen
.......................................

Window control
         *Note bgcolor(): 223a. 
         *Note bgpic(): 223b. 
         *Note clear(): 221a. | *Note clearscreen(): 223c. 
         *Note reset(): 2219. | *Note resetscreen(): 223d. 
         *Note screensize(): 223e. 
         *Note setworldcoordinates(): 223f. 

Animation control
         *Note delay(): 2240. 
         *Note tracer(): 2236. 
         *Note update(): 2241. 

Using screen events
         *Note listen(): 2242. 
         *Note onkey(): 2243. 
         *Note onclick(): 2228. | *Note onscreenclick(): 2244. 
         *Note ontimer(): 2245. 

Settings and special methods
         *Note mode(): 2246. 
         *Note colormode(): 2247. 
         *Note getcanvas(): 2248. 
         *Note getshapes(): 2249. 
         *Note register_shape(): 224a. | *Note addshape(): 224b. 
         *Note turtles(): 224c. 
         *Note window_height(): 2238. 
         *Note window_width(): 2237. 

Methods specific to Screen
         *Note bye(): 224d. 
         *Note exitonclick(): 224e. 
         *Note setup(): 224f. 
         *Note title(): 2250. 



File: python.info,  Node: Methods of RawTurtle/Turtle and corresponding functions,  Next: Methods of TurtleScreen/Screen and corresponding functions,  Prev: Overview over available Turtle and Screen methods,  Up: turtle — Turtle graphics for Tk

5.24.5.5 Methods of RawTurtle/Turtle and corresponding functions
................................................................

Most of the examples in this section refer to a Turtle instance called
`turtle'.

* Menu:

* Turtle motion::
* Tell Turtle’s state::
* Settings for measurement::
* Pen control::
* Turtle state::
* Using events::
* Special Turtle methods::
* Excursus about the use of compound shapes::


File: python.info,  Node: Turtle motion,  Next: Tell Turtle’s state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.6 Turtle motion
......................

 -- Function: turtle.forward (distance)
 -- Function: turtle.fd (distance)
     Parameters: `distance' – a number (integer or float)

     Move the turtle forward by the specified `distance', in the
     direction the turtle is headed.

         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.forward(25)
         >>> turtle.position()
         (25.00,0.00)
         >>> turtle.forward(-75)
         >>> turtle.position()
         (-50.00,0.00)

 -- Function: turtle.back (distance)
 -- Function: turtle.bk (distance)
 -- Function: turtle.backward (distance)
     Parameters: `distance' – a number

     Move the turtle backward by `distance', opposite to the direction
     the turtle is headed.  Do not change the turtle’s heading.

         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.backward(30)
         >>> turtle.position()
         (-30.00,0.00)

 -- Function: turtle.right (angle)
 -- Function: turtle.rt (angle)
     Parameters: `angle' – a number (integer or float)

     Turn turtle right by `angle' units.  (Units are by default
     degrees, but can be set via the *Note degrees(): 2207. and *Note
     radians(): 2208. functions.)  Angle orientation depends on the
     turtle mode, see *Note mode(): 2246.

         >>> turtle.heading()
         22.0
         >>> turtle.right(45)
         >>> turtle.heading()
         337.0

 -- Function: turtle.left (angle)
 -- Function: turtle.lt (angle)
     Parameters: `angle' – a number (integer or float)

     Turn turtle left by `angle' units.  (Units are by default degrees,
     but can be set via the *Note degrees(): 2207. and *Note radians():
     2208. functions.)  Angle orientation depends on the turtle mode,
     see *Note mode(): 2246.

         >>> turtle.heading()
         22.0
         >>> turtle.left(45)
         >>> turtle.heading()
         67.0

 -- Function: turtle.goto (x, y=None)
 -- Function: turtle.setpos (x, y=None)
 -- Function: turtle.setposition (x, y=None)
     Parameters:

        * `x' – a number or a pair/vector of numbers

        * `y' – a number or `None'

     If `y' is `None', `x' must be a pair of coordinates or a *Note
     Vec2D: 2253.  (e.g. as returned by *Note pos(): 2201.).

     Move turtle to an absolute position.  If the pen is down, draw
     line.  Do not change the turtle’s orientation.

         >>> tp = turtle.pos()
         >>> tp
         (0.00,0.00)
         >>> turtle.setpos(60,30)
         >>> turtle.pos()
         (60.00,30.00)
         >>> turtle.setpos((20,80))
         >>> turtle.pos()
         (20.00,80.00)
         >>> turtle.setpos(tp)
         >>> turtle.pos()
         (0.00,0.00)

 -- Function: turtle.setx (x)
     Parameters: `x' – a number (integer or float)

     Set the turtle’s first coordinate to `x', leave second coordinate
     unchanged.

         >>> turtle.position()
         (0.00,240.00)
         >>> turtle.setx(10)
         >>> turtle.position()
         (10.00,240.00)

 -- Function: turtle.sety (y)
     Parameters: `y' – a number (integer or float)

     Set the turtle’s second coordinate to `y', leave first
     coordinate unchanged.

         >>> turtle.position()
         (0.00,40.00)
         >>> turtle.sety(-10)
         >>> turtle.position()
         (0.00,-10.00)

 -- Function: turtle.setheading (to_angle)
 -- Function: turtle.seth (to_angle)
     Parameters: `to_angle' – a number (integer or float)

     Set the orientation of the turtle to `to_angle'.  Here are some
     common directions in degrees:

     standard mode           logo mode
     ------------------------------------------------- 
     0 - east                0 - north
     90 - north              90 - east
     180 - west              180 - south
     270 - south             270 - west

         >>> turtle.setheading(90)
         >>> turtle.heading()
         90.0

 -- Function: turtle.home ()
     Move turtle to the origin – coordinates (0,0) – and set its
     heading to its start-orientation (which depends on the mode, see
     *Note mode(): 2246.).

         >>> turtle.heading()
         90.0
         >>> turtle.position()
         (0.00,-10.00)
         >>> turtle.home()
         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.heading()
         0.0

 -- Function: turtle.circle (radius, extent=None, steps=None)
     Parameters:

        * `radius' – a number

        * `extent' – a number (or `None')

        * `steps' – an integer (or `None')

     Draw a circle with given `radius'.  The center is `radius' units
     left of the turtle; `extent' – an angle – determines which
     part of the circle is drawn.  If `extent' is not given, draw the
     entire circle.  If `extent' is not a full circle, one endpoint of
     the arc is the current pen position.  Draw the arc in
     counterclockwise direction if `radius' is positive, otherwise in
     clockwise direction.  Finally the direction of the turtle is
     changed by the amount of `extent'.

     As the circle is approximated by an inscribed regular polygon,
     `steps' determines the number of steps to use.  If not given, it
     will be calculated automatically.  May be used to draw regular
     polygons.

         >>> turtle.home()
         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.heading()
         0.0
         >>> turtle.circle(50)
         >>> turtle.position()
         (-0.00,0.00)
         >>> turtle.heading()
         0.0
         >>> turtle.circle(120, 180)  # draw a semicircle
         >>> turtle.position()
         (0.00,240.00)
         >>> turtle.heading()
         180.0

 -- Function: turtle.dot (size=None, *color)
     Parameters:

        * `size' – an integer >= 1 (if given)

        * `color' – a colorstring or a numeric color tuple

     Draw a circular dot with diameter `size', using `color'.  If
     `size' is not given, the maximum of pensize+4 and 2*pensize is
     used.

         >>> turtle.home()
         >>> turtle.dot()
         >>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)
         >>> turtle.position()
         (100.00,-0.00)
         >>> turtle.heading()
         0.0

 -- Function: turtle.stamp ()
     Stamp a copy of the turtle shape onto the canvas at the current
     turtle position.  Return a stamp_id for that stamp, which can be
     used to delete it by calling `clearstamp(stamp_id)'.

         >>> turtle.color("blue")
         >>> turtle.stamp()
         11
         >>> turtle.fd(50)

 -- Function: turtle.clearstamp (stampid)
     Parameters: `stampid' – an integer, must be return value of
     previous *Note stamp(): 21fb. call

     Delete stamp with given `stampid'.

         >>> turtle.position()
         (150.00,-0.00)
         >>> turtle.color("blue")
         >>> astamp = turtle.stamp()
         >>> turtle.fd(50)
         >>> turtle.position()
         (200.00,-0.00)
         >>> turtle.clearstamp(astamp)
         >>> turtle.position()
         (200.00,-0.00)

 -- Function: turtle.clearstamps (n=None)
     Parameters: `n' – an integer (or `None')

     Delete all or first/last `n' of turtle’s stamps.  If `n' is
     `None', delete all stamps, if `n' > 0 delete first `n' stamps,
     else if `n' < 0 delete last `n' stamps.

         >>> for i in range(8):
         ...     turtle.stamp(); turtle.fd(30)
         13
         14
         15
         16
         17
         18
         19
         20
         >>> turtle.clearstamps(2)
         >>> turtle.clearstamps(-2)
         >>> turtle.clearstamps()

 -- Function: turtle.undo ()
     Undo (repeatedly) the last turtle action(s).  Number of available
     undo actions is determined by the size of the undobuffer.

         >>> for i in range(4):
         ...     turtle.fd(50); turtle.lt(80)
         ...
         >>> for i in range(8):
         ...     turtle.undo()

 -- Function: turtle.speed (speed=None)
     Parameters: `speed' – an integer in the range 0..10 or a
     speedstring (see below)

     Set the turtle’s speed to an integer value in the range 0..10.
     If no argument is given, return current speed.

     If input is a number greater than 10 or smaller than 0.5, speed is
     set to 0.  Speedstrings are mapped to speedvalues as follows:

        * “fastest”:  0

        * “fast”:  10

        * “normal”:  6

        * “slow”:  3

        * “slowest”:  1

     Speeds from 1 to 10 enforce increasingly faster animation of line
     drawing and turtle turning.

     Attention: `speed' = 0 means that `no' animation takes place.
     forward/back makes turtle jump and likewise left/right make the
     turtle turn instantly.

         >>> turtle.speed()
         3
         >>> turtle.speed('normal')
         >>> turtle.speed()
         6
         >>> turtle.speed(9)
         >>> turtle.speed()
         9


File: python.info,  Node: Tell Turtle’s state,  Next: Settings for measurement,  Prev: Turtle motion,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.7 Tell Turtle’s state
..............................

 -- Function: turtle.position ()
 -- Function: turtle.pos ()
     Return the turtle’s current location (x,y) (as a *Note Vec2D:
     2253. vector).

         >>> turtle.pos()
         (440.00,-0.00)

 -- Function: turtle.towards (x, y=None)
     Parameters:

        * `x' – a number or a pair/vector of numbers or a turtle
          instance

        * `y' – a number if `x' is a number, else `None'

     Return the angle between the line from turtle position to position
     specified by (x,y), the vector or the other turtle.  This depends
     on the turtle’s start orientation which depends on the mode -
     “standard”/”world” or “logo”).

         >>> turtle.goto(10, 10)
         >>> turtle.towards(0,0)
         225.0

 -- Function: turtle.xcor ()
     Return the turtle’s x coordinate.

         >>> turtle.home()
         >>> turtle.left(50)
         >>> turtle.forward(100)
         >>> turtle.pos()
         (64.28,76.60)
         >>> print turtle.xcor()
         64.2787609687

 -- Function: turtle.ycor ()
     Return the turtle’s y coordinate.

         >>> turtle.home()
         >>> turtle.left(60)
         >>> turtle.forward(100)
         >>> print turtle.pos()
         (50.00,86.60)
         >>> print turtle.ycor()
         86.6025403784

 -- Function: turtle.heading ()
     Return the turtle’s current heading (value depends on the turtle
     mode, see *Note mode(): 2246.).

         >>> turtle.home()
         >>> turtle.left(67)
         >>> turtle.heading()
         67.0

 -- Function: turtle.distance (x, y=None)
     Parameters:

        * `x' – a number or a pair/vector of numbers or a turtle
          instance

        * `y' – a number if `x' is a number, else `None'

     Return the distance from the turtle to (x,y), the given vector, or
     the given other turtle, in turtle step units.

         >>> turtle.home()
         >>> turtle.distance(30,40)
         50.0
         >>> turtle.distance((30,40))
         50.0
         >>> joe = Turtle()
         >>> joe.forward(77)
         >>> turtle.distance(joe)
         77.0


File: python.info,  Node: Settings for measurement,  Next: Pen control,  Prev: Tell Turtle’s state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.8 Settings for measurement
.................................

 -- Function: turtle.degrees (fullcircle=360.0)
     Parameters: `fullcircle' – a number

     Set angle measurement units, i.e. set number of “degrees” for
     a full circle.  Default value is 360 degrees.

         >>> turtle.home()
         >>> turtle.left(90)
         >>> turtle.heading()
         90.0

         Change angle measurement unit to grad (also known as gon,
         grade, or gradian and equals 1/100-th of the right angle.)
         >>> turtle.degrees(400.0)
         >>> turtle.heading()
         100.0
         >>> turtle.degrees(360)
         >>> turtle.heading()
         90.0

 -- Function: turtle.radians ()
     Set the angle measurement units to radians.  Equivalent to
     `degrees(2*math.pi)'.

         >>> turtle.home()
         >>> turtle.left(90)
         >>> turtle.heading()
         90.0
         >>> turtle.radians()
         >>> turtle.heading()
         1.5707963267948966



File: python.info,  Node: Pen control,  Next: Turtle state,  Prev: Settings for measurement,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.9 Pen control
....................

* Menu:

* Drawing state::
* Color control::
* Filling::
* More drawing control::


File: python.info,  Node: Drawing state,  Next: Color control,  Up: Pen control

5.24.5.10 Drawing state
.......................

 -- Function: turtle.pendown ()
 -- Function: turtle.pd ()
 -- Function: turtle.down ()
     Pull the pen down – drawing when moving.

 -- Function: turtle.penup ()
 -- Function: turtle.pu ()
 -- Function: turtle.up ()
     Pull the pen up – no drawing when moving.

 -- Function: turtle.pensize (width=None)
 -- Function: turtle.width (width=None)
     Parameters: `width' – a positive number

     Set the line thickness to `width' or return it.  If resizemode is
     set to “auto” and turtleshape is a polygon, that polygon is
     drawn with the same line thickness.  If no argument is given, the
     current pensize is returned.

         >>> turtle.pensize()
         1
         >>> turtle.pensize(10)   # from here on lines of width 10 are drawn

 -- Function: turtle.pen (pen=None, **pendict)
     Parameters:

        * `pen' – a dictionary with some or all of the below listed
          keys

        * `pendict' – one or more keyword-arguments with the below
          listed keys as keywords

     Return or set the pen’s attributes in a “pen-dictionary”
     with the following key/value pairs:

        * “shown”: True/False

        * “pendown”: True/False

        * “pencolor”: color-string or color-tuple

        * “fillcolor”: color-string or color-tuple

        * “pensize”: positive number

        * “speed”: number in range 0..10

        * “resizemode”: “auto” or “user” or “noresize”

        * “stretchfactor”: (positive number, positive number)

        * “outline”: positive number

        * “tilt”: number

     This dictionary can be used as argument for a subsequent call to
     *Note pen(): 2211.  to restore the former pen-state.  Moreover one
     or more of these attributes can be provided as keyword-arguments.
     This can be used to set several pen attributes in one statement.

         >>> turtle.pen(fillcolor="black", pencolor="red", pensize=10)
         >>> sorted(turtle.pen().items())
         [('fillcolor', 'black'), ('outline', 1), ('pencolor', 'red'),
          ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
          ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]
         >>> penstate=turtle.pen()
         >>> turtle.color("yellow", "")
         >>> turtle.penup()
         >>> sorted(turtle.pen().items())
         [('fillcolor', ''), ('outline', 1), ('pencolor', 'yellow'),
          ('pendown', False), ('pensize', 10), ('resizemode', 'noresize'),
          ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]
         >>> turtle.pen(penstate, fillcolor="green")
         >>> sorted(turtle.pen().items())
         [('fillcolor', 'green'), ('outline', 1), ('pencolor', 'red'),
          ('pendown', True), ('pensize', 10), ('resizemode', 'noresize'),
          ('shown', True), ('speed', 9), ('stretchfactor', (1, 1)), ('tilt', 0)]

 -- Function: turtle.isdown ()
     Return `True' if pen is down, `False' if it’s up.

         >>> turtle.penup()
         >>> turtle.isdown()
         False
         >>> turtle.pendown()
         >>> turtle.isdown()
         True


File: python.info,  Node: Color control,  Next: Filling,  Prev: Drawing state,  Up: Pen control

5.24.5.11 Color control
.......................

 -- Function: turtle.pencolor (*args)
     Return or set the pencolor.

     Four input formats are allowed:

    `pencolor()'
          Return the current pencolor as color specification string or
          as a tuple (see example).  May be used as input to another
          color/pencolor/fillcolor call.

    `pencolor(colorstring)'
          Set pencolor to `colorstring', which is a Tk color
          specification string, such as `"red"', `"yellow"', or
          `"#33cc8c"'.

    `pencolor((r, g, b))'
          Set pencolor to the RGB color represented by the tuple of
          `r', `g', and `b'.  Each of `r', `g', and `b' must be in the
          range 0..colormode, where colormode is either 1.0 or 255 (see
          *Note colormode(): 2247.).

    `pencolor(r, g, b)'
               Set pencolor to the RGB color represented by `r', `g',
               and `b'.  Each of `r', `g', and `b' must be in the range
               0..colormode.

          If turtleshape is a polygon, the outline of that polygon is
          drawn with the newly set pencolor.

         >>> colormode()
         1.0
         >>> turtle.pencolor()
         'red'
         >>> turtle.pencolor("brown")
         >>> turtle.pencolor()
         'brown'
         >>> tup = (0.2, 0.8, 0.55)
         >>> turtle.pencolor(tup)
         >>> turtle.pencolor()
         (0.2, 0.8, 0.5490196078431373)
         >>> colormode(255)
         >>> turtle.pencolor()
         (51, 204, 140)
         >>> turtle.pencolor('#32c18f')
         >>> turtle.pencolor()
         (50, 193, 143)

 -- Function: turtle.fillcolor (*args)
     Return or set the fillcolor.

     Four input formats are allowed:

    `fillcolor()'
          Return the current fillcolor as color specification string,
          possibly in tuple format (see example).  May be used as input
          to another color/pencolor/fillcolor call.

    `fillcolor(colorstring)'
          Set fillcolor to `colorstring', which is a Tk color
          specification string, such as `"red"', `"yellow"', or
          `"#33cc8c"'.

    `fillcolor((r, g, b))'
          Set fillcolor to the RGB color represented by the tuple of
          `r', `g', and `b'.  Each of `r', `g', and `b' must be in the
          range 0..colormode, where colormode is either 1.0 or 255 (see
          *Note colormode(): 2247.).

    `fillcolor(r, g, b)'
               Set fillcolor to the RGB color represented by `r', `g',
               and `b'.  Each of `r', `g', and `b' must be in the range
               0..colormode.

          If turtleshape is a polygon, the interior of that polygon is
          drawn with the newly set fillcolor.

         >>> turtle.fillcolor("violet")
         >>> turtle.fillcolor()
         'violet'
         >>> col = turtle.pencolor()
         >>> col
         (50, 193, 143)
         >>> turtle.fillcolor(col)
         >>> turtle.fillcolor()
         (50, 193, 143)
         >>> turtle.fillcolor('#ffffff')
         >>> turtle.fillcolor()
         (255, 255, 255)

 -- Function: turtle.color (*args)
     Return or set pencolor and fillcolor.

     Several input formats are allowed.  They use 0 to 3 arguments as
     follows:

    `color()'
          Return the current pencolor and the current fillcolor as a
          pair of color specification strings or tuples as returned by
          *Note pencolor(): 2214. and *Note fillcolor(): 2215.

    `color(colorstring)', `color((r,g,b))', `color(r,g,b)'
          Inputs as in *Note pencolor(): 2214, set both, fillcolor and
          pencolor, to the given value.

    `color(colorstring1, colorstring2)', `color((r1,g1,b1), (r2,g2,b2))'
               Equivalent to `pencolor(colorstring1)' and
               `fillcolor(colorstring2)' and analogously if the other
               input format is used.

          If turtleshape is a polygon, outline and interior of that
          polygon is drawn with the newly set colors.

         >>> turtle.color("red", "green")
         >>> turtle.color()
         ('red', 'green')
         >>> color("#285078", "#a0c8f0")
         >>> color()
         ((40, 80, 120), (160, 200, 240))

See also: Screen method *Note colormode(): 2247.


File: python.info,  Node: Filling,  Next: More drawing control,  Prev: Color control,  Up: Pen control

5.24.5.12 Filling
.................

 -- Function: turtle.fill (flag)
     Parameters: `flag' – True/False (or 1/0 respectively)

     Call `fill(True)' before drawing the shape you want to fill, and
     `fill(False)' when done.  When used without argument: return
     fillstate (`True' if filling, `False' else).

         >>> turtle.fill(True)
         >>> for _ in range(3):
         ...    turtle.forward(100)
         ...    turtle.left(120)
         ...
         >>> turtle.fill(False)

 -- Function: turtle.begin_fill ()
     Call just before drawing a shape to be filled.  Equivalent to
     `fill(True)'.

 -- Function: turtle.end_fill ()
     Fill the shape drawn after the last call to *Note begin_fill():
     2217.  Equivalent to `fill(False)'.

         >>> turtle.color("black", "red")
         >>> turtle.begin_fill()
         >>> turtle.circle(80)
         >>> turtle.end_fill()


File: python.info,  Node: More drawing control,  Prev: Filling,  Up: Pen control

5.24.5.13 More drawing control
..............................

 -- Function: turtle.reset ()
     Delete the turtle’s drawings from the screen, re-center the
     turtle and set variables to the default values.

         >>> turtle.goto(0,-22)
         >>> turtle.left(100)
         >>> turtle.position()
         (0.00,-22.00)
         >>> turtle.heading()
         100.0
         >>> turtle.reset()
         >>> turtle.position()
         (0.00,0.00)
         >>> turtle.heading()
         0.0

 -- Function: turtle.clear ()
     Delete the turtle’s drawings from the screen.  Do not move
     turtle.  State and position of the turtle as well as drawings of
     other turtles are not affected.

 -- Function: turtle.write (arg, move=False, align="left",
          font=("Arial", 8, "normal"))
     Parameters:

        * `arg' – object to be written to the TurtleScreen

        * `move' – True/False

        * `align' – one of the strings “left”, “center” or
          right”

        * `font' – a triple (fontname, fontsize, fonttype)

     Write text - the string representation of `arg' - at the current
     turtle position according to `align' (“left”, “center” or
     right”) and with the given font.  If `move' is true, the pen is
     moved to the bottom-right corner of the text.  By default, `move'
     is `False'.

         >>> turtle.write("Home = ", True, align="center")
         >>> turtle.write((0,0), True)


File: python.info,  Node: Turtle state,  Next: Using events,  Prev: Pen control,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.14 Turtle state
......................

* Menu:

* Visibility::
* Appearance::


File: python.info,  Node: Visibility,  Next: Appearance,  Up: Turtle state

5.24.5.15 Visibility
....................

 -- Function: turtle.hideturtle ()
 -- Function: turtle.ht ()
     Make the turtle invisible.  It’s a good idea to do this while
     you’re in the middle of doing some complex drawing, because
     hiding the turtle speeds up the drawing observably.

         >>> turtle.hideturtle()

 -- Function: turtle.showturtle ()
 -- Function: turtle.st ()
     Make the turtle visible.

         >>> turtle.showturtle()

 -- Function: turtle.isvisible ()
     Return `True' if the Turtle is shown, `False' if it’s hidden.

         >>> turtle.hideturtle()
         >>> turtle.isvisible()
         False
         >>> turtle.showturtle()
         >>> turtle.isvisible()
         True


File: python.info,  Node: Appearance,  Prev: Visibility,  Up: Turtle state

5.24.5.16 Appearance
....................

 -- Function: turtle.shape (name=None)
     Parameters: `name' – a string which is a valid shapename

     Set turtle shape to shape with given `name' or, if name is not
     given, return name of current shape.  Shape with `name' must exist
     in the TurtleScreen’s shape dictionary.  Initially there are the
     following polygon shapes: “arrow”, “turtle”, “circle”,
     “square”, “triangle”, “classic”.  To learn about how to
     deal with shapes see Screen method *Note register_shape(): 224a.

         >>> turtle.shape()
         'classic'
         >>> turtle.shape("turtle")
         >>> turtle.shape()
         'turtle'

 -- Function: turtle.resizemode (rmode=None)
     Parameters: `rmode' – one of the strings “auto”, “user”,
     “noresize”

     Set resizemode to one of the values: “auto”, “user”,
     “noresize”.  If `rmode' is not given, return current
     resizemode.  Different resizemodes have the following effects:

        - “auto”: adapts the appearance of the turtle corresponding
          to the value of pensize.

        - “user”: adapts the appearance of the turtle according to
          the values of stretchfactor and outlinewidth (outline), which
          are set by *Note shapesize(): 2223.

        - “noresize”: no adaption of the turtle’s appearance
          takes place.

     resizemode(“user”) is called by *Note shapesize(): 2223. when
     used with arguments.

         >>> turtle.resizemode()
         'noresize'
         >>> turtle.resizemode("auto")
         >>> turtle.resizemode()
         'auto'

 -- Function: turtle.shapesize (stretch_wid=None, stretch_len=None,
          outline=None)
 -- Function: turtle.turtlesize (stretch_wid=None, stretch_len=None,
          outline=None)
     Parameters:

        * `stretch_wid' – positive number

        * `stretch_len' – positive number

        * `outline' – positive number

     Return or set the pen’s attributes x/y-stretchfactors and/or
     outline.  Set resizemode to “user”.  If and only if resizemode
     is set to “user”, the turtle will be displayed stretched
     according to its stretchfactors: `stretch_wid' is stretchfactor
     perpendicular to its orientation, `stretch_len' is stretchfactor
     in direction of its orientation, `outline' determines the width of
     the shapes’s outline.

         >>> turtle.shapesize()
         (1, 1, 1)
         >>> turtle.resizemode("user")
         >>> turtle.shapesize(5, 5, 12)
         >>> turtle.shapesize()
         (5, 5, 12)
         >>> turtle.shapesize(outline=8)
         >>> turtle.shapesize()
         (5, 5, 8)

 -- Function: turtle.tilt (angle)
     Parameters: `angle' – a number

     Rotate the turtleshape by `angle' from its current tilt-angle, but
     do `not' change the turtle’s heading (direction of movement).

         >>> turtle.reset()
         >>> turtle.shape("circle")
         >>> turtle.shapesize(5,2)
         >>> turtle.tilt(30)
         >>> turtle.fd(50)
         >>> turtle.tilt(30)
         >>> turtle.fd(50)

 -- Function: turtle.settiltangle (angle)
     Parameters: `angle' – a number

     Rotate the turtleshape to point in the direction specified by
     `angle', regardless of its current tilt-angle.  `Do not' change
     the turtle’s heading (direction of movement).

         >>> turtle.reset()
         >>> turtle.shape("circle")
         >>> turtle.shapesize(5,2)
         >>> turtle.settiltangle(45)
         >>> turtle.fd(50)
         >>> turtle.settiltangle(-45)
         >>> turtle.fd(50)

 -- Function: turtle.tiltangle ()
     Return the current tilt-angle, i.e. the angle between the
     orientation of the turtleshape and the heading of the turtle (its
     direction of movement).

         >>> turtle.reset()
         >>> turtle.shape("circle")
         >>> turtle.shapesize(5,2)
         >>> turtle.tilt(45)
         >>> turtle.tiltangle()
         45.0


File: python.info,  Node: Using events,  Next: Special Turtle methods,  Prev: Turtle state,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.17 Using events
......................

 -- Function: turtle.onclick (fun, btn=1, add=None)
     Parameters:

        * `fun' – a function with two arguments which will be called
          with the coordinates of the clicked point on the canvas

        * `num' – number of the mouse-button, defaults to 1 (left
          mouse button)

        * `add' – `True' or `False' – if `True', a new binding will
          be added, otherwise it will replace a former binding

     Bind `fun' to mouse-click events on this turtle.  If `fun' is
     `None', existing bindings are removed.  Example for the anonymous
     turtle, i.e. the procedural way:

         >>> def turn(x, y):
         ...     left(180)
         ...
         >>> onclick(turn)  # Now clicking into the turtle will turn it.
         >>> onclick(None)  # event-binding will be removed

 -- Function: turtle.onrelease (fun, btn=1, add=None)
     Parameters:

        * `fun' – a function with two arguments which will be called
          with the coordinates of the clicked point on the canvas

        * `num' – number of the mouse-button, defaults to 1 (left
          mouse button)

        * `add' – `True' or `False' – if `True', a new binding will
          be added, otherwise it will replace a former binding

     Bind `fun' to mouse-button-release events on this turtle.  If
     `fun' is `None', existing bindings are removed.

         >>> class MyTurtle(Turtle):
         ...     def glow(self,x,y):
         ...         self.fillcolor("red")
         ...     def unglow(self,x,y):
         ...         self.fillcolor("")
         ...
         >>> turtle = MyTurtle()
         >>> turtle.onclick(turtle.glow)     # clicking on turtle turns fillcolor red,
         >>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent.

 -- Function: turtle.ondrag (fun, btn=1, add=None)
     Parameters:

        * `fun' – a function with two arguments which will be called
          with the coordinates of the clicked point on the canvas

        * `num' – number of the mouse-button, defaults to 1 (left
          mouse button)

        * `add' – `True' or `False' – if `True', a new binding will
          be added, otherwise it will replace a former binding

     Bind `fun' to mouse-move events on this turtle.  If `fun' is
     `None', existing bindings are removed.

     Remark: Every sequence of mouse-move-events on a turtle is
     preceded by a mouse-click event on that turtle.

         >>> turtle.ondrag(turtle.goto)

     Subsequently, clicking and dragging the Turtle will move it across
     the screen thereby producing handdrawings (if pen is down).

 -- Function: turtle.mainloop ()
 -- Function: turtle.done ()
     Starts event loop - calling Tkinter’s mainloop function. Must be
     the last statement in a turtle graphics program.

         >>> turtle.mainloop()


File: python.info,  Node: Special Turtle methods,  Next: Excursus about the use of compound shapes,  Prev: Using events,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.18 Special Turtle methods
................................

 -- Function: turtle.begin_poly ()
     Start recording the vertices of a polygon.  Current turtle
     position is first vertex of polygon.

 -- Function: turtle.end_poly ()
     Stop recording the vertices of a polygon.  Current turtle position
     is last vertex of polygon.  This will be connected with the first
     vertex.

 -- Function: turtle.get_poly ()
     Return the last recorded polygon.

         >>> turtle.home()
         >>> turtle.begin_poly()
         >>> turtle.fd(100)
         >>> turtle.left(20)
         >>> turtle.fd(30)
         >>> turtle.left(60)
         >>> turtle.fd(50)
         >>> turtle.end_poly()
         >>> p = turtle.get_poly()
         >>> register_shape("myFavouriteShape", p)

 -- Function: turtle.clone ()
     Create and return a clone of the turtle with same position,
     heading and turtle properties.

         >>> mick = Turtle()
         >>> joe = mick.clone()

 -- Function: turtle.getturtle ()
 -- Function: turtle.getpen ()
     Return the Turtle object itself.  Only reasonable use: as a
     function to return the “anonymous turtle”:

         >>> pet = getturtle()
         >>> pet.fd(50)
         >>> pet
         <turtle.Turtle object at 0x...>

 -- Function: turtle.getscreen ()
     Return the *Note TurtleScreen: 21e0. object the turtle is drawing
     on.  TurtleScreen methods can then be called for that object.

         >>> ts = turtle.getscreen()
         >>> ts
         <turtle._Screen object at 0x...>
         >>> ts.bgcolor("pink")

 -- Function: turtle.setundobuffer (size)
     Parameters: `size' – an integer or `None'

     Set or disable undobuffer.  If `size' is an integer an empty
     undobuffer of given size is installed.  `size' gives the maximum
     number of turtle actions that can be undone by the *Note undo():
     21fe. method/function.  If `size' is `None', the undobuffer is
     disabled.

         >>> turtle.setundobuffer(42)

 -- Function: turtle.undobufferentries ()
     Return number of entries in the undobuffer.

         >>> while undobufferentries():
         ...     undo()

 -- Function: turtle.tracer (flag=None, delay=None)
     A replica of the corresponding TurtleScreen method.

     Deprecated since version 2.6.


 -- Function: turtle.window_width ()
 -- Function: turtle.window_height ()
     Both are replicas of the corresponding TurtleScreen methods.

     Deprecated since version 2.6.



File: python.info,  Node: Excursus about the use of compound shapes,  Prev: Special Turtle methods,  Up: Methods of RawTurtle/Turtle and corresponding functions

5.24.5.19 Excursus about the use of compound shapes
...................................................

To use compound turtle shapes, which consist of several polygons of
different color, you must use the helper class *Note Shape: 2262.
explicitly as described below:

  1. Create an empty Shape object of type “compound”.

  2. Add as many components to this object as desired, using the
     `addcomponent()' method.

     For example:

         >>> s = Shape("compound")
         >>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))
         >>> s.addcomponent(poly1, "red", "blue")
         >>> poly2 = ((0,0),(10,-5),(-10,-5))
         >>> s.addcomponent(poly2, "blue", "red")

  3. Now add the Shape to the Screen’s shapelist and use it:

         >>> register_shape("myshape", s)
         >>> shape("myshape")

     Note: The *Note Shape: 2262. class is used internally by the *Note
     register_shape(): 224a.  method in different ways.  The
     application programmer has to deal with the Shape class `only'
     when using compound shapes like shown above!


File: python.info,  Node: Methods of TurtleScreen/Screen and corresponding functions,  Next: The public classes of the module turtle,  Prev: Methods of RawTurtle/Turtle and corresponding functions,  Up: turtle — Turtle graphics for Tk

5.24.5.20 Methods of TurtleScreen/Screen and corresponding functions
....................................................................

Most of the examples in this section refer to a TurtleScreen instance
called `screen'.

* Menu:

* Window control::
* Animation control::
* Using screen events::
* Settings and special methods::
* Methods specific to Screen, not inherited from TurtleScreen: Methods specific to Screen not inherited from TurtleScreen.


File: python.info,  Node: Window control,  Next: Animation control,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.21 Window control
........................

 -- Function: turtle.bgcolor (*args)
     Parameters: `args' – a color string or three numbers in the
     range 0..colormode or a 3-tuple of such numbers

     Set or return background color of the TurtleScreen.

         >>> screen.bgcolor("orange")
         >>> screen.bgcolor()
         'orange'
         >>> screen.bgcolor("#800080")
         >>> screen.bgcolor()
         (128, 0, 128)

 -- Function: turtle.bgpic (picname=None)
     Parameters: `picname' – a string, name of a gif-file or
     `"nopic"', or `None'

     Set background image or return name of current backgroundimage.
     If `picname' is a filename, set the corresponding image as
     background.  If `picname' is `"nopic"', delete background image,
     if present.  If `picname' is `None', return the filename of the
     current backgroundimage.

         >>> screen.bgpic()
         'nopic'
         >>> screen.bgpic("landscape.gif")
         >>> screen.bgpic()
         "landscape.gif"

 -- Function: turtle.clear ()
 -- Function: turtle.clearscreen ()
     Delete all drawings and all turtles from the TurtleScreen.  Reset
     the now empty TurtleScreen to its initial state: white background,
     no background image, no event bindings and tracing on.

          Note: This TurtleScreen method is available as a global
          function only under the name `clearscreen'.  The global
          function `clear' is another one derived from the Turtle
          method `clear'.

 -- Function: turtle.reset ()
 -- Function: turtle.resetscreen ()
     Reset all Turtles on the Screen to their initial state.

          Note: This TurtleScreen method is available as a global
          function only under the name `resetscreen'.  The global
          function `reset' is another one derived from the Turtle
          method `reset'.

 -- Function: turtle.screensize (canvwidth=None, canvheight=None,
          bg=None)
     Parameters:

        * `canvwidth' – positive integer, new width of canvas in
          pixels

        * `canvheight' – positive integer, new height of canvas in
          pixels

        * `bg' – colorstring or color-tuple, new background color

     If no arguments are given, return current (canvaswidth,
     canvasheight).  Else resize the canvas the turtles are drawing on.
     Do not alter the drawing window.  To observe hidden parts of the
     canvas, use the scrollbars. With this method, one can make visible
     those parts of a drawing which were outside the canvas before.

         >>> screen.screensize()
         (400, 300)
         >>> screen.screensize(2000,1500)
         >>> screen.screensize()
         (2000, 1500)

     e.g. to search for an erroneously escaped turtle ;-)

 -- Function: turtle.setworldcoordinates (llx, lly, urx, ury)
     Parameters:

        * `llx' – a number, x-coordinate of lower left corner of
          canvas

        * `lly' – a number, y-coordinate of lower left corner of
          canvas

        * `urx' – a number, x-coordinate of upper right corner of
          canvas

        * `ury' – a number, y-coordinate of upper right corner of
          canvas

     Set up user-defined coordinate system and switch to mode
     “world” if necessary.  This performs a `screen.reset()'.  If
     mode “world” is already active, all drawings are redrawn
     according to the new coordinates.

     `ATTENTION': in user-defined coordinate systems angles may appear
     distorted.

         >>> screen.reset()
         >>> screen.setworldcoordinates(-50,-7.5,50,7.5)
         >>> for _ in range(72):
         ...     left(10)
         ...
         >>> for _ in range(8):
         ...     left(45); fd(2)   # a regular octagon



File: python.info,  Node: Animation control,  Next: Using screen events,  Prev: Window control,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.22 Animation control
...........................

 -- Function: turtle.delay (delay=None)
     Parameters: `delay' – positive integer

     Set or return the drawing `delay' in milliseconds.  (This is
     approximately the time interval between two consecutive canvas
     updates.)  The longer the drawing delay, the slower the animation.

     Optional argument:

         >>> screen.delay()
         10
         >>> screen.delay(5)
         >>> screen.delay()
         5

 -- Function: turtle.tracer (n=None, delay=None)
     Parameters:

        * `n' – nonnegative integer

        * `delay' – nonnegative integer

     Turn turtle animation on/off and set delay for update drawings.
     If `n' is given, only each n-th regular screen update is really
     performed.  (Can be used to accelerate the drawing of complex
     graphics.)  Second argument sets delay value (see *Note delay():
     2240.).

         >>> screen.tracer(8, 25)
         >>> dist = 2
         >>> for i in range(200):
         ...     fd(dist)
         ...     rt(90)
         ...     dist += 2

 -- Function: turtle.update ()
     Perform a TurtleScreen update. To be used when tracer is turned
     off.

See also the RawTurtle/Turtle method *Note speed(): 21ff.


File: python.info,  Node: Using screen events,  Next: Settings and special methods,  Prev: Animation control,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.23 Using screen events
.............................

 -- Function: turtle.listen (xdummy=None, ydummy=None)
     Set focus on TurtleScreen (in order to collect key-events).  Dummy
     arguments are provided in order to be able to pass *Note listen():
     2242. to the onclick method.

 -- Function: turtle.onkey (fun, key)
     Parameters:

        * `fun' – a function with no arguments or `None'

        * `key' – a string: key (e.g. “a”) or key-symbol (e.g.
          “space”)

     Bind `fun' to key-release event of key.  If `fun' is `None', event
     bindings are removed. Remark: in order to be able to register
     key-events, TurtleScreen must have the focus. (See method *Note
     listen(): 2242.)

         >>> def f():
         ...     fd(50)
         ...     lt(60)
         ...
         >>> screen.onkey(f, "Up")
         >>> screen.listen()

 -- Function: turtle.onclick (fun, btn=1, add=None)
 -- Function: turtle.onscreenclick (fun, btn=1, add=None)
     Parameters:

        * `fun' – a function with two arguments which will be called
          with the coordinates of the clicked point on the canvas

        * `num' – number of the mouse-button, defaults to 1 (left
          mouse button)

        * `add' – `True' or `False' – if `True', a new binding will
          be added, otherwise it will replace a former binding

     Bind `fun' to mouse-click events on this screen.  If `fun' is
     `None', existing bindings are removed.

     Example for a TurtleScreen instance named `screen' and a Turtle
     instance named turtle:

         >>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will
         >>>                             # make the turtle move to the clicked point.
         >>> screen.onclick(None)        # remove event binding again

          Note: This TurtleScreen method is available as a global
          function only under the name `onscreenclick'.  The global
          function `onclick' is another one derived from the Turtle
          method `onclick'.

 -- Function: turtle.ontimer (fun, t=0)
     Parameters:

        * `fun' – a function with no arguments

        * `t' – a number >= 0

     Install a timer that calls `fun' after `t' milliseconds.

         >>> running = True
         >>> def f():
         ...     if running:
         ...         fd(50)
         ...         lt(60)
         ...         screen.ontimer(f, 250)
         >>> f()   ### makes the turtle march around
         >>> running = False


File: python.info,  Node: Settings and special methods,  Next: Methods specific to Screen not inherited from TurtleScreen,  Prev: Using screen events,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.24 Settings and special methods
......................................

 -- Function: turtle.mode (mode=None)
     Parameters: `mode' – one of the strings “standard”,
     “logo” or “world”

     Set turtle mode (“standard”, “logo” or “world”) and
     perform reset.  If mode is not given, current mode is returned.

     Mode “standard” is compatible with old *Note turtle: 184.
     Mode “logo” is compatible with most Logo turtle graphics.
     Mode “world” uses user-defined “world coordinates”.
     `Attention': in this mode angles appear distorted if `x/y'
     unit-ratio doesn’t equal 1.

     Mode             Initial turtle heading        positive angles
     ----------------------------------------------------------------------- 
     “standard”   to the right (east)           counterclockwise
     “logo”       upward    (north)             clockwise

         >>> mode("logo")   # resets turtle heading to north
         >>> mode()
         'logo'

 -- Function: turtle.colormode (cmode=None)
     Parameters: `cmode' – one of the values 1.0 or 255

     Return the colormode or set it to 1.0 or 255.  Subsequently `r',
     `g', `b' values of color triples have to be in the range
     0..`cmode'.

         >>> screen.colormode(1)
         >>> turtle.pencolor(240, 160, 80)
         Traceback (most recent call last):
              ...
         TurtleGraphicsError: bad color sequence: (240, 160, 80)
         >>> screen.colormode()
         1.0
         >>> screen.colormode(255)
         >>> screen.colormode()
         255
         >>> turtle.pencolor(240,160,80)

 -- Function: turtle.getcanvas ()
     Return the Canvas of this TurtleScreen.  Useful for insiders who
     know what to do with a Tkinter Canvas.

         >>> cv = screen.getcanvas()
         >>> cv
         <turtle.ScrolledCanvas instance at 0x...>

 -- Function: turtle.getshapes ()
     Return a list of names of all currently available turtle shapes.

         >>> screen.getshapes()
         ['arrow', 'blank', 'circle', ..., 'turtle']

 -- Function: turtle.register_shape (name, shape=None)
 -- Function: turtle.addshape (name, shape=None)
     There are three different ways to call this function:

       1. `name' is the name of a gif-file and `shape' is `None':
          Install the corresponding image shape.

              >>> screen.register_shape("turtle.gif")

               Note: Image shapes `do not' rotate when turning the
               turtle, so they do not display the heading of the turtle!

       2. `name' is an arbitrary string and `shape' is a tuple of pairs
          of coordinates: Install the corresponding polygon shape.

              >>> screen.register_shape("triangle", ((5,-3), (0,5), (-5,-3)))

       3. `name' is an arbitrary string and shape is a (compound) *Note
          Shape: 2262.  object: Install the corresponding compound
          shape.

     Add a turtle shape to TurtleScreen’s shapelist.  Only thusly
     registered shapes can be used by issuing the command
     `shape(shapename)'.

 -- Function: turtle.turtles ()
     Return the list of turtles on the screen.

         >>> for turtle in screen.turtles():
         ...     turtle.color("red")

 -- Function: turtle.window_height ()
     Return the height of the turtle window.

         >>> screen.window_height()
         480

 -- Function: turtle.window_width ()
     Return the width of the turtle window.

         >>> screen.window_width()
         640


File: python.info,  Node: Methods specific to Screen not inherited from TurtleScreen,  Prev: Settings and special methods,  Up: Methods of TurtleScreen/Screen and corresponding functions

5.24.5.25 Methods specific to Screen, not inherited from TurtleScreen
.....................................................................

 -- Function: turtle.bye ()
     Shut the turtlegraphics window.

 -- Function: turtle.exitonclick ()
     Bind bye() method to mouse clicks on the Screen.

     If the value “using_IDLE” in the configuration dictionary is
     `False' (default value), also enter mainloop.  Remark: If IDLE
     with the `-n' switch (no subprocess) is used, this value should be
     set to `True' in `turtle.cfg'.  In this case IDLE’s own mainloop
     is active also for the client script.

 -- Function: turtle.setup (width=_CFG["width"], height=_CFG["height"],
          startx=_CFG["leftright"], starty=_CFG["topbottom"])
     Set the size and position of the main window.  Default values of
     arguments are stored in the configuration dictionary and can be
     changed via a `turtle.cfg' file.

     Parameters:

        * `width' – if an integer, a size in pixels, if a float, a
          fraction of the screen; default is 50% of screen

        * `height' – if an integer, the height in pixels, if a float,
          a fraction of the screen; default is 75% of screen

        * `startx' – if positive, starting position in pixels from
          the left edge of the screen, if negative from the right edge,
          if `None', center window horizontally

        * `starty' – if positive, starting position in pixels from
          the top edge of the screen, if negative from the bottom edge,
          if `None', center window vertically

         >>> screen.setup (width=200, height=200, startx=0, starty=0)
         >>>              # sets window to 200x200 pixels, in upper left of screen
         >>> screen.setup(width=.75, height=0.5, startx=None, starty=None)
         >>>              # sets window to 75% of screen by 50% of screen and centers

 -- Function: turtle.title (titlestring)
     Parameters: `titlestring' – a string that is shown in the
     titlebar of the turtle graphics window

     Set title of turtle window to `titlestring'.

         >>> screen.title("Welcome to the turtle zoo!")


File: python.info,  Node: The public classes of the module turtle,  Next: Help and configuration,  Prev: Methods of TurtleScreen/Screen and corresponding functions,  Up: turtle — Turtle graphics for Tk

5.24.5.26 The public classes of the module `turtle'
...................................................

 -- Class: turtle.RawTurtle (canvas)
 -- Class: turtle.RawPen (canvas)
     Parameters: `canvas' – a `Tkinter.Canvas', a *Note
     ScrolledCanvas: 21e1. or a *Note TurtleScreen: 21e0.

     Create a turtle.  The turtle has all methods described above as
     “methods of Turtle/RawTurtle”.

 -- Class: turtle.Turtle
     Subclass of RawTurtle, has the same interface but draws on a
     default *Note Screen: 21e2. object created automatically when
     needed for the first time.

 -- Class: turtle.TurtleScreen (cv)
     Parameters: `cv' – a `Tkinter.Canvas'

     Provides screen oriented methods like `setbg()' etc. that are
     described above.

 -- Class: turtle.Screen
     Subclass of TurtleScreen, with *Note four methods added: 2268.

 -- Class: turtle.ScrolledCanvas (master)
     Parameters: `master' – some Tkinter widget to contain the
     ScrolledCanvas, i.e.  a Tkinter-canvas with scrollbars added

     Used by class Screen, which thus automatically provides a
     ScrolledCanvas as playground for the turtles.

 -- Class: turtle.Shape (type_, data)
     Parameters: `type_' – one of the strings “polygon”,
     “image”, “compound”

     Data structure modeling shapes.  The pair `(type_, data)' must
     follow this specification:

     `type_'         `data'
     ------------------------------------------------------------------------------- 
     “polygon”   a polygon-tuple, i.e. a tuple of pairs of coordinates
     “image”     an image  (in this form only used internally!)
     “compound”  `None' (a compound shape has to be constructed using the
                     *Note addcomponent(): 226b. method)

      -- Method: addcomponent (poly, fill, outline=None)
          Parameters:

             * `poly' – a polygon, i.e. a tuple of pairs of numbers

             * `fill' – a color the `poly' will be filled with

             * `outline' – a color for the poly’s outline (if given)

          Example:

              >>> poly = ((0,0),(10,-5),(0,10),(-10,-5))
              >>> s = Shape("compound")
              >>> s.addcomponent(poly, "red", "blue")
              >>> # ... add more components and then use register_shape()

          See *Note Excursus about the use of compound shapes: 2260.

 -- Class: turtle.Vec2D (x, y)
     A two-dimensional vector class, used as a helper class for
     implementing turtle graphics.  May be useful for turtle graphics
     programs too.  Derived from tuple, so a vector is a tuple!

     Provides (for `a', `b' vectors, `k' number):

        * `a + b' vector addition

        * `a - b' vector subtraction

        * `a * b' inner product

        * `k * a' and `a * k' multiplication with scalar

        * `abs(a)' absolute value of a

        * `a.rotate(angle)' rotation


File: python.info,  Node: Help and configuration,  Next: Demo scripts,  Prev: The public classes of the module turtle,  Up: turtle — Turtle graphics for Tk

5.24.5.27 Help and configuration
................................

* Menu:

* How to use help::
* Translation of docstrings into different languages::
* How to configure Screen and Turtles::


File: python.info,  Node: How to use help,  Next: Translation of docstrings into different languages,  Up: Help and configuration

5.24.5.28 How to use help
.........................

The public methods of the Screen and Turtle classes are documented
extensively via docstrings.  So these can be used as online-help via
the Python help facilities:

   - When using IDLE, tooltips show the signatures and first lines of
     the docstrings of typed in function-/method calls.

   - Calling *Note help(): 4b6. on methods or functions displays the
     docstrings:

         >>> help(Screen.bgcolor)
         Help on method bgcolor in module turtle:

         bgcolor(self, *args) unbound turtle.Screen method
             Set or return backgroundcolor of the TurtleScreen.

             Arguments (if given): a color string or three numbers
             in the range 0..colormode or a 3-tuple of such numbers.


               >>> screen.bgcolor("orange")
               >>> screen.bgcolor()
               "orange"
               >>> screen.bgcolor(0.5,0,0.5)
               >>> screen.bgcolor()
               "#800080"

         >>> help(Turtle.penup)
         Help on method penup in module turtle:

         penup(self) unbound turtle.Turtle method
             Pull the pen up -- no drawing when moving.

             Aliases: penup | pu | up

             No argument

             >>> turtle.penup()

   - The docstrings of the functions which are derived from methods
     have a modified form:

         >>> help(bgcolor)
         Help on function bgcolor in module turtle:

         bgcolor(*args)
             Set or return backgroundcolor of the TurtleScreen.

             Arguments (if given): a color string or three numbers
             in the range 0..colormode or a 3-tuple of such numbers.

             Example::

               >>> bgcolor("orange")
               >>> bgcolor()
               "orange"
               >>> bgcolor(0.5,0,0.5)
               >>> bgcolor()
               "#800080"

         >>> help(penup)
         Help on function penup in module turtle:

         penup()
             Pull the pen up -- no drawing when moving.

             Aliases: penup | pu | up

             No argument

             Example:
             >>> penup()

These modified docstrings are created automatically together with the
function definitions that are derived from the methods at import time.


File: python.info,  Node: Translation of docstrings into different languages,  Next: How to configure Screen and Turtles,  Prev: How to use help,  Up: Help and configuration

5.24.5.29 Translation of docstrings into different languages
............................................................

There is a utility to create a dictionary the keys of which are the
method names and the values of which are the docstrings of the public
methods of the classes Screen and Turtle.

 -- Function: turtle.write_docstringdict
          (filename="turtle_docstringdict")
     Parameters: `filename' – a string, used as filename

     Create and write docstring-dictionary to a Python script with the
     given filename.  This function has to be called explicitly (it is
     not used by the turtle graphics classes).  The docstring
     dictionary will be written to the Python script ``filename'.py'.
     It is intended to serve as a template for translation of the
     docstrings into different languages.

If you (or your students) want to use *Note turtle: 184. with online
help in your native language, you have to translate the docstrings and
save the resulting file as e.g. `turtle_docstringdict_german.py'.

If you have an appropriate entry in your `turtle.cfg' file this
dictionary will be read in at import time and will replace the original
English docstrings.

At the time of this writing there are docstring dictionaries in German
and in Italian.  (Requests please to <glingl@aon.at>.)


File: python.info,  Node: How to configure Screen and Turtles,  Prev: Translation of docstrings into different languages,  Up: Help and configuration

5.24.5.30 How to configure Screen and Turtles
.............................................

The built-in default configuration mimics the appearance and behaviour
of the old turtle module in order to retain best possible compatibility
with it.

If you want to use a different configuration which better reflects the
features of this module or which better fits to your needs, e.g. for
use in a classroom, you can prepare a configuration file `turtle.cfg'
which will be read at import time and modify the configuration
according to its settings.

The built in configuration would correspond to the following turtle.cfg:

    width = 0.5
    height = 0.75
    leftright = None
    topbottom = None
    canvwidth = 400
    canvheight = 300
    mode = standard
    colormode = 1.0
    delay = 10
    undobuffersize = 1000
    shape = classic
    pencolor = black
    fillcolor = black
    resizemode = noresize
    visible = True
    language = english
    exampleturtle = turtle
    examplescreen = screen
    title = Python Turtle Graphics
    using_IDLE = False

Short explanation of selected entries:

   - The first four lines correspond to the arguments of the
     `Screen.setup()' method.

   - Line 5 and 6 correspond to the arguments of the method
     `Screen.screensize()'.

   - `shape' can be any of the built-in shapes, e.g: arrow, turtle,
     etc.  For more info try `help(shape)'.

   - If you want to use no fillcolor (i.e. make the turtle
     transparent), you have to write `fillcolor = ""' (but all nonempty
     strings must not have quotes in the cfg-file).

   - If you want to reflect the turtle its state, you have to use
     `resizemode = auto'.

   - If you set e.g. `language = italian' the docstringdict
     `turtle_docstringdict_italian.py' will be loaded at import time (if
     present on the import path, e.g. in the same directory as *Note
     turtle: 184.

   - The entries `exampleturtle' and `examplescreen' define the names
     of these objects as they occur in the docstrings.  The
     transformation of method-docstrings to function-docstrings will
     delete these names from the docstrings.

   - `using_IDLE': Set this to `True' if you regularly work with IDLE
     and its -n switch (“no subprocess”).  This will prevent *Note
     exitonclick(): 224e. to enter the mainloop.

There can be a `turtle.cfg' file in the directory where *Note turtle:
184. is stored and an additional one in the current working directory.
The latter will override the settings of the first one.

The `Demo/turtle' directory contains a `turtle.cfg' file.  You can
study it as an example and see its effects when running the demos
(preferably not from within the demo-viewer).


File: python.info,  Node: Demo scripts,  Prev: Help and configuration,  Up: turtle — Turtle graphics for Tk

5.24.5.31 Demo scripts
......................

There is a set of demo scripts in the turtledemo directory located in
the `Demo/turtle' directory in the source distribution.

It contains:

   - a set of 15 demo scripts demonstrating different features of the
     new module *Note turtle: 184.

   - a demo viewer `turtleDemo.py' which can be used to view the
     sourcecode of the scripts and run them at the same time. 14 of the
     examples can be accessed via the Examples menu; all of them can
     also be run standalone.

   - The example `turtledemo_two_canvases.py' demonstrates the
     simultaneous use of two canvases with the turtle module.
     Therefore it only can be run standalone.

   - There is a `turtle.cfg' file in this directory, which also serves
     as an example for how to write and use such files.

The demoscripts are:

Name                 Description                        Features
------------------------------------------------------------------------------------ 
bytedesign           complex classical turtlegraphics   *Note tracer(): 2236,
                     pattern                            delay, *Note update():
                                                        2241.
chaos                graphs Verhulst dynamics, shows    world coordinates
                     that computer’s computations     
                     can generate results sometimes     
                     against the common sense           
                     expectations                       
clock                analog clock showing time of your  turtles as clock’s
                     computer                           hands, ontimer
colormixer           experiment with r, g, b            *Note ondrag(): 222a.
fractalcurves        Hilbert & Koch curves              recursion
lindenmayer          ethnomathematics (indian kolams)   L-System
minimal_hanoi        Towers of Hanoi                    Rectangular Turtles as
                                                        Hanoi discs (shape,
                                                        shapesize)
paint                super minimalistic drawing program *Note onclick(): 2228.
peace                elementary                         turtle: appearance and
                                                        animation
penrose              aperiodic tiling with kites and    *Note stamp(): 21fb.
                     darts                              
planet_and_moon      simulation of gravitational system compound shapes, *Note
                                                        Vec2D: 2253.
tree                 a (graphical) breadth first tree   *Note clone(): 2230.
                     (using generators)                 
wikipedia            a pattern from the wikipedia       *Note clone(): 2230, *Note
                     article on turtle graphics         undo(): 21fe.
yingyang             another elementary example         *Note circle(): 21f9.

Have fun!


File: python.info,  Node: IDLE,  Next: Other Graphical User Interface Packages,  Prev: turtle — Turtle graphics for Tk,  Up: Graphical User Interfaces with Tk

5.24.6 IDLE
-----------

IDLE is Python’s Integrated Development and Learning Environment.

IDLE has the following features:

   * coded in 100% pure Python, using the `tkinter' GUI toolkit

   * cross-platform: works mostly the same on Windows, Unix, and Mac OS
     X

   * Python shell window (interactive interpreter) with colorizing of
     code input, output, and error messages

   * multi-window text editor with multiple undo, Python colorizing,
     smart indent, call tips, auto completion, and other features

   * search within any window, replace within editor windows, and search
     through multiple files (grep)

   * debugger with persistent breakpoints, stepping, and viewing of
     global and local namespaces

   * configuration, browsers, and other dialogs

* Menu:

* Menus::
* Editing and navigation::
* Startup and code execution::
* Help and preferences::


File: python.info,  Node: Menus,  Next: Editing and navigation,  Up: IDLE

5.24.6.1 Menus
..............

IDLE has two main window types, the Shell window and the Editor window.
It is possible to have multiple editor windows simultaneously.  Output
windows, such as used for Edit / Find in Files, are a subtype of edit
window.  They currently have the same top menu as Editor windows but a
different default title and context menu.

IDLE’s menus dynamically change based on which window is currently
selected.  Each menu documented below indicates which window type it is
associated with.

* Menu:

* File menu (Shell and Editor): File menu Shell and Editor.
* Edit menu (Shell and Editor): Edit menu Shell and Editor.
* Format menu (Editor window only): Format menu Editor window only.
* Run menu (Editor window only): Run menu Editor window only.
* Shell menu (Shell window only): Shell menu Shell window only.
* Debug menu (Shell window only): Debug menu Shell window only.
* Options menu (Shell and Editor): Options menu Shell and Editor.
* Window menu (Shell and Editor): Window menu Shell and Editor.
* Help menu (Shell and Editor): Help menu Shell and Editor.
* Context Menus::


File: python.info,  Node: File menu Shell and Editor,  Next: Edit menu Shell and Editor,  Up: Menus

5.24.6.2 File menu (Shell and Editor)
.....................................

New File
     Create a new file editing window.

Open…
     Open an existing file with an Open dialog.

Recent Files
     Open a list of recent files.  Click one to open it.

Open Module…
     Open an existing module (searches sys.path).

Class Browser
     Show functions, classes, and methods in the current Editor file in
     a tree structure.  In the shell, open a module first.

Path Browser
     Show sys.path directories, modules, functions, classes and methods
     in a tree structure.

Save
     Save the current window to the associated file, if there is one.
     Windows that have been changed since being opened or last saved
     have a * before and after the window title.  If there is no
     associated file, do Save As instead.

Save As…
     Save the current window with a Save As dialog.  The file saved
     becomes the new associated file for the window.

Save Copy As…
     Save the current window to different file without changing the
     associated file.

Print Window
     Print the current window to the default printer.

Close
     Close the current window (ask to save if unsaved).

Exit
     Close all windows and quit IDLE (ask to save unsaved windows).


File: python.info,  Node: Edit menu Shell and Editor,  Next: Format menu Editor window only,  Prev: File menu Shell and Editor,  Up: Menus

5.24.6.3 Edit menu (Shell and Editor)
.....................................

Undo
     Undo the last change to the current window.  A maximum of 1000
     changes may be undone.

Redo
     Redo the last undone change to the current window.

Cut
     Copy selection into the system-wide clipboard; then delete the
     selection.

Copy
     Copy selection into the system-wide clipboard.

Paste
     Insert contents of the system-wide clipboard into the current
     window.

The clipboard functions are also available in context menus.

Select All
     Select the entire contents of the current window.

Find…
     Open a search dialog with many options

Find Again
     Repeat the last search, if there is one.

Find Selection
     Search for the currently selected string, if there is one.

Find in Files…
     Open a file search dialog.  Put results in a new output window.

Replace…
     Open a search-and-replace dialog.

Go to Line
     Move cursor to the line number requested and make that line
     visible.

Show Completions
     Open a scrollable list allowing selection of keywords and
     attributes. See Completions in the Tips sections below.

Expand Word
     Expand a prefix you have typed to match a full word in the same
     window; repeat to get a different expansion.

Show call tip
     After an unclosed parenthesis for a function, open a small window
     with function parameter hints.

Show surrounding parens
     Highlight the surrounding parenthesis.


File: python.info,  Node: Format menu Editor window only,  Next: Run menu Editor window only,  Prev: Edit menu Shell and Editor,  Up: Menus

5.24.6.4 Format menu (Editor window only)
.........................................

Indent Region
     Shift selected lines right by the indent width (default 4 spaces).

Dedent Region
     Shift selected lines left by the indent width (default 4 spaces).

Comment Out Region
     Insert ## in front of selected lines.

Uncomment Region
     Remove leading # or ## from selected lines.

Tabify Region
     Turn `leading' stretches of spaces into tabs. (Note: We recommend
     using 4 space blocks to indent Python code.)

Untabify Region
     Turn `all' tabs into the correct number of spaces.

Toggle Tabs
     Open a dialog to switch between indenting with spaces and tabs.

New Indent Width
     Open a dialog to change indent width. The accepted default by the
     Python community is 4 spaces.

Format Paragraph
     Reformat the current blank-line-delimited paragraph in comment
     block or multiline string or selected line in a string.  All lines
     in the paragraph will be formatted to less than N columns, where N
     defaults to 72.

Strip trailing whitespace
     Remove any space characters after the last non-space character of
     a line.


File: python.info,  Node: Run menu Editor window only,  Next: Shell menu Shell window only,  Prev: Format menu Editor window only,  Up: Menus

5.24.6.5 Run menu (Editor window only)
......................................

Python Shell
     Open or wake up the Python Shell window.

Check Module
     Check the syntax of the module currently open in the Editor
     window. If the module has not been saved IDLE will either prompt
     the user to save or autosave, as selected in the General tab of
     the Idle Settings dialog.  If there is a syntax error, the
     approximate location is indicated in the Editor window.

Run Module
     Do Check Module (above).  If no error, restart the shell to clean
     the environment, then execute the module.  Output is displayed in
     the Shell window.  Note that output requires use of `print' or
     `write'.  When execution is complete, the Shell retains focus and
     displays a prompt.  At this point, one may interactively explore
     the result of execution.  This is similar to executing a file with
     `python -i file' at a command line.


File: python.info,  Node: Shell menu Shell window only,  Next: Debug menu Shell window only,  Prev: Run menu Editor window only,  Up: Menus

5.24.6.6 Shell menu (Shell window only)
.......................................

View Last Restart
     Scroll the shell window to the last Shell restart.

Restart Shell
     Restart the shell to clean the environment.

Interrupt Execution
     Stop a running program.


File: python.info,  Node: Debug menu Shell window only,  Next: Options menu Shell and Editor,  Prev: Shell menu Shell window only,  Up: Menus

5.24.6.7 Debug menu (Shell window only)
.......................................

Go to File/Line
     Look on the current line. with the cursor, and the line above for
     a filename and line number.  If found, open the file if not
     already open, and show the line.  Use this to view source lines
     referenced in an exception traceback and lines found by Find in
     Files. Also available in the context menu of the Shell window and
     Output windows.

Debugger (toggle)
     When actived, code entered in the Shell or run from an Editor will
     run under the debugger.  In the Editor, breakpoints can be set
     with the context menu.  This feature is still incomplete and
     somewhat experimental.

Stack Viewer
     Show the stack traceback of the last exception in a tree widget,
     with access to locals and globals.

Auto-open Stack Viewer
     Toggle automatically opening the stack viewer on an unhandled
     exception.


File: python.info,  Node: Options menu Shell and Editor,  Next: Window menu Shell and Editor,  Prev: Debug menu Shell window only,  Up: Menus

5.24.6.8 Options menu (Shell and Editor)
........................................

Configure IDLE
     Open a configuration dialog and change preferences for the
     following: fonts, indentation, keybindings, text color themes,
     startup windows and size, additional help sources, and extensions
     (see below).  On OS X, open the configuration dialog by selecting
     Preferences in the application menu.  To use a new built-in color
     theme (IDLE Dark) with older IDLEs, save it as a new custom theme.

     Non-default user settings are saved in a .idlerc directory in the
     user’s home directory.  Problems caused by bad user
     configuration files are solved by editing or deleting one or more
     of the files in .idlerc.

Code Context (toggle)(Editor Window only)
     Open a pane at the top of the edit window which shows the block
     context of the code which has scrolled above the top of the window.


File: python.info,  Node: Window menu Shell and Editor,  Next: Help menu Shell and Editor,  Prev: Options menu Shell and Editor,  Up: Menus

5.24.6.9 Window menu (Shell and Editor)
.......................................

Zoom Height
     Toggles the window between normal size and maximum height. The
     initial size defaults to 40 lines by 80 chars unless changed on
     the General tab of the Configure IDLE dialog.

The rest of this menu lists the names of all open windows; select one
to bring it to the foreground (deiconifying it if necessary).


File: python.info,  Node: Help menu Shell and Editor,  Next: Context Menus,  Prev: Window menu Shell and Editor,  Up: Menus

5.24.6.10 Help menu (Shell and Editor)
......................................

About IDLE
     Display version, copyright, license, credits, and more.

IDLE Help
     Display a help file for IDLE detailing the menu options, basic
     editing and navigation, and other tips.

Python Docs
     Access local Python documentation, if installed, or start a web
     browser and open docs.python.org showing the latest Python
     documentation.

Turtle Demo
     Run the turtledemo module with example python code and turtle
     drawings.

Additional help sources may be added here with the Configure IDLE
dialog under the General tab.


File: python.info,  Node: Context Menus,  Prev: Help menu Shell and Editor,  Up: Menus

5.24.6.11 Context Menus
.......................

Open a context menu by right-clicking in a window (Control-click on OS
X).  Context menus have the standard clipboard functions also on the
Edit menu.

Cut
     Copy selection into the system-wide clipboard; then delete the
     selection.

Copy
     Copy selection into the system-wide clipboard.

Paste
     Insert contents of the system-wide clipboard into the current
     window.

Editor windows also have breakpoint functions.  Lines with a breakpoint
set are specially marked.  Breakpoints only have an effect when running
under the debugger.  Breakpoints for a file are saved in the user’s
.idlerc directory.

Set Breakpoint
     Set a breakpoint on the current line.

Clear Breakpoint
     Clear the breakpoint on that line.

Shell and Output windows have the following.

Go to file/line
     Same as in Debug menu.


File: python.info,  Node: Editing and navigation,  Next: Startup and code execution,  Prev: Menus,  Up: IDLE

5.24.6.12 Editing and navigation
................................

In this section, ‘C’ refers to the `Control' key on Windows and
Unix and the `Command' key on Mac OSX.

   * `Backspace' deletes to the left; `Del' deletes to the right

   * `C-Backspace' delete word left; `C-Del' delete word to the right

   * Arrow keys and `Page Up'/`Page Down' to move around

   * `C-LeftArrow' and `C-RightArrow' moves by words

   * `Home'/`End' go to begin/end of line

   * `C-Home'/`C-End' go to begin/end of file

   * Some useful Emacs bindings are inherited from Tcl/Tk:

             * `C-a' beginning of line

             * `C-e' end of line

             * `C-k' kill line (but doesn’t put it in clipboard)

             * `C-l' center window around the insertion point

             * `C-b' go backwards one character without deleting
               (usually you can also use the cursor key for this)

             * `C-f' go forward one character without deleting (usually
               you can also use the cursor key for this)

             * `C-p' go up one line (usually you can also use the
               cursor key for this)

             * `C-d' delete next character

Standard keybindings (like `C-c' to copy and `C-v' to paste) may work.
Keybindings are selected in the Configure IDLE dialog.

* Menu:

* Automatic indentation::
* Completions::
* Calltips::
* Python Shell window::
* Text colors::


File: python.info,  Node: Automatic indentation,  Next: Completions,  Up: Editing and navigation

5.24.6.13 Automatic indentation
...............................

After a block-opening statement, the next line is indented by 4 spaces
(in the Python Shell window by one tab).  After certain keywords
(break, return etc.)  the next line is dedented.  In leading
indentation, `Backspace' deletes up to 4 spaces if they are there.
`Tab' inserts spaces (in the Python Shell window one tab), number
depends on Indent width. Currently tabs are restricted to four spaces
due to Tcl/Tk limitations.

See also the indent/dedent region commands in the edit menu.


File: python.info,  Node: Completions,  Next: Calltips,  Prev: Automatic indentation,  Up: Editing and navigation

5.24.6.14 Completions
.....................

Completions are supplied for functions, classes, and attributes of
classes, both built-in and user-defined. Completions are also provided
for filenames.

The AutoCompleteWindow (ACW) will open after a predefined delay
(default is two seconds) after a ‘.’ or (in a string) an os.sep is
typed. If after one of those characters (plus zero or more other
characters) a tab is typed the ACW will open immediately if a possible
continuation is found.

If there is only one possible completion for the characters entered, a
`Tab' will supply that completion without opening the ACW.

‘Show Completions’ will force open a completions window, by default
the `C-space' will open a completions window. In an empty string, this
will contain the files in the current directory. On a blank line, it
will contain the built-in and user-defined functions and classes in the
current name spaces, plus any modules imported. If some characters have
been entered, the ACW will attempt to be more specific.

If a string of characters is typed, the ACW selection will jump to the
entry most closely matching those characters.  Entering a `tab' will
cause the longest non-ambiguous match to be entered in the Editor
window or Shell.  Two `tab' in a row will supply the current ACW
selection, as will return or a double click.  Cursor keys, Page
Up/Down, mouse selection, and the scroll wheel all operate on the ACW.

“Hidden” attributes can be accessed by typing the beginning of
hidden name after a ‘.’, e.g. ‘_’. This allows access to
modules with `__all__' set, or to class-private attributes.

Completions and the ‘Expand Word’ facility can save a lot of typing!

Completions are currently limited to those in the namespaces. Names in
an Editor window which are not via `__main__' and *Note sys.modules:
84c. will not be found.  Run the module once with your imports to
correct this situation.  Note that IDLE itself places quite a few
modules in sys.modules, so much can be found by default, e.g. the re
module.

If you don’t like the ACW popping up unbidden, simply make the delay
longer or disable the extension.


File: python.info,  Node: Calltips,  Next: Python Shell window,  Prev: Completions,  Up: Editing and navigation

5.24.6.15 Calltips
..................

A calltip is shown when one types `(' after the name of an `acccessible'
function.  A name expression may include dots and subscripts.  A calltip
remains until it is clicked, the cursor is moved out of the argument
area, or `)' is typed.  When the cursor is in the argument part of a
definition, the menu or shortcut display a calltip.

A calltip consists of the function signature and the first line of the
docstring.  For builtins without an accessible signature, the calltip
consists of all lines up the fifth line or the first blank line.  These
details may change.

The set of `accessible' functions depends on what modules have been
imported into the user process, including those imported by Idle itself,
and what definitions have been run, all since the last restart.

For example, restart the Shell and enter `itertools.count('.  A calltip
appears because Idle imports itertools into the user process for its
own use.  (This could change.)  Enter `turtle.write(' and nothing
appears.  Idle does not import turtle.  The menu or shortcut do nothing
either.  Enter `import turtle' and then `turtle.write(' will work.

In an editor, import statements have no effect until one runs the file.
One might want to run a file after writing the import statements at
the top, or immediately run an existing file before editing.


File: python.info,  Node: Python Shell window,  Next: Text colors,  Prev: Calltips,  Up: Editing and navigation

5.24.6.16 Python Shell window
.............................

   * `C-c' interrupts executing command

   * `C-d' sends end-of-file; closes window if typed at a `>>>' prompt

   * `Alt-/' (Expand word) is also useful to reduce typing

     Command history

        * `Alt-p' retrieves previous command matching what you have
          typed. On OS X use `C-p'.

        * `Alt-n' retrieves next. On OS X use `C-n'.

        * `Return' while on any previous command retrieves that command


File: python.info,  Node: Text colors,  Prev: Python Shell window,  Up: Editing and navigation

5.24.6.17 Text colors
.....................

Idle defaults to black on white text, but colors text with special
meanings.  For the shell, these are shell output, shell error, user
output, and user error.  For Python code, at the shell prompt or in an
editor, these are keywords, builtin class and function names, names
following `class' and `def', strings, and comments. For any text
window, these are the cursor (when present), found text (when
possible), and selected text.

Text coloring is done in the background, so uncolorized text is
occasionally visible.  To change the color scheme, use the Configure
IDLE dialog Highlighting tab.  The marking of debugger breakpoint lines
in the editor and text in popups and dialogs is not user-configurable.


File: python.info,  Node: Startup and code execution,  Next: Help and preferences,  Prev: Editing and navigation,  Up: IDLE

5.24.6.18 Startup and code execution
....................................

Upon startup with the `-s' option, IDLE will execute the file
referenced by the environment variables `IDLESTARTUP' or *Note
PYTHONSTARTUP: 63b.  IDLE first checks for `IDLESTARTUP'; if
`IDLESTARTUP' is present the file referenced is run.  If `IDLESTARTUP'
is not present, IDLE checks for `PYTHONSTARTUP'.  Files referenced by
these environment variables are convenient places to store functions
that are used frequently from the IDLE shell, or for executing import
statements to import common modules.

In addition, `Tk' also loads a startup file if it is present.  Note
that the Tk file is loaded unconditionally.  This additional file is
`.Idle.py' and is looked for in the user’s home directory.
Statements in this file will be executed in the Tk namespace, so this
file is not useful for importing functions to be used from IDLE’s
Python shell.

* Menu:

* Command line usage::
* IDLE-console differences::
* Running without a subprocess::


File: python.info,  Node: Command line usage,  Next: IDLE-console differences,  Up: Startup and code execution

5.24.6.19 Command line usage
............................

    idle.py [-c command] [-d] [-e] [-h] [-i] [-r file] [-s] [-t title] [-] [arg] ...

    -c command  run command in the shell window
    -d          enable debugger and open shell window
    -e          open editor window
    -h          print help message with legal combinations and exit
    -i          open shell window
    -r file     run file in shell window
    -s          run $IDLESTARTUP or $PYTHONSTARTUP first, in shell window
    -t title    set title of shell window
    -           run stdin in shell (- must be last option before args)

If there are arguments:

   * If `-', `-c', or `r' is used, all arguments are placed in
     `sys.argv[1:...]' and `sys.argv[0]' is set to `''', `'-c'', or
     `'-r''.  No editor window is opened, even if that is the default
     set in the Options dialog.

   * Otherwise, arguments are files opened for editing and `sys.argv'
     reflects the arguments passed to IDLE itself.


File: python.info,  Node: IDLE-console differences,  Next: Running without a subprocess,  Prev: Command line usage,  Up: Startup and code execution

5.24.6.20 IDLE-console differences
..................................

As much as possible, the result of executing Python code with IDLE is
the same as executing the same code in a console window.  However, the
different interface and operation occasionally affects visible results.
For instance, `sys.modules' starts with more entries.

IDLE also replaces `sys.stdin', `sys.stdout', and `sys.stderr' with
objects that get input from and send output to the Shell window.  When
this window has the focus, it controls the keyboard and screen.  This
is normally transparent, but functions that directly access the keyboard
and screen will not work.  If `sys' is reset with `reload(sys)',
IDLE’s changes are lost and things like `input', `raw_input', and
`print' will not work correctly.

With IDLE’s Shell, one enters, edits, and recalls complete statements.
Some consoles only work with a single physical line at a time.  IDLE
uses `exec' to run each statement.  As a result, `'__builtins__'' is
always defined for each statement.


File: python.info,  Node: Running without a subprocess,  Prev: IDLE-console differences,  Up: Startup and code execution

5.24.6.21 Running without a subprocess
......................................

By default, IDLE executes user code in a separate subprocess via a
socket, which uses the internal loopback interface.  This connection is
not externally visible and no data is sent to or received from the
Internet.  If firewall software complains anyway, you can ignore it.

If the attempt to make the socket connection fails, Idle will notify
you.  Such failures are sometimes transient, but if persistent, the
problem may be either a firewall blocking the connecton or
misconfiguration of a particular system.  Until the problem is fixed,
one can run Idle with the -n command line switch.

If IDLE is started with the -n command line switch it will run in a
single process and will not create the subprocess which runs the RPC
Python execution server.  This can be useful if Python cannot create
the subprocess or the RPC socket interface on your platform.  However,
in this mode user code is not isolated from IDLE itself.  Also, the
environment is not restarted when Run/Run Module (F5) is selected.  If
your code has been modified, you must reload() the affected modules and
re-import any specific items (e.g. from foo import baz) if the changes
are to take effect.  For these reasons, it is preferable to run IDLE
with the default subprocess if at all possible.

Deprecated since version 3.4.


File: python.info,  Node: Help and preferences,  Prev: Startup and code execution,  Up: IDLE

5.24.6.22 Help and preferences
..............................

* Menu:

* Additional help sources::
* Setting preferences::
* Extensions::


File: python.info,  Node: Additional help sources,  Next: Setting preferences,  Up: Help and preferences

5.24.6.23 Additional help sources
.................................

IDLE includes a help menu entry called “Python Docs” that will open
the extensive sources of help, including tutorials, available at
docs.python.org.  Selected URLs can be added or removed from the help
menu at any time using the Configure IDLE dialog. See the IDLE help
option in the help menu of IDLE for more information.


File: python.info,  Node: Setting preferences,  Next: Extensions,  Prev: Additional help sources,  Up: Help and preferences

5.24.6.24 Setting preferences
.............................

The font preferences, highlighting, keys, and general preferences can be
changed via Configure IDLE on the Option menu.  Keys can be user
defined; IDLE ships with four built in key sets. In addition a user can
create a custom key set in the Configure IDLE dialog under the keys tab.


File: python.info,  Node: Extensions,  Prev: Setting preferences,  Up: Help and preferences

5.24.6.25 Extensions
....................

IDLE contains an extension facility.  Peferences for extensions can be
changed with Configure Extensions. See the beginning of
config-extensions.def in the idlelib directory for further information.
The default extensions are currently:

   * FormatParagraph

   * AutoExpand

   * ZoomHeight

   * ScriptBinding

   * CallTips

   * ParenMatch

   * AutoComplete

   * CodeContext

   * RstripExtension


File: python.info,  Node: Other Graphical User Interface Packages,  Prev: IDLE,  Up: Graphical User Interfaces with Tk

5.24.7 Other Graphical User Interface Packages
----------------------------------------------

Major cross-platform (Windows, Mac OS X, Unix-like) GUI toolkits are
available for Python:

See also
........

PyGTK(1)
     is a set of bindings for the GTK(2) widget set. It provides an
     object oriented interface that is slightly higher level than the C
     one. It comes with many more widgets than Tkinter provides, and has
     good Python-specific reference documentation. There are also
     bindings to GNOME(3).  An online tutorial(4) is available.

PyQt(5)
     PyQt is a `sip'-wrapped binding to the Qt toolkit.  Qt is an
     extensive C++ GUI application development framework that is
     available for Unix, Windows and Mac OS X. `sip' is a tool for
     generating bindings for C++ libraries as Python classes, and is
     specifically designed for Python. The `PyQt3' bindings have a
     book, GUI Programming with Python: QT Edition(6) by Boudewijn
     Rempt. The `PyQt4' bindings also have a book, Rapid GUI
     Programming with Python and Qt(7), by Mark Summerfield.

wxPython(8)
     wxPython is a cross-platform GUI toolkit for Python that is built
     around the popular wxWidgets(9) (formerly wxWindows) C++ toolkit.
     It provides a native look and feel for applications on Windows,
     Mac OS X, and Unix systems by using each platform’s native
     widgets where ever possible, (GTK+ on Unix-like systems).  In
     addition to an extensive set of widgets, wxPython provides classes
     for online documentation and context sensitive help, printing,
     HTML viewing, low-level device context drawing, drag and drop,
     system clipboard access, an XML-based resource format and more,
     including an ever growing library of user-contributed modules.
     wxPython has a book, wxPython in Action(10), by Noel Rappin and
     Robin Dunn.

PyGTK, PyQt, and wxPython, all have a modern look and feel and more
widgets than Tkinter. In addition, there are many other GUI toolkits for
Python, both cross-platform, and platform-specific. See the GUI
Programming(11) page in the Python Wiki for a much more complete list,
and also for links to documents where the different GUI toolkits are
compared.

---------- Footnotes ----------

(1) http://www.pygtk.org/

(2) http://www.gtk.org/

(3) https://www.gnome.org/

(4) http://www.pygtk.org/pygtk2tutorial/index.html

(5) https://riverbankcomputing.com/software/pyqt/intro

(6) https://www.commandprompt.com/community/pyqt/

(7) https://www.qtrac.eu/pyqtbook.html

(8) http://www.wxpython.org

(9) https://www.wxwidgets.org/

(10) https://www.manning.com/books/wxpython-in-action

(11) https://wiki.python.org/moin/GuiProgramming


File: python.info,  Node: Development Tools,  Next: Debugging and Profiling,  Prev: Graphical User Interfaces with Tk,  Up: The Python Standard Library

5.25 Development Tools
======================

The modules described in this chapter help you write software.  For
example, the *Note pydoc: 140. module takes a module and generates
documentation based on the module’s contents.  The *Note doctest: b5.
and *Note unittest: 187. modules contains frameworks for writing unit
tests that automatically exercise code and verify that the expected
output is produced.  `2to3' can translate Python 2.x source code into
valid Python 3.x code.

The list of modules described in this chapter is:

* Menu:

* pydoc — Documentation generator and online help system::
* doctest — Test interactive Python examples::
* unittest — Unit testing framework::
* 2to3 - Automated Python 2 to 3 code translation::
* test — Regression tests package for Python::
* test.test_support — Utility functions for tests: test test_support — Utility functions for tests.


File: python.info,  Node: pydoc — Documentation generator and online help system,  Next: doctest — Test interactive Python examples,  Up: Development Tools

5.25.1 `pydoc' — Documentation generator and online help system
-----------------------------------------------------------------

New in version 2.1.

`Source code:' Lib/pydoc.py(1)

__________________________________________________________________

The *Note pydoc: 140. module automatically generates documentation from
Python modules.  The documentation can be presented as pages of text on
the console, served to a Web browser, or saved to HTML files.

For modules, classes, functions and methods, the displayed
documentation is derived from the docstring (i.e. the `__doc__'
attribute) of the object, and recursively of its documentable members.
If there is no docstring, *Note pydoc: 140. tries to obtain a
description from the block of comment lines just above the definition
of the class, function or method in the source file, or at the top of
the module (see *Note inspect.getcomments(): 2295.).

The built-in function *Note help(): 4b6. invokes the online help system
in the interactive interpreter, which uses *Note pydoc: 140. to
generate its documentation as text on the console.  The same text
documentation can also be viewed from outside the Python interpreter by
running `pydoc' as a script at the operating system’s command prompt.
For example, running

    pydoc sys

at a shell prompt will display documentation on the *Note sys: 16d.
module, in a style similar to the manual pages shown by the Unix `man'
command.  The argument to `pydoc' can be the name of a function,
module, or package, or a dotted reference to a class, method, or
function within a module or module in a package.  If the argument to
`pydoc' looks like a path (that is, it contains the path separator for
your operating system, such as a slash in Unix), and refers to an
existing Python source file, then documentation is produced for that
file.

     Note: In order to find objects and their documentation, *Note
     pydoc: 140. imports the module(s) to be documented.  Therefore,
     any code on module level will be executed on that occasion.  Use
     an `if __name__ == '__main__':' guard to only execute code when a
     file is invoked as a script and not just imported.

When printing output to the console, `pydoc' attempts to paginate the
output for easier reading.  If the `PAGER' environment variable is set,
`pydoc' will use its value as a pagination program.

Specifying a `-w' flag before the argument will cause HTML documentation
to be written out to a file in the current directory, instead of
displaying text on the console.

Specifying a `-k' flag before the argument will search the synopsis
lines of all available modules for the keyword given as the argument,
again in a manner similar to the Unix `man' command.  The synopsis line
of a module is the first line of its documentation string.

You can also use `pydoc' to start an HTTP server on the local machine
that will serve documentation to visiting Web browsers. `pydoc -p 1234'
will start a HTTP server on port 1234, allowing you to browse the
documentation at `http://localhost:1234/' in your preferred Web browser.
`pydoc -g' will start the server and additionally bring up a small
*Note Tkinter: 17d.-based graphical interface to help you search for
documentation pages.

When `pydoc' generates documentation, it uses the current environment
and path to locate modules.  Thus, invoking `pydoc spam' documents
precisely the version of the module you would get if you started the
Python interpreter and typed `import spam'.

Module docs for core modules are assumed to reside in
<https://docs.python.org/library/>.  This can be overridden by setting
the `PYTHONDOCS' environment variable to a different URL or to a local
directory containing the Library Reference Manual pages.

---------- Footnotes ----------

(1) https://hg.python.org/cpython/file/2.7/Lib/pydoc.py


File: python.info,  Node: doctest — Test interactive Python examples,  Next: unittest — Unit testing framework,  Prev: pydoc — Documentation generator and online help system,  Up: Development Tools

5.25.2 `doctest' — Test interactive Python examples
-----------------------------------------------------

The *Note doctest: b5. module searches for pieces of text that look
like interactive Python sessions, and then executes those sessions to
verify that they work exactly as shown.  There are several common ways
to use doctest:

   * To check that a module’s docstrings are up-to-date by verifying
     that all interactive examples still work as documented.

   * To perform regression testing by verifying that interactive
     examples from a test file or a test object work as expected.

   * To write tutorial documentation for a package, liberally
     illustrated with input-output examples.  Depending on whether the
     examples or the expository text are emphasized, this has the
     flavor of “literate testing” or “executable documentation”.

Here’s a complete but small example module:

    """
    This is the "example" module.

    The example module supplies one function, factorial().  For example,

    >>> factorial(5)
    120
    """

    def factorial(n):
        """Return the factorial of n, an exact integer >= 0.

        If the result is small enough to fit in an int, return an int.
        Else return a long.

        >>> [factorial(n) for n in range(6)]
        [1, 1, 2, 6, 24, 120]
        >>> [factorial(long(n)) for n in range(6)]
        [1, 1, 2, 6, 24, 120]
        >>> factorial(30)
        265252859812191058636308480000000L
        >>> factorial(30L)
        265252859812191058636308480000000L
        >>> factorial(-1)
        Traceback (most recent call last):
            ...
        ValueError: n must be >= 0

        Factorials of floats are OK, but the float must be an exact integer:
        >>> factorial(30.1)
        Traceback (most recent call last):
            ...
        ValueError: n must be exact integer
        >>> factorial(30.0)
        265252859812191058636308480000000L

        It must also not be ridiculously large:
        >>> factorial(1e100)
        Traceback (most recent call last):
            ...
        OverflowError: n too large
        """

        import math
        if not n >= 0:
            raise ValueError("n must be >= 0")
        if math.floor(n) != n:
            raise ValueError("n must be exact integer")
        if n+1 == n:  # catch a value like 1e300
            raise OverflowError("n too large")
        result = 1
        factor = 2
        while factor <= n:
            result *= factor
            factor += 1
        return result


    if __name__ == "__main__":
        import doctest
        doctest.testmod()

If you run `example.py' directly from the command line, *Note doctest:
b5.  works its magic:

    $ python example.py
    $

There’s no output!  That’s normal, and it means all the examples
worked.  Pass `-v' to the script, and *Note doctest: b5. prints a
detailed log of what it’s trying, and prints a summary at the end:

    $ python example.py -v
    Trying:
        factorial(5)
    Expecting:
        120
    ok
    Trying:
        [factorial(n) for n in range(6)]
    Expecting:
        [1, 1, 2, 6, 24, 120]
    ok
    Trying:
        [factorial(long(n)) for n in range(6)]
    Expecting:
        [1, 1, 2, 6, 24, 120]
    ok

And so on, eventually ending with:

    Trying:
        factorial(1e100)
    Expecting:
        Traceback (most recent call last):
            ...
        OverflowError: n too large
    ok
    2 items passed all tests:
       1 tests in __main__
       8 tests in __main__.factorial
    9 tests in 2 items.
    9 passed and 0 failed.
    Test passed.
    $

That’s all you need to know to start making productive use of *Note
doctest: b5.!  Jump in.  The following sections provide full details.
Note that there are many examples of doctests in the standard Python
test suite and libraries.  Especially useful examples can be found in
the standard test file `Lib/test/test_doctest.py'.

* Menu:

* Simple Usage; Checking Examples in Docstrings: Simple Usage Checking Examples in Docstrings.
* Simple Usage; Checking Examples in a Text File: Simple Usage Checking Examples in a Text File.
* How It Works::
* Basic API::
* Unittest API::
* Advanced API::
* Debugging::
* Soapbox::


File: python.info,  Node: Simple Usage Checking Examples in Docstrings,  Next: Simple Usage Checking Examples in a Text File,  Up: doctest — Test interactive Python examples

5.25.2.1 Simple Usage: Checking Examples in Docstrings
......................................................

The simplest way to start using doctest (but not necessarily the way
you’ll continue to do it) is to end each module `M' with:

    if __name__ == "__main__":
        import doctest
        doctest.testmod()

*Note doctest: b5. then examines docstrings in module `M'.

Running the module as a script causes the examples in the docstrings to
get executed and verified:

    python M.py

This won’t display anything unless an example fails, in which case
the failing example(s) and the cause(s) of the failure(s) are printed
to stdout, and the final line of output is `***Test Failed*** N
failures.', where `N' is the number of examples that failed.

Run it with the `-v' switch instead:

    python M.py -v

and a detailed report of all examples tried is printed to standard
output, along with assorted summaries at the end.

You can force verbose mode by passing `verbose=True' to *Note
testmod(): 42a, or prohibit it by passing `verbose=False'.  In either
of those cases, `sys.argv' is not examined by *Note testmod(): 42a. (so
passing `-v' or not has no effect).

Since Python 2.6, there is also a command line shortcut for running
*Note testmod(): 42a.  You can instruct the Python interpreter to run
the doctest module directly from the standard library and pass the
module name(s) on the command line:

    python -m doctest -v example.py

This will import `example.py' as a standalone module and run *Note
testmod(): 42a. on it.  Note that this may not work correctly if the
file is part of a package and imports other submodules from that
package.

For more information on *Note testmod(): 42a, see section *Note Basic
API: 229a.


File: python.info,  Node: Simple Usage Checking Examples in a Text File,  Next: How It Works,  Prev: Simple Usage Checking Examples in Docstrings,  Up: doctest — Test interactive Python examples

5.25.2.2 Simple Usage: Checking Examples in a Text File
.......................................................

Another simple application of doctest is testing interactive examples
in a text file.  This can be done with the *Note testfile(): 229d.
function:

    import doctest
    doctest.testfile("example.txt")

That short script executes and verifies any interactive Python examples
contained in the file `example.txt'.  The file content is treated as if
it were a single giant docstring; the file doesn’t need to contain a
Python program!   For example, perhaps `example.txt' contains this:

    The ``example`` module
    ======================

    Using ``factorial``
    -------------------

    This is an example text file in reStructuredText format.  First import
    ``factorial`` from the ``example`` module:

        >>> from example import factorial

    Now use it:

        >>> factorial(6)
        120

Running `doctest.testfile("example.txt")' then finds the error in this
documentation:

    File "./example.txt", line 14, in example.txt
    Failed example:
        factorial(6)
    Expected:
        120
    Got:
        720

As with *Note testmod(): 42a, *Note testfile(): 229d. won’t display
anything unless an example fails.  If an example does fail, then the
failing example(s) and the cause(s) of the failure(s) are printed to
stdout, using the same format as *Note testmod(): 42a.

By default, *Note testfile(): 229d. looks for files in the calling
module’s directory.  See section *Note Basic API: 229a. for a
description of the optional arguments that can be used to tell it to
look for files in other locations.

Like *Note testmod(): 42a, *Note testfile(): 229d.’s verbosity can be
set with the `-v' command-line switch or with the optional keyword
argument `verbose'.

Since Python 2.6, there is also a command line shortcut for running
*Note testfile(): 229d.  You can instruct the Python interpreter to run
the doctest module directly from the standard library and pass the file
name(s) on the command line:

    python -m doctest -v example.txt

Because the file name does not end with `.py', *Note doctest: b5.
infers that it must be run with *Note testfile(): 229d, not *Note
testmod(): 42a.

For more information on *Note testfile(): 229d, see section *Note Basic
API: 229a.


File: python.info,  Node: How It Works,  Next: Basic API,  Prev: Simple Usage Checking Examples in a Text File,  Up: doctest — Test interactive Python examples

5.25.2.3 How It Works
.....................

This section examines in detail how doctest works: which docstrings it
looks at, how it finds interactive examples, what execution context it
uses, how it handles exceptions, and how option flags can be used to
control its behavior.  This is the information that you need to know to
write doctest examples; for information about actually running doctest
on these examples, see the following sections.

* Menu:

* Which Docstrings Are Examined?::
* How are Docstring Examples Recognized?::
* What’s the Execution Context?::
* What About Exceptions?::
* Option Flags::
* Directives::
* Warnings::


File: python.info,  Node: Which Docstrings Are Examined?,  Next: How are Docstring Examples Recognized?,  Up: How It Works

5.25.2.4 Which Docstrings Are Examined?
.......................................

The module docstring, and all function, class and method docstrings are
searched.  Objects imported into the module are not searched.

In addition, if `M.__test__' exists and “is true”, it must be a
dict, and each entry maps a (string) name to a function object, class
object, or string.  Function and class object docstrings found from
`M.__test__' are searched, and strings are treated as if they were
docstrings.  In output, a key `K' in `M.__test__' appears with name

    <name of M>.__test__.K

Any classes found are recursively searched similarly, to test
docstrings in their contained methods and nested classes.

Changed in version 2.4: A “private name” concept is deprecated and
no longer documented.


File: python.info,  Node: How are Docstring Examples Recognized?,  Next: What’s the Execution Context?,  Prev: Which Docstrings Are Examined?,  Up: How It Works

5.25.2.5 How are Docstring Examples Recognized?
...............................................

In most cases a copy-and-paste of an interactive console session works
fine, but doctest isn’t trying to do an exact emulation of any
specific Python shell.

    >>> # comments are ignored
    >>> x = 12
    >>> x
    12
    >>> if x == 13:
    ...     print "yes"
    ... else:
    ...     print "no"
    ...     print "NO"
    ...     print "NO!!!"
    ...
    no
    NO
    NO!!!
    >>>

Any expected output must immediately follow the final `'>>> '' or `'...
'' line containing the code, and the expected output (if any) extends
to the next `'>>> '' or all-whitespace line.

The fine print:

   * Expected output cannot contain an all-whitespace line, since such
     a line is taken to signal the end of expected output.  If expected
     output does contain a blank line, put `<BLANKLINE>' in your
     doctest example each place a blank line is expected.

     New in version 2.4: `<BLANKLINE>' was added; there was no way to
     use expected output containing empty lines in previous versions.

   * All hard tab characters are expanded to spaces, using 8-column tab
     stops.  Tabs in output generated by the tested code are not
     modified.  Because any hard tabs in the sample output `are'
     expanded, this means that if the code output includes hard tabs,
     the only way the doctest can pass is if the *Note
     NORMALIZE_WHITESPACE: 22a4. option or *Note directive: 22a5.  is
     in effect.  Alternatively, the test can be rewritten to capture
     the output and compare it to an expected value as part of the
     test.  This handling of tabs in the source was arrived at through
     trial and error, and has proven to be the least error prone way of
     handling them.  It is possible to use a different algorithm for
     handling tabs by writing a custom *Note DocTestParser: 22a6. class.

     Changed in version 2.4: Expanding tabs to spaces is new; previous
     versions tried to preserve hard tabs, with confusing results.

   * Output to stdout is captured, but not output to stderr (exception
     tracebacks are captured via a different means).

   * If you continue a line via backslashing in an interactive session,
     or for any other reason use a backslash, you should use a raw
     docstring, which will preserve your backslashes exactly as you
     type them:

         >>> def f(x):
         ...     r'''Backslashes in a raw docstring: m\n'''
         >>> print f.__doc__
         Backslashes in a raw docstring: m\n

     Otherwise, the backslash will be interpreted as part of the
     string. For example, the `\n' above would be interpreted as a
     newline character.  Alternatively, you can double each backslash
     in the doctest version (and not use a raw string):

         >>> def f(x):
         ...     '''Backslashes in a raw docstring: m\\n'''
         >>> print f.__doc__
         Backslashes in a raw docstring: m\n

   * The starting column doesn’t matter:

         >>> assert "Easy!"
               >>> import math
                   >>> math.floor(1.9)
                   1.0

     and as many leading whitespace characters are stripped from the
     expected output as appeared in the initial `'>>> '' line that
     started the example.


File: python.info,  Node: What’s the Execution Context?,  Next: What About Exceptions?,  Prev: How are Docstring Examples Recognized?,  Up: How It Works

5.25.2.6 What’s the Execution Context?
........................................

By default, each time *Note doctest: b5. finds a docstring to test, it
uses a `shallow copy' of `M'’s globals, so that running tests
doesn’t change the module’s real globals, and so that one test in
`M' can’t leave behind crumbs that accidentally allow another test to
work.  This means examples can freely use any names defined at
top-level in `M', and names defined earlier in the docstring being run.
Examples cannot see names defined in other docstrings.

You can force use of your own dict as the execution context by passing
`globs=your_dict' to *Note testmod(): 42a. or *Note testfile(): 229d.
instead.


File: python.info,  Node: What About Exceptions?,  Next: Option Flags,  Prev: What’s the Execution Context?,  Up: How It Works

5.25.2.7 What About Exceptions?
...............................

No problem, provided that the traceback is the only output produced by
the example:  just paste in the traceback. (1) Since tracebacks contain
details that are likely to change rapidly (for example, exact file
paths and line numbers), this is one case where doctest works hard to
be flexible in what it accepts.

Simple example:

    >>> [1, 2, 3].remove(42)
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: list.remove(x): x not in list

That doctest succeeds if *Note ValueError: 236. is raised, with the
`list.remove(x): x not in list' detail as shown.

The expected output for an exception must start with a traceback
header, which may be either of the following two lines, indented the
same as the first line of the example:

    Traceback (most recent call last):
    Traceback (innermost last):

The traceback header is followed by an optional traceback stack, whose
contents are ignored by doctest.  The traceback stack is typically
omitted, or copied verbatim from an interactive session.

The traceback stack is followed by the most interesting part: the
line(s) containing the exception type and detail.  This is usually the
last line of a traceback, but can extend across multiple lines if the
exception has a multi-line detail:

    >>> raise ValueError('multi\n    line\ndetail')
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: multi
        line
    detail

The last three lines (starting with *Note ValueError: 236.) are
compared against the exception’s type and detail, and the rest are
ignored.

Changed in version 2.4: Previous versions were unable to handle
multi-line exception details.

Best practice is to omit the traceback stack, unless it adds significant
documentation value to the example.  So the last example is probably
better as:

    >>> raise ValueError('multi\n    line\ndetail')
    Traceback (most recent call last):
        ...
    ValueError: multi
        line
    detail

Note that tracebacks are treated very specially.  In particular, in the
rewritten example, the use of `...' is independent of doctest’s *Note
ELLIPSIS: 42b. option.  The ellipsis in that example could be left out,
or could just as well be three (or three hundred) commas or digits, or
an indented transcript of a Monty Python skit.

Some details you should read once, but won’t need to remember:

   * Doctest can’t guess whether your expected output came from an
     exception traceback or from ordinary printing.  So, e.g., an
     example that expects `ValueError: 42 is prime' will pass whether
     *Note ValueError: 236. is actually raised or if the example merely
     prints that traceback text.  In practice, ordinary output rarely
     begins with a traceback header line, so this doesn’t create real
     problems.

   * Each line of the traceback stack (if present) must be indented
     further than the first line of the example, `or' start with a
     non-alphanumeric character.  The first line following the
     traceback header indented the same and starting with an
     alphanumeric is taken to be the start of the exception detail.  Of
     course this does the right thing for genuine tracebacks.

   * When the *Note IGNORE_EXCEPTION_DETAIL: 22ab. doctest option is
     specified, everything following the leftmost colon and any module
     information in the exception name is ignored.

   * The interactive shell omits the traceback header line for some
     *Note SyntaxError: 4b4.s.  But doctest uses the traceback header
     line to distinguish exceptions from non-exceptions.  So in the
     rare case where you need to test a *Note SyntaxError: 4b4. that
     omits the traceback header, you will need to manually add the
     traceback header line to your test example.

   * For some *Note SyntaxError: 4b4.s, Python displays the character
     position of the syntax error, using a `^' marker:

         >>> 1 1
           File "<stdin>", line 1
             1 1
               ^
         SyntaxError: invalid syntax

     Since the lines showing the position of the error come before the
     exception type and detail, they are not checked by doctest.  For
     example, the following test would pass, even though it puts the
     `^' marker in the wrong location:

         >>> 1 1
         Traceback (most recent call last):
           File "<stdin>", line 1
             1 1
             ^
         SyntaxError: invalid syntax

---------- Footnotes ----------

(1) Examples containing both expected output and an exception are not
supported.  Trying to guess where one ends and the other begins is too
error-prone, and that also makes for a confusing test.


File: python.info,  Node: Option Flags,  Next: Directives,  Prev: What About Exceptions?,  Up: How It Works

5.25.2.8 Option Flags
.....................

A number of option flags control various aspects of doctest’s
behavior.  Symbolic names for the flags are supplied as module
constants, which can be or’ed together and passed to various
functions.  The names can also be used in *Note doctest directives:
22a5.

The first group of options define test semantics, controlling aspects
of how doctest decides whether actual output matches an example’s
expected output:

 -- Data: doctest.DONT_ACCEPT_TRUE_FOR_1
     By default, if an expected output block contains just `1', an
     actual output block containing just `1' or just `True' is
     considered to be a match, and similarly for `0' versus `False'.
     When *Note DONT_ACCEPT_TRUE_FOR_1: 22af. is specified, neither
     substitution is allowed.  The default behavior caters to that
     Python changed the return type of many functions from integer to
     boolean; doctests expecting “little integer” output still work
     in these cases.  This option will probably go away, but not for
     several years.

 -- Data: doctest.DONT_ACCEPT_BLANKLINE
     By default, if an expected output block contains a line containing
     only the string `<BLANKLINE>', then that line will match a blank
     line in the actual output.  Because a genuinely blank line
     delimits the expected output, this is the only way to communicate
     that a blank line is expected.  When *Note DONT_ACCEPT_BLANKLINE:
     22b0. is specified, this substitution is not allowed.

 -- Data: doctest.NORMALIZE_WHITESPACE
     When specified, all sequences of whitespace (blanks and newlines)
     are treated as equal.  Any sequence of whitespace within the
     expected output will match any sequence of whitespace within the
     actual output. By default, whitespace must match exactly. *Note
     NORMALIZE_WHITESPACE: 22a4. is especially useful when a line of
     expected output is very long, and you want to wrap it across
     multiple lines in your source.

 -- Data: doctest.ELLIPSIS
     When specified, an ellipsis marker (`...') in the expected output
     can match any substring in the actual output.  This includes
     substrings that span line boundaries, and empty substrings, so
     it’s best to keep usage of this simple.  Complicated uses can
     lead to the same kinds of “oops, it matched too much!”
     surprises that `.*' is prone to in regular expressions.

 -- Data: doctest.IGNORE_EXCEPTION_DETAIL
     When specified, an example that expects an exception passes if an
     exception of the expected type is raised, even if the exception
     detail does not match.  For example, an example expecting
     `ValueError: 42' will pass if the actual exception raised is
     `ValueError: 3*14', but will fail, e.g., if *Note TypeError: 218.
     is raised.

     It will also ignore the module name used in Python 3 doctest
     reports. Hence both of these variations will work with the flag
     specified, regardless of whether the test is run under Python 2.7
     or Python 3.2 (or later versions):

         >>> raise CustomError('message')
         Traceback (most recent call last):
         CustomError: message

         >>> raise CustomError('message')
         Traceback (most recent call last):
         my_module.CustomError: message

     Note that *Note ELLIPSIS: 42b. can also be used to ignore the
     details of the exception message, but such a test may still fail
     based on whether or not the module details are printed as part of
     the exception name. Using *Note IGNORE_EXCEPTION_DETAIL: 22ab. and
     the details from Python 2.3 is also the only clear way to write a
     doctest that doesn’t care about the exception detail yet
     continues to pass under Python 2.3 or earlier (those releases do
     not support *Note doctest directives: 22a5. and ignore them as
     irrelevant comments). For example:

         >>> (1, 2)[3] = 'moo'
         Traceback (most recent call last):
           File "<stdin>", line 1, in ?
         TypeError: object doesn't support item assignment

     passes under Python 2.3 and later Python versions with the flag
     specified, even though the detail changed in Python 2.4 to say
     “does not” instead of “doesn’t”.

     Changed in version 2.7: *Note IGNORE_EXCEPTION_DETAIL: 22ab. now
     also ignores any information relating to the module containing the
     exception under test


 -- Data: doctest.SKIP
     When specified, do not run the example at all.  This can be useful
     in contexts where doctest examples serve as both documentation and
     test cases, and an example should be included for documentation
     purposes, but should not be checked.  E.g., the example’s output
     might be random; or the example might depend on resources which
     would be unavailable to the test driver.

     The SKIP flag can also be used for temporarily “commenting
     out” examples.

New in version 2.5.

 -- Data: doctest.COMPARISON_FLAGS
     A bitmask or’ing together all the comparison flags above.

The second group of options controls how test failures are reported:

 -- Data: doctest.REPORT_UDIFF
     When specified, failures that involve multi-line expected and
     actual outputs are displayed using a unified diff.

 -- Data: doctest.REPORT_CDIFF
     When specified, failures that involve multi-line expected and
     actual outputs will be displayed using a context diff.

 -- Data: doctest.REPORT_NDIFF
     When specified, differences are computed by `difflib.Differ',
     using the same algorithm as the popular `ndiff.py' utility. This
     is the only method that marks differences within lines as well as
     across lines.  For example, if a line of expected output contains
     digit `1' where actual output contains letter `l', a line is
     inserted with a caret marking the mismatching column positions.

 -- Data: doctest.REPORT_ONLY_FIRST_FAILURE
     When specified, display the first failing example in each doctest,
     but suppress output for all remaining examples.  This will prevent
     doctest from reporting correct examples that break because of
     earlier failures; but it might also hide incorrect examples that
     fail independently of the first failure.  When *Note
     REPORT_ONLY_FIRST_FAILURE: 22b3. is specified, the remaining
     examples are still run, and still count towards the total number
     of failures reported; only the output is suppressed.

 -- Data: doctest.REPORTING_FLAGS
     A bitmask or’ing together all the reporting flags above.

New in version 2.4: The constants *Note DONT_ACCEPT_BLANKLINE: 22b0,
*Note NORMALIZE_WHITESPACE: 22a4, *Note ELLIPSIS: 42b, *Note
IGNORE_EXCEPTION_DETAIL: 22ab, *Note REPORT_UDIFF: 42c, *Note
REPORT_CDIFF: 42d, *Note REPORT_NDIFF: 42e, *Note
REPORT_ONLY_FIRST_FAILURE: 22b3, *Note COMPARISON_FLAGS: 22b2. and
*Note REPORTING_FLAGS: 22b4. were added.

There’s also a way to register new option flag names, although this
isn’t useful unless you intend to extend *Note doctest: b5. internals
via subclassing:

 -- Function: doctest.register_optionflag (name)
     Create a new option flag with a given name, and return the new
     flag’s integer value.  *Note register_optionflag(): 22b5. can be
     used when subclassing *Note OutputChecker: 22b6. or *Note
     DocTestRunner: 22b7. to create new options that are supported by
     your subclasses.  *Note register_optionflag(): 22b5. should always
     be called using the following idiom:

         MY_FLAG = register_optionflag('MY_FLAG')

     New in version 2.4.



File: python.info,  Node: Directives,  Next: Warnings,  Prev: Option Flags,  Up: How It Works

5.25.2.9 Directives
...................

Doctest directives may be used to modify the *Note option flags: 22ae.
for an individual example.  Doctest directives are special Python
comments following an example’s source code:

    directive             ::= "#" "doctest:" directive_options
    directive_options     ::= directive_option ("," directive_option)\*
    directive_option      ::= on_or_off directive_option_name
    on_or_off             ::= "+" \| "-"
    directive_option_name ::= "DONT_ACCEPT_BLANKLINE" \| "NORMALIZE_WHITESPACE" \| ...

Whitespace is not allowed between the `+' or `-' and the directive
option name.  The directive option name can be any of the option flag
names explained above.

An example’s doctest directives modify doctest’s behavior for that
single example.  Use `+' to enable the named behavior, or `-' to
disable it.

For example, this test passes:

    >>> print range(20) # doctest: +NORMALIZE_WHITESPACE
    [0,   1,  2,  3,  4,  5,  6,  7,  8,  9,
    10,  11, 12, 13, 14, 15, 16, 17, 18, 19]

Without the directive it would fail, both because the actual output
doesn’t have two blanks before the single-digit list elements, and
because the actual output is on a single line.  This test also passes,
and also requires a directive to do so:

    >>> print range(20) # doctest: +ELLIPSIS
    [0, 1, ..., 18, 19]

Multiple directives can be used on a single physical line, separated by
commas:

    >>> print range(20) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    [0,    1, ...,   18,    19]

If multiple directive comments are used for a single example, then they
are combined:

    >>> print range(20) # doctest: +ELLIPSIS
    ...                 # doctest: +NORMALIZE_WHITESPACE
    [0,    1, ...,   18,    19]

As the previous example shows, you can add `...' lines to your example
containing only directives.  This can be useful when an example is too
long for a directive to comfortably fit on the same line:

    >>> print range(5) + range(10,20) + range(30,40) + range(50,60)
    ... # doctest: +ELLIPSIS
    [0, ..., 4, 10, ..., 19, 30, ..., 39, 50, ..., 59]

Note that since all options are disabled by default, and directives
apply only to the example they appear in, enabling options (via `+' in
a directive) is usually the only meaningful choice.  However, option
flags can also be passed to functions that run doctests, establishing
different defaults.  In such cases, disabling an option via `-' in a
directive can be useful.

New in version 2.4: Support for doctest directives was added.


File: python.info,  Node: Warnings,  Prev: Directives,  Up: How It Works

5.25.2.10 Warnings
..................

*Note doctest: b5. is serious about requiring exact matches in expected
output.  If even a single character doesn’t match, the test fails.
This will probably surprise you a few times, as you learn exactly what
Python does and doesn’t guarantee about output.  For example, when
printing a dict, Python doesn’t guarantee that the key-value pairs
will be printed in any particular order, so a test like

    >>> foo()
    {"Hermione": "hippogryph", "Harry": "broomstick"}

is vulnerable!  One workaround is to do

    >>> foo() == {"Hermione": "hippogryph", "Harry": "broomstick"}
    True

instead.  Another is to do

    >>> d = foo().items()
    >>> d.sort()
    >>> d
    [('Harry', 'broomstick'), ('Hermione', 'hippogryph')]

There are others, but you get the idea.

Another bad idea is to print things that embed an object address, like

    >>> id(1.0) # certain to fail some of the time
    7948648
    >>> class C: pass
    >>> C()   # the default repr() for instances embeds an address
    <__main__.C instance at 0x00AC18F0>

The *Note ELLIPSIS: 42b. directive gives a nice approach for the last
example:

    >>> C() #doctest: +ELLIPSIS
    <__main__.C instance at 0x...>

Floating-point numbers are also subject to small output variations
across platforms, because Python defers to the platform C library for
float formatting, and C libraries vary widely in quality here.

    >>> 1./7  # risky
    0.14285714285714285
    >>> print 1./7 # safer
    0.142857142857
    >>> print round(1./7, 6) # much safer
    0.142857

Numbers of the form `I/2.**J' are safe across all platforms, and I often
contrive doctest examples to produce numbers of that form:

    >>> 3./4  # utterly safe
    0.75

Simple fractions are also easier for people to understand, and that
makes for better documentation.


File: python.info,  Node: Basic API,  Next: Unittest API,  Prev: How It Works,  Up: doctest — Test interactive Python examples

5.25.2.11 Basic API
...................

The functions *Note testmod(): 42a. and *Note testfile(): 229d. provide
a simple interface to doctest that should be sufficient for most basic
uses.  For a less formal introduction to these two functions, see
sections *Note Simple Usage; Checking Examples in Docstrings: 2299.
and *Note Simple Usage; Checking Examples in a Text File: 229c.

 -- Function: doctest.testfile (filename[, module_relative][, name][,
          package][, globs][, verbose][, report][, optionflags][,
          extraglobs][, raise_on_error][, parser][, encoding])
     All arguments except `filename' are optional, and should be
     specified in keyword form.

     Test examples in the file named `filename'.  Return
     `(failure_count, test_count)'.

     Optional argument `module_relative' specifies how the filename
     should be interpreted:

        * If `module_relative' is `True' (the default), then `filename'
          specifies an OS-independent module-relative path.  By
          default, this path is relative to the calling module’s
          directory; but if the `package' argument is specified, then it
          is relative to that package.  To ensure OS-independence,
          `filename' should use `/' characters to separate path
          segments, and may not be an absolute path (i.e., it may not
          begin with `/').

        * If `module_relative' is `False', then `filename' specifies an
          OS-specific path.  The path may be absolute or relative;
          relative paths are resolved with respect to the current
          working directory.

     Optional argument `name' gives the name of the test; by default,
     or if `None', `os.path.basename(filename)' is used.

     Optional argument `package' is a Python package or the name of a
     Python package whose directory should be used as the base
     directory for a module-relative filename.  If no package is
     specified, then the calling module’s directory is used as the
     base directory for module-relative filenames.  It is an error to
     specify `package' if `module_relative' is `False'.

     Optional argument `globs' gives a dict to be used as the globals
     when executing examples.  A new shallow copy of this dict is
     created for the doctest, so its examples start with a clean slate.
     By default, or if `None', a new empty dict is used.

     Optional argument `extraglobs' gives a dict merged into the
     globals used to execute examples.  This works like *Note
     dict.update(): 41b.:  if `globs' and `extraglobs' have a common
     key, the associated value in `extraglobs' appears in the combined
     dict.  By default, or if `None', no extra globals are used.  This
     is an advanced feature that allows parameterization of doctests.
     For example, a doctest can be written for a base class, using a
     generic name for the class, then reused to test any number of
     subclasses by passing an `extraglobs' dict mapping the generic
     name to the subclass to be tested.

     Optional argument `verbose' prints lots of stuff if true, and
     prints only failures if false; by default, or if `None', it’s
     true if and only if `'-v'' is in `sys.argv'.

     Optional argument `report' prints a summary at the end when true,
     else prints nothing at the end.  In verbose mode, the summary is
     detailed, else the summary is very brief (in fact, empty if all
     tests passed).

     Optional argument `optionflags' or’s together option flags.  See
     section *Note Option Flags: 22ae.

     Optional argument `raise_on_error' defaults to false.  If true, an
     exception is raised upon the first failure or unexpected exception
     in an example.  This allows failures to be post-mortem debugged.
     Default behavior is to continue running examples.

     Optional argument `parser' specifies a *Note DocTestParser: 22a6.
     (or subclass) that should be used to extract tests from the files.
     It defaults to a normal parser (i.e., `DocTestParser()').

     Optional argument `encoding' specifies an encoding that should be
     used to convert the file to unicode.

     New in version 2.4.

     Changed in version 2.5: The parameter `encoding' was added.


 -- Function: doctest.testmod ([m][, name][, globs][, verbose][,
          report][, optionflags][, extraglobs][, raise_on_error][,
          exclude_empty])
     All arguments are optional, and all except for `m' should be
     specified in keyword form.

     Test examples in docstrings in functions and classes reachable
     from module `m' (or module *Note __main__: 2. if `m' is not
     supplied or is `None'), starting with `m.__doc__'.

     Also test examples reachable from dict `m.__test__', if it exists
     and is not `None'.  `m.__test__' maps names (strings) to
     functions, classes and strings; function and class docstrings are
     searched for examples; strings are searched directly, as if they
     were docstrings.

     Only docstrings attached to objects belonging to module `m' are
     searched.

     Return `(failure_count, test_count)'.

     Optional argument `name' gives the name of the module; by default,
     or if `None', `m.__name__' is used.

     Optional argument `exclude_empty' defaults to false.  If true,
     objects for which no doctests are found are excluded from
     consideration. The default is a backward compatibility hack, so
     that code still using `doctest.master.summarize()' in conjunction
     with *Note testmod(): 42a. continues to get output for objects
     with no tests. The `exclude_empty' argument to the newer *Note
     DocTestFinder: 22c1.  constructor defaults to true.

     Optional arguments `extraglobs', `verbose', `report',
     `optionflags', `raise_on_error', and `globs' are the same as for
     function *Note testfile(): 229d.  above, except that `globs'
     defaults to `m.__dict__'.

     Changed in version 2.3: The parameter `optionflags' was added.

     Changed in version 2.4: The parameters `extraglobs',
     `raise_on_error' and `exclude_empty' were added.

     Changed in version 2.5: The optional argument `isprivate',
     deprecated in 2.4, was removed.


 -- Function: doctest.run_docstring_examples (f, globs[, verbose][,
          name][, compileflags][, optionflags])
     Test examples associated with object `f'; for example, `f' may be
     a string, a module, a function, or a class object.

     A shallow copy of dictionary argument `globs' is used for the
     execution context.

     Optional argument `name' is used in failure messages, and defaults
     to `"NoName"'.

     If optional argument `verbose' is true, output is generated even
     if there are no failures.  By default, output is generated only in
     case of an example failure.

     Optional argument `compileflags' gives the set of flags that
     should be used by the Python compiler when running the examples.
     By default, or if `None', flags are deduced corresponding to the
     set of future features found in `globs'.

     Optional argument `optionflags' works as for function *Note
     testfile(): 229d. above.


File: python.info,  Node: Unittest API,  Next: Advanced API,  Prev: Basic API,  Up: doctest — Test interactive Python examples

5.25.2.12 Unittest API
......................

As your collection of doctest’ed modules grows, you’ll want a way
to run all their doctests systematically.  Prior to Python 2.4, *Note
doctest: b5. had a barely documented `Tester' class that supplied a
rudimentary way to combine doctests from multiple modules. `Tester' was
feeble, and in practice most serious Python testing frameworks build on
the *Note unittest: 187. module, which supplies many flexible ways to
combine tests from multiple sources.  So, in Python 2.4, *Note doctest:
b5.’s `Tester' class is deprecated, and *Note doctest: b5. provides
two functions that can be used to create *Note unittest: 187.  test
suites from modules and text files containing doctests.  To integrate
with *Note unittest: 187. test discovery, include a `load_tests()'
function in your test module:

    import unittest
    import doctest
    import my_module_with_doctests

    def load_tests(loader, tests, ignore):
        tests.addTests(doctest.DocTestSuite(my_module_with_doctests))
        return tests

There are two main functions for creating *Note unittest.TestSuite:
479. instances from text files and modules with doctests:

 -- Function: doctest.DocFileSuite (*paths, [module_relative][,
          package][, setUp][, tearDown][, globs][, optionflags][,
          parser][, encoding])
     Convert doctest tests from one or more text files to a *Note
     unittest.TestSuite: 479.

     The returned *Note unittest.TestSuite: 479. is to be run by the
     unittest framework and runs the interactive examples in each file.
     If an example in any file fails, then the synthesized unit test
     fails, and a `failureException' exception is raised showing the
     name of the file containing the test and a (sometimes approximate)
     line number.

     Pass one or more paths (as strings) to text files to be examined.

     Options may be provided as keyword arguments:

     Optional argument `module_relative' specifies how the filenames in
     `paths' should be interpreted:

        * If `module_relative' is `True' (the default), then each
          filename in `paths' specifies an OS-independent
          module-relative path.  By default, this path is relative to
          the calling module’s directory; but if the `package'
          argument is specified, then it is relative to that package.
          To ensure OS-independence, each filename should use `/'
          characters to separate path segments, and may not be an
          absolute path (i.e., it may not begin with `/').

        * If `module_relative' is `False', then each filename in
          `paths' specifies an OS-specific path.  The path may be
          absolute or relative; relative paths are resolved with
          respect to the current working directory.

     Optional argument `package' is a Python package or the name of a
     Python package whose directory should be used as the base
     directory for module-relative filenames in `paths'.  If no package
     is specified, then the calling module’s directory is used as the
     base directory for module-relative filenames.  It is an error to
     specify `package' if `module_relative' is `False'.

     Optional argument `setUp' specifies a set-up function for the test
     suite.  This is called before running the tests in each file.  The
     `setUp' function will be passed a *Note DocTest: 22c6. object.
     The setUp function can access the test globals as the `globs'
     attribute of the test passed.

     Optional argument `tearDown' specifies a tear-down function for
     the test suite.  This is called after running the tests in each
     file.  The `tearDown' function will be passed a *Note DocTest:
     22c6. object.  The setUp function can access the test globals as
     the `globs' attribute of the test passed.

     Optional argument `globs' is a dictionary containing the initial
     global variables for the tests.  A new copy of this dictionary is
     created for each test.  By default, `globs' is a new empty
     dictionary.

     Optional argument `optionflags' specifies the default doctest
     options for the tests, created by or-ing together individual
     option flags.  See section *Note Option Flags: 22ae. See function
     *Note set_unittest_reportflags(): 22c7. below for a better way to
     set reporting options.

     Optional argument `parser' specifies a *Note DocTestParser: 22a6.
     (or subclass) that should be used to extract tests from the files.
     It defaults to a normal parser (i.e., `DocTestParser()').

     Optional argument `encoding' specifies an encoding that should be
     used to convert the file to unicode.

     New in version 2.4.

     Changed in version 2.5: The global `__file__' was added to the
     globals provided to doctests loaded from a text file using *Note
     DocFileSuite(): 22c5.

     Changed in version 2.5: The parameter `encoding' was added.

          Note: Unlike *Note testmod(): 42a. and *Note DocTestFinder:
          22c1, this function raises a *Note ValueError: 236. if
          `module' contains no docstrings.  You can prevent this error
          by passing a *Note DocTestFinder: 22c1. instance as the
          `test_finder' argument with its `exclude_empty' keyword
          argument set to `False':

              >>> finder = doctest.DocTestFinder(exclude_empty=False)
              >>> suite = doctest.DocTestSuite(test_finder=finder)

 -- Function: doctest.DocTestSuite ([module][, globs][, extraglobs][,
          test_finder][, setUp][, tearDown][, checker])
     Convert doctest tests for a module to a *Note unittest.TestSuite:
     479.

     The returned *Note unittest.TestSuite: 479. is to be run by the
     unittest framework and runs each doctest in the module.  If any of
     the doctests fail, then the synthesized unit test fails, and a
     `failureException' exception is raised showing the name of the
     file containing the test and a (sometimes approximate) line number.

     Optional argument `module' provides the module to be tested.  It
     can be a module object or a (possibly dotted) module name.  If not
     specified, the module calling this function is used.

     Optional argument `globs' is a dictionary containing the initial
     global variables for the tests.  A new copy of this dictionary is
     created for each test.  By default, `globs' is a new empty
     dictionary.

     Optional argument `extraglobs' specifies an extra set of global
     variables, which is merged into `globs'.  By default, no extra
     globals are used.

     Optional argument `test_finder' is the *Note DocTestFinder: 22c1.
     object (or a drop-in replacement) that is used to extract doctests
     from the module.

     Optional arguments `setUp', `tearDown', and `optionflags' are the
     same as for function *Note DocFileSuite(): 22c5. above.

     New in version 2.3.

     Changed in version 2.4: The parameters `globs', `extraglobs',
     `test_finder', `setUp', `tearDown', and `optionflags' were added;
     this function now uses the same search technique as *Note
     testmod(): 42a.


Under the covers, *Note DocTestSuite(): 22c8. creates a *Note
unittest.TestSuite: 479. out of `doctest.DocTestCase' instances, and
`DocTestCase' is a subclass of *Note unittest.TestCase: 285.
`DocTestCase' isn’t documented here (it’s an internal detail), but
studying its code can answer questions about the exact details of *Note
unittest: 187. integration.

Similarly, *Note DocFileSuite(): 22c5. creates a *Note
unittest.TestSuite: 479. out of `doctest.DocFileCase' instances, and
`DocFileCase' is a subclass of `DocTestCase'.

So both ways of creating a *Note unittest.TestSuite: 479. run instances
of `DocTestCase'.  This is important for a subtle reason: when you run
*Note doctest: b5. functions yourself, you can control the *Note
doctest: b5. options in use directly, by passing option flags to *Note
doctest: b5. functions.  However, if you’re writing a *Note unittest:
187. framework, *Note unittest: 187. ultimately controls when and how
tests get run.  The framework author typically wants to control *Note
doctest: b5. reporting options (perhaps, e.g., specified by command line
options), but there’s no way to pass options through *Note unittest:
187. to *Note doctest: b5. test runners.

For this reason, *Note doctest: b5. also supports a notion of *Note
doctest: b5.  reporting flags specific to *Note unittest: 187. support,
via this function:

 -- Function: doctest.set_unittest_reportflags (flags)
     Set the *Note doctest: b5. reporting flags to use.

     Argument `flags' or’s together option flags.  See section *Note
     Option Flags: 22ae.  Only “reporting flags” can be used.

     This is a module-global setting, and affects all future doctests
     run by module *Note unittest: 187.:  the `runTest()' method of
     `DocTestCase' looks at the option flags specified for the test
     case when the `DocTestCase' instance was constructed.  If no
     reporting flags were specified (which is the typical and expected
     case), *Note doctest: b5.’s *Note unittest: 187. reporting flags
     are or’ed into the option flags, and the option flags so
     augmented are passed to the *Note DocTestRunner: 22b7. instance
     created to run the doctest.  If any reporting flags were specified
     when the `DocTestCase' instance was constructed, *Note doctest:
     b5.’s *Note unittest: 187. reporting flags are ignored.

     The value of the *Note unittest: 187. reporting flags in effect
     before the function was called is returned by the function.

     New in version 2.4.



File: python.info,  Node: Advanced API,  Next: Debugging,  Prev: Unittest API,  Up: doctest — Test interactive Python examples

5.25.2.13 Advanced API
......................

The basic API is a simple wrapper that’s intended to make doctest
easy to use.  It is fairly flexible, and should meet most users’
needs; however, if you require more fine-grained control over testing,
or wish to extend doctest’s capabilities, then you should use the
advanced API.

The advanced API revolves around two container classes, which are used
to store the interactive examples extracted from doctest cases:

   * *Note Example: 22cb.: A single Python *Note statement: df3, paired
     with its expected output.

   * *Note DocTest: 22c6.: A collection of *Note Example: 22cb.s,
     typically extracted from a single docstring or text file.

Additional processing classes are defined to find, parse, and run, and
check doctest examples:

   * *Note DocTestFinder: 22c1.: Finds all docstrings in a given
     module, and uses a *Note DocTestParser: 22a6. to create a *Note
     DocTest: 22c6. from every docstring that contains interactive
     examples.

   * *Note DocTestParser: 22a6.: Creates a *Note DocTest: 22c6. object
     from a string (such as an object’s docstring).

   * *Note DocTestRunner: 22b7.: Executes the examples in a *Note
     DocTest: 22c6, and uses an *Note OutputChecker: 22b6. to verify
     their output.

   * *Note OutputChecker: 22b6.: Compares the actual output from a
     doctest example with the expected output, and decides whether they
     match.

The relationships among these processing classes are summarized in the
following diagram:

                                list of:
    +------+                   +---------+
    |module| --DocTestFinder-> | DocTest | --DocTestRunner-> results
    +------+    |        ^     +---------+     |       ^    (printed)
                |        |     | Example |     |       |
                v        |     |   ...   |     v       |
               DocTestParser   | Example |   OutputChecker
                               +---------+

* Menu:

* DocTest Objects::
* Example Objects::
* DocTestFinder objects::
* DocTestParser objects::
* DocTestRunner objects::
* OutputChecker objects::


File: python.info,  Node: DocTest Objects,  Next: Example Objects,  Up: Advanced API

5.25.2.14 DocTest Objects
.........................

 -- Class: doctest.DocTest (examples, globs, name, filename, lineno,
          docstring)
     A collection of doctest examples that should be run in a single
     namespace.  The constructor arguments are used to initialize the
     attributes of the same names.

     New in version 2.4.

     *Note DocTest: 22c6. defines the following attributes.  They are
     initialized by the constructor, and should not be modified
     directly.

      -- Attribute: examples
          A list of *Note Example: 22cb. objects encoding the
          individual interactive Python examples that should be run by
          this test.

      -- Attribute: globs
          The namespace (aka globals) that the examples should be run
          in. This is a dictionary mapping names to values.  Any
          changes to the namespace made by the examples (such as
          binding new variables) will be reflected in *Note globs: 22cf.
          after the test is run.

      -- Attribute: name
          A string name identifying the *Note DocTest: 22c6.
          Typically, this is the name of the object or file that the
          test was extracted from.

      -- Attribute: filename
          The name of the file that this *Note DocTest: 22c6. was
          extracted from; or `None' if the filename is unknown, or if
          the *Note DocTest: 22c6. was not extracted from a file.

      -- Attribute: lineno
          The line number within *Note filename: 22d1. where this *Note
          DocTest: 22c6. begins, or `None' if the line number is
          unavailable.  This line number is zero-based with respect to
          the beginning of the file.

      -- Attribute: docstring
          The string that the test was extracted from, or `None' if the
          string is unavailable, or if the test was not extracted from
          a string.


File: python.info,  Node: Example Objects,  Next: DocTestFinder objects,  Prev: DocTest Objects,  Up: Advanced API

5.25.2.15 Example Objects
.........................

 -- Class: doctest.Example (source, want[, exc_msg][, lineno][,
          indent][, options])
     A single interactive example, consisting of a Python statement and
     its expected output.  The constructor arguments are used to
     initialize the attributes of the same names.

     New in version 2.4.

     *Note Example: 22cb. defines the following attributes.  They are
     initialized by the constructor, and should not be modified
     directly.

      -- Attribute: source
          A string containing the example’s source code.  This source
          code consists of a single Python statement, and always ends
          with a newline; the constructor adds a newline when necessary.

      -- Attribute: want
          The expected output from running the example’s source code
          (either from stdout, or a traceback in case of exception).
          *Note want: 22d7. ends with a newline unless no output is
          expected, in which case it’s an empty string.  The
          constructor adds a newline when necessary.

      -- Attribute: exc_msg
          The exception message generated by the example, if the
          example is expected to generate an exception; or `None' if it
          is not expected to generate an exception.  This exception
          message is compared against the return value of *Note
          traceback.format_exception_only(): 22d9.  *Note exc_msg:
          22d8. ends with a newline unless it’s `None'.  The
          constructor adds a newline if needed.

      -- Attribute: lineno
          The line number within the string containing this example
          where the example begins.  This line number is zero-based
          with respect to the beginning of the containing string.

      -- Attribute: indent
          The example’s indentation in the containing string, i.e.,
          the number of space characters that precede the example’s
          first prompt.

      -- Attribute: options
          A dictionary mapping from option flags to `True' or `False',
          which is used to override default options for this example.
          Any option flags not contained in this dictionary are left at
          their default value (as specified by the *Note DocTestRunner:
          22b7.’s `optionflags'). By default, no options are set.


File: python.info,  Node: DocTestFinder objects,  Next: DocTestParser objects,  Prev: Example Objects,  Up: Advanced API

5.25.2.16 DocTestFinder objects
...............................

 -- Class: doctest.DocTestFinder ([verbose][, parser][, recurse][,
          exclude_empty])
     A processing class used to extract the *Note DocTest: 22c6.s that
     are relevant to a given object, from its docstring and the
     docstrings of its contained objects.  *Note DocTest: 22c6.s can
     currently be extracted from the following object types: modules,
     functions, classes, methods, staticmethods, classmethods, and
     properties.

     The optional argument `verbose' can be used to display the objects
     searched by the finder.  It defaults to `False' (no output).

     The optional argument `parser' specifies the *Note DocTestParser:
     22a6. object (or a drop-in replacement) that is used to extract
     doctests from docstrings.

     If the optional argument `recurse' is false, then *Note
     DocTestFinder.find(): 22df.  will only examine the given object,
     and not any contained objects.

     If the optional argument `exclude_empty' is false, then *Note
     DocTestFinder.find(): 22df. will include tests for objects with
     empty docstrings.

     New in version 2.4.

     *Note DocTestFinder: 22c1. defines the following method:

      -- Method: find (obj[, name][, module][, globs][, extraglobs])
          Return a list of the *Note DocTest: 22c6.s that are defined
          by `obj'’s docstring, or by any of its contained objects’
          docstrings.

          The optional argument `name' specifies the object’s name;
          this name will be used to construct names for the returned
          *Note DocTest: 22c6.s.  If `name' is not specified, then
          `obj.__name__' is used.

          The optional parameter `module' is the module that contains
          the given object.  If the module is not specified or is
          `None', then the test finder will attempt to automatically
          determine the correct module.  The object’s module is used:

             * As a default namespace, if `globs' is not specified.

             * To prevent the DocTestFinder from extracting DocTests
               from objects that are imported from other modules.
               (Contained objects with modules other than `module' are
               ignored.)

             * To find the name of the file containing the object.

             * To help find the line number of the object within its
               file.

          If `module' is `False', no attempt to find the module will be
          made.  This is obscure, of use mostly in testing doctest
          itself: if `module' is `False', or is `None' but cannot be
          found automatically, then all objects are considered to
          belong to the (non-existent) module, so all contained objects
          will (recursively) be searched for doctests.

          The globals for each *Note DocTest: 22c6. is formed by
          combining `globs' and `extraglobs' (bindings in `extraglobs'
          override bindings in `globs').  A new shallow copy of the
          globals dictionary is created for each *Note DocTest: 22c6.
          If `globs' is not specified, then it defaults to the
          module’s `__dict__', if specified, or `{}' otherwise.  If
          `extraglobs' is not specified, then it defaults to `{}'.


File: python.info,  Node: DocTestParser objects,  Next: DocTestRunner objects,  Prev: DocTestFinder objects,  Up: Advanced API

5.25.2.17 DocTestParser objects
...............................

 -- Class: doctest.DocTestParser
     A processing class used to extract interactive examples from a
     string, and use them to create a *Note DocTest: 22c6. object.

     New in version 2.4.

     *Note DocTestParser: 22a6. defines the following methods:

      -- Method: get_doctest (string, globs, name, filename, lineno)
          Extract all doctest examples from the given string, and
          collect them into a *Note DocTest: 22c6. object.

          `globs', `name', `filename', and `lineno' are attributes for
          the new *Note DocTest: 22c6. object.  See the documentation
          for *Note DocTest: 22c6. for more information.

      -- Method: get_examples (string[, name])
          Extract all doctest examples from the given string, and
          return them as a list of *Note Example: 22cb. objects.  Line
          numbers are 0-based.  The optional argument `name' is a name
          identifying this string, and is only used for error messages.

      -- Method: parse (string[, name])
          Divide the given string into examples and intervening text,
          and return them as a list of alternating *Note Example:
          22cb.s and strings. Line numbers for the *Note Example:
          22cb.s are 0-based.  The optional argument `name' is a name
          identifying this string, and is only used for error messages.


File: python.info,  Node: DocTestRunner objects,  Next: OutputChecker objects,  Prev: DocTestParser objects,  Up: Advanced API

5.25.2.18 DocTestRunner objects
...............................

 -- Class: doctest.DocTestRunner ([checker][, verbose][, optionflags])
     A processing class used to execute and verify the interactive
     examples in a *Note DocTest: 22c6.

     The comparison between expected outputs and actual outputs is done
     by an *Note OutputChecker: 22b6.  This comparison may be
     customized with a number of option flags; see section *Note Option
     Flags: 22ae. for more information.  If the option flags are
     insufficient, then the comparison may also be customized by
     passing a subclass of *Note OutputChecker: 22b6. to the
     constructor.

     The test runner’s display output can be controlled in two ways.
     First, an output function can be passed to `TestRunner.run()';
     this function will be called with strings that should be
     displayed.  It defaults to `sys.stdout.write'.  If capturing the
     output is not sufficient, then the display output can be also
     customized by subclassing DocTestRunner, and overriding the methods
     *Note report_start(): 22e7, *Note report_success(): 22e8, *Note
     report_unexpected_exception(): 22e9, and *Note report_failure():
     22ea.

     The optional keyword argument `checker' specifies the *Note
     OutputChecker: 22b6.  object (or drop-in replacement) that should
     be used to compare the expected outputs to the actual outputs of
     doctest examples.

     The optional keyword argument `verbose' controls the *Note
     DocTestRunner: 22b7.’s verbosity.  If `verbose' is `True', then
     information is printed about each example, as it is run.  If
     `verbose' is `False', then only failures are printed.  If
     `verbose' is unspecified, or `None', then verbose output is used
     iff the command-line switch `-v' is used.

     The optional keyword argument `optionflags' can be used to control
     how the test runner compares expected output to actual output, and
     how it displays failures.  For more information, see section *Note
     Option Flags: 22ae.

     New in version 2.4.

     *Note DocTestParser: 22a6. defines the following methods:

      -- Method: report_start (out, test, example)
          Report that the test runner is about to process the given
          example. This method is provided to allow subclasses of *Note
          DocTestRunner: 22b7. to customize their output; it should not
          be called directly.

          `example' is the example about to be processed.  `test' is
          the test `containing example'.  `out' is the output function
          that was passed to *Note DocTestRunner.run(): 22eb.

      -- Method: report_success (out, test, example, got)
          Report that the given example ran successfully.  This method
          is provided to allow subclasses of *Note DocTestRunner: 22b7.
          to customize their output; it should not be called directly.

          `example' is the example about to be processed.  `got' is the
          actual output from the example.  `test' is the test
          containing `example'.  `out' is the output function that was
          passed to *Note DocTestRunner.run(): 22eb.

      -- Method: report_failure (out, test, example, got)
          Report that the given example failed.  This method is
          provided to allow subclasses of *Note DocTestRunner: 22b7. to
          customize their output; it should not be called directly.

          `example' is the example about to be processed.  `got' is the
          actual output from the example.  `test' is the test
          containing `example'.  `out' is the output function that was
          passed to *Note DocTestRunner.run(): 22eb.

      -- Method: report_unexpected_exception (out, test, example,
               exc_info)
          Report that the given example raised an unexpected exception.
          This method is provided to allow subclasses of *Note
          DocTestRunner: 22b7. to customize their output; it should not
          be called directly.

          `example' is the example about to be processed. `exc_info' is
          a tuple containing information about the unexpected exception
          (as returned by *Note sys.exc_info(): 306.). `test' is the
          test containing `example'.  `out' is the output function that
          was passed to *Note DocTestRunner.run(): 22eb.

      -- Method: run (test[, compileflags][, out][, clear_globs])
          Run the examples in `test' (a *Note DocTest: 22c6. object),
          and display the results using the writer function `out'.

          The examples are run in the namespace `test.globs'.  If
          `clear_globs' is true (the default), then this namespace will
          be cleared after the test runs, to help with garbage
          collection. If you would like to examine the namespace after
          the test completes, then use `clear_globs=False'.

          `compileflags' gives the set of flags that should be used by
          the Python compiler when running the examples.  If not
          specified, then it will default to the set of future-import
          flags that apply to `globs'.

          The output of each example is checked using the *Note
          DocTestRunner: 22b7.’s output checker, and the results are
          formatted by the `DocTestRunner.report_*()' methods.

      -- Method: summarize ([verbose])
          Print a summary of all the test cases that have been run by
          this DocTestRunner, and return a *Note named tuple: a4a.
          `TestResults(failed, attempted)'.

          The optional `verbose' argument controls how detailed the
          summary is.  If the verbosity is not specified, then the
          *Note DocTestRunner: 22b7.’s verbosity is used.

          Changed in version 2.6: Use a named tuple.



File: python.info,  Node: OutputChecker objects,  Prev: DocTestRunner objects,  Up: Advanced API

5.25.2.19 OutputChecker objects
...............................

 -- Class: doctest.OutputChecker
     A class used to check the whether the actual output from a doctest
     example matches the expected output.  *Note OutputChecker: 22b6.
     defines two methods: *Note check_output(): 22ef, which compares a
     given pair of outputs, and returns true if they match; and *Note
     output_difference(): 22f0, which returns a string describing the
     differences between two outputs.

     New in version 2.4.

     *Note OutputChecker: 22b6. defines the following methods:

      -- Method: check_output (want, got, optionflags)
          Return `True' iff the actual output from an example (`got')
          matches the expected output (`want').  These strings are
          always considered to match if they are identical; but
          depending on what option flags the test runner is using,
          several non-exact match types are also possible.  See section
          *Note Option Flags: 22ae. for more information about option
          flags.

      -- Method: output_difference (example, got, optionflags)
          Return a string describing the differences between the
          expected output for a given example (`example') and the
          actual output (`got').  `optionflags' is the set of option
          flags used to compare `want' and `got'.


File: python.info,  Node: Debugging,  Next: Soapbox,  Prev: Advanced API,  Up: doctest — Test interactive Python examples

5.25.2.20 Debugging
...................

Doctest provides several mechanisms for debugging doctest examples:

   * Several functions convert doctests to executable Python programs,
     which can be run under the Python debugger, *Note pdb: 12d.

   * The *Note DebugRunner: 22f3. class is a subclass of *Note
     DocTestRunner: 22b7. that raises an exception for the first
     failing example, containing information about that example. This
     information can be used to perform post-mortem debugging on the
     example.

   * The *Note unittest: 187. cases generated by *Note DocTestSuite():
     22c8. support the *Note debug(): 22f4. method defined by *Note
     unittest.TestCase: 285.

   * You can add a call to *Note pdb.set_trace(): 22f5. in a doctest
     example, and you’ll drop into the Python debugger when that line
     is executed.  Then you can inspect current values of variables,
     and so on.  For example, suppose `a.py' contains just this module
     docstring:

         """
         >>> def f(x):
         ...     g(x*2)
         >>> def g(x):
         ...     print x+3
         ...     import pdb; pdb.set_trace()
         >>> f(3)
         9
         """

     Then an interactive Python session may look like this:

         >>> import a, doctest
         >>> doctest.testmod(a)
         --Return--
         > <doctest a[1]>(3)g()->None
         -> import pdb; pdb.set_trace()
         (Pdb) list
           1     def g(x):
           2         print x+3
           3  ->     import pdb; pdb.set_trace()
         [EOF]
         (Pdb) print x
         6
         (Pdb) step
         --Return--
         > <doctest a[0]>(2)f()->None
         -> g(x*2)
         (Pdb) list
           1     def f(x):
           2  ->     g(x*2)
         [EOF]
         (Pdb) print x
         3
         (Pdb) step
         --Return--
         > <doctest a[2]>(1)?()->None
         -> f(3)
         (Pdb) cont
         (0, 3)
         >>>

     Changed in version 2.4: The ability to use *Note pdb.set_trace():
     22f5. usefully inside doctests was added.


Functions that convert doctests to Python code, and possibly run the
synthesized code under the debugger:

 -- Function: doctest.script_from_examples (s)
     Convert text with examples to a script.

     Argument `s' is a string containing doctest examples.  The string
     is converted to a Python script, where doctest examples in `s' are
     converted to regular code, and everything else is converted to
     Python comments.  The generated script is returned as a string.
     For example,

         import doctest
         print doctest.script_from_examples(r"""
             Set x and y to 1 and 2.
             >>> x, y = 1, 2

             Print their sum:
             >>> print x+y
             3
         """)

     displays:

         # Set x and y to 1 and 2.
         x, y = 1, 2
         #
         # Print their sum:
         print x+y
         # Expected:
         ## 3

     This function is used internally by other functions (see below),
     but can also be useful when you want to transform an interactive
     Python session into a Python script.

     New in version 2.4.


 -- Function: doctest.testsource (module, name)
     Convert the doctest for an object to a script.

     Argument `module' is a module object, or dotted name of a module,
     containing the object whose doctests are of interest.  Argument
     `name' is the name (within the module) of the object with the
     doctests of interest.  The result is a string, containing the
     object’s docstring converted to a Python script, as described for
     *Note script_from_examples(): 22f6. above.  For example, if module
     `a.py' contains a top-level function `f()', then

         import a, doctest
         print doctest.testsource(a, "a.f")

     prints a script version of function `f()'’s docstring, with
     doctests converted to code, and the rest placed in comments.

     New in version 2.3.


 -- Function: doctest.debug (module, name[, pm])
     Debug the doctests for an object.

     The `module' and `name' arguments are the same as for function
     *Note testsource(): 22f7. above.  The synthesized Python script
     for the named object’s docstring is written to a temporary file,
     and then that file is run under the control of the Python
     debugger, *Note pdb: 12d.

     A shallow copy of `module.__dict__' is used for both local and
     global execution context.

     Optional argument `pm' controls whether post-mortem debugging is
     used.  If `pm' has a true value, the script file is run directly,
     and the debugger gets involved only if the script terminates via
     raising an unhandled exception.  If it does, then post-mortem
     debugging is invoked, via *Note pdb.post_mortem(): 36a, passing
     the traceback object from the unhandled exception.  If `pm' is not
     specified, or is false, the script is run under the debugger from
     the start, via passing an appropriate *Note execfile(): 44f. call
     to *Note pdb.run(): 22f8.

     New in version 2.3.

     Changed in version 2.4: The `pm' argument was added.


 -- Function: doctest.debug_src (src[, pm][, globs])
     Debug the doctests in a string.

     This is like function *Note debug(): 22f4. above, except that a
     string containing doctest examples is specified directly, via the
     `src' argument.

     Optional argument `pm' has the same meaning as in function *Note
     debug(): 22f4. above.

     Optional argument `globs' gives a dictionary to use as both local
     and global execution context.  If not specified, or `None', an
     empty dictionary is used.  If specified, a shallow copy of the
     dictionary is used.

     New in version 2.4.


The *Note DebugRunner: 22f3. class, and the special exceptions it may
raise, are of most interest to testing framework authors, and will only
be sketched here.  See the source code, and especially *Note
DebugRunner: 22f3.’s docstring (which is a doctest!) for more details:

 -- Class: doctest.DebugRunner ([checker][, verbose][, optionflags])
     A subclass of *Note DocTestRunner: 22b7. that raises an exception
     as soon as a failure is encountered.  If an unexpected exception
     occurs, an *Note UnexpectedException: 22fa. exception is raised,
     containing the test, the example, and the original exception.  If
     the output doesn’t match, then a *Note DocTestFailure: 22fb.
     exception is raised, containing the test, the example, and the
     actual output.

     For information about the constructor parameters and methods, see
     the documentation for *Note DocTestRunner: 22b7. in section *Note
     Advanced API: 22ca.

There are two exceptions that may be raised by *Note DebugRunner: 22f3.
instances:

 -- Exception: doctest.DocTestFailure (test, example, got)
     An exception raised by *Note DocTestRunner: 22b7. to signal that a
     doctest example’s actual output did not match its expected
     output. The constructor arguments are used to initialize the
     attributes of the same names.

*Note DocTestFailure: 22fb. defines the following attributes:

 -- Attribute: DocTestFailure.test
     The *Note DocTest: 22c6. object that was being run when the
     example failed.

 -- Attribute: DocTestFailure.example
     The *Note Example: 22cb. that failed.

 -- Attribute: DocTestFailure.got
     The example’s actual output.

 -- Exception: doctest.UnexpectedException (test, example, exc_info)
     An exception raised by *Note DocTestRunner: 22b7. to signal that a
     doctest example raised an unexpected exception.  The constructor
     arguments are used to initialize the attributes of the same names.

*Note UnexpectedException: 22fa. defines the following attributes:

 -- Attribute: UnexpectedException.test
     The *Note DocTest: 22c6. object that was being run when the
     example failed.

 -- Attribute: UnexpectedException.example
     The *Note Example: 22cb. that failed.

 -- Attribute: UnexpectedException.exc_info
     A tuple containing information about the unexpected exception, as
     returned by *Note sys.exc_info(): 306.


File: python.info,  Node: Soapbox,  Prev: Debugging,  Up: doctest — Test interactive Python examples

5.25.2.21 Soapbox
.................

As mentioned in the introduction, *Note doctest: b5. has grown to have
three primary uses:

  1. Checking examples in docstrings.

  2. Regression testing.

  3. Executable documentation / literate testing.

These uses have different requirements, and it is important to
distinguish them.  In particular, filling your docstrings with obscure
test cases makes for bad documentation.

When writing a docstring, choose docstring examples with care.
There’s an art to this that needs to be learned—it may not be
natural at first.  Examples should add genuine value to the
documentation.  A good example can often be worth many words. If done
with care, the examples will be invaluable for your users, and will pay
back the time it takes to collect them many times over as the years go
by and things change.  I’m still amazed at how often one of my *Note
doctest: b5.  examples stops working after a “harmless” change.

Doctest also makes an excellent tool for regression testing, especially
if you don’t skimp on explanatory text.  By interleaving prose and
examples, it becomes much easier to keep track of what’s actually
being tested, and why.  When a test fails, good prose can make it much
easier to figure out what the problem is, and how it should be fixed.
It’s true that you could write extensive comments in code-based
testing, but few programmers do. Many have found that using doctest
approaches instead leads to much clearer tests.  Perhaps this is simply
because doctest makes writing prose a little easier than writing code,
while writing comments in code is a little harder.  I think it goes
deeper than just that: the natural attitude when writing a
doctest-based test is that you want to explain the fine points of your
software, and illustrate them with examples.  This in turn naturally
leads to test files that start with the simplest features, and
logically progress to complications and edge cases.  A coherent
narrative is the result, instead of a collection of isolated functions
that test isolated bits of functionality seemingly at random.  It’s a
different attitude, and produces different results, blurring the
distinction between testing and explaining.

Regression testing is best confined to dedicated objects or files.
There are several options for organizing tests:

   * Write text files containing test cases as interactive examples,
     and test the files using *Note testfile(): 229d. or *Note
     DocFileSuite(): 22c5.  This is recommended, although is easiest to
     do for new projects, designed from the start to use doctest.

   * Define functions named `_regrtest_topic' that consist of single
     docstrings, containing test cases for the named topics.  These
     functions can be included in the same file as the module, or
     separated out into a separate test file.

   * Define a `__test__' dictionary mapping from regression test topics
     to docstrings containing test cases.

When you have placed your tests in a module, the module can itself be
the test runner.  When a test fails, you can arrange for your test
runner to re-run only the failing doctest while you debug the problem.
Here is a minimal example of such a test runner:

    if __name__ == '__main__':
        import doctest
        flags = doctest.REPORT_NDIFF|doctest.REPORT_ONLY_FIRST_FAILURE
        if len(sys.argv) > 1:
            name = sys.argv[1]
            if name in globals():
                obj = globals()[name]
            else:
                obj = __test__[name]
            doctest.run_docstring_examples(obj, globals(), name=name,
                                           optionflags=flags)
        else:
            fail, total = doctest.testmod(optionflags=flags)
            print("{} failures out of {} tests".format(fail, total))


File: python.info,  Node: unittest — Unit testing framework,  Next: 2to3 - Automated Python 2 to 3 code translation,  Prev: doctest — Test interactive Python examples,  Up: Development Tools

5.25.3 `unittest' — Unit testing framework
--------------------------------------------

New in version 2.1.

(If you are already familiar with the basic concepts of testing, you
might want to skip to *Note the list of assert methods: 2306.)

The Python unit testing framework, sometimes referred to as
“PyUnit,” is a Python language version of JUnit, by Kent Beck and
Erich Gamma. JUnit is, in turn, a Java version of Kent’s Smalltalk
testing framework.  Each is the de facto standard unit testing
framework for its respective language.

*Note unittest: 187. supports test automation, sharing of setup and
shutdown code for tests, aggregation of tests into collections, and
independence of the tests from the reporting framework.  The *Note
unittest: 187. module provides classes that make it easy to support
these qualities for a set of tests.

To achieve this, *Note unittest: 187. supports some important concepts:

test fixture
     A `test fixture' represents the preparation needed to perform one
     or more tests, and any associate cleanup actions.  This may
     involve, for example, creating temporary or proxy databases,
     directories, or starting a server process.

test case
     A `test case' is the smallest unit of testing.  It checks for a
     specific response to a particular set of inputs.  *Note unittest:
     187. provides a base class, *Note TestCase: 285, which may be used
     to create new test cases.

test suite
     A `test suite' is a collection of test cases, test suites, or
     both.  It is used to aggregate tests that should be executed
     together.

test runner
     A `test runner' is a component which orchestrates the execution of
     tests and provides the outcome to the user.  The runner may use a
     graphical interface, a textual interface, or return a special
     value to indicate the results of executing the tests.

The test case and test fixture concepts are supported through the *Note
TestCase: 285. and *Note FunctionTestCase: 2307. classes; the former
should be used when creating new tests, and the latter can be used when
integrating existing test code with a *Note unittest: 187.-driven
framework. When building test fixtures using *Note TestCase: 285, the
*Note setUp(): 28b. and *Note tearDown(): 28c. methods can be
overridden to provide initialization and cleanup for the fixture.  With
*Note FunctionTestCase: 2307, existing functions can be passed to the
constructor for these purposes.  When the test is run, the fixture
initialization is run first; if it succeeds, the cleanup method is run
after the test has been executed, regardless of the outcome of the
test.  Each instance of the *Note TestCase: 285. will only be used to
run a single test method, so a new fixture is created for each test.

Test suites are implemented by the *Note TestSuite: 479. class.  This
class allows individual tests and test suites to be aggregated; when
the suite is executed, all tests added directly to the suite and in
“child” test suites are run.

A test runner is an object that provides a single method, `run()',
which accepts a *Note TestCase: 285. or *Note TestSuite: 479.  object
as a parameter, and returns a result object.  The class *Note
TestResult: 2ab. is provided for use as the result object. *Note
unittest: 187.  provides the *Note TextTestRunner: 2308. as an example
test runner which reports test results on the standard error stream by
default.  Alternate runners can be implemented for other environments
(such as graphical environments) without any need to derive from a
specific class.

See also
........

Module *Note doctest: b5.
     Another test-support module with a very different flavor.

unittest2: A backport of new unittest features for Python 2.4-2.6(1)
     Many new features were added to unittest in Python 2.7, including
     test discovery. unittest2 allows you to use these features with
     earlier versions of Python.

Simple Smalltalk Testing: With Patterns(2)
     Kent Beck’s original paper on testing frameworks using the
     pattern shared by *Note unittest: 187.

Nose(3) and py.test(4)
     Third-party unittest frameworks with a lighter-weight syntax for
     writing tests.  For example, `assert func(10) == 42'.

The Python Testing Tools Taxonomy(5)
     An extensive list of Python testing tools including functional
     testing frameworks and mock object libraries.

Testing in Python Mailing List(6)
     A special-interest-group for discussion of testing, and testing
     tools, in Python.

* Menu:

* Basic example::
* Command-Line Interface: Command-Line Interface<2>.
* Test Discovery::
* Organizing test code::
* Re-using old test code::
* Skipping tests and expected failures::
* Classes and functions::
* Class and Module Fixtures::
* Signal Handling::

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/unittest2

(2)
https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm

(3) https://nose.readthedocs.org/en/latest/

(4) http://pytest.org

(5) https://wiki.python.org/moin/PythonTestingToolsTaxonomy

(6) http://lists.idyll.org/listinfo/testing-in-python


File: python.info,  Node: Basic example,  Next: Command-Line Interface<2>,  Up: unittest — Unit testing framework

5.25.3.1 Basic example
......................

The *Note unittest: 187. module provides a rich set of tools for
constructing and running tests.  This section demonstrates that a small
subset of the tools suffice to meet the needs of most users.

Here is a short script to test three string methods:

    import unittest

    class TestStringMethods(unittest.TestCase):

        def test_upper(self):
            self.assertEqual('foo'.upper(), 'FOO')

        def test_isupper(self):
            self.assertTrue('FOO'.isupper())
            self.assertFalse('Foo'.isupper())

        def test_split(self):
            s = 'hello world'
            self.assertEqual(s.split(), ['hello', 'world'])
            # check that s.split fails when the separator is not a string
            with self.assertRaises(TypeError):
                s.split(2)

    if __name__ == '__main__':
        unittest.main()

A testcase is created by subclassing *Note unittest.TestCase: 285.  The
three individual tests are defined with methods whose names start with
the letters `test'.  This naming convention informs the test runner
about which methods represent tests.

The crux of each test is a call to *Note assertEqual(): 281. to check
for an expected result; *Note assertTrue(): 282. or *Note
assertFalse(): 283.  to verify a condition; or *Note assertRaises():
286. to verify that a specific exception gets raised.  These methods
are used instead of the *Note assert: 46b. statement so the test runner
can accumulate all test results and produce a report.

The *Note setUp(): 28b. and *Note tearDown(): 28c. methods allow you to
define instructions that will be executed before and after each test
method.  They are covered in more detail in the section *Note
Organizing test code: 230b.

The final block shows a simple way to run the tests. *Note
unittest.main(): 27b.  provides a command-line interface to the test
script.  When run from the command line, the above script produces an
output that looks like this:

    ...
    ----------------------------------------------------------------------
    Ran 3 tests in 0.000s

    OK

Instead of *Note unittest.main(): 27b, there are other ways to run the
tests with a finer level of control, less terse output, and no
requirement to be run from the command line.  For example, the last two
lines may be replaced with:

    suite = unittest.TestLoader().loadTestsFromTestCase(TestStringMethods)
    unittest.TextTestRunner(verbosity=2).run(suite)

Running the revised script from the interpreter or another script
produces the following output:

    test_isupper (__main__.TestStringMethods) ... ok
    test_split (__main__.TestStringMethods) ... ok
    test_upper (__main__.TestStringMethods) ... ok

    ----------------------------------------------------------------------
    Ran 3 tests in 0.001s

    OK

The above examples show the most commonly used *Note unittest: 187.
features which are sufficient to meet many everyday testing needs.  The
remainder of the documentation explores the full feature set from first
principles.


File: python.info,  Node: Command-Line Interface<2>,  Next: Test Discovery,  Prev: Basic example,  Up: unittest — Unit testing framework

5.25.3.2 Command-Line Interface
...............................

The unittest module can be used from the command line to run tests from
modules, classes or even individual test methods:

    python -m unittest test_module1 test_module2
    python -m unittest test_module.TestClass
    python -m unittest test_module.TestClass.test_method

You can pass in a list with any combination of module names, and fully
qualified class or method names.

You can run tests with more detail (higher verbosity) by passing in the
-v flag:

    python -m unittest -v test_module

For a list of all the command-line options:

    python -m unittest -h

Changed in version 2.7: In earlier versions it was only possible to run
individual test methods and not modules or classes.

* Menu:

* Command-line options: Command-line options<2>.


File: python.info,  Node: Command-line options<2>,  Up: Command-Line Interface<2>

5.25.3.3 Command-line options
.............................

`unittest' supports these command-line options:

 -- Program Option: -b, --buffer
     The standard output and standard error streams are buffered during
     the test run. Output during a passing test is discarded. Output is
     echoed normally on test fail or error and is added to the failure
     messages.

 -- Program Option: -c, --catch
     `Control-C' during the test run waits for the current test to end
     and then reports all the results so far. A second `Control-C'
     raises the normal *Note KeyboardInterrupt: 251. exception.

     See *Note Signal Handling: 230f. for the functions that provide
     this functionality.

 -- Program Option: -f, --failfast
     Stop the test run on the first error or failure.

New in version 2.7: The command-line options `-b', `-c' and `-f' were
added.

The command line can also be used for test discovery, for running all
of the tests in a project or just a subset.


File: python.info,  Node: Test Discovery,  Next: Organizing test code,  Prev: Command-Line Interface<2>,  Up: unittest — Unit testing framework

5.25.3.4 Test Discovery
.......................

New in version 2.7.

Unittest supports simple test discovery. In order to be compatible with
test discovery, all of the test files must be *Note modules: 590. or
*Note packages: 5a4. importable from the top-level directory of the
project (this means that their filenames must be valid *Note
identifiers: 6da.).

Test discovery is implemented in *Note TestLoader.discover(): 2312, but
can also be used from the command line. The basic command-line usage is:

    cd project_directory
    python -m unittest discover

The `discover' sub-command has the following options:

 -- Program Option: -v, --verbose
     Verbose output

 -- Program Option: -s, --start-directory directory
     Directory to start discovery (`.' default)

 -- Program Option: -p, --pattern pattern
     Pattern to match test files (`test*.py' default)

 -- Program Option: -t, --top-level-directory directory
     Top level directory of project (defaults to start directory)

The *Note -s: 2314, *Note -p: 2315, and *Note -t: 2316. options can be
passed in as positional arguments in that order. The following two
command lines are equivalent:

    python -m unittest discover -s project_directory -p "*_test.py"
    python -m unittest discover project_directory "*_test.py"

As well as being a path it is possible to pass a package name, for
example `myproject.subpackage.test', as the start directory. The
package name you supply will then be imported and its location on the
filesystem will be used as the start directory.

     Caution: Test discovery loads tests by importing them. Once test
     discovery has found all the test files from the start directory
     you specify it turns the paths into package names to import. For
     example `foo/bar/baz.py' will be imported as `foo.bar.baz'.

     If you have a package installed globally and attempt test
     discovery on a different copy of the package then the import
     `could' happen from the wrong place. If this happens test
     discovery will warn you and exit.

     If you supply the start directory as a package name rather than a
     path to a directory then discover assumes that whichever location
     it imports from is the location you intended, so you will not get
     the warning.

Test modules and packages can customize test loading and discovery by
through the *Note load_tests protocol: 2317.


File: python.info,  Node: Organizing test code,  Next: Re-using old test code,  Prev: Test Discovery,  Up: unittest — Unit testing framework

5.25.3.5 Organizing test code
.............................

The basic building blocks of unit testing are `test cases' — single
scenarios that must be set up and checked for correctness.  In *Note
unittest: 187, test cases are represented by instances of *Note
unittest: 187.’s *Note TestCase: 285.  class. To make your own test
cases you must write subclasses of *Note TestCase: 285, or use *Note
FunctionTestCase: 2307.

An instance of a *Note TestCase: 285.-derived class is an object that
can completely run a single test method, together with optional set-up
and tidy-up code.

The testing code of a *Note TestCase: 285. instance should be entirely
self contained, such that it can be run either in isolation or in
arbitrary combination with any number of other test cases.

The simplest *Note TestCase: 285. subclass will simply override the
`runTest()' method in order to perform specific testing code:

    import unittest

    class DefaultWidgetSizeTestCase(unittest.TestCase):
        def runTest(self):
            widget = Widget('The widget')
            self.assertEqual(widget.size(), (50, 50), 'incorrect default size')

Note that in order to test something, we use one of the `assert*()'
methods provided by the *Note TestCase: 285. base class.  If the test
fails, an exception will be raised, and *Note unittest: 187. will
identify the test case as a `failure'.  Any other exceptions will be
treated as `errors'. This helps you identify where the problem is:
`failures' are caused by incorrect results - a 5 where you expected a
6. `Errors' are caused by incorrect code - e.g., a *Note TypeError:
218. caused by an incorrect function call.

The way to run a test case will be described later.  For now, note that
to construct an instance of such a test case, we call its constructor
without arguments:

    testCase = DefaultWidgetSizeTestCase()

Now, such test cases can be numerous, and their set-up can be
repetitive.  In the above case, constructing a `Widget' in each of 100
Widget test case subclasses would mean unsightly duplication.

Luckily, we can factor out such set-up code by implementing a method
called *Note setUp(): 28b, which the testing framework will
automatically call for us when we run the test:

    import unittest

    class SimpleWidgetTestCase(unittest.TestCase):
        def setUp(self):
            self.widget = Widget('The widget')

    class DefaultWidgetSizeTestCase(SimpleWidgetTestCase):
        def runTest(self):
            self.assertEqual(self.widget.size(), (50,50),
                             'incorrect default size')

    class WidgetResizeTestCase(SimpleWidgetTestCase):
        def runTest(self):
            self.widget.resize(100,150)
            self.assertEqual(self.widget.size(), (100,150),
                             'wrong size after resize')

If the *Note setUp(): 28b. method raises an exception while the test is
running, the framework will consider the test to have suffered an
error, and the `runTest()' method will not be executed.

Similarly, we can provide a *Note tearDown(): 28c. method that tidies up
after the `runTest()' method has been run:

    import unittest

    class SimpleWidgetTestCase(unittest.TestCase):
        def setUp(self):
            self.widget = Widget('The widget')

        def tearDown(self):
            self.widget.dispose()
            self.widget = None

If *Note setUp(): 28b. succeeded, the *Note tearDown(): 28c. method will
be run whether `runTest()' succeeded or not.

Such a working environment for the testing code is called a `fixture'.

Often, many small test cases will use the same fixture.  In this case,
we would end up subclassing `SimpleWidgetTestCase' into many small
one-method classes such as `DefaultWidgetSizeTestCase'.  This is
time-consuming and discouraging, so in the same vein as JUnit, *Note
unittest: 187. provides a simpler mechanism:

    import unittest

    class WidgetTestCase(unittest.TestCase):
        def setUp(self):
            self.widget = Widget('The widget')

        def tearDown(self):
            self.widget.dispose()
            self.widget = None

        def test_default_size(self):
            self.assertEqual(self.widget.size(), (50,50),
                             'incorrect default size')

        def test_resize(self):
            self.widget.resize(100,150)
            self.assertEqual(self.widget.size(), (100,150),
                             'wrong size after resize')

Here we have not provided a `runTest()' method, but have instead
provided two different test methods.  Class instances will now each run
one of the `test_*()' methods, with `self.widget' created and destroyed
separately for each instance.  When creating an instance we must
specify the test method it is to run.  We do this by passing the method
name in the constructor:

    defaultSizeTestCase = WidgetTestCase('test_default_size')
    resizeTestCase = WidgetTestCase('test_resize')

Test case instances are grouped together according to the features they
test.  *Note unittest: 187. provides a mechanism for this: the `test
suite', represented by *Note unittest: 187.’s *Note TestSuite: 479.
class:

    widgetTestSuite = unittest.TestSuite()
    widgetTestSuite.addTest(WidgetTestCase('test_default_size'))
    widgetTestSuite.addTest(WidgetTestCase('test_resize'))

For the ease of running tests, as we will see later, it is a good idea
to provide in each test module a callable object that returns a
pre-built test suite:

    def suite():
        suite = unittest.TestSuite()
        suite.addTest(WidgetTestCase('test_default_size'))
        suite.addTest(WidgetTestCase('test_resize'))
        return suite

or even:

    def suite():
        tests = ['test_default_size', 'test_resize']

        return unittest.TestSuite(map(WidgetTestCase, tests))

Since it is a common pattern to create a *Note TestCase: 285. subclass
with many similarly named test functions, *Note unittest: 187. provides
a *Note TestLoader: 2a8.  class that can be used to automate the
process of creating a test suite and populating it with individual
tests. For example,

    suite = unittest.TestLoader().loadTestsFromTestCase(WidgetTestCase)

will create a test suite that will run
`WidgetTestCase.test_default_size()' and `WidgetTestCase.test_resize'.
*Note TestLoader: 2a8. uses the `'test'' method name prefix to identify
test methods automatically.

Note that the order in which the various test cases will be run is
determined by sorting the test function names with respect to the
built-in ordering for strings.

Often it is desirable to group suites of test cases together, so as to
run tests for the whole system at once.  This is easy, since *Note
TestSuite: 479. instances can be added to a *Note TestSuite: 479. just
as *Note TestCase: 285. instances can be added to a *Note TestSuite:
479.:

    suite1 = module1.TheTestSuite()
    suite2 = module2.TheTestSuite()
    alltests = unittest.TestSuite([suite1, suite2])

You can place the definitions of test cases and test suites in the same
modules as the code they are to test (such as `widget.py'), but there
are several advantages to placing the test code in a separate module,
such as `test_widget.py':

   * The test module can be run standalone from the command line.

   * The test code can more easily be separated from shipped code.

   * There is less temptation to change test code to fit the code it
     tests without a good reason.

   * Test code should be modified much less frequently than the code it
     tests.

   * Tested code can be refactored more easily.

   * Tests for modules written in C must be in separate modules anyway,
     so why not be consistent?

   * If the testing strategy changes, there is no need to change the
     source code.


File: python.info,  Node: Re-using old test code,  Next: Skipping tests and expected failures,  Prev: Organizing test code,  Up: unittest — Unit testing framework

5.25.3.6 Re-using old test code
...............................

Some users will find that they have existing test code that they would
like to run from *Note unittest: 187, without converting every old test
function to a *Note TestCase: 285. subclass.

For this reason, *Note unittest: 187. provides a *Note
FunctionTestCase: 2307. class.  This subclass of *Note TestCase: 285.
can be used to wrap an existing test function.  Set-up and tear-down
functions can also be provided.

Given the following test function:

    def testSomething():
        something = makeSomething()
        assert something.name is not None
        # ...

one can create an equivalent test case instance as follows:

    testcase = unittest.FunctionTestCase(testSomething)

If there are additional set-up and tear-down methods that should be
called as part of the test case’s operation, they can also be
provided like so:

    testcase = unittest.FunctionTestCase(testSomething,
                                         setUp=makeSomethingDB,
                                         tearDown=deleteSomethingDB)

To make migrating existing test suites easier, *Note unittest: 187.
supports tests raising *Note AssertionError: 834. to indicate test
failure. However, it is recommended that you use the explicit
`TestCase.fail*()' and `TestCase.assert*()' methods instead, as future
versions of *Note unittest: 187.  may treat *Note AssertionError: 834.
differently.

     Note: Even though *Note FunctionTestCase: 2307. can be used to
     quickly convert an existing test base over to a *Note unittest:
     187.-based system, this approach is not recommended.  Taking the
     time to set up proper *Note TestCase: 285.  subclasses will make
     future test refactorings infinitely easier.

In some cases, the existing tests may have been written using the *Note
doctest: b5.  module.  If so, *Note doctest: b5. provides a
`DocTestSuite' class that can automatically build *Note
unittest.TestSuite: 479. instances from the existing *Note doctest:
b5.-based tests.


File: python.info,  Node: Skipping tests and expected failures,  Next: Classes and functions,  Prev: Re-using old test code,  Up: unittest — Unit testing framework

5.25.3.7 Skipping tests and expected failures
.............................................

New in version 2.7.

Unittest supports skipping individual test methods and even whole
classes of tests.  In addition, it supports marking a test as an
“expected failure,” a test that is broken and will fail, but
shouldn’t be counted as a failure on a *Note TestResult: 2ab.

Skipping a test is simply a matter of using the *Note skip(): 231d.
*Note decorator: 87e.  or one of its conditional variants.

Basic skipping looks like this:

    class MyTestCase(unittest.TestCase):

        @unittest.skip("demonstrating skipping")
        def test_nothing(self):
            self.fail("shouldn't happen")

        @unittest.skipIf(mylib.__version__ < (1, 3),
                         "not supported in this library version")
        def test_format(self):
            # Tests that work for only a certain version of the library.
            pass

        @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
        def test_windows_support(self):
            # windows specific testing code
            pass

This is the output of running the example above in verbose mode:

    test_format (__main__.MyTestCase) ... skipped 'not supported in this library version'
    test_nothing (__main__.MyTestCase) ... skipped 'demonstrating skipping'
    test_windows_support (__main__.MyTestCase) ... skipped 'requires Windows'

    ----------------------------------------------------------------------
    Ran 3 tests in 0.005s

    OK (skipped=3)

Classes can be skipped just like methods:

    @unittest.skip("showing class skipping")
    class MySkippedTestCase(unittest.TestCase):
        def test_not_run(self):
            pass

*Note TestCase.setUp(): 28b. can also skip the test.  This is useful
when a resource that needs to be set up is not available.

Expected failures use the *Note expectedFailure(): 231e. decorator.

    class ExpectedFailureTestCase(unittest.TestCase):
        @unittest.expectedFailure
        def test_fail(self):
            self.assertEqual(1, 0, "broken")

It’s easy to roll your own skipping decorators by making a decorator
that calls *Note skip(): 231d. on the test when it wants it to be
skipped.  This decorator skips the test unless the passed object has a
certain attribute:

    def skipUnlessHasattr(obj, attr):
        if hasattr(obj, attr):
            return lambda func: func
        return unittest.skip("{!r} doesn't have {!r}".format(obj, attr))

The following decorators implement test skipping and expected failures:

 -- Function: unittest.skip (reason)
     Unconditionally skip the decorated test.  `reason' should describe
     why the test is being skipped.

 -- Function: unittest.skipIf (condition, reason)
     Skip the decorated test if `condition' is true.

 -- Function: unittest.skipUnless (condition, reason)
     Skip the decorated test unless `condition' is true.

 -- Function: unittest.expectedFailure ()
     Mark the test as an expected failure.  If the test fails when run,
     the test is not counted as a failure.

 -- Exception: unittest.SkipTest (reason)
     This exception is raised to skip a test.

     Usually you can use *Note TestCase.skipTest(): 2321. or one of the
     skipping decorators instead of raising this directly.

Skipped tests will not have `setUp()' or `tearDown()' run around them.
Skipped classes will not have `setUpClass()' or `tearDownClass()' run.


File: python.info,  Node: Classes and functions,  Next: Class and Module Fixtures,  Prev: Skipping tests and expected failures,  Up: unittest — Unit testing framework

5.25.3.8 Classes and functions
..............................

This section describes in depth the API of *Note unittest: 187.

* Menu:

* Test cases::
* Grouping tests::
* Loading and running tests::


File: python.info,  Node: Test cases,  Next: Grouping tests,  Up: Classes and functions

5.25.3.9 Test cases
...................

 -- Class: unittest.TestCase (methodName='runTest')
     Instances of the *Note TestCase: 285. class represent the smallest
     testable units in the *Note unittest: 187. universe.  This class
     is intended to be used as a base class, with specific tests being
     implemented by concrete subclasses.  This class implements the
     interface needed by the test runner to allow it to drive the test,
     and methods that the test code can use to check for and report
     various kinds of failure.

     Each instance of *Note TestCase: 285. will run a single test
     method: the method named `methodName'.  If you remember, we had an
     earlier example that went something like this:

         def suite():
             suite = unittest.TestSuite()
             suite.addTest(WidgetTestCase('test_default_size'))
             suite.addTest(WidgetTestCase('test_resize'))
             return suite

     Here, we create two instances of `WidgetTestCase', each of which
     runs a single test.

     `methodName' defaults to `runTest()'.

     *Note TestCase: 285. instances provide three groups of methods:
     one group used to run the test, another used by the test
     implementation to check conditions and report failures, and some
     inquiry methods allowing information about the test itself to be
     gathered.

     Methods in the first group (running the test) are:

      -- Method: setUp ()
          Method called to prepare the test fixture.  This is called
          immediately before calling the test method; other than *Note
          AssertionError: 834. or *Note SkipTest: 280, any exception
          raised by this method will be considered an error rather than
          a test failure. The default implementation does nothing.

      -- Method: tearDown ()
          Method called immediately after the test method has been
          called and the result recorded.  This is called even if the
          test method raised an exception, so the implementation in
          subclasses may need to be particularly careful about checking
          internal state.  Any exception, other than *Note
          AssertionError: 834. or *Note SkipTest: 280, raised by this
          method will be considered an additional error rather than a
          test failure (thus increasing the total number of reported
          errors). This method will only be called if the *Note
          setUp(): 28b. succeeds, regardless of the outcome of the test
          method.  The default implementation does nothing.

      -- Method: setUpClass ()
          A class method called before tests in an individual class run.
          `setUpClass' is called with the class as the only argument
          and must be decorated as a *Note classmethod(): 40f.:

              @classmethod
              def setUpClass(cls):
                  ...

          See *Note Class and Module Fixtures: 2326. for more details.

          New in version 2.7.


      -- Method: tearDownClass ()
          A class method called after tests in an individual class have
          run.  `tearDownClass' is called with the class as the only
          argument and must be decorated as a *Note classmethod(): 40f.:

              @classmethod
              def tearDownClass(cls):
                  ...

          See *Note Class and Module Fixtures: 2326. for more details.

          New in version 2.7.


      -- Method: run (result=None)
          Run the test, collecting the result into the test result
          object passed as `result'.  If `result' is omitted or `None',
          a temporary result object is created (by calling the *Note
          defaultTestResult(): 2328. method) and used. The result
          object is not returned to *Note run(): 2327.’s caller.

          The same effect may be had by simply calling the *Note
          TestCase: 285.  instance.

      -- Method: skipTest (reason)
          Calling this during a test method or *Note setUp(): 28b.
          skips the current test.  See *Note Skipping tests and
          expected failures: 231c. for more information.

          New in version 2.7.


      -- Method: debug ()
          Run the test without collecting the result.  This allows
          exceptions raised by the test to be propagated to the caller,
          and can be used to support running tests under a debugger.

     The *Note TestCase: 285. class provides several assert methods to
     check for and report failures.  The following table lists the most
     commonly used methods (see the tables below for more assert
     methods):

     Method                                        Checks that                       New in
     ---------------------------------------------------------------------------------------------------- 
     *Note assertEqual(a, b): 281.                 `a == b'                          
     *Note assertNotEqual(a, b): 232a.             `a != b'                          
     *Note assertTrue(x): 282.                     `bool(x) is True'                 
     *Note assertFalse(x): 283.                    `bool(x) is False'                
     *Note assertIs(a, b): 28f.                    `a is b'                          2.7
     *Note assertIsNot(a, b): 290.                 `a is not b'                      2.7
     *Note assertIsNone(x): 28d.                   `x is None'                       2.7
     *Note assertIsNotNone(x): 28e.                `x is not None'                   2.7
     *Note assertIn(a, b): 29b.                    `a in b'                          2.7
     *Note assertNotIn(a, b): 29c.                 `a not in b'                      2.7
     *Note assertIsInstance(a, b): 291.            `isinstance(a, b)'                2.7
     *Note assertNotIsInstance(a, b): 292.         `not isinstance(a, b)'            2.7

     All the assert methods (except *Note assertRaises(): 286, *Note
     assertRaisesRegexp(): 29a.)  accept a `msg' argument that, if
     specified, is used as the error message on failure (see also *Note
     longMessage: 284.).

      -- Method: assertEqual (first, second, msg=None)
          Test that `first' and `second' are equal.  If the values do
          not compare equal, the test will fail.

          In addition, if `first' and `second' are the exact same type
          and one of list, tuple, dict, set, frozenset or unicode or
          any type that a subclass registers with *Note
          addTypeEqualityFunc(): 2a9. the type-specific equality
          function will be called in order to generate a more useful
          default error message (see also the *Note list of
          type-specific methods: 232b.).

          Changed in version 2.7: Added the automatic calling of
          type-specific equality function.


      -- Method: assertNotEqual (first, second, msg=None)
          Test that `first' and `second' are not equal.  If the values
          do compare equal, the test will fail.

      -- Method: assertTrue (expr, msg=None)
      -- Method: assertFalse (expr, msg=None)
          Test that `expr' is true (or false).

          Note that this is equivalent to `bool(expr) is True' and not
          to `expr is True' (use `assertIs(expr, True)' for the
          latter).  This method should also be avoided when more
          specific methods are available (e.g.  `assertEqual(a, b)'
          instead of `assertTrue(a == b)'), because they provide a
          better error message in case of failure.

      -- Method: assertIs (first, second, msg=None)
      -- Method: assertIsNot (first, second, msg=None)
          Test that `first' and `second' evaluate (or don’t evaluate)
          to the same object.

          New in version 2.7.


      -- Method: assertIsNone (expr, msg=None)
      -- Method: assertIsNotNone (expr, msg=None)
          Test that `expr' is (or is not) `None'.

          New in version 2.7.


      -- Method: assertIn (first, second, msg=None)
      -- Method: assertNotIn (first, second, msg=None)
          Test that `first' is (or is not) in `second'.

          New in version 2.7.


      -- Method: assertIsInstance (obj, cls, msg=None)
      -- Method: assertNotIsInstance (obj, cls, msg=None)
          Test that `obj' is (or is not) an instance of `cls' (which
          can be a class or a tuple of classes, as supported by *Note
          isinstance(): 332.).  To check for the exact type, use *Note
          assertIs(type(obj), cls): 28f.

          New in version 2.7.


     It is also possible to check that exceptions and warnings are
     raised using the following methods:

     Method                                                        Checks that                                New in
     -------------------------------------------------------------------------------------------------------------------------- 
     *Note assertRaises(exc, fun, *args, **kwds): 286.             `fun(*args, **kwds)' raises `exc'          
     *Note assertRaisesRegexp(exc, r, fun, *args, **kwds): 29a.    `fun(*args, **kwds)' raises `exc' and the  2.7
                                                                   message matches regex `r'                  

      -- Method: assertRaises (exception, callable, *args, **kwds)
      -- Method: assertRaises (exception)
          Test that an exception is raised when `callable' is called
          with any positional or keyword arguments that are also passed
          to *Note assertRaises(): 286.  The test passes if `exception'
          is raised, is an error if another exception is raised, or
          fails if no exception is raised.  To catch any of a group of
          exceptions, a tuple containing the exception classes may be
          passed as `exception'.

          If only the `exception' argument is given, returns a context
          manager so that the code under test can be written inline
          rather than as a function:

              with self.assertRaises(SomeException):
                  do_something()

          The context manager will store the caught exception object in
          its `exception' attribute.  This can be useful if the
          intention is to perform additional checks on the exception
          raised:

              with self.assertRaises(SomeException) as cm:
                  do_something()

              the_exception = cm.exception
              self.assertEqual(the_exception.error_code, 3)

          Changed in version 2.7: Added the ability to use *Note
          assertRaises(): 286. as a context manager.


      -- Method: assertRaisesRegexp (exception, regexp, callable,
               *args, **kwds)
      -- Method: assertRaisesRegexp (exception, regexp)
          Like *Note assertRaises(): 286. but also tests that `regexp'
          matches on the string representation of the raised exception.
          `regexp' may be a regular expression object or a string
          containing a regular expression suitable for use by *Note
          re.search(): 9eb.  Examples:

              self.assertRaisesRegexp(ValueError, "invalid literal for.*XYZ'$",
                                      int, 'XYZ')

          or:

              with self.assertRaisesRegexp(ValueError, 'literal'):
                 int('XYZ')

          New in version 2.7.


     There are also other methods used to perform more specific checks,
     such as:

     Method                                      Checks that                          New in
     ---------------------------------------------------------------------------------------------------- 
     *Note assertAlmostEqual(a, b): 2a4.         `round(a-b, 7) == 0'                 
     *Note assertNotAlmostEqual(a, b): 2a5.      `round(a-b, 7) != 0'                 
     *Note assertGreater(a, b): 293.             `a > b'                              2.7
     *Note assertGreaterEqual(a, b): 294.        `a >= b'                             2.7
     *Note assertLess(a, b): 295.                `a < b'                              2.7
     *Note assertLessEqual(a, b): 296.           `a <= b'                             2.7
     *Note assertRegexpMatches(s, r): 298.       `r.search(s)'                        2.7
     *Note assertNotRegexpMatches(s, r): 299.    `not r.search(s)'                    2.7
     *Note assertItemsEqual(a, b): 29d.          sorted(a) == sorted(b) and works     2.7
                                                 with unhashable objs                 
     *Note assertDictContainsSubset(a, b): 2a3.  all the key/value pairs in `a'       2.7
                                                 exist in `b'                         

      -- Method: assertAlmostEqual (first, second, places=7, msg=None,
               delta=None)
      -- Method: assertNotAlmostEqual (first, second, places=7,
               msg=None, delta=None)
          Test that `first' and `second' are approximately (or not
          approximately) equal by computing the difference, rounding to
          the given number of decimal `places' (default 7), and
          comparing to zero.  Note that these methods round the values
          to the given number of `decimal places' (i.e.  like the *Note
          round(): 1c7. function) and not `significant digits'.

          If `delta' is supplied instead of `places' then the difference
          between `first' and `second' must be less or equal to (or
          greater than) `delta'.

          Supplying both `delta' and `places' raises a `TypeError'.

          Changed in version 2.7: *Note assertAlmostEqual(): 2a4.
          automatically considers almost equal objects that compare
          equal.  *Note assertNotAlmostEqual(): 2a5. automatically fails
          if the objects compare equal.  Added the `delta' keyword
          argument.


      -- Method: assertGreater (first, second, msg=None)
      -- Method: assertGreaterEqual (first, second, msg=None)
      -- Method: assertLess (first, second, msg=None)
      -- Method: assertLessEqual (first, second, msg=None)
          Test that `first' is respectively >, >=, < or <= than
          `second' depending on the method name.  If not, the test will
          fail:

              >>> self.assertGreaterEqual(3, 4)
              AssertionError: "3" unexpectedly not greater than or equal to "4"

          New in version 2.7.


      -- Method: assertRegexpMatches (text, regexp, msg=None)
          Test that a `regexp' search matches `text'.  In case of
          failure, the error message will include the pattern and the
          `text' (or the pattern and the part of `text' that
          unexpectedly matched).  `regexp' may be a regular expression
          object or a string containing a regular expression suitable
          for use by *Note re.search(): 9eb.

          New in version 2.7.


      -- Method: assertNotRegexpMatches (text, regexp, msg=None)
          Verifies that a `regexp' search does not match `text'.  Fails
          with an error message including the pattern and the part of
          `text' that matches.  `regexp' may be a regular expression
          object or a string containing a regular expression suitable
          for use by *Note re.search(): 9eb.

          New in version 2.7.


      -- Method: assertItemsEqual (actual, expected, msg=None)
          Test that sequence `expected' contains the same elements as
          `actual', regardless of their order. When they don’t, an
          error message listing the differences between the sequences
          will be generated.

          Duplicate elements are `not' ignored when comparing `actual'
          and `expected'. It verifies if each element has the same
          count in both sequences. It is the equivalent of
          `assertEqual(sorted(expected), sorted(actual))' but it works
          with sequences of unhashable objects as well.

          In Python 3, this method is named `assertCountEqual'.

          New in version 2.7.


      -- Method: assertDictContainsSubset (expected, actual, msg=None)
          Tests whether the key/value pairs in dictionary `actual' are a
          superset of those in `expected'.  If not, an error message
          listing the missing keys and mismatched values is generated.

          New in version 2.7.

          Deprecated since version 3.2.


     The *Note assertEqual(): 281. method dispatches the equality check
     for objects of the same type to different type-specific methods.
     These methods are already implemented for most of the built-in
     types, but it’s also possible to register new methods using
     *Note addTypeEqualityFunc(): 2a9.:

      -- Method: addTypeEqualityFunc (typeobj, function)
          Registers a type-specific method called by *Note
          assertEqual(): 281. to check if two objects of exactly the
          same `typeobj' (not subclasses) compare equal.  `function'
          must take two positional arguments and a third msg=None
          keyword argument just as *Note assertEqual(): 281. does.  It
          must raise *Note self.failureException(msg): 232c. when
          inequality between the first two parameters is detected –
          possibly providing useful information and explaining the
          inequalities in details in the error message.

          New in version 2.7.


     The list of type-specific methods automatically used by *Note
     assertEqual(): 281. are summarized in the following table.  Note
     that it’s usually not necessary to invoke these methods directly.

     Method                                        Used to compare                   New in
     --------------------------------------------------------------------------------------------------- 
     *Note assertMultiLineEqual(a, b): 297.        strings                           2.7
     *Note assertSequenceEqual(a, b): 2a1.         sequences                         2.7
     *Note assertListEqual(a, b): 29f.             lists                             2.7
     *Note assertTupleEqual(a, b): 2a0.            tuples                            2.7
     *Note assertSetEqual(a, b): 29e.              sets or frozensets                2.7
     *Note assertDictEqual(a, b): 2a2.             dicts                             2.7

      -- Method: assertMultiLineEqual (first, second, msg=None)
          Test that the multiline string `first' is equal to the string
          `second'.  When not equal a diff of the two strings
          highlighting the differences will be included in the error
          message. This method is used by default when comparing
          strings with *Note assertEqual(): 281.

          New in version 2.7.


      -- Method: assertSequenceEqual (seq1, seq2, msg=None,
               seq_type=None)
          Tests that two sequences are equal.  If a `seq_type' is
          supplied, both `seq1' and `seq2' must be instances of
          `seq_type' or a failure will be raised.  If the sequences are
          different an error message is constructed that shows the
          difference between the two.

          This method is not called directly by *Note assertEqual():
          281, but it’s used to implement *Note assertListEqual():
          29f. and *Note assertTupleEqual(): 2a0.

          New in version 2.7.


      -- Method: assertListEqual (list1, list2, msg=None)
      -- Method: assertTupleEqual (tuple1, tuple2, msg=None)
          Tests that two lists or tuples are equal.  If not, an error
          message is constructed that shows only the differences
          between the two.  An error is also raised if either of the
          parameters are of the wrong type.  These methods are used by
          default when comparing lists or tuples with *Note
          assertEqual(): 281.

          New in version 2.7.


      -- Method: assertSetEqual (set1, set2, msg=None)
          Tests that two sets are equal.  If not, an error message is
          constructed that lists the differences between the sets.
          This method is used by default when comparing sets or
          frozensets with *Note assertEqual(): 281.

          Fails if either of `set1' or `set2' does not have a
          `set.difference()' method.

          New in version 2.7.


      -- Method: assertDictEqual (expected, actual, msg=None)
          Test that two dictionaries are equal.  If not, an error
          message is constructed that shows the differences in the
          dictionaries. This method will be used by default to compare
          dictionaries in calls to *Note assertEqual(): 281.

          New in version 2.7.


     Finally the *Note TestCase: 285. provides the following methods
     and attributes:

      -- Method: fail (msg=None)
          Signals a test failure unconditionally, with `msg' or `None'
          for the error message.

      -- Attribute: failureException
          This class attribute gives the exception raised by the test
          method.  If a test framework needs to use a specialized
          exception, possibly to carry additional information, it must
          subclass this exception in order to “play fair” with the
          framework.  The initial value of this attribute is *Note
          AssertionError: 834.

      -- Attribute: longMessage
          If set to `True' then any explicit failure message you pass
          in to the *Note assert methods: 2306. will be appended to the
          end of the normal failure message.  The normal messages
          contain useful information about the objects involved, for
          example the message from assertEqual shows you the repr of
          the two unequal objects. Setting this attribute to `True'
          allows you to have a custom error message in addition to the
          normal one.

          This attribute defaults to `False', meaning that a custom
          message passed to an assert method will silence the normal
          message.

          The class setting can be overridden in individual tests by
          assigning an instance attribute to `True' or `False' before
          calling the assert methods.

          New in version 2.7.


      -- Attribute: maxDiff
          This attribute controls the maximum length of diffs output by
          assert methods that report diffs on failure. It defaults to
          80*8 characters.  Assert methods affected by this attribute
          are *Note assertSequenceEqual(): 2a1. (including all the
          sequence comparison methods that delegate to it), *Note
          assertDictEqual(): 2a2. and *Note assertMultiLineEqual(): 297.

          Setting `maxDiff' to `None' means that there is no maximum
          length of diffs.

          New in version 2.7.


     Testing frameworks can use the following methods to collect
     information on the test:

      -- Method: countTestCases ()
          Return the number of tests represented by this test object.
          For *Note TestCase: 285. instances, this will always be `1'.

      -- Method: defaultTestResult ()
          Return an instance of the test result class that should be
          used for this test case class (if no other result instance is
          provided to the *Note run(): 2327. method).

          For *Note TestCase: 285. instances, this will always be an
          instance of *Note TestResult: 2ab.; subclasses of *Note
          TestCase: 285. should override this as necessary.

      -- Method: id ()
          Return a string identifying the specific test case.  This is
          usually the full name of the test method, including the
          module and class name.

      -- Method: shortDescription ()
          Returns a description of the test, or `None' if no description
          has been provided.  The default implementation of this method
          returns the first line of the test method’s docstring, if
          available, or *Note None: 3b2.

      -- Method: addCleanup (function, *args, **kwargs)
          Add a function to be called after *Note tearDown(): 28c. to
          cleanup resources used during the test. Functions will be
          called in reverse order to the order they are added (LIFO).
          They are called with any arguments and keyword arguments
          passed into *Note addCleanup(): 289. when they are added.

          If *Note setUp(): 28b. fails, meaning that *Note tearDown():
          28c. is not called, then any cleanup functions added will
          still be called.

          New in version 2.7.


      -- Method: doCleanups ()
          This method is called unconditionally after *Note tearDown():
          28c, or after *Note setUp(): 28b. if *Note setUp(): 28b.
          raises an exception.

          It is responsible for calling all the cleanup functions added
          by *Note addCleanup(): 289. If you need cleanup functions to
          be called `prior' to *Note tearDown(): 28c. then you can call
          *Note doCleanups(): 28a.  yourself.

          *Note doCleanups(): 28a. pops methods off the stack of cleanup
          functions one at a time, so it can be called at any time.

          New in version 2.7.


 -- Class: unittest.FunctionTestCase (testFunc, setUp=None,
          tearDown=None, description=None)
     This class implements the portion of the *Note TestCase: 285.
     interface which allows the test runner to drive the test, but does
     not provide the methods which test code can use to check and
     report errors.  This is used to create test cases using legacy
     test code, allowing it to be integrated into a *Note unittest:
     187.-based test framework.

* Menu:

* Deprecated aliases::


File: python.info,  Node: Deprecated aliases,  Up: Test cases

5.25.3.10 Deprecated aliases
............................

For historical reasons, some of the *Note TestCase: 285. methods had
one or more aliases that are now deprecated.  The following table lists
the correct names along with their deprecated aliases:

      Method Name                        Deprecated alias(es)
     ----------------------------------------------------------------------- 
     *Note assertEqual(): 281.          failUnlessEqual, assertEquals
     *Note assertNotEqual(): 232a.      failIfEqual
     *Note assertTrue(): 282.           failUnless, assert_
     *Note assertFalse(): 283.          failIf
     *Note assertRaises(): 286.         failUnlessRaises
     *Note assertAlmostEqual(): 2a4.    failUnlessAlmostEqual
     *Note assertNotAlmostEqual(): 2a5. failIfAlmostEqual

     Deprecated since version 2.7: the aliases listed in the second
     column



File: python.info,  Node: Grouping tests,  Next: Loading and running tests,  Prev: Test cases,  Up: Classes and functions

5.25.3.11 Grouping tests
........................

 -- Class: unittest.TestSuite (tests=())
     This class represents an aggregation of individual tests cases and
     test suites.  The class presents the interface needed by the test
     runner to allow it to be run as any other test case.  Running a
     *Note TestSuite: 479. instance is the same as iterating over the
     suite, running each test individually.

     If `tests' is given, it must be an iterable of individual test
     cases or other test suites that will be used to build the suite
     initially. Additional methods are provided to add test cases and
     suites to the collection later on.

     *Note TestSuite: 479. objects behave much like *Note TestCase:
     285. objects, except they do not actually implement a test.
     Instead, they are used to aggregate tests into groups of tests
     that should be run together. Some additional methods are available
     to add tests to *Note TestSuite: 479. instances:

      -- Method: addTest (test)
          Add a *Note TestCase: 285. or *Note TestSuite: 479. to the
          suite.

      -- Method: addTests (tests)
          Add all the tests from an iterable of *Note TestCase: 285.
          and *Note TestSuite: 479.  instances to this test suite.

          This is equivalent to iterating over `tests', calling *Note
          addTest(): 2336. for each element.

     *Note TestSuite: 479. shares the following methods with *Note
     TestCase: 285.:

      -- Method: run (result)
          Run the tests associated with this suite, collecting the
          result into the test result object passed as `result'.  Note
          that unlike *Note TestCase.run(): 2327, *Note
          TestSuite.run(): 2338. requires the result object to be
          passed in.

      -- Method: debug ()
          Run the tests associated with this suite without collecting
          the result. This allows exceptions raised by the test to be
          propagated to the caller and can be used to support running
          tests under a debugger.

      -- Method: countTestCases ()
          Return the number of tests represented by this test object,
          including all individual tests and sub-suites.

      -- Method: __iter__ ()
          Tests grouped by a *Note TestSuite: 479. are always accessed
          by iteration.  Subclasses can lazily provide tests by
          overriding *Note __iter__(): 233b. Note that this method
          maybe called several times on a single suite (for example
          when counting tests or comparing for equality) so the tests
          returned must be the same for repeated iterations.

          Changed in version 2.7: In earlier versions the *Note
          TestSuite: 479. accessed tests directly rather than through
          iteration, so overriding *Note __iter__(): 233b. wasn’t
          sufficient for providing tests.


     In the typical usage of a *Note TestSuite: 479. object, the *Note
     run(): 2338. method is invoked by a `TestRunner' rather than by
     the end-user test harness.


File: python.info,  Node: Loading and running tests,  Prev: Grouping tests,  Up: Classes and functions

5.25.3.12 Loading and running tests
...................................

 -- Class: unittest.TestLoader
     The *Note TestLoader: 2a8. class is used to create test suites
     from classes and modules.  Normally, there is no need to create an
     instance of this class; the *Note unittest: 187. module provides
     an instance that can be shared as *Note
     unittest.defaultTestLoader: 233d.  Using a subclass or instance,
     however, allows customization of some configurable properties.

     *Note TestLoader: 2a8. objects have the following methods:

      -- Method: loadTestsFromTestCase (testCaseClass)
          Return a suite of all tests cases contained in the *Note
          TestCase: 285.-derived `testCaseClass'.

      -- Method: loadTestsFromModule (module)
          Return a suite of all tests cases contained in the given
          module. This method searches `module' for classes derived
          from *Note TestCase: 285. and creates an instance of the
          class for each test method defined for the class.

               Note: While using a hierarchy of *Note TestCase:
               285.-derived classes can be convenient in sharing
               fixtures and helper functions, defining test methods on
               base classes that are not intended to be instantiated
               directly does not play well with this method.  Doing so,
               however, can be useful when the fixtures are different
               and defined in subclasses.

          If a module provides a `load_tests' function it will be
          called to load the tests. This allows modules to customize
          test loading.  This is the *Note load_tests protocol: 2317.

          Changed in version 2.7: Support for `load_tests' added.


      -- Method: loadTestsFromName (name, module=None)
          Return a suite of all tests cases given a string specifier.

          The specifier `name' is a “dotted name” that may resolve
          either to a module, a test case class, a test method within a
          test case class, a *Note TestSuite: 479. instance, or a
          callable object which returns a *Note TestCase: 285. or *Note
          TestSuite: 479. instance.  These checks are applied in the
          order listed here; that is, a method on a possible test case
          class will be picked up as “a test method within a test
          case class”, rather than “a callable object”.

          For example, if you have a module `SampleTests' containing a
          *Note TestCase: 285.-derived class `SampleTestCase' with
          three test methods (`test_one()', `test_two()', and
          `test_three()'), the specifier `'SampleTests.SampleTestCase''
          would cause this method to return a suite which will run all
          three test methods. Using the specifier
          `'SampleTests.SampleTestCase.test_two'' would cause it to
          return a test suite which will run only the `test_two()' test
          method. The specifier can refer to modules and packages which
          have not been imported; they will be imported as a
          side-effect.

          The method optionally resolves `name' relative to the given
          `module'.

      -- Method: loadTestsFromNames (names, module=None)
          Similar to *Note loadTestsFromName(): 2a6, but takes a
          sequence of names rather than a single name.  The return
          value is a test suite which supports all the tests defined
          for each name.

      -- Method: getTestCaseNames (testCaseClass)
          Return a sorted sequence of method names found within
          `testCaseClass'; this should be a subclass of *Note TestCase:
          285.

      -- Method: discover (start_dir, pattern='test*.py',
               top_level_dir=None)
          Find all the test modules by recursing into subdirectories
          from the specified start directory, and return a TestSuite
          object containing them.  Only test files that match `pattern'
          will be loaded. (Using shell style pattern matching.) Only
          module names that are importable (i.e. are valid Python
          identifiers) will be loaded.

          All test modules must be importable from the top level of the
          project. If the start directory is not the top level
          directory then the top level directory must be specified
          separately.

          If importing a module fails, for example due to a syntax
          error, then this will be recorded as a single error and
          discovery will continue.

          If a test package name (directory with `__init__.py') matches
          the pattern then the package will be checked for a
          `load_tests' function. If this exists then it will be called
          with `loader', `tests', `pattern'.

          If load_tests exists then discovery does `not' recurse into
          the package, `load_tests' is responsible for loading all
          tests in the package.

          The pattern is deliberately not stored as a loader attribute
          so that packages can continue discovery themselves.
          `top_level_dir' is stored so `load_tests' does not need to
          pass this argument in to `loader.discover()'.

          `start_dir' can be a dotted module name as well as a
          directory.

          New in version 2.7.


     The following attributes of a *Note TestLoader: 2a8. can be
     configured either by subclassing or assignment on an instance:

      -- Attribute: testMethodPrefix
          String giving the prefix of method names which will be
          interpreted as test methods.  The default value is `'test''.

          This affects *Note getTestCaseNames(): 2341. and all the
          `loadTestsFrom*()' methods.

      -- Attribute: sortTestMethodsUsing
          Function to be used to compare method names when sorting them
          in *Note getTestCaseNames(): 2341. and all the
          `loadTestsFrom*()' methods. The default value is the built-in
          *Note cmp(): 4da. function; the attribute can also be set to
          *Note None: 3b2. to disable the sort.

      -- Attribute: suiteClass
          Callable object that constructs a test suite from a list of
          tests. No methods on the resulting object are needed.  The
          default value is the *Note TestSuite: 479. class.

          This affects all the `loadTestsFrom*()' methods.

 -- Class: unittest.TestResult
     This class is used to compile information about which tests have
     succeeded and which have failed.

     A *Note TestResult: 2ab. object stores the results of a set of
     tests.  The *Note TestCase: 285. and *Note TestSuite: 479. classes
     ensure that results are properly recorded; test authors do not
     need to worry about recording the outcome of tests.

     Testing frameworks built on top of *Note unittest: 187. may want
     access to the *Note TestResult: 2ab. object generated by running a
     set of tests for reporting purposes; a *Note TestResult: 2ab.
     instance is returned by the `TestRunner.run()' method for this
     purpose.

     *Note TestResult: 2ab. instances have the following attributes
     that will be of interest when inspecting the results of running a
     set of tests:

      -- Attribute: errors
          A list containing 2-tuples of *Note TestCase: 285. instances
          and strings holding formatted tracebacks. Each tuple
          represents a test which raised an unexpected exception.

          Changed in version 2.2: Contains formatted tracebacks instead
          of *Note sys.exc_info(): 306. results.


      -- Attribute: failures
          A list containing 2-tuples of *Note TestCase: 285. instances
          and strings holding formatted tracebacks. Each tuple
          represents a test where a failure was explicitly signalled
          using the `TestCase.assert*()' methods.

          Changed in version 2.2: Contains formatted tracebacks instead
          of *Note sys.exc_info(): 306. results.


      -- Attribute: skipped
          A list containing 2-tuples of *Note TestCase: 285. instances
          and strings holding the reason for skipping the test.

          New in version 2.7.


      -- Attribute: expectedFailures
          A list containing 2-tuples of *Note TestCase: 285. instances
          and strings holding formatted tracebacks.  Each tuple
          represents an expected failure of the test case.

      -- Attribute: unexpectedSuccesses
          A list containing *Note TestCase: 285. instances that were
          marked as expected failures, but succeeded.

      -- Attribute: shouldStop
          Set to `True' when the execution of tests should stop by
          *Note stop(): 234a.

      -- Attribute: testsRun
          The total number of tests run so far.

      -- Attribute: buffer
          If set to true, `sys.stdout' and `sys.stderr' will be
          buffered in between *Note startTest(): 234d. and *Note
          stopTest(): 234e. being called. Collected output will only be
          echoed onto the real `sys.stdout' and `sys.stderr' if the test
          fails or errors. Any output is also attached to the failure /
          error message.

          New in version 2.7.


      -- Attribute: failfast
          If set to true *Note stop(): 234a. will be called on the
          first failure or error, halting the test run.

          New in version 2.7.


      -- Method: wasSuccessful ()
          Return `True' if all tests run so far have passed, otherwise
          returns `False'.

      -- Method: stop ()
          This method can be called to signal that the set of tests
          being run should be aborted by setting the *Note shouldStop:
          2349. attribute to `True'.  `TestRunner' objects should
          respect this flag and return without running any additional
          tests.

          For example, this feature is used by the *Note
          TextTestRunner: 2308. class to stop the test framework when
          the user signals an interrupt from the keyboard.  Interactive
          tools which provide `TestRunner' implementations can use this
          in a similar manner.

     The following methods of the *Note TestResult: 2ab. class are used
     to maintain the internal data structures, and may be extended in
     subclasses to support additional reporting requirements.  This is
     particularly useful in building tools which support interactive
     reporting while tests are being run.

      -- Method: startTest (test)
          Called when the test case `test' is about to be run.

      -- Method: stopTest (test)
          Called after the test case `test' has been executed,
          regardless of the outcome.

      -- Method: startTestRun ()
          Called once before any tests are executed.

          New in version 2.7.


      -- Method: stopTestRun ()
          Called once after all tests are executed.

          New in version 2.7.


      -- Method: addError (test, err)
          Called when the test case `test' raises an unexpected
          exception. `err' is a tuple of the form returned by *Note
          sys.exc_info(): 306.: `(type, value, traceback)'.

          The default implementation appends a tuple `(test,
          formatted_err)' to the instance’s *Note errors: 2344.
          attribute, where `formatted_err' is a formatted traceback
          derived from `err'.

      -- Method: addFailure (test, err)
          Called when the test case `test' signals a failure. `err' is
          a tuple of the form returned by *Note sys.exc_info(): 306.:
          `(type, value, traceback)'.

          The default implementation appends a tuple `(test,
          formatted_err)' to the instance’s *Note failures: 2345.
          attribute, where `formatted_err' is a formatted traceback
          derived from `err'.

      -- Method: addSuccess (test)
          Called when the test case `test' succeeds.

          The default implementation does nothing.

      -- Method: addSkip (test, reason)
          Called when the test case `test' is skipped.  `reason' is the
          reason the test gave for skipping.

          The default implementation appends a tuple `(test, reason)'
          to the instance’s *Note skipped: 2346. attribute.

      -- Method: addExpectedFailure (test, err)
          Called when the test case `test' fails, but was marked with
          the *Note expectedFailure(): 231e. decorator.

          The default implementation appends a tuple `(test,
          formatted_err)' to the instance’s *Note expectedFailures:
          2347. attribute, where `formatted_err' is a formatted
          traceback derived from `err'.

      -- Method: addUnexpectedSuccess (test)
          Called when the test case `test' was marked with the *Note
          expectedFailure(): 231e. decorator, but succeeded.

          The default implementation appends the test to the
          instance’s *Note unexpectedSuccesses: 2348. attribute.

 -- Class: unittest.TextTestResult (stream, descriptions, verbosity)
     A concrete implementation of *Note TestResult: 2ab. used by the
     *Note TextTestRunner: 2308.

     New in version 2.7: This class was previously named
     `_TextTestResult'. The old name still exists as an alias but is
     deprecated.


 -- Data: unittest.defaultTestLoader
     Instance of the *Note TestLoader: 2a8. class intended to be
     shared.  If no customization of the *Note TestLoader: 2a8. is
     needed, this instance can be used instead of repeatedly creating
     new instances.

 -- Class: unittest.TextTestRunner (stream=sys.stderr,
          descriptions=True, verbosity=1, failfast=False, buffer=False,
          resultclass=None)
     A basic test runner implementation which prints results on
     standard error. It has a few configurable parameters, but is
     essentially very simple.  Graphical applications which run test
     suites should provide alternate implementations.

      -- Method: _makeResult ()
          This method returns the instance of `TestResult' used by
          `run()'.  It is not intended to be called directly, but can
          be overridden in subclasses to provide a custom `TestResult'.

          `_makeResult()' instantiates the class or callable passed in
          the `TextTestRunner' constructor as the `resultclass'
          argument. It defaults to *Note TextTestResult: 2357. if no
          `resultclass' is provided.  The result class is instantiated
          with the following arguments:

              stream, descriptions, verbosity

 -- Function: unittest.main ([module[, defaultTest[, argv[,
          testRunner[, testLoader[, exit[, verbosity[, failfast[,
          catchbreak[, buffer]]]]]]]]]])
     A command-line program that loads a set of tests from `module' and
     runs them; this is primarily for making test modules conveniently
     executable.  The simplest use for this function is to include the
     following line at the end of a test script:

         if __name__ == '__main__':
             unittest.main()

     You can run tests with more detailed information by passing in the
     verbosity argument:

         if __name__ == '__main__':
             unittest.main(verbosity=2)

     The `defaultTest' argument is the name of the test to run if no
     test names are specified via `argv'.  If not specified or `None'
     and no test names are provided via `argv', all tests found in
     `module' are run.

     The `argv' argument can be a list of options passed to the
     program, with the first element being the program name.  If not
     specified or `None', the values of *Note sys.argv: 65a. are used.

     The `testRunner' argument can either be a test runner class or an
     already created instance of it. By default `main' calls *Note
     sys.exit(): 2aa. with an exit code indicating success or failure
     of the tests run.

     The `testLoader' argument has to be a *Note TestLoader: 2a8.
     instance, and defaults to *Note defaultTestLoader: 233d.

     `main' supports being used from the interactive interpreter by
     passing in the argument `exit=False'. This displays the result on
     standard output without calling *Note sys.exit(): 2aa.:

         >>> from unittest import main
         >>> main(module='test_module', exit=False)

     The `failfast', `catchbreak' and `buffer' parameters have the same
     effect as the same-name *Note command-line options: 230e.

     Calling `main' actually returns an instance of the `TestProgram'
     class.  This stores the result of the tests run as the `result'
     attribute.

     Changed in version 2.7: The `exit', `verbosity', `failfast',
     `catchbreak' and `buffer' parameters were added.


* Menu:

* load_tests Protocol::


File: python.info,  Node: load_tests Protocol,  Up: Loading and running tests

5.25.3.13 load_tests Protocol
.............................

New in version 2.7.

Modules or packages can customize how tests are loaded from them during
normal test runs or test discovery by implementing a function called
`load_tests'.

If a test module defines `load_tests' it will be called by *Note
TestLoader.loadTestsFromModule(): 233f. with the following arguments:

    load_tests(loader, standard_tests, None)

It should return a *Note TestSuite: 479.

`loader' is the instance of *Note TestLoader: 2a8. doing the loading.
`standard_tests' are the tests that would be loaded by default from the
module. It is common for test modules to only want to add or remove
tests from the standard set of tests.  The third argument is used when
loading packages as part of test discovery.

A typical `load_tests' function that loads tests from a specific set of
*Note TestCase: 285. classes may look like:

    test_cases = (TestCase1, TestCase2, TestCase3)

    def load_tests(loader, tests, pattern):
        suite = TestSuite()
        for test_class in test_cases:
            tests = loader.loadTestsFromTestCase(test_class)
            suite.addTests(tests)
        return suite

If discovery is started, either from the command line or by calling
*Note TestLoader.discover(): 2312, with a pattern that matches a package
name then the package `__init__.py' will be checked for `load_tests'.

     Note: The default pattern is `'test*.py''. This matches all Python
     files that start with `'test'' but `won’t' match any test
     directories.

     A pattern like `'test*'' will match test packages as well as
     modules.

If the package `__init__.py' defines `load_tests' then it will be
called and discovery not continued into the package. `load_tests' is
called with the following arguments:

    load_tests(loader, standard_tests, pattern)

This should return a *Note TestSuite: 479. representing all the tests
from the package. (`standard_tests' will only contain tests collected
from `__init__.py'.)

Because the pattern is passed into `load_tests' the package is free to
continue (and potentially modify) test discovery. A ‘do nothing’
`load_tests' function for a test package would look like:

    def load_tests(loader, standard_tests, pattern):
        # top level directory cached on loader instance
        this_dir = os.path.dirname(__file__)
        package_tests = loader.discover(start_dir=this_dir, pattern=pattern)
        standard_tests.addTests(package_tests)
        return standard_tests


File: python.info,  Node: Class and Module Fixtures,  Next: Signal Handling,  Prev: Classes and functions,  Up: unittest — Unit testing framework

5.25.3.14 Class and Module Fixtures
...................................

Class and module level fixtures are implemented in *Note TestSuite:
479. When the test suite encounters a test from a new class then
`tearDownClass()' from the previous class (if there is one) is called,
followed by `setUpClass()' from the new class.

Similarly if a test is from a different module from the previous test
then `tearDownModule' from the previous module is run, followed by
`setUpModule' from the new module.

After all the tests have run the final `tearDownClass' and
`tearDownModule' are run.

Note that shared fixtures do not play well with [potential] features
like test parallelization and they break test isolation. They should be
used with care.

The default ordering of tests created by the unittest test loaders is
to group all tests from the same modules and classes together. This
will lead to `setUpClass' / `setUpModule' (etc) being called exactly
once per class and module. If you randomize the order, so that tests
from different modules and classes are adjacent to each other, then
these shared fixture functions may be called multiple times in a single
test run.

Shared fixtures are not intended to work with suites with non-standard
ordering. A `BaseTestSuite' still exists for frameworks that don’t
want to support shared fixtures.

If there are any exceptions raised during one of the shared fixture
functions the test is reported as an error. Because there is no
corresponding test instance an `_ErrorHolder' object (that has the same
interface as a *Note TestCase: 285.) is created to represent the error.
If you are just using the standard unittest test runner then this
detail doesn’t matter, but if you are a framework author it may be
relevant.

* Menu:

* setUpClass and tearDownClass::
* setUpModule and tearDownModule::


File: python.info,  Node: setUpClass and tearDownClass,  Next: setUpModule and tearDownModule,  Up: Class and Module Fixtures

5.25.3.15 setUpClass and tearDownClass
......................................

These must be implemented as class methods:

    import unittest

    class Test(unittest.TestCase):
        @classmethod
        def setUpClass(cls):
            cls._connection = createExpensiveConnectionObject()

        @classmethod
        def tearDownClass(cls):
            cls._connection.destroy()

If you want the `setUpClass' and `tearDownClass' on base classes called
then you must call up to them yourself. The implementations in *Note
TestCase: 285. are empty.

If an exception is raised during a `setUpClass' then the tests in the
class are not run and the `tearDownClass' is not run. Skipped classes
will not have `setUpClass' or `tearDownClass' run. If the exception is a
*Note SkipTest: 280. exception then the class will be reported as
having been skipped instead of as an error.


File: python.info,  Node: setUpModule and tearDownModule,  Prev: setUpClass and tearDownClass,  Up: Class and Module Fixtures

5.25.3.16 setUpModule and tearDownModule
........................................

These should be implemented as functions:

    def setUpModule():
        createConnection()

    def tearDownModule():
        closeConnection()

If an exception is raised in a `setUpModule' then none of the tests in
the module will be run and the `tearDownModule' will not be run. If the
exception is a *Note SkipTest: 280. exception then the module will be
reported as having been skipped instead of as an error.


File: python.info,  Node: Signal Handling,  Prev: Class and Module Fixtures,  Up: unittest — Unit testing framework

5.25.3.17 Signal Handling
.........................

The *Note -c/-catch: 27d. command-line option to unittest, along with
the `catchbreak' parameter to *Note unittest.main(): 27b, provide more
friendly handling of control-C during a test run. With catch break
behavior enabled control-C will allow the currently running test to
complete, and the test run will then end and report all the results so
far. A second control-c will raise a *Note KeyboardInterrupt: 251. in
the usual way.

The control-c handling signal handler attempts to remain compatible
with code or tests that install their own `signal.SIGINT' handler. If
the `unittest' handler is called but `isn’t' the installed
`signal.SIGINT' handler, i.e. it has been replaced by the system under
test and delegated to, then it calls the default handler. This will
normally be the expected behavior by code that replaces an installed
handler and delegates to it. For individual tests that need `unittest'
control-c handling disabled the *Note removeHandler(): 27e.  decorator
can be used.

There are a few utility functions for framework authors to enable
control-c handling functionality within test frameworks.

 -- Function: unittest.installHandler ()
     Install the control-c handler. When a `signal.SIGINT' is received
     (usually in response to the user pressing control-c) all
     registered results have *Note stop(): 234a. called.

     New in version 2.7.


 -- Function: unittest.registerResult (result)
     Register a *Note TestResult: 2ab. object for control-c handling.
     Registering a result stores a weak reference to it, so it
     doesn’t prevent the result from being garbage collected.

     Registering a *Note TestResult: 2ab. object has no side-effects if
     control-c handling is not enabled, so test frameworks can
     unconditionally register all results they create independently of
     whether or not handling is enabled.

     New in version 2.7.


 -- Function: unittest.removeResult (result)
     Remove a registered result. Once a result has been removed then
     *Note stop(): 234a. will no longer be called on that result object
     in response to a control-c.

     New in version 2.7.


 -- Function: unittest.removeHandler (function=None)
     When called without arguments this function removes the control-c
     handler if it has been installed. This function can also be used
     as a test decorator to temporarily remove the handler whilst the
     test is being executed:

         @unittest.removeHandler
         def test_signal_handling(self):
             ...

     New in version 2.7.



File: python.info,  Node: 2to3 - Automated Python 2 to 3 code translation,  Next: test — Regression tests package for Python,  Prev: unittest — Unit testing framework,  Up: Development Tools

5.25.4 2to3 - Automated Python 2 to 3 code translation
------------------------------------------------------

2to3 is a Python program that reads Python 2.x source code and applies
a series of `fixers' to transform it into valid Python 3.x code.  The
standard library contains a rich set of fixers that will handle almost
all code.  2to3 supporting library *Note lib2to3: ff. is, however, a
flexible and generic library, so it is possible to write your own
fixers for 2to3.  *Note lib2to3: ff. could also be adapted to custom
applications in which Python code needs to be edited automatically.

* Menu:

* Using 2to3::
* Fixers::
* lib2to3 - 2to3’s library::


File: python.info,  Node: Using 2to3,  Next: Fixers,  Up: 2to3 - Automated Python 2 to 3 code translation

5.25.4.1 Using 2to3
...................

2to3 will usually be installed with the Python interpreter as a script.
It is also located in the `Tools/scripts' directory of the Python root.

2to3’s basic arguments are a list of files or directories to
transform.  The directories are recursively traversed for Python
sources.

Here is a sample Python 2.x source file, `example.py':

    def greet(name):
        print "Hello, {0}!".format(name)
    print "What's your name?"
    name = raw_input()
    greet(name)

It can be converted to Python 3.x code via 2to3 on the command line:

    $ 2to3 example.py

A diff against the original source file is printed.  2to3 can also
write the needed modifications right back to the source file.  (A
backup of the original file is made unless `-n' is also given.)
Writing the changes back is enabled with the `-w' flag:

    $ 2to3 -w example.py

After transformation, `example.py' looks like this:

    def greet(name):
        print("Hello, {0}!".format(name))
    print("What's your name?")
    name = input()
    greet(name)

Comments and exact indentation are preserved throughout the translation
process.

By default, 2to3 runs a set of *Note predefined fixers: 2363.  The `-l'
flag lists all available fixers.  An explicit set of fixers to run can
be given with `-f'.  Likewise the `-x' explicitly disables a fixer.
The following example runs only the `imports' and `has_key' fixers:

    $ 2to3 -f imports -f has_key example.py

This command runs every fixer except the `apply' fixer:

    $ 2to3 -x apply example.py

Some fixers are `explicit', meaning they aren’t run by default and
must be listed on the command line to be run.  Here, in addition to the
default fixers, the `idioms' fixer is run:

    $ 2to3 -f all -f idioms example.py

Notice how passing `all' enables all default fixers.

Sometimes 2to3 will find a place in your source code that needs to be
changed, but 2to3 cannot fix automatically.  In this case, 2to3 will
print a warning beneath the diff for a file.  You should address the
warning in order to have compliant 3.x code.

2to3 can also refactor doctests.  To enable this mode, use the `-d'
flag.  Note that `only' doctests will be refactored.  This also
doesn’t require the module to be valid Python.  For example, doctest
like examples in a reST document could also be refactored with this
option.

The `-v' option enables output of more information on the translation
process.

Since some print statements can be parsed as function calls or
statements, 2to3 cannot always read files containing the print
function.  When 2to3 detects the presence of the `from __future__
import print_function' compiler directive, it modifies its internal
grammar to interpret *Note print(): 31f. as a function.  This change
can also be enabled manually with the `-p' flag.  Use `-p' to run
fixers on code that already has had its print statements converted.

The `-o' or `--output-dir' option allows specification of an alternate
directory for processed output files to be written to.  The `-n' flag
is required when using this as backup files do not make sense when not
overwriting the input files.

New in version 2.7.3: The `-o' option was added.

The `-W' or `--write-unchanged-files' flag tells 2to3 to always write
output files even if no changes were required to the file.  This is most
useful with `-o' so that an entire Python source tree is copied with
translation from one directory to another.  This option implies the
`-w' flag as it would not make sense otherwise.

New in version 2.7.3: The `-W' flag was added.

The `--add-suffix' option specifies a string to append to all output
filenames.  The `-n' flag is required when specifying this as backups
are not necessary when writing to different filenames.  Example:

    $ 2to3 -n -W --add-suffix=3 example.py

Will cause a converted file named `example.py3' to be written.

New in version 2.7.3: The `--add-suffix' option was added.

To translate an entire project from one directory tree to another use:

    $ 2to3 --output-dir=python3-version/mycode -W -n python2-version/mycode


File: python.info,  Node: Fixers,  Next: lib2to3 - 2to3’s library,  Prev: Using 2to3,  Up: 2to3 - Automated Python 2 to 3 code translation

5.25.4.2 Fixers
...............

Each step of transforming code is encapsulated in a fixer.  The command
`2to3 -l' lists them.  As *Note documented above: 2361, each can be
turned on and off individually.  They are described here in more detail.

 -- 2to3fixer: apply
     Removes usage of *Note apply(): 317.  For example `apply(function,
     *args, **kwargs)' is converted to `function(*args, **kwargs)'.

 -- 2to3fixer: asserts
     Replaces deprecated *Note unittest: 187. method names with the
     correct ones.

     From                                 To
     ------------------------------------------------------------------------------------ 
     `failUnlessEqual(a, b)'              *Note assertEqual(a, b): 281.
     `assertEquals(a, b)'                 *Note assertEqual(a, b): 281.
     `failIfEqual(a, b)'                  *Note assertNotEqual(a, b): 232a.
     `assertNotEquals(a, b)'              *Note assertNotEqual(a, b): 232a.
     `failUnless(a)'                      *Note assertTrue(a): 282.
     `assert_(a)'                         *Note assertTrue(a): 282.
     `failIf(a)'                          *Note assertFalse(a): 283.
     `failUnlessRaises(exc, cal)'         *Note assertRaises(exc, cal): 286.
     `failUnlessAlmostEqual(a, b)'        *Note assertAlmostEqual(a, b): 2a4.
     `assertAlmostEquals(a, b)'           *Note assertAlmostEqual(a, b): 2a4.
     `failIfAlmostEqual(a, b)'            *Note assertNotAlmostEqual(a, b): 2a5.
     `assertNotAlmostEquals(a, b)'        *Note assertNotAlmostEqual(a, b): 2a5.


 -- 2to3fixer: basestring
     Converts *Note basestring: 474. to *Note str: 1ea.

 -- 2to3fixer: buffer
     Converts *Note buffer: 32a. to *Note memoryview: 1c4.  This fixer
     is optional because the *Note memoryview: 1c4. API is similar but
     not exactly the same as that of *Note buffer: 32a.

 -- 2to3fixer: callable
     Converts `callable(x)' to `isinstance(x, collections.Callable)',
     adding an import to *Note collections: 65. if needed. Note
     `callable(x)' has returned in Python 3.2, so if you do not intend
     to support Python 3.1, you can disable this fixer.

 -- 2to3fixer: dict
     Fixes dictionary iteration methods.  *Note dict.iteritems(): 929.
     is converted to *Note dict.items(): 1e3, *Note dict.iterkeys():
     923. to *Note dict.keys(): 1e1, and *Note dict.itervalues(): 92a.
     to *Note dict.values(): 1e2.  Similarly, *Note dict.viewitems():
     1e6, *Note dict.viewkeys(): 1e4. and *Note dict.viewvalues(): 1e5.
     are converted respectively to *Note dict.items(): 1e3, *Note
     dict.keys(): 1e1. and *Note dict.values(): 1e2.  It also wraps
     existing usages of *Note dict.items(): 1e3, *Note dict.keys():
     1e1, and *Note dict.values(): 1e2. in a call to *Note list: 3d6.

 -- 2to3fixer: except
     Converts `except X, T' to `except X as T'.

 -- 2to3fixer: exec
     Converts the *Note exec: 41d. statement to the `exec()' function.

 -- 2to3fixer: execfile
     Removes usage of *Note execfile(): 44f.  The argument to *Note
     execfile(): 44f. is wrapped in calls to *Note open(): 2d9, *Note
     compile(): 1fb, and `exec()'.

 -- 2to3fixer: exitfunc
     Changes assignment of *Note sys.exitfunc: 427. to use of the *Note
     atexit: 12.  module.

 -- 2to3fixer: filter
     Wraps *Note filter(): 422. usage in a *Note list: 3d6. call.

 -- 2to3fixer: funcattrs
     Fixes function attributes that have been renamed.  For example,
     `my_function.func_closure' is converted to
     `my_function.__closure__'.

 -- 2to3fixer: future
     Removes `from __future__ import new_feature' statements.

 -- 2to3fixer: getcwdu
     Renames *Note os.getcwdu(): 44b. to *Note os.getcwd(): 1174.

 -- 2to3fixer: has_key
     Changes `dict.has_key(key)' to `key in dict'.

 -- 2to3fixer: idioms
     This optional fixer performs several transformations that make
     Python code more idiomatic.  Type comparisons like `type(x) is
     SomeClass' and `type(x) == SomeClass' are converted to
     `isinstance(x, SomeClass)'.  `while 1' becomes `while True'.  This
     fixer also tries to make use of *Note sorted(): 223. in
     appropriate places.  For example, this block

         L = list(some_iterable)
         L.sort()

     is changed to

         L = sorted(some_iterable)

 -- 2to3fixer: import
     Detects sibling imports and converts them to relative imports.

 -- 2to3fixer: imports
     Handles module renames in the standard library.

 -- 2to3fixer: imports2
     Handles other modules renames in the standard library.  It is
     separate from the *Note imports: 2376. fixer only because of
     technical limitations.

 -- 2to3fixer: input
     Converts `input(prompt)' to `eval(input(prompt))'.

 -- 2to3fixer: intern
     Converts *Note intern(): 8a4. to `sys.intern()'.

 -- 2to3fixer: isinstance
     Fixes duplicate types in the second argument of *Note
     isinstance(): 332.  For example, `isinstance(x, (int, int))' is
     converted to `isinstance(x, (int))'.

 -- 2to3fixer: itertools_imports
     Removes imports of *Note itertools.ifilter(): 8aa, *Note
     itertools.izip(): 41f, and *Note itertools.imap(): d8d.  Imports
     of *Note itertools.ifilterfalse(): 8ab. are also changed to
     `itertools.filterfalse()'.

 -- 2to3fixer: itertools
     Changes usage of *Note itertools.ifilter(): 8aa, *Note
     itertools.izip(): 41f, and *Note itertools.imap(): d8d. to their
     built-in equivalents.  *Note itertools.ifilterfalse(): 8ab. is
     changed to `itertools.filterfalse()'.

 -- 2to3fixer: long
     Renames *Note long: 1f3. to *Note int: 1f2.

 -- 2to3fixer: map
     Wraps *Note map(): 318. in a *Note list: 3d6. call.  It also
     changes `map(None, x)' to `list(x)'.  Using `from future_builtins
     import map' disables this fixer.

 -- 2to3fixer: metaclass
     Converts the old metaclass syntax (`__metaclass__ = Meta' in the
     class body) to the new (`class X(metaclass=Meta)').

 -- 2to3fixer: methodattrs
     Fixes old method attribute names.  For example, `meth.im_func' is
     converted to `meth.__func__'.

 -- 2to3fixer: ne
     Converts the old not-equal syntax, `<>', to `!='.

 -- 2to3fixer: next
     Converts the use of iterator’s *Note next(): 5f4. methods to the
     *Note next(): 3b1. function.  It also renames *Note next(): 5f4.
     methods to `__next__()'.

 -- 2to3fixer: nonzero
     Renames *Note __nonzero__(): 734. to `__bool__()'.

 -- 2to3fixer: numliterals
     Converts octal literals into the new syntax.

 -- 2to3fixer: paren
     Add extra parenthesis where they are required in list
     comprehensions.  For example, `[x for x in 1, 2]' becomes `[x for
     x in (1, 2)]'.

 -- 2to3fixer: print
     Converts the *Note print: 4fd. statement to the *Note print():
     31f. function.

 -- 2to3fixer: raise
     Converts `raise E, V' to `raise E(V)', and `raise E, V, T' to
     `raise E(V).with_traceback(T)'.  If `E' is a tuple, the
     translation will be incorrect because substituting tuples for
     exceptions has been removed in Python 3.

 -- 2to3fixer: raw_input
     Converts *Note raw_input(): 891. to *Note input(): 3d9.

 -- 2to3fixer: reduce
     Handles the move of *Note reduce(): 2fc. to *Note
     functools.reduce(): 2fb.

 -- 2to3fixer: renames
     Changes *Note sys.maxint: 238b. to *Note sys.maxsize: 75a.

 -- 2to3fixer: repr
     Replaces backtick repr with the *Note repr(): 1c6. function.

 -- 2to3fixer: set_literal
     Replaces use of the *Note set: 382. constructor with set literals.
     This fixer is optional.

 -- 2to3fixer: standarderror
     Renames *Note StandardError: 39a. to *Note Exception: 34d.

 -- 2to3fixer: sys_exc
     Changes the deprecated *Note sys.exc_value: 2390, *Note
     sys.exc_type: 2391, *Note sys.exc_traceback: 2392. to use *Note
     sys.exc_info(): 306.

 -- 2to3fixer: throw
     Fixes the API change in generator’s `throw()' method.

 -- 2to3fixer: tuple_params
     Removes implicit tuple parameter unpacking.  This fixer inserts
     temporary variables.

 -- 2to3fixer: types
     Fixes code broken from the removal of some members in the *Note
     types: 185.  module.

 -- 2to3fixer: unicode
     Renames *Note unicode: 1f5. to *Note str: 1ea.

 -- 2to3fixer: urllib
     Handles the rename of *Note urllib: 188. and *Note urllib2: 189.
     to the *Note urllib: 188.  package.

 -- 2to3fixer: ws_comma
     Removes excess whitespace from comma separated items.  This fixer
     is optional.

 -- 2to3fixer: xrange
     Renames *Note xrange(): 477. to *Note range(): 2db. and wraps
     existing *Note range(): 2db.  calls with *Note list: 3d6.

 -- 2to3fixer: xreadlines
     Changes `for x in file.xreadlines()' to `for x in file'.

 -- 2to3fixer: zip
     Wraps *Note zip(): 41e. usage in a *Note list: 3d6. call.  This is
     disabled when `from future_builtins import zip' appears.

