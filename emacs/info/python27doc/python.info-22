This is python.info, produced by makeinfo version 4.8 from python.texi.

Generated by Sphinx 1.6.3.
INFO-DIR-SECTION Python
START-INFO-DIR-ENTRY
* Python: (python.info). The Python reference manual.
END-INFO-DIR-ENTRY

     Python 2.7.13, July 15, 2017

     Copyright (C) 1990-2017, Python Software Foundation


File: python.info,  Node: MBCS codecs for Windows,  Next: Methods & Slots,  Prev: Character Map Codecs,  Up: Built-in Codecs

7.7.3.23 MBCS codecs for Windows
................................

These are the MBCS codec APIs. They are currently only available on
Windows and use the Win32 MBCS converters to implement the conversions.
Note that MBCS (or DBCS) is a class of encodings, not just one.  The
target encoding is defined by the user settings on the machine running
the codec.

 -- C Function: PyObject* PyUnicode_DecodeMBCS (const char *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Create a Unicode object by
     decoding `size' bytes of the MBCS encoded string `s'.  Return
     `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_DecodeMBCSStateful (const char *s,
          int size, const char *errors, int *consumed)
     If `consumed' is `NULL', behave like *Note PyUnicode_DecodeMBCS():
     2d56. If `consumed' is not `NULL', *Note
     PyUnicode_DecodeMBCSStateful(): 2d57. will not decode trailing
     lead byte and the number of bytes that have been decoded will be
     stored in `consumed'.

     New in version 2.5.


 -- C Function: PyObject* PyUnicode_EncodeMBCS (const Py_UNICODE *s,
          Py_ssize_t size, const char *errors)
     `Return value: New reference.'  Encode the *Note Py_UNICODE: ab3.
     buffer of the given `size' using MBCS and return a Python string
     object.  Return `NULL' if an exception was raised by the codec.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_AsMBCSString (PyObject *unicode)
     `Return value: New reference.'  Encode a Unicode object using MBCS
     and return the result as Python string object.  Error handling is
     “strict”.  Return `NULL' if an exception was raised by the
     codec.


File: python.info,  Node: Methods & Slots,  Prev: MBCS codecs for Windows,  Up: Built-in Codecs

7.7.3.24 Methods & Slots
........................


File: python.info,  Node: Methods and Slot Functions,  Prev: Built-in Codecs,  Up: Unicode Objects and Codecs

7.7.3.25 Methods and Slot Functions
...................................

The following APIs are capable of handling Unicode objects and strings
on input (we refer to them as strings in the descriptions) and return
Unicode objects or integers as appropriate.

They all return `NULL' or `-1' if an exception occurs.

 -- C Function: PyObject* PyUnicode_Concat (PyObject *left,
          PyObject *right)
     `Return value: New reference.'  Concat two strings giving a new
     Unicode string.

 -- C Function: PyObject* PyUnicode_Split (PyObject *s, PyObject *sep,
          Py_ssize_t maxsplit)
     `Return value: New reference.'  Split a string giving a list of
     Unicode strings.  If `sep' is `NULL', splitting will be done at
     all whitespace substrings.  Otherwise, splits occur at the given
     separator.  At most `maxsplit' splits will be done.  If negative,
     no limit is set.  Separators are not included in the resulting
     list.

     Changed in version 2.5: This function used an `int' type for
     `maxsplit'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_Splitlines (PyObject *s,
          int keepend)
     `Return value: New reference.'  Split a Unicode string at line
     breaks, returning a list of Unicode strings.  CRLF is considered
     to be one line break.  If `keepend' is `0', the Line break
     characters are not included in the resulting strings.

 -- C Function: PyObject* PyUnicode_Translate (PyObject *str,
          PyObject *table, const char *errors)
     `Return value: New reference.'  Translate a string by applying a
     character mapping table to it and return the resulting Unicode
     object.

     The mapping table must map Unicode ordinal integers to Unicode
     ordinal integers or `None' (causing deletion of the character).

     Mapping tables need only provide the *Note __getitem__(): 468.
     interface; dictionaries and sequences work well.  Unmapped
     character ordinals (ones which cause a *Note LookupError: 8b9.)
     are left untouched and are copied as-is.

     `errors' has the usual meaning for codecs. It may be `NULL' which
     indicates to use the default error handling.

 -- C Function: PyObject* PyUnicode_Join (PyObject *separator,
          PyObject *seq)
     `Return value: New reference.'  Join a sequence of strings using
     the given `separator' and return the resulting Unicode string.

 -- C Function: Py_ssize_t PyUnicode_Tailmatch (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)
     Return `1' if `substr' matches `str[start:end]' at the given tail
     end (`direction' == `-1' means to do a prefix match, `direction'
     == `1' a suffix match), `0' otherwise. Return `-1' if an error
     occurred.

     Changed in version 2.5: This function used an `int' type for
     `start' and `end'. This might require changes in your code for
     properly supporting 64-bit systems.


 -- C Function: Py_ssize_t PyUnicode_Find (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end,
          int direction)
     Return the first position of `substr' in `str[start:end]' using
     the given `direction' (`direction' == `1' means to do a forward
     search, `direction' == `-1' a backward search).  The return value
     is the index of the first match; a value of `-1' indicates that no
     match was found, and `-2' indicates that an error occurred and an
     exception has been set.

     Changed in version 2.5: This function used an `int' type for
     `start' and `end'. This might require changes in your code for
     properly supporting 64-bit systems.


 -- C Function: Py_ssize_t PyUnicode_Count (PyObject *str,
          PyObject *substr, Py_ssize_t start, Py_ssize_t end)
     Return the number of non-overlapping occurrences of `substr' in
     `str[start:end]'.  Return `-1' if an error occurred.

     Changed in version 2.5: This function returned an `int' type and
     used an `int' type for `start' and `end'. This might require
     changes in your code for properly supporting 64-bit systems.


 -- C Function: PyObject* PyUnicode_Replace (PyObject *str,
          PyObject *substr, PyObject *replstr, Py_ssize_t maxcount)
     `Return value: New reference.'  Replace at most `maxcount'
     occurrences of `substr' in `str' with `replstr' and return the
     resulting Unicode object. `maxcount' == `-1' means replace all
     occurrences.

     Changed in version 2.5: This function used an `int' type for
     `maxcount'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyUnicode_Compare (PyObject *left, PyObject *right)
     Compare two strings and return `-1', `0', `1' for less than,
     equal, and greater than, respectively.

 -- C Function: int PyUnicode_RichCompare (PyObject *left,
          PyObject *right, int op)
     Rich compare two unicode strings and return one of the following:

        * `NULL' in case an exception was raised

        * `Py_True' or `Py_False' for successful comparisons

        * `Py_NotImplemented' in case the type combination is unknown

     Note that `Py_EQ' and `Py_NE' comparisons can cause a *Note
     UnicodeWarning: 989. in case the conversion of the arguments to
     Unicode fails with a *Note UnicodeDecodeError: 982.

     Possible values for `op' are `Py_GT', `Py_GE', `Py_EQ', `Py_NE',
     `Py_LT', and `Py_LE'.

 -- C Function: PyObject* PyUnicode_Format (PyObject *format,
          PyObject *args)
     `Return value: New reference.'  Return a new string object from
     `format' and `args'; this is analogous to `format % args'.

 -- C Function: int PyUnicode_Contains (PyObject *container,
          PyObject *element)
     Check whether `element' is contained in `container' and return
     true or false accordingly.

     `element' has to coerce to a one element Unicode string. `-1' is
     returned if there was an error.


File: python.info,  Node: Buffers and Memoryview Objects,  Next: Tuple Objects,  Prev: Unicode Objects and Codecs,  Up: Sequence Objects

7.7.3.26 Buffers and Memoryview Objects
.......................................

Python objects implemented in C can export a group of functions called
the “buffer interface.”  These functions can be used by an object
to expose its data in a raw, byte-oriented format. Clients of the
object can use the buffer interface to access the object data directly,
without needing to copy it first.

Two examples of objects that support the buffer interface are strings
and arrays. The string object exposes the character contents in the
buffer interface’s byte-oriented form. An array can only expose its
contents via the old-style buffer interface. This limitation does not
apply to Python 3, where *Note memoryview: 1c4. objects can be
constructed from arrays, too.  Array elements may be multi-byte values.

An example user of the buffer interface is the file object’s `write()'
method. Any object that can export a series of bytes through the buffer
interface can be written to a file. There are a number of format codes
to *Note PyArg_ParseTuple(): 32f. that operate against an object’s
buffer interface, returning data from the target object.

Starting from version 1.6, Python has been providing Python-level buffer
objects and a C-level buffer API so that any built-in or used-defined
type can expose its characteristics. Both, however, have been
deprecated because of various shortcomings, and have been officially
removed in Python 3 in favour of a new C-level buffer API and a new
Python-level object named *Note memoryview: 1c4.

The new buffer API has been backported to Python 2.6, and the *Note
memoryview: 1c4. object has been backported to Python 2.7. It is
strongly advised to use them rather than the old APIs, unless you are
blocked from doing so for compatibility reasons.

* Menu:

* The new-style Py_buffer struct::
* Buffer related functions::
* MemoryView objects::
* Old-style buffer objects::


File: python.info,  Node: The new-style Py_buffer struct,  Next: Buffer related functions,  Up: Buffers and Memoryview Objects

7.7.3.27 The new-style Py_buffer struct
.......................................

 -- C Type: Py_buffer
      -- C Member: void *buf
          A pointer to the start of the memory for the object.

      -- C Member: Py_ssize_t len
          The total length of the memory in bytes.

      -- C Member: int readonly
          An indicator of whether the buffer is read only.

      -- C Member: const char *format
          A `NULL' terminated string in *Note struct: 166. module style
          syntax giving the contents of the elements available through
          the buffer.  If this is `NULL', `"B"' (unsigned bytes) is
          assumed.

      -- C Member: int ndim
          The number of dimensions the memory represents as a
          multi-dimensional array.  If it is `0', `strides' and
          `suboffsets' must be `NULL'.

      -- C Member: Py_ssize_t *shape
          An array of `Py_ssize_t's the length of `ndim' giving the
          shape of the memory as a multi-dimensional array.  Note that
          `((*shape)[0] * ... * (*shape)[ndims-1])*itemsize' should be
          equal to `len'.

      -- C Member: Py_ssize_t *strides
          An array of `Py_ssize_t's the length of `ndim' giving the
          number of bytes to skip to get to a new element in each
          dimension.

      -- C Member: Py_ssize_t *suboffsets
          An array of `Py_ssize_t's the length of `ndim'.  If these
          suboffset numbers are greater than or equal to 0, then the
          value stored along the indicated dimension is a pointer and
          the suboffset value dictates how many bytes to add to the
          pointer after de-referencing. A suboffset value that it
          negative indicates that no de-referencing should occur
          (striding in a contiguous memory block).

          If all suboffsets are negative (i.e. no de-referencing is
          needed, then this field must be NULL (the default value).

          Here is a function that returns a pointer to the element in
          an N-D array pointed to by an N-dimensional index when there
          are both non-NULL strides and suboffsets:

              void *get_item_pointer(int ndim, void *buf, Py_ssize_t *strides,
                  Py_ssize_t *suboffsets, Py_ssize_t *indices) {
                  char *pointer = (char*)buf;
                  int i;
                  for (i = 0; i < ndim; i++) {
                      pointer += strides[i] * indices[i];
                      if (suboffsets[i] >=0 ) {
                          pointer = *((char**)pointer) + suboffsets[i];
                      }
                  }
                  return (void*)pointer;
               }

      -- C Member: Py_ssize_t itemsize
          This is a storage for the itemsize (in bytes) of each element
          of the shared memory. It is technically un-necessary as it
          can be obtained using *Note PyBuffer_SizeFromFormat(): 2d75,
          however an exporter may know this information without parsing
          the format string and it is necessary to know the itemsize
          for proper interpretation of striding. Therefore, storing it
          is more convenient and faster.

      -- C Member: void *internal
          This is for use internally by the exporting object. For
          example, this might be re-cast as an integer by the exporter
          and used to store flags about whether or not the shape,
          strides, and suboffsets arrays must be freed when the buffer
          is released. The consumer should never alter this value.


File: python.info,  Node: Buffer related functions,  Next: MemoryView objects,  Prev: The new-style Py_buffer struct,  Up: Buffers and Memoryview Objects

7.7.3.28 Buffer related functions
.................................

 -- C Function: int PyObject_CheckBuffer (PyObject *obj)
     Return `1' if `obj' supports the buffer interface otherwise `0'.

 -- C Function: int PyObject_GetBuffer (PyObject *obj, Py_buffer *view,
          int flags)
     Export `obj' into a *Note Py_buffer: 2d6d, `view'.  These
     arguments must never be `NULL'.  The `flags' argument is a bit
     field indicating what kind of buffer the caller is prepared to
     deal with and therefore what kind of buffer the exporter is
     allowed to return.  The buffer interface allows for complicated
     memory sharing possibilities, but some caller may not be able to
     handle all the complexity but may want to see if the exporter will
     let them take a simpler view to its memory.

     Some exporters may not be able to share memory in every possible
     way and may need to raise errors to signal to some consumers that
     something is just not possible. These errors should be a *Note
     BufferError: 973. unless there is another error that is actually
     causing the problem. The exporter can use flags information to
     simplify how much of the *Note Py_buffer: 2d6d. structure is
     filled in with non-default values and/or raise an error if the
     object can’t support a simpler view of its memory.

     `0' is returned on success and `-1' on error.

     The following table gives possible values to the `flags' arguments.

     Flag                                Description
     -------------------------------------------------------------------------------------------- 
     `PyBUF_SIMPLE'                      This is the default flag state.  The returned buffer
                                         may or may not have writable memory.  The format of
                                         the data will be assumed to be unsigned bytes.  This
                                         is a “stand-alone” flag constant. It never needs
                                         to be ‘|’d to the others. The exporter will raise
                                         an error if it cannot provide such a contiguous buffer
                                         of bytes.
     `PyBUF_WRITABLE'                    The returned buffer must be writable.  If it is not
                                         writable, then raise an error.
     `PyBUF_STRIDES'                     This implies `PyBUF_ND'. The returned buffer must
                                         provide strides information (i.e. the strides cannot
                                         be NULL). This would be used when the consumer can
                                         handle strided, discontiguous arrays.  Handling
                                         strides automatically assumes you can handle shape.
                                         The exporter can raise an error if a strided
                                         representation of the data is not possible (i.e.
                                         without the suboffsets).
     `PyBUF_ND'                          The returned buffer must provide shape information.
                                         The memory will be assumed C-style contiguous (last
                                         dimension varies the fastest). The exporter may raise
                                         an error if it cannot provide this kind of contiguous
                                         buffer. If this is not given then shape will be `NULL'.
     `PyBUF_C_CONTIGUOUS'                These flags indicate that the contiguity returned
     `PyBUF_F_CONTIGUOUS'                buffer must be respectively, C-contiguous (last
     `PyBUF_ANY_CONTIGUOUS'              dimension varies the fastest), Fortran contiguous
                                         (first dimension varies the fastest) or either one.
                                         All of these flags imply `PyBUF_STRIDES' and guarantee
                                         that the strides buffer info structure will be filled
                                         in correctly.
     `PyBUF_INDIRECT'                    This flag indicates the returned buffer must have
                                         suboffsets information (which can be NULL if no
                                         suboffsets are needed).  This can be used when the
                                         consumer can handle indirect array referencing implied
                                         by these suboffsets. This implies `PyBUF_STRIDES'.
     `PyBUF_FORMAT'                      The returned buffer must have true format information
                                         if this flag is provided. This would be used when the
                                         consumer is going to be checking for what ‘kind’
                                         of data is actually stored. An exporter should always
                                         be able to provide this information if requested. If
                                         format is not explicitly requested then the format
                                         must be returned as `NULL' (which means `'B'', or
                                         unsigned bytes)
     `PyBUF_STRIDED'                     This is equivalent to `(PyBUF_STRIDES |
                                         PyBUF_WRITABLE)'.
     `PyBUF_STRIDED_RO'                  This is equivalent to `(PyBUF_STRIDES)'.
     `PyBUF_RECORDS'                     This is equivalent to `(PyBUF_STRIDES | PyBUF_FORMAT |
                                         PyBUF_WRITABLE)'.
     `PyBUF_RECORDS_RO'                  This is equivalent to `(PyBUF_STRIDES | PyBUF_FORMAT)'.
     `PyBUF_FULL'                        This is equivalent to `(PyBUF_INDIRECT | PyBUF_FORMAT
                                         | PyBUF_WRITABLE)'.
     `PyBUF_FULL_RO'                     This is equivalent to `(PyBUF_INDIRECT |
                                         PyBUF_FORMAT)'.
     `PyBUF_CONTIG'                      This is equivalent to `(PyBUF_ND | PyBUF_WRITABLE)'.
     `PyBUF_CONTIG_RO'                   This is equivalent to `(PyBUF_ND)'.


 -- C Function: void PyBuffer_Release (Py_buffer *view)
     Release the buffer `view'.  This should be called when the buffer
     is no longer being used as it may free memory from it.

 -- C Function: Py_ssize_t PyBuffer_SizeFromFormat (const char *)
     Return the implied *Note itemsize: 2d74. from the struct-stype
     `format'.

 -- C Function: int PyBuffer_IsContiguous (Py_buffer *view,
          char fortran)
     Return `1' if the memory defined by the `view' is C-style
     (`fortran' is `'C'') or Fortran-style (`fortran' is `'F'')
     contiguous or either one (`fortran' is `'A'').  Return `0'
     otherwise.

 -- C Function: void PyBuffer_FillContiguousStrides (int ndim,
          Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t itemsize,
          char fortran)
     Fill the `strides' array with byte-strides of a contiguous
     (C-style if `fortran' is `'C'' or Fortran-style if `fortran' is
     `'F'') array of the given shape with the given number of bytes per
     element.

 -- C Function: int PyBuffer_FillInfo (Py_buffer *view, PyObject *obj,
          void *buf, Py_ssize_t len, int readonly, int infoflags)
     Fill in a buffer-info structure, `view', correctly for an exporter
     that can only share a contiguous chunk of memory of “unsigned
     bytes” of the given length.  Return `0' on success and `-1'
     (with raising an error) on error.


File: python.info,  Node: MemoryView objects,  Next: Old-style buffer objects,  Prev: Buffer related functions,  Up: Buffers and Memoryview Objects

7.7.3.29 MemoryView objects
...........................

New in version 2.7.

A *Note memoryview: 1c4. object exposes the new C level buffer
interface as a Python object which can then be passed around like any
other object.

 -- C Function: PyObject *PyMemoryView_FromObject (PyObject *obj)
     Create a memoryview object from an object that defines the new
     buffer interface.

 -- C Function: PyObject *PyMemoryView_FromBuffer (Py_buffer *view)
     Create a memoryview object wrapping the given buffer-info
     structure `view'.  The memoryview object then owns the buffer,
     which means you shouldn’t try to release it yourself: it will be
     released on deallocation of the memoryview object.

 -- C Function: PyObject *PyMemoryView_GetContiguous (PyObject *obj,
          int buffertype, char order)
     Create a memoryview object to a contiguous chunk of memory (in
     either ‘C’ or ‘F’ortran `order') from an object that
     defines the buffer interface. If memory is contiguous, the
     memoryview object points to the original memory. Otherwise copy is
     made and the memoryview points to a new bytes object.

 -- C Function: int PyMemoryView_Check (PyObject *obj)
     Return true if the object `obj' is a memoryview object.  It is not
     currently allowed to create subclasses of *Note memoryview: 1c4.

 -- C Function: Py_buffer *PyMemoryView_GET_BUFFER (PyObject *obj)
     Return a pointer to the buffer-info structure wrapped by the given
     object.  The object `must' be a memoryview instance; this macro
     doesn’t check its type, you must do it yourself or you will risk
     crashes.


File: python.info,  Node: Old-style buffer objects,  Prev: MemoryView objects,  Up: Buffers and Memoryview Objects

7.7.3.30 Old-style buffer objects
.................................

More information on the old buffer interface is provided in the section
*Note Buffer Object Structures: 2d83, under the description for *Note
PyBufferProcs: 2d84.

A “buffer object” is defined in the `bufferobject.h' header
(included by `Python.h'). These objects look very similar to string
objects at the Python programming level: they support slicing,
indexing, concatenation, and some other standard string operations.
However, their data can come from one of two sources: from a block of
memory, or from another object which exports the buffer interface.

Buffer objects are useful as a way to expose the data from another
object’s buffer interface to the Python programmer. They can also be
used as a zero-copy slicing mechanism. Using their ability to reference
a block of memory, it is possible to expose any data to the Python
programmer quite easily. The memory could be a large, constant array in
a C extension, it could be a raw block of memory for manipulation
before passing to an operating system library, or it could be used to
pass around structured data in its native, in-memory format.

 -- C Type: PyBufferObject
     This subtype of *Note PyObject: 3be. represents a buffer object.

 -- C Variable: PyTypeObject PyBuffer_Type
     The instance of *Note PyTypeObject: 2aa0. which represents the
     Python buffer type; it is the same object as `buffer' and
     `types.BufferType' in the Python layer. .

 -- C Variable: int Py_END_OF_BUFFER
     This constant may be passed as the `size' parameter to *Note
     PyBuffer_FromObject(): 2d88. or *Note
     PyBuffer_FromReadWriteObject(): 2d89.  It indicates that the new
     *Note PyBufferObject: 2d85. should refer to `base' object from the
     specified `offset' to the end of its exported buffer.  Using this
     enables the caller to avoid querying the `base' object for its
     length.

 -- C Function: int PyBuffer_Check (PyObject *p)
     Return true if the argument has type *Note PyBuffer_Type: 2d86.

 -- C Function: PyObject* PyBuffer_FromObject (PyObject *base,
          Py_ssize_t offset, Py_ssize_t size)
     `Return value: New reference.'  Return a new read-only buffer
     object.  This raises *Note TypeError: 218. if `base' doesn’t
     support the read-only buffer protocol or doesn’t provide exactly
     one buffer segment, or it raises *Note ValueError: 236. if
     `offset' is less than zero.  The buffer will hold a reference to
     the `base' object, and the buffer’s contents will refer to the
     `base' object’s buffer interface, starting as position `offset'
     and extending for `size' bytes. If `size' is `Py_END_OF_BUFFER',
     then the new buffer’s contents extend to the length of the
     `base' object’s exported buffer data.

     Changed in version 2.5: This function used an `int' type for
     `offset' and `size'. This might require changes in your code for
     properly supporting 64-bit systems.


 -- C Function: PyObject* PyBuffer_FromReadWriteObject (PyObject *base,
          Py_ssize_t offset, Py_ssize_t size)
     `Return value: New reference.'  Return a new writable buffer
     object.  Parameters and exceptions are similar to those for *Note
     PyBuffer_FromObject(): 2d88.  If the `base' object does not export
     the writeable buffer protocol, then *Note TypeError: 218. is
     raised.

     Changed in version 2.5: This function used an `int' type for
     `offset' and `size'. This might require changes in your code for
     properly supporting 64-bit systems.


 -- C Function: PyObject* PyBuffer_FromMemory (void *ptr,
          Py_ssize_t size)
     `Return value: New reference.'  Return a new read-only buffer
     object that reads from a specified location in memory, with a
     specified size.  The caller is responsible for ensuring that the
     memory buffer, passed in as `ptr', is not deallocated while the
     returned buffer object exists.  Raises *Note ValueError: 236. if
     `size' is less than zero.  Note that `Py_END_OF_BUFFER' may `not'
     be passed for the `size' parameter; *Note ValueError: 236. will be
     raised in that case.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyBuffer_FromReadWriteMemory (void *ptr,
          Py_ssize_t size)
     `Return value: New reference.'  Similar to *Note
     PyBuffer_FromMemory(): 2d8b, but the returned buffer is writable.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyBuffer_New (Py_ssize_t size)
     `Return value: New reference.'  Return a new writable buffer
     object that maintains its own memory buffer of `size' bytes.
     *Note ValueError: 236. is returned if `size' is not zero or
     positive.  Note that the memory buffer (as returned by *Note
     PyObject_AsWriteBuffer(): 2c67.) is not specifically aligned.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.



File: python.info,  Node: Tuple Objects,  Next: List Objects,  Prev: Buffers and Memoryview Objects,  Up: Sequence Objects

7.7.3.31 Tuple Objects
......................

 -- C Type: PyTupleObject
     This subtype of *Note PyObject: 3be. represents a Python tuple
     object.

 -- C Variable: PyTypeObject PyTuple_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     tuple type; it is the same object as `tuple' and `types.TupleType'
     in the Python layer..

 -- C Function: int PyTuple_Check (PyObject *p)
     Return true if `p' is a tuple object or an instance of a subtype
     of the tuple type.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyTuple_CheckExact (PyObject *p)
     Return true if `p' is a tuple object, but not an instance of a
     subtype of the tuple type.

     New in version 2.2.


 -- C Function: PyObject* PyTuple_New (Py_ssize_t len)
     `Return value: New reference.'  Return a new tuple object of size
     `len', or `NULL' on failure.

     Changed in version 2.5: This function used an `int' type for
     `len'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyTuple_Pack (Py_ssize_t n, ...)
     `Return value: New reference.'  Return a new tuple object of size
     `n', or `NULL' on failure. The tuple values are initialized to the
     subsequent `n' C arguments pointing to Python objects.
     `PyTuple_Pack(2, a, b)' is equivalent to `Py_BuildValue("(OO)", a,
     b)'.

     New in version 2.4.

     Changed in version 2.5: This function used an `int' type for `n'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: Py_ssize_t PyTuple_Size (PyObject *p)
     Take a pointer to a tuple object, and return the size of that
     tuple.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: Py_ssize_t PyTuple_GET_SIZE (PyObject *p)
     Return the size of the tuple `p', which must be non-`NULL' and
     point to a tuple; no error checking is performed.

     Changed in version 2.5: This function returned an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: PyObject* PyTuple_GetItem (PyObject *p, Py_ssize_t pos)
     `Return value: Borrowed reference.'  Return the object at position
     `pos' in the tuple pointed to by `p'.  If `pos' is out of bounds,
     return `NULL' and sets an *Note IndexError: 4fe. exception.

     Changed in version 2.5: This function used an `int' type for
     `pos'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyTuple_GET_ITEM (PyObject *p, Py_ssize_t pos)
     `Return value: Borrowed reference.'  Like *Note PyTuple_GetItem():
     2a87, but does no checking of its arguments.

     Changed in version 2.5: This function used an `int' type for
     `pos'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: PyObject* PyTuple_GetSlice (PyObject *p,
          Py_ssize_t low, Py_ssize_t high)
     `Return value: New reference.'  Take a slice of the tuple pointed
     to by `p' from `low' to `high' and return it as a new tuple.

     Changed in version 2.5: This function used an `int' type for `low'
     and `high'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyTuple_SetItem (PyObject *p, Py_ssize_t pos,
          PyObject *o)
     Insert a reference to object `o' at position `pos' of the tuple
     pointed to by `p'. Return `0' on success.

          Note: This function “steals” a reference to `o'.

     Changed in version 2.5: This function used an `int' type for
     `pos'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: void PyTuple_SET_ITEM (PyObject *p, Py_ssize_t pos,
          PyObject *o)
     Like *Note PyTuple_SetItem(): 2a8c, but does no error checking,
     and should `only' be used to fill in brand new tuples.

          Note: This function “steals” a reference to `o'.

     Changed in version 2.5: This function used an `int' type for
     `pos'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int _PyTuple_Resize (PyObject **p, Py_ssize_t newsize)
     Can be used to resize a tuple.  `newsize' will be the new length
     of the tuple.  Because tuples are `supposed' to be immutable, this
     should only be used if there is only one reference to the object.
     Do `not' use this if the tuple may already be known to some other
     part of the code.  The tuple will always grow or shrink at the
     end.  Think of this as destroying the old tuple and creating a new
     one, only more efficiently.  Returns `0' on success. Client code
     should never assume that the resulting value of `*p' will be the
     same as before calling this function. If the object referenced by
     `*p' is replaced, the original `*p' is destroyed.  On failure,
     returns `-1' and sets `*p' to `NULL', and raises *Note
     MemoryError: 977. or *Note SystemError: 97a.

     Changed in version 2.2: Removed unused third parameter,
     `last_is_sticky'.

     Changed in version 2.5: This function used an `int' type for
     `newsize'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyTuple_ClearFreeList ()
     Clear the free list. Return the total number of freed items.

     New in version 2.6.



File: python.info,  Node: List Objects,  Prev: Tuple Objects,  Up: Sequence Objects

7.7.3.32 List Objects
.....................

 -- C Type: PyListObject
     This subtype of *Note PyObject: 3be. represents a Python list
     object.

 -- C Variable: PyTypeObject PyList_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     list type.  This is the same object as `list' in the Python layer.

 -- C Function: int PyList_Check (PyObject *p)
     Return true if `p' is a list object or an instance of a subtype of
     the list type.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyList_CheckExact (PyObject *p)
     Return true if `p' is a list object, but not an instance of a
     subtype of the list type.

     New in version 2.2.


 -- C Function: PyObject* PyList_New (Py_ssize_t len)
     `Return value: New reference.'  Return a new list of length `len'
     on success, or `NULL' on failure.

          Note: If `len' is greater than zero, the returned list
          object’s items are set to `NULL'.  Thus you cannot use
          abstract API functions such as *Note PySequence_SetItem():
          2b06.  or expose the object to Python code before setting all
          items to a real object with *Note PyList_SetItem(): 2a8d.

     Changed in version 2.5: This function used an `int' for `size'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: Py_ssize_t PyList_Size (PyObject *list)
     Return the length of the list object in `list'; this is equivalent
     to `len(list)' on a list object.

     Changed in version 2.5: This function returned an `int'. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: Py_ssize_t PyList_GET_SIZE (PyObject *list)
     Macro form of *Note PyList_Size(): 3bf. without error checking.

     Changed in version 2.5: This macro returned an `int'. This might
     require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: PyObject* PyList_GetItem (PyObject *list,
          Py_ssize_t index)
     `Return value: Borrowed reference.'  Return the object at position
     `index' in the list pointed to by `list'.  The position must be
     positive, indexing from the end of the list is not supported.  If
     `index' is out of bounds, return `NULL' and set an *Note
     IndexError: 4fe. exception.

     Changed in version 2.5: This function used an `int' for `index'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: PyObject* PyList_GET_ITEM (PyObject *list, Py_ssize_t i)
     `Return value: Borrowed reference.'  Macro form of *Note
     PyList_GetItem(): 2a88. without error checking.

     Changed in version 2.5: This macro used an `int' for `i'. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: int PyList_SetItem (PyObject *list, Py_ssize_t index,
          PyObject *item)
     Set the item at index `index' in list to `item'.  Return `0' on
     success or `-1' on failure.

          Note: This function “steals” a reference to `item' and
          discards a reference to an item already in the list at the
          affected position.

     Changed in version 2.5: This function used an `int' for `index'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: void PyList_SET_ITEM (PyObject *list, Py_ssize_t i,
          PyObject *o)
     Macro form of *Note PyList_SetItem(): 2a8d. without error
     checking. This is normally only used to fill in new lists where
     there is no previous content.

          Note: This macro “steals” a reference to `item', and,
          unlike *Note PyList_SetItem(): 2a8d, does `not' discard a
          reference to any item that it being replaced; any reference
          in `list' at position `i' will be leaked.

     Changed in version 2.5: This macro used an `int' for `i'. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: int PyList_Insert (PyObject *list, Py_ssize_t index,
          PyObject *item)
     Insert the item `item' into list `list' in front of index `index'.
     Return `0' if successful; return `-1' and set an exception if
     unsuccessful.  Analogous to `list.insert(index, item)'.

     Changed in version 2.5: This function used an `int' for `index'.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: int PyList_Append (PyObject *list, PyObject *item)
     Append the object `item' at the end of list `list'. Return `0' if
     successful; return `-1' and set an exception if unsuccessful.
     Analogous to `list.append(item)'.

 -- C Function: PyObject* PyList_GetSlice (PyObject *list,
          Py_ssize_t low, Py_ssize_t high)
     `Return value: New reference.'  Return a list of the objects in
     `list' containing the objects `between' `low' and `high'.  Return
     `NULL' and set an exception if unsuccessful.  Analogous to
     `list[low:high]'.  Negative indices, as when slicing from Python,
     are not supported.

     Changed in version 2.5: This function used an `int' for `low' and
     `high'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyList_SetSlice (PyObject *list, Py_ssize_t low,
          Py_ssize_t high, PyObject *itemlist)
     Set the slice of `list' between `low' and `high' to the contents of
     `itemlist'.  Analogous to `list[low:high] = itemlist'. The
     `itemlist' may be `NULL', indicating the assignment of an empty
     list (slice deletion).  Return `0' on success, `-1' on failure.
     Negative indices, as when slicing from Python, are not supported.

     Changed in version 2.5: This function used an `int' for `low' and
     `high'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyList_Sort (PyObject *list)
     Sort the items of `list' in place.  Return `0' on success, `-1' on
     failure.  This is equivalent to `list.sort()'.

 -- C Function: int PyList_Reverse (PyObject *list)
     Reverse the items of `list' in place.  Return `0' on success, `-1'
     on failure.  This is the equivalent of `list.reverse()'.

 -- C Function: PyObject* PyList_AsTuple (PyObject *list)
     `Return value: New reference.'  

     Return a new tuple object containing the contents of `list';
     equivalent to `tuple(list)'.


File: python.info,  Node: Mapping Objects,  Next: Other Objects,  Prev: Sequence Objects,  Up: Concrete Objects Layer

7.7.4 Mapping Objects
---------------------

* Menu:

* Dictionary Objects::


File: python.info,  Node: Dictionary Objects,  Up: Mapping Objects

7.7.4.1 Dictionary Objects
..........................

 -- C Type: PyDictObject
     This subtype of *Note PyObject: 3be. represents a Python
     dictionary object.

 -- C Variable: PyTypeObject PyDict_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     dictionary type.  This is exposed to Python programs as `dict' and
     `types.DictType'.

 -- C Function: int PyDict_Check (PyObject *p)
     Return true if `p' is a dict object or an instance of a subtype of
     the dict type.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyDict_CheckExact (PyObject *p)
     Return true if `p' is a dict object, but not an instance of a
     subtype of the dict type.

     New in version 2.4.


 -- C Function: PyObject* PyDict_New ()
     `Return value: New reference.'  Return a new empty dictionary, or
     `NULL' on failure.

 -- C Function: PyObject* PyDictProxy_New (PyObject *dict)
     `Return value: New reference.'  Return a proxy object for a
     mapping which enforces read-only behavior.  This is normally used
     to create a proxy to prevent modification of the dictionary for
     non-dynamic class types.

     New in version 2.2.


 -- C Function: void PyDict_Clear (PyObject *p)
     Empty an existing dictionary of all key-value pairs.

 -- C Function: int PyDict_Contains (PyObject *p, PyObject *key)
     Determine if dictionary `p' contains `key'.  If an item in `p' is
     matches `key', return `1', otherwise return `0'.  On error, return
     `-1'.  This is equivalent to the Python expression `key in p'.

     New in version 2.4.


 -- C Function: PyObject* PyDict_Copy (PyObject *p)
     `Return value: New reference.'  Return a new dictionary that
     contains the same key-value pairs as `p'.

     New in version 1.6.


 -- C Function: int PyDict_SetItem (PyObject *p, PyObject *key,
          PyObject *val)
     Insert `value' into the dictionary `p' with a key of `key'.  `key'
     must be *Note hashable: 720.; if it isn’t, *Note TypeError: 218.
     will be raised. Return `0' on success or `-1' on failure.

 -- C Function: int PyDict_SetItemString (PyObject *p, const char *key,
          PyObject *val)
     Insert `value' into the dictionary `p' using `key' as a key. `key'
     should be a `char*'.  The key object is created using
     `PyString_FromString(key)'.  Return `0' on success or `-1' on
     failure.

 -- C Function: int PyDict_DelItem (PyObject *p, PyObject *key)
     Remove the entry in dictionary `p' with key `key'. `key' must be
     hashable; if it isn’t, *Note TypeError: 218. is raised.  Return
     `0' on success or `-1' on failure.

 -- C Function: int PyDict_DelItemString (PyObject *p, char *key)
     Remove the entry in dictionary `p' which has a key specified by
     the string `key'.  Return `0' on success or `-1' on failure.

 -- C Function: PyObject* PyDict_GetItem (PyObject *p, PyObject *key)
     `Return value: Borrowed reference.'  Return the object from
     dictionary `p' which has a key `key'.  Return `NULL' if the key
     `key' is not present, but `without' setting an exception.

 -- C Function: PyObject* PyDict_GetItemString (PyObject *p, const
          char *key)
     `Return value: Borrowed reference.'  This is the same as *Note
     PyDict_GetItem(): 2a89, but `key' is specified as a `char*',
     rather than a *Note PyObject*: 3be.

 -- C Function: PyObject* PyDict_Items (PyObject *p)
     `Return value: New reference.'  Return a *Note PyListObject: 2da0.
     containing all the items from the dictionary, as in the dictionary
     method *Note dict.items(): 1e3.

 -- C Function: PyObject* PyDict_Keys (PyObject *p)
     `Return value: New reference.'  Return a *Note PyListObject: 2da0.
     containing all the keys from the dictionary, as in the dictionary
     method *Note dict.keys(): 1e1.

 -- C Function: PyObject* PyDict_Values (PyObject *p)
     `Return value: New reference.'  Return a *Note PyListObject: 2da0.
     containing all the values from the dictionary `p', as in the
     dictionary method *Note dict.values(): 1e2.

 -- C Function: Py_ssize_t PyDict_Size (PyObject *p)
     Return the number of items in the dictionary.  This is equivalent
     to `len(p)' on a dictionary.

     Changed in version 2.5: This function returned an `int' type.
     This might require changes in your code for properly supporting
     64-bit systems.


 -- C Function: int PyDict_Next (PyObject *p, Py_ssize_t *ppos,
          PyObject **pkey, PyObject **pvalue)
     Iterate over all key-value pairs in the dictionary `p'.  The
     `Py_ssize_t' referred to by `ppos' must be initialized to `0'
     prior to the first call to this function to start the iteration;
     the function returns true for each pair in the dictionary, and
     false once all pairs have been reported.  The parameters `pkey'
     and `pvalue' should either point to *Note PyObject*: 3be.
     variables that will be filled in with each key and value,
     respectively, or may be `NULL'.  Any references returned through
     them are borrowed.  `ppos' should not be altered during iteration.
     Its value represents offsets within the internal dictionary
     structure, and since the structure is sparse, the offsets are not
     consecutive.

     For example:

         PyObject *key, *value;
         Py_ssize_t pos = 0;

         while (PyDict_Next(self->dict, &pos, &key, &value)) {
             /* do something interesting with the values... */
             ...
         }

     The dictionary `p' should not be mutated during iteration.  It is
     safe (since Python 2.1) to modify the values of the keys as you
     iterate over the dictionary, but only so long as the set of keys
     does not change.  For example:

         PyObject *key, *value;
         Py_ssize_t pos = 0;

         while (PyDict_Next(self->dict, &pos, &key, &value)) {
             int i = PyInt_AS_LONG(value) + 1;
             PyObject *o = PyInt_FromLong(i);
             if (o == NULL)
                 return -1;
             if (PyDict_SetItem(self->dict, key, o) < 0) {
                 Py_DECREF(o);
                 return -1;
             }
             Py_DECREF(o);
         }

     Changed in version 2.5: This function used an `int *' type for
     `ppos'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: int PyDict_Merge (PyObject *a, PyObject *b,
          int override)
     Iterate over mapping object `b' adding key-value pairs to
     dictionary `a'.  `b' may be a dictionary, or any object supporting
     *Note PyMapping_Keys(): 2c57.  and *Note PyObject_GetItem(): 2b09.
     If `override' is true, existing pairs in `a' will be replaced if a
     matching key is found in `b', otherwise pairs will only be added
     if there is not a matching key in `a'. Return `0' on success or
     `-1' if an exception was raised.

     New in version 2.2.


 -- C Function: int PyDict_Update (PyObject *a, PyObject *b)
     This is the same as `PyDict_Merge(a, b, 1)' in C, and is similar to
     `a.update(b)' in Python except that *Note PyDict_Update(): 2dc3.
     doesn’t fall back to the iterating over a sequence of key value
     pairs if the second argument has no “keys” attribute.  Return
     `0' on success or `-1' if an exception was raised.

     New in version 2.2.


 -- C Function: int PyDict_MergeFromSeq2 (PyObject *a, PyObject *seq2,
          int override)
     Update or merge into dictionary `a', from the key-value pairs in
     `seq2'.  `seq2' must be an iterable object producing iterable
     objects of length 2, viewed as key-value pairs.  In case of
     duplicate keys, the last wins if `override' is true, else the
     first wins. Return `0' on success or `-1' if an exception was
     raised. Equivalent Python (except for the return value):

         def PyDict_MergeFromSeq2(a, seq2, override):
             for key, value in seq2:
                 if override or key not in a:
                     a[key] = value

     New in version 2.2.



File: python.info,  Node: Other Objects,  Prev: Mapping Objects,  Up: Concrete Objects Layer

7.7.5 Other Objects
-------------------

* Menu:

* Class and Instance Objects::
* Function Objects: Function Objects<2>.
* Method Objects: Method Objects<2>.
* File Objects: File Objects<2>.
* Module Objects::
* Iterator Objects::
* Descriptor Objects::
* Slice Objects::
* Weak Reference Objects: Weak Reference Objects<2>.
* Capsules: Capsules<2>.
* CObjects::
* Cell Objects::
* Generator Objects::
* DateTime Objects: DateTime Objects<2>.
* Set Objects: Set Objects<2>.
* Code Objects: Code Objects<2>.


File: python.info,  Node: Class and Instance Objects,  Next: Function Objects<2>,  Up: Other Objects

7.7.5.1 Class and Instance Objects
..................................

Note that the class objects described here represent old-style classes,
which will go away in Python 3. When creating new types for extension
modules, you will want to work with type objects (section *Note Type
Objects: 2c70.).

 -- C Type: PyClassObject
     The C structure of the objects used to describe built-in classes.

 -- C Variable: PyObject* PyClass_Type
     This is the type object for class objects; it is the same object as
     `types.ClassType' in the Python layer.

 -- C Function: int PyClass_Check (PyObject *o)
     Return true if the object `o' is a class object, including
     instances of types derived from the standard class object.  Return
     false in all other cases.

 -- C Function: int PyClass_IsSubclass (PyObject *klass, PyObject *base)
     Return true if `klass' is a subclass of `base'. Return false in
     all other cases.

There are very few functions specific to instance objects.

 -- C Variable: PyTypeObject PyInstance_Type
     Type object for class instances.

 -- C Function: int PyInstance_Check (PyObject *obj)
     Return true if `obj' is an instance.

 -- C Function: PyObject* PyInstance_New (PyObject *class,
          PyObject *arg, PyObject *kw)
     `Return value: New reference.'  Create a new instance of a
     specific class.  The parameters `arg' and `kw' are used as the
     positional and keyword parameters to the object’s constructor.

 -- C Function: PyObject* PyInstance_NewRaw (PyObject *class,
          PyObject *dict)
     `Return value: New reference.'  Create a new instance of a
     specific class without calling its constructor.  `class' is the
     class of new object.  The `dict' parameter will be used as the
     object’s *Note __dict__: 4a0.; if `NULL', a new dictionary will
     be created for the instance.


File: python.info,  Node: Function Objects<2>,  Next: Method Objects<2>,  Prev: Class and Instance Objects,  Up: Other Objects

7.7.5.2 Function Objects
........................

There are a few functions specific to Python functions.

 -- C Type: PyFunctionObject
     The C structure used for functions.

 -- C Variable: PyTypeObject PyFunction_Type
     This is an instance of *Note PyTypeObject: 2aa0. and represents
     the Python function type.  It is exposed to Python programmers as
     `types.FunctionType'.

 -- C Function: int PyFunction_Check (PyObject *o)
     Return true if `o' is a function object (has type *Note
     PyFunction_Type: 2dd6.).  The parameter must not be `NULL'.

 -- C Function: PyObject* PyFunction_New (PyObject *code,
          PyObject *globals)
     `Return value: New reference.'  Return a new function object
     associated with the code object `code'. `globals' must be a
     dictionary with the global variables accessible to the function.

     The function’s docstring, name and `__module__' are retrieved
     from the code object, the argument defaults and closure are set to
     `NULL'.

 -- C Function: PyObject* PyFunction_GetCode (PyObject *op)
     `Return value: Borrowed reference.'  Return the code object
     associated with the function object `op'.

 -- C Function: PyObject* PyFunction_GetGlobals (PyObject *op)
     `Return value: Borrowed reference.'  Return the globals dictionary
     associated with the function object `op'.

 -- C Function: PyObject* PyFunction_GetModule (PyObject *op)
     `Return value: Borrowed reference.'  Return the `__module__'
     attribute of the function object `op'. This is normally a string
     containing the module name, but can be set to any other object by
     Python code.

 -- C Function: PyObject* PyFunction_GetDefaults (PyObject *op)
     `Return value: Borrowed reference.'  Return the argument default
     values of the function object `op'. This can be a tuple of
     arguments or `NULL'.

 -- C Function: int PyFunction_SetDefaults (PyObject *op,
          PyObject *defaults)
     Set the argument default values for the function object `op'.
     `defaults' must be `Py_None' or a tuple.

     Raises *Note SystemError: 97a. and returns `-1' on failure.

 -- C Function: PyObject* PyFunction_GetClosure (PyObject *op)
     `Return value: Borrowed reference.'  Return the closure associated
     with the function object `op'. This can be `NULL' or a tuple of
     cell objects.

 -- C Function: int PyFunction_SetClosure (PyObject *op,
          PyObject *closure)
     Set the closure associated with the function object `op'.
     `closure' must be `Py_None' or a tuple of cell objects.

     Raises *Note SystemError: 97a. and returns `-1' on failure.


File: python.info,  Node: Method Objects<2>,  Next: File Objects<2>,  Prev: Function Objects<2>,  Up: Other Objects

7.7.5.3 Method Objects
......................

There are some useful functions that are useful for working with method
objects.

 -- C Variable: PyTypeObject PyMethod_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     method type.  This is exposed to Python programs as
     `types.MethodType'.

 -- C Function: int PyMethod_Check (PyObject *o)
     Return true if `o' is a method object (has type *Note
     PyMethod_Type: 2de3.).  The parameter must not be `NULL'.

 -- C Function: PyObject* PyMethod_New (PyObject *func, PyObject *self,
          PyObject *class)
     `Return value: New reference.'  Return a new method object, with
     `func' being any callable object; this is the function that will
     be called when the method is called.  If this method should be
     bound to an instance, `self' should be the instance and `class'
     should be the class of `self', otherwise `self' should be `NULL'
     and `class' should be the class which provides the unbound method..

 -- C Function: PyObject* PyMethod_Class (PyObject *meth)
     `Return value: Borrowed reference.'  Return the class object from
     which the method `meth' was created; if this was created from an
     instance, it will be the class of the instance.

 -- C Function: PyObject* PyMethod_GET_CLASS (PyObject *meth)
     `Return value: Borrowed reference.'  Macro version of *Note
     PyMethod_Class(): 2de6. which avoids error checking.

 -- C Function: PyObject* PyMethod_Function (PyObject *meth)
     `Return value: Borrowed reference.'  Return the function object
     associated with the method `meth'.

 -- C Function: PyObject* PyMethod_GET_FUNCTION (PyObject *meth)
     `Return value: Borrowed reference.'  Macro version of *Note
     PyMethod_Function(): 2de8. which avoids error checking.

 -- C Function: PyObject* PyMethod_Self (PyObject *meth)
     `Return value: Borrowed reference.'  Return the instance
     associated with the method `meth' if it is bound, otherwise return
     `NULL'.

 -- C Function: PyObject* PyMethod_GET_SELF (PyObject *meth)
     `Return value: Borrowed reference.'  Macro version of *Note
     PyMethod_Self(): 2dea. which avoids error checking.

 -- C Function: int PyMethod_ClearFreeList ()
     Clear the free list. Return the total number of freed items.

     New in version 2.6.



File: python.info,  Node: File Objects<2>,  Next: Module Objects,  Prev: Method Objects<2>,  Up: Other Objects

7.7.5.4 File Objects
....................

Python’s built-in file objects are implemented entirely on the `FILE*'
support from the C standard library.  This is an implementation detail
and may change in future releases of Python.

 -- C Type: PyFileObject
     This subtype of *Note PyObject: 3be. represents a Python file
     object.

 -- C Variable: PyTypeObject PyFile_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     file type.  This is exposed to Python programs as `file' and
     `types.FileType'.

 -- C Function: int PyFile_Check (PyObject *p)
     Return true if its argument is a *Note PyFileObject: 2df0. or a
     subtype of *Note PyFileObject: 2df0.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyFile_CheckExact (PyObject *p)
     Return true if its argument is a *Note PyFileObject: 2df0, but not
     a subtype of *Note PyFileObject: 2df0.

     New in version 2.2.


 -- C Function: PyObject* PyFile_FromString (char *filename, char *mode)
     `Return value: New reference.'  

     On success, return a new file object that is opened on the file
     given by `filename', with a file mode given by `mode', where
     `mode' has the same semantics as the standard C routine `fopen()'.
     On failure, return `NULL'.

 -- C Function: PyObject* PyFile_FromFile (FILE *fp, char *name,
          char *mode, int (*close)(FILE*))
     `Return value: New reference.'  Create a new *Note PyFileObject:
     2df0. from the already-open standard C file pointer, `fp'.  The
     function `close' will be called when the file should be closed.
     Return `NULL' and close the file using `close' on failure.
     `close' is optional and can be set to `NULL'.

 -- C Function: FILE* PyFile_AsFile (PyObject *p)
     Return the file object associated with `p' as a `FILE*'.

     If the caller will ever use the returned `FILE*' object while the
     *Note GIL: 2df7. is released it must also call the *Note
     PyFile_IncUseCount(): 386. and *Note PyFile_DecUseCount(): 387.
     functions described below as appropriate.

 -- C Function: void PyFile_IncUseCount (PyFileObject *p)
     Increments the PyFileObject’s internal use count to indicate
     that the underlying `FILE*' is being used.  This prevents Python
     from calling f_close() on it from another thread.  Callers of this
     must call *Note PyFile_DecUseCount(): 387. when they are finished
     with the `FILE*'.  Otherwise the file object will never be closed
     by Python.

     The *Note GIL: 2df7. must be held while calling this function.

     The suggested use is to call this after *Note PyFile_AsFile():
     2df6. and before you release the GIL:

         FILE *fp = PyFile_AsFile(p);
         PyFile_IncUseCount(p);
         /* ... */
         Py_BEGIN_ALLOW_THREADS
         do_something(fp);
         Py_END_ALLOW_THREADS
         /* ... */
         PyFile_DecUseCount(p);

     New in version 2.6.


 -- C Function: void PyFile_DecUseCount (PyFileObject *p)
     Decrements the PyFileObject’s internal unlocked_count member to
     indicate that the caller is done with its own use of the `FILE*'.
     This may only be called to undo a prior call to *Note
     PyFile_IncUseCount(): 386.

     The *Note GIL: 2df7. must be held while calling this function (see
     the example above).

     New in version 2.6.


 -- C Function: PyObject* PyFile_GetLine (PyObject *p, int n)
     `Return value: New reference.'  

     Equivalent to `p.readline([n])', this function reads one line from
     the object `p'.  `p' may be a file object or any object with a
     *Note readline(): 11ec.  method.  If `n' is `0', exactly one line
     is read, regardless of the length of the line.  If `n' is greater
     than `0', no more than `n' bytes will be read from the file; a
     partial line can be returned.  In both cases, an empty string is
     returned if the end of the file is reached immediately.  If `n' is
     less than `0', however, one line is read regardless of length, but
     *Note EOFError: 8b3. is raised if the end of the file is reached
     immediately.

 -- C Function: PyObject* PyFile_Name (PyObject *p)
     `Return value: Borrowed reference.'  Return the name of the file
     specified by `p' as a string object.

 -- C Function: void PyFile_SetBufSize (PyFileObject *p, int n)
     Available on systems with `setvbuf()' only.  This should only be
     called immediately after file object creation.

 -- C Function: int PyFile_SetEncoding (PyFileObject *p, const
          char *enc)
     Set the file’s encoding for Unicode output to `enc'. Return `1'
     on success and `0' on failure.

     New in version 2.3.


 -- C Function: int PyFile_SetEncodingAndErrors (PyFileObject *p, const
          char *enc, *errors)
     Set the file’s encoding for Unicode output to `enc', and its
     error mode to `err'. Return `1' on success and `0' on failure.

     New in version 2.6.


 -- C Function: int PyFile_SoftSpace (PyObject *p, int newflag)
     This function exists for internal use by the interpreter.  Set the
     `softspace' attribute of `p' to `newflag' and return the previous
     value.  `p' does not have to be a file object for this function to
     work properly; any object is supported (thought its only
     interesting if the `softspace' attribute can be set).  This
     function clears any errors, and will return `0' as the previous
     value if the attribute either does not exist or if there were
     errors in retrieving it.  There is no way to detect errors from
     this function, but doing so should not be needed.

 -- C Function: int PyFile_WriteObject (PyObject *obj, PyObject *p,
          int flags)
     Write object `obj' to file object `p'.  The only supported flag
     for `flags' is `Py_PRINT_RAW'; if given, the *Note str(): 1ea. of
     the object is written instead of the *Note repr(): 1c6.  Return
     `0' on success or `-1' on failure; the appropriate exception will
     be set.

 -- C Function: int PyFile_WriteString (const char *s, PyObject *p)
     Write string `s' to file object `p'.  Return `0' on success or
     `-1' on failure; the appropriate exception will be set.


File: python.info,  Node: Module Objects,  Next: Iterator Objects,  Prev: File Objects<2>,  Up: Other Objects

7.7.5.5 Module Objects
......................

There are only a few functions special to module objects.

 -- C Variable: PyTypeObject PyModule_Type
     This instance of *Note PyTypeObject: 2aa0. represents the Python
     module type.  This is exposed to Python programs as
     `types.ModuleType'.

 -- C Function: int PyModule_Check (PyObject *p)
     Return true if `p' is a module object, or a subtype of a module
     object.

     Changed in version 2.2: Allowed subtypes to be accepted.


 -- C Function: int PyModule_CheckExact (PyObject *p)
     Return true if `p' is a module object, but not a subtype of *Note
     PyModule_Type: 2e03.

     New in version 2.2.


 -- C Function: PyObject* PyModule_New (const char *name)
     `Return value: New reference.'  

     Return a new module object with the `__name__' attribute set to
     `name'.  Only the module’s `__doc__' and `__name__' attributes
     are filled in; the caller is responsible for providing a
     `__file__' attribute.

 -- C Function: PyObject* PyModule_GetDict (PyObject *module)
     `Return value: Borrowed reference.'  

     Return the dictionary object that implements `module'’s
     namespace; this object is the same as the *Note __dict__: 4a0.
     attribute of the module object.  This function never fails.  It is
     recommended extensions use other `PyModule_*()' and `PyObject_*()'
     functions rather than directly manipulate a module’s *Note
     __dict__: 4a0.

 -- C Function: char* PyModule_GetName (PyObject *module)
     Return `module'’s `__name__' value.  If the module does not
     provide one, or if it is not a string, *Note SystemError: 97a. is
     raised and `NULL' is returned.

 -- C Function: char* PyModule_GetFilename (PyObject *module)
     Return the name of the file from which `module' was loaded using
     `module'’s `__file__' attribute.  If this is not defined, or if
     it is not a string, raise *Note SystemError: 97a. and return
     `NULL'.

 -- C Function: int PyModule_AddObject (PyObject *module, const
          char *name, PyObject *value)
     Add an object to `module' as `name'.  This is a convenience
     function which can be used from the module’s initialization
     function.  This steals a reference to `value'.  Return `-1' on
     error, `0' on success.

     New in version 2.0.


 -- C Function: int PyModule_AddIntConstant (PyObject *module, const
          char *name, long value)
     Add an integer constant to `module' as `name'.  This convenience
     function can be used from the module’s initialization function.
     Return `-1' on error, `0' on success.

     New in version 2.0.


 -- C Function: int PyModule_AddStringConstant (PyObject *module, const
          char *name, const char *value)
     Add a string constant to `module' as `name'.  This convenience
     function can be used from the module’s initialization function.
     The string `value' must be null-terminated.  Return `-1' on error,
     `0' on success.

     New in version 2.0.


 -- C Function: int PyModule_AddIntMacro (PyObject *module, macro)
     Add an int constant to `module'. The name and the value are taken
     from `macro'. For example `PyModule_AddIntMacro(module, AF_INET)'
     adds the int constant `AF_INET' with the value of `AF_INET' to
     `module'.  Return `-1' on error, `0' on success.

     New in version 2.6.


 -- C Function: int PyModule_AddStringMacro (PyObject *module, macro)
          Add a string constant to `module'.

     New in version 2.6.



File: python.info,  Node: Iterator Objects,  Next: Descriptor Objects,  Prev: Module Objects,  Up: Other Objects

7.7.5.6 Iterator Objects
........................

Python provides two general-purpose iterator objects.  The first, a
sequence iterator, works with an arbitrary sequence supporting the
*Note __getitem__(): 468.  method.  The second works with a callable
object and a sentinel value, calling the callable for each item in the
sequence, and ending the iteration when the sentinel value is returned.

 -- C Variable: PyTypeObject PySeqIter_Type
     Type object for iterator objects returned by *Note
     PySeqIter_New(): 2e12. and the one-argument form of the *Note
     iter(): 334. built-in function for built-in sequence types.

     New in version 2.2.


 -- C Function: int PySeqIter_Check (op)
     Return true if the type of `op' is *Note PySeqIter_Type: 2e11.

     New in version 2.2.


 -- C Function: PyObject* PySeqIter_New (PyObject *seq)
     `Return value: New reference.'  Return an iterator that works with
     a general sequence object, `seq'.  The iteration ends when the
     sequence raises *Note IndexError: 4fe. for the subscripting
     operation.

     New in version 2.2.


 -- C Variable: PyTypeObject PyCallIter_Type
     Type object for iterator objects returned by *Note
     PyCallIter_New(): 2e15. and the two-argument form of the *Note
     iter(): 334. built-in function.

     New in version 2.2.


 -- C Function: int PyCallIter_Check (op)
     Return true if the type of `op' is *Note PyCallIter_Type: 2e14.

     New in version 2.2.


 -- C Function: PyObject* PyCallIter_New (PyObject *callable,
          PyObject *sentinel)
     `Return value: New reference.'  Return a new iterator.  The first
     parameter, `callable', can be any Python callable object that can
     be called with no parameters; each call to it should return the
     next item in the iteration.  When `callable' returns a value equal
     to `sentinel', the iteration will be terminated.

     New in version 2.2.



File: python.info,  Node: Descriptor Objects,  Next: Slice Objects,  Prev: Iterator Objects,  Up: Other Objects

7.7.5.7 Descriptor Objects
..........................

“Descriptors” are objects that describe some attribute of an
object. They are found in the dictionary of type objects.

 -- C Variable: PyTypeObject PyProperty_Type
     The type object for the built-in descriptor types.

     New in version 2.2.


 -- C Function: PyObject* PyDescr_NewGetSet (PyTypeObject *type, struct
          PyGetSetDef *getset)
     `Return value: New reference.'

     New in version 2.2.


 -- C Function: PyObject* PyDescr_NewMember (PyTypeObject *type, struct
          PyMemberDef *meth)
     `Return value: New reference.'

     New in version 2.2.


 -- C Function: PyObject* PyDescr_NewMethod (PyTypeObject *type, struct
          PyMethodDef *meth)
     `Return value: New reference.'

     New in version 2.2.


 -- C Function: PyObject* PyDescr_NewWrapper (PyTypeObject *type,
          struct wrapperbase *wrapper, void *wrapped)
     `Return value: New reference.'

     New in version 2.2.


 -- C Function: PyObject* PyDescr_NewClassMethod (PyTypeObject *type,
          PyMethodDef *method)
     `Return value: New reference.'

     New in version 2.3.


 -- C Function: int PyDescr_IsData (PyObject *descr)
     Return true if the descriptor objects `descr' describes a data
     attribute, or false if it describes a method.  `descr' must be a
     descriptor object; there is no error checking.

     New in version 2.2.


 -- C Function: PyObject* PyWrapper_New (PyObject *, PyObject *)
     `Return value: New reference.'

     New in version 2.2.



File: python.info,  Node: Slice Objects,  Next: Weak Reference Objects<2>,  Prev: Descriptor Objects,  Up: Other Objects

7.7.5.8 Slice Objects
.....................

 -- C Variable: PyTypeObject PySlice_Type
     The type object for slice objects.  This is the same as `slice' and
     `types.SliceType'.

 -- C Function: int PySlice_Check (PyObject *ob)
     Return true if `ob' is a slice object; `ob' must not be `NULL'.

 -- C Function: PyObject* PySlice_New (PyObject *start, PyObject *stop,
          PyObject *step)
     `Return value: New reference.'  Return a new slice object with the
     given values.  The `start', `stop', and `step' parameters are used
     as the values of the slice object attributes of the same names.
     Any of the values may be `NULL', in which case the `None' will be
     used for the corresponding attribute.  Return `NULL' if the new
     object could not be allocated.

 -- C Function: int PySlice_GetIndices (PySliceObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step)
     Retrieve the start, stop and step indices from the slice object
     `slice', assuming a sequence of length `length'. Treats indices
     greater than `length' as errors.

     Returns `0' on success and `-1' on error with no exception set
     (unless one of the indices was not *Note None: 3b2. and failed to
     be converted to an integer, in which case `-1' is returned with an
     exception set).

     You probably do not want to use this function.  If you want to use
     slice objects in versions of Python prior to 2.3, you would
     probably do well to incorporate the source of *Note
     PySlice_GetIndicesEx(): 2e29, suitably renamed, in the source of
     your extension.

     Changed in version 2.5: This function used an `int' type for
     `length' and an `int *' type for `start', `stop', and `step'. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: int PySlice_GetIndicesEx (PySliceObject *slice,
          Py_ssize_t length, Py_ssize_t *start, Py_ssize_t *stop,
          Py_ssize_t *step, Py_ssize_t *slicelength)
     Usable replacement for *Note PySlice_GetIndices(): 2e28.  Retrieve
     the start, stop, and step indices from the slice object `slice'
     assuming a sequence of length `length', and store the length of
     the slice in `slicelength'.  Out of bounds indices are clipped in
     a manner consistent with the handling of normal slices.

     Returns `0' on success and `-1' on error with exception set.

     New in version 2.3.

     Changed in version 2.5: This function used an `int' type for
     `length' and an `int *' type for `start', `stop', `step', and
     `slicelength'. This might require changes in your code for
     properly supporting 64-bit systems.



File: python.info,  Node: Weak Reference Objects<2>,  Next: Capsules<2>,  Prev: Slice Objects,  Up: Other Objects

7.7.5.9 Weak Reference Objects
..............................

Python supports `weak references' as first-class objects.  There are two
specific object types which directly implement weak references.  The
first is a simple reference object, and the second acts as a proxy for
the original object as much as it can.

 -- C Function: int PyWeakref_Check (ob)
     Return true if `ob' is either a reference or proxy object.

     New in version 2.2.


 -- C Function: int PyWeakref_CheckRef (ob)
     Return true if `ob' is a reference object.

     New in version 2.2.


 -- C Function: int PyWeakref_CheckProxy (ob)
     Return true if `ob' is a proxy object.

     New in version 2.2.


 -- C Function: PyObject* PyWeakref_NewRef (PyObject *ob,
          PyObject *callback)
     `Return value: New reference.'  Return a weak reference object for
     the object `ob'.  This will always return a new reference, but is
     not guaranteed to create a new object; an existing reference
     object may be returned.  The second parameter, `callback', can be a
     callable object that receives notification when `ob' is garbage
     collected; it should accept a single parameter, which will be the
     weak reference object itself. `callback' may also be `None' or
     `NULL'.  If `ob' is not a weakly-referencable object, or if
     `callback' is not callable, `None', or `NULL', this will return
     `NULL' and raise *Note TypeError: 218.

     New in version 2.2.


 -- C Function: PyObject* PyWeakref_NewProxy (PyObject *ob,
          PyObject *callback)
     `Return value: New reference.'  Return a weak reference proxy
     object for the object `ob'.  This will always return a new
     reference, but is not guaranteed to create a new object; an
     existing proxy object may be returned.  The second parameter,
     `callback', can be a callable object that receives notification
     when `ob' is garbage collected; it should accept a single
     parameter, which will be the weak reference object itself.
     `callback' may also be `None' or `NULL'.  If `ob' is not a
     weakly-referencable object, or if `callback' is not callable,
     `None', or `NULL', this will return `NULL' and raise *Note
     TypeError: 218.

     New in version 2.2.


 -- C Function: PyObject* PyWeakref_GetObject (PyObject *ref)
     `Return value: Borrowed reference.'  Return the referenced object
     from a weak reference, `ref'.  If the referent is no longer live,
     returns `Py_None'.

     New in version 2.2.

          Warning: This function returns a `borrowed reference' to the
          referenced object.  This means that you should always call
          *Note Py_INCREF(): 2a62. on the object except if you know
          that it cannot be destroyed while you are still using it.

 -- C Function: PyObject* PyWeakref_GET_OBJECT (PyObject *ref)
     `Return value: Borrowed reference.'  Similar to *Note
     PyWeakref_GetObject(): 2e32, but implemented as a macro that does
     no error checking.

     New in version 2.2.



File: python.info,  Node: Capsules<2>,  Next: CObjects,  Prev: Weak Reference Objects<2>,  Up: Other Objects

7.7.5.10 Capsules
.................

Refer to *Note Providing a C API for an Extension Module: 2cc. for more
information on using these objects.

 -- C Type: PyCapsule
     This subtype of *Note PyObject: 3be. represents an opaque value,
     useful for C extension modules who need to pass an opaque value
     (as a `void*' pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Type: PyCapsule_Destructor
     The type of a destructor callback for a capsule.  Defined as:

         typedef void (*PyCapsule_Destructor)(PyObject *);

     See *Note PyCapsule_New(): 2a98. for the semantics of
     PyCapsule_Destructor callbacks.

 -- C Function: int PyCapsule_CheckExact (PyObject *p)
     Return true if its argument is a *Note PyCapsule: 1c8.

 -- C Function: PyObject* PyCapsule_New (void *pointer, const
          char *name, PyCapsule_Destructor destructor)
     `Return value: New reference.'  Create a *Note PyCapsule: 1c8.
     encapsulating the `pointer'.  The `pointer' argument may not be
     `NULL'.

     On failure, set an exception and return `NULL'.

     The `name' string may either be `NULL' or a pointer to a valid C
     string.  If non-`NULL', this string must outlive the capsule.
     (Though it is permitted to free it inside the `destructor'.)

     If the `destructor' argument is not `NULL', it will be called with
     the capsule as its argument when it is destroyed.

     If this capsule will be stored as an attribute of a module, the
     `name' should be specified as `modulename.attributename'.  This
     will enable other modules to import the capsule using *Note
     PyCapsule_Import(): 2a99.

 -- C Function: void* PyCapsule_GetPointer (PyObject *capsule, const
          char *name)
     Retrieve the `pointer' stored in the capsule.  On failure, set an
     exception and return `NULL'.

     The `name' parameter must compare exactly to the name stored in
     the capsule.  If the name stored in the capsule is `NULL', the
     `name' passed in must also be `NULL'.  Python uses the C function
     `strcmp()' to compare capsule names.

 -- C Function: PyCapsule_Destructor PyCapsule_GetDestructor
          (PyObject *capsule)
     Return the current destructor stored in the capsule.  On failure,
     set an exception and return `NULL'.

     It is legal for a capsule to have a `NULL' destructor.  This makes
     a `NULL' return code somewhat ambiguous; use *Note
     PyCapsule_IsValid(): 2cb. or *Note PyErr_Occurred(): 2a63. to
     disambiguate.

 -- C Function: void* PyCapsule_GetContext (PyObject *capsule)
     Return the current context stored in the capsule.  On failure, set
     an exception and return `NULL'.

     It is legal for a capsule to have a `NULL' context.  This makes a
     `NULL' return code somewhat ambiguous; use *Note
     PyCapsule_IsValid(): 2cb. or *Note PyErr_Occurred(): 2a63. to
     disambiguate.

 -- C Function: const char* PyCapsule_GetName (PyObject *capsule)
     Return the current name stored in the capsule.  On failure, set an
     exception and return `NULL'.

     It is legal for a capsule to have a `NULL' name.  This makes a
     `NULL' return code somewhat ambiguous; use *Note
     PyCapsule_IsValid(): 2cb. or *Note PyErr_Occurred(): 2a63. to
     disambiguate.

 -- C Function: void* PyCapsule_Import (const char *name, int no_block)
     Import a pointer to a C object from a capsule attribute in a
     module.  The `name' parameter should specify the full name to the
     attribute, as in `module.attribute'.  The `name' stored in the
     capsule must match this string exactly.  If `no_block' is true,
     import the module without blocking (using *Note
     PyImport_ImportModuleNoBlock(): 389.).  If `no_block' is false,
     import the module conventionally (using *Note
     PyImport_ImportModule(): 398.).

     Return the capsule’s internal `pointer' on success.  On failure,
     set an exception and return `NULL'.  However, if *Note
     PyCapsule_Import(): 2a99. failed to import the module, and
     `no_block' was true, no exception is set.

 -- C Function: int PyCapsule_IsValid (PyObject *capsule, const
          char *name)
     Determines whether or not `capsule' is a valid capsule.  A valid
     capsule is non-`NULL', passes *Note PyCapsule_CheckExact(): 2e37,
     has a non-`NULL' pointer stored in it, and its internal name
     matches the `name' parameter.  (See *Note PyCapsule_GetPointer():
     2e38. for information on how capsule names are compared.)

     In other words, if *Note PyCapsule_IsValid(): 2cb. returns a true
     value, calls to any of the accessors (any function starting with
     `PyCapsule_Get()') are guaranteed to succeed.

     Return a nonzero value if the object is valid and matches the name
     passed in.  Return `0' otherwise.  This function will not fail.

 -- C Function: int PyCapsule_SetContext (PyObject *capsule,
          void *context)
     Set the context pointer inside `capsule' to `context'.

     Return `0' on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetDestructor (PyObject *capsule,
          PyCapsule_Destructor destructor)
     Set the destructor inside `capsule' to `destructor'.

     Return `0' on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetName (PyObject *capsule, const
          char *name)
     Set the name inside `capsule' to `name'.  If non-`NULL', the name
     must outlive the capsule.  If the previous `name' stored in the
     capsule was not `NULL', no attempt is made to free it.

     Return `0' on success.  Return nonzero and set an exception on
     failure.

 -- C Function: int PyCapsule_SetPointer (PyObject *capsule,
          void *pointer)
     Set the void pointer inside `capsule' to `pointer'.  The pointer
     may not be `NULL'.

     Return `0' on success.  Return nonzero and set an exception on
     failure.


File: python.info,  Node: CObjects,  Next: Cell Objects,  Prev: Capsules<2>,  Up: Other Objects

7.7.5.11 CObjects
.................

     Warning: The CObject API is deprecated as of Python 2.7.  Please
     switch to the new *Note Capsules: 2a9a. API.

 -- C Type: PyCObject
     This subtype of *Note PyObject: 3be. represents an opaque value,
     useful for C extension modules who need to pass an opaque value
     (as a `void*' pointer) through Python code to other C code.  It is
     often used to make a C function pointer defined in one module
     available to other modules, so the regular import mechanism can be
     used to access C APIs defined in dynamically loaded modules.

 -- C Function: int PyCObject_Check (PyObject *p)
     Return true if its argument is a *Note PyCObject: 2ca.

 -- C Function: PyObject* PyCObject_FromVoidPtr (void* cobj, void
          (*destr)(void *))
     `Return value: New reference.'  Create a *Note PyCObject: 2ca.
     from the `void *' `cobj'.  The `destr' function will be called
     when the object is reclaimed, unless it is `NULL'.

 -- C Function: PyObject* PyCObject_FromVoidPtrAndDesc (void* cobj,
          void* desc, void (*destr)(void *, void *))
     `Return value: New reference.'  Create a *Note PyCObject: 2ca.
     from the `void *' `cobj'.  The `destr' function will be called
     when the object is reclaimed. The `desc' argument can be used to
     pass extra callback data for the destructor function.

 -- C Function: void* PyCObject_AsVoidPtr (PyObject* self)
     Return the object `void *' that the *Note PyCObject: 2ca. `self'
     was created with.

 -- C Function: void* PyCObject_GetDesc (PyObject* self)
     Return the description `void *' that the *Note PyCObject: 2ca.
     `self' was created with.

 -- C Function: int PyCObject_SetVoidPtr (PyObject* self, void* cobj)
     Set the void pointer inside `self' to `cobj'. The *Note PyCObject:
     2ca. must not have an associated destructor. Return true on
     success, false on failure.


File: python.info,  Node: Cell Objects,  Next: Generator Objects,  Prev: CObjects,  Up: Other Objects

7.7.5.12 Cell Objects
.....................

“Cell” objects are used to implement variables referenced by
multiple scopes.  For each such variable, a cell object is created to
store the value; the local variables of each stack frame that
references the value contains a reference to the cells from outer
scopes which also use that variable.  When the value is accessed, the
value contained in the cell is used instead of the cell object itself.
This de-referencing of the cell object requires support from the
generated byte-code; these are not automatically de-referenced when
accessed.  Cell objects are not likely to be useful elsewhere.

 -- C Type: PyCellObject
     The C structure used for cell objects.

 -- C Variable: PyTypeObject PyCell_Type
     The type object corresponding to cell objects.

 -- C Function: int PyCell_Check (ob)
     Return true if `ob' is a cell object; `ob' must not be `NULL'.

 -- C Function: PyObject* PyCell_New (PyObject *ob)
     `Return value: New reference.'  Create and return a new cell
     object containing the value `ob'. The parameter may be `NULL'.

 -- C Function: PyObject* PyCell_Get (PyObject *cell)
     `Return value: New reference.'  Return the contents of the cell
     `cell'.

 -- C Function: PyObject* PyCell_GET (PyObject *cell)
     `Return value: Borrowed reference.'  Return the contents of the
     cell `cell', but without checking that `cell' is non-`NULL' and a
     cell object.

 -- C Function: int PyCell_Set (PyObject *cell, PyObject *value)
     Set the contents of the cell object `cell' to `value'.  This
     releases the reference to any current content of the cell. `value'
     may be `NULL'.  `cell' must be non-`NULL'; if it is not a cell
     object, `-1' will be returned.  On success, `0' will be returned.

 -- C Function: void PyCell_SET (PyObject *cell, PyObject *value)
     Sets the value of the cell object `cell' to `value'.  No reference
     counts are adjusted, and no checks are made for safety; `cell'
     must be non-`NULL' and must be a cell object.


File: python.info,  Node: Generator Objects,  Next: DateTime Objects<2>,  Prev: Cell Objects,  Up: Other Objects

7.7.5.13 Generator Objects
..........................

Generator objects are what Python uses to implement generator
iterators. They are normally created by iterating over a function that
yields values, rather than explicitly calling *Note PyGen_New(): 2e56.

 -- C Type: PyGenObject
     The C structure used for generator objects.

 -- C Variable: PyTypeObject PyGen_Type
     The type object corresponding to generator objects.

 -- C Function: int PyGen_Check (ob)
     Return true if `ob' is a generator object; `ob' must not be `NULL'.

 -- C Function: int PyGen_CheckExact (ob)
     Return true if `ob'’s type is `PyGen_Type' is a generator
     object; `ob' must not be `NULL'.

 -- C Function: PyObject* PyGen_New (PyFrameObject *frame)
     `Return value: New reference.'  Create and return a new generator
     object based on the `frame' object. A reference to `frame' is
     stolen by this function. The parameter must not be `NULL'.


File: python.info,  Node: DateTime Objects<2>,  Next: Set Objects<2>,  Prev: Generator Objects,  Up: Other Objects

7.7.5.14 DateTime Objects
.........................

Various date and time objects are supplied by the *Note datetime: 7d.
module.  Before using any of these functions, the header file
`datetime.h' must be included in your source (note that this is not
included by `Python.h'), and the macro `PyDateTime_IMPORT' must be
invoked, usually as part of the module initialisation function.  The
macro puts a pointer to a C structure into a static variable,
`PyDateTimeAPI', that is used by the following macros.

Type-check macros:

 -- C Function: int PyDate_Check (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_DateType' or a subtype
     of `PyDateTime_DateType'.  `ob' must not be `NULL'.

     New in version 2.4.


 -- C Function: int PyDate_CheckExact (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_DateType'. `ob' must
     not be `NULL'.

     New in version 2.4.


 -- C Function: int PyDateTime_Check (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_DateTimeType' or a
     subtype of `PyDateTime_DateTimeType'.  `ob' must not be `NULL'.

     New in version 2.4.


 -- C Function: int PyDateTime_CheckExact (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_DateTimeType'. `ob'
     must not be `NULL'.

     New in version 2.4.


 -- C Function: int PyTime_Check (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_TimeType' or a subtype
     of `PyDateTime_TimeType'.  `ob' must not be `NULL'.

     New in version 2.4.


 -- C Function: int PyTime_CheckExact (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_TimeType'. `ob' must
     not be `NULL'.

     New in version 2.4.


 -- C Function: int PyDelta_Check (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_DeltaType' or a subtype
     of `PyDateTime_DeltaType'.  `ob' must not be `NULL'.

     New in version 2.4.


 -- C Function: int PyDelta_CheckExact (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_DeltaType'. `ob' must
     not be `NULL'.

     New in version 2.4.


 -- C Function: int PyTZInfo_Check (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_TZInfoType' or a
     subtype of `PyDateTime_TZInfoType'.  `ob' must not be `NULL'.

     New in version 2.4.


 -- C Function: int PyTZInfo_CheckExact (PyObject *ob)
     Return true if `ob' is of type `PyDateTime_TZInfoType'. `ob' must
     not be `NULL'.

     New in version 2.4.


Macros to create objects:

 -- C Function: PyObject* PyDate_FromDate (int year, int month, int day)
     `Return value: New reference.'  Return a `datetime.date' object
     with the specified year, month and day.

     New in version 2.4.


 -- C Function: PyObject* PyDateTime_FromDateAndTime (int year,
          int month, int day, int hour, int minute, int second,
          int usecond)
     `Return value: New reference.'  Return a `datetime.datetime'
     object with the specified year, month, day, hour, minute, second
     and microsecond.

     New in version 2.4.


 -- C Function: PyObject* PyTime_FromTime (int hour, int minute,
          int second, int usecond)
     `Return value: New reference.'  Return a `datetime.time' object
     with the specified hour, minute, second and microsecond.

     New in version 2.4.


 -- C Function: PyObject* PyDelta_FromDSU (int days, int seconds,
          int useconds)
     `Return value: New reference.'  Return a `datetime.timedelta'
     object representing the given number of days, seconds and
     microseconds.  Normalization is performed so that the resulting
     number of microseconds and seconds lie in the ranges documented for
     `datetime.timedelta' objects.

     New in version 2.4.


Macros to extract fields from date objects.  The argument must be an
instance of `PyDateTime_Date', including subclasses (such as
`PyDateTime_DateTime').  The argument must not be `NULL', and the type
is not checked:

 -- C Function: int PyDateTime_GET_YEAR (PyDateTime_Date *o)
     Return the year, as a positive int.

     New in version 2.4.


 -- C Function: int PyDateTime_GET_MONTH (PyDateTime_Date *o)
     Return the month, as an int from 1 through 12.

     New in version 2.4.


 -- C Function: int PyDateTime_GET_DAY (PyDateTime_Date *o)
     Return the day, as an int from 1 through 31.

     New in version 2.4.


Macros to extract fields from datetime objects.  The argument must be an
instance of `PyDateTime_DateTime', including subclasses. The argument
must not be `NULL', and the type is not checked:

 -- C Function: int PyDateTime_DATE_GET_HOUR (PyDateTime_DateTime *o)
     Return the hour, as an int from 0 through 23.

     New in version 2.4.


 -- C Function: int PyDateTime_DATE_GET_MINUTE (PyDateTime_DateTime *o)
     Return the minute, as an int from 0 through 59.

     New in version 2.4.


 -- C Function: int PyDateTime_DATE_GET_SECOND (PyDateTime_DateTime *o)
     Return the second, as an int from 0 through 59.

     New in version 2.4.


 -- C Function: int PyDateTime_DATE_GET_MICROSECOND
          (PyDateTime_DateTime *o)
     Return the microsecond, as an int from 0 through 999999.

     New in version 2.4.


Macros to extract fields from time objects.  The argument must be an
instance of `PyDateTime_Time', including subclasses. The argument must
not be `NULL', and the type is not checked:

 -- C Function: int PyDateTime_TIME_GET_HOUR (PyDateTime_Time *o)
     Return the hour, as an int from 0 through 23.

     New in version 2.4.


 -- C Function: int PyDateTime_TIME_GET_MINUTE (PyDateTime_Time *o)
     Return the minute, as an int from 0 through 59.

     New in version 2.4.


 -- C Function: int PyDateTime_TIME_GET_SECOND (PyDateTime_Time *o)
     Return the second, as an int from 0 through 59.

     New in version 2.4.


 -- C Function: int PyDateTime_TIME_GET_MICROSECOND (PyDateTime_Time *o)
     Return the microsecond, as an int from 0 through 999999.

     New in version 2.4.


Macros for the convenience of modules implementing the DB API:

 -- C Function: PyObject* PyDateTime_FromTimestamp (PyObject *args)
     `Return value: New reference.'  Create and return a new
     `datetime.datetime' object given an argument tuple suitable for
     passing to `datetime.datetime.fromtimestamp()'.

     New in version 2.4.


 -- C Function: PyObject* PyDate_FromTimestamp (PyObject *args)
     `Return value: New reference.'  Create and return a new
     `datetime.date' object given an argument tuple suitable for
     passing to `datetime.date.fromtimestamp()'.

     New in version 2.4.



File: python.info,  Node: Set Objects<2>,  Next: Code Objects<2>,  Prev: DateTime Objects<2>,  Up: Other Objects

7.7.5.15 Set Objects
....................

New in version 2.5.

This section details the public API for *Note set: 382. and *Note
frozenset: 383.  objects.  Any functionality not listed below is best
accessed using the either the abstract object protocol (including *Note
PyObject_CallMethod(): 2bfd, *Note PyObject_RichCompareBool(): 2bf3,
*Note PyObject_Hash(): 2bff, *Note PyObject_Repr(): 2bf4, *Note
PyObject_IsTrue(): 2c00, *Note PyObject_Print(): 2be8, and *Note
PyObject_GetIter(): 2c08.) or the abstract number protocol (including
*Note PyNumber_And(): 2c1c, *Note PyNumber_Subtract(): 2c0e, *Note
PyNumber_Or(): 2c1e, *Note PyNumber_Xor(): 2c1d, *Note
PyNumber_InPlaceAnd(): 2c29, *Note PyNumber_InPlaceSubtract(): 2c20,
*Note PyNumber_InPlaceOr(): 2c2b, and *Note PyNumber_InPlaceXor():
2c2a.).

 -- C Type: PySetObject
     This subtype of *Note PyObject: 3be. is used to hold the internal
     data for both *Note set: 382. and *Note frozenset: 383. objects.
     It is like a *Note PyDictObject: 2db2.  in that it is a fixed size
     for small sets (much like tuple storage) and will point to a
     separate, variable sized block of memory for medium and large sized
     sets (much like list storage). None of the fields of this
     structure should be considered public and are subject to change.
     All access should be done through the documented API rather than
     by manipulating the values in the structure.

 -- C Variable: PyTypeObject PySet_Type
     This is an instance of *Note PyTypeObject: 2aa0. representing the
     Python *Note set: 382. type.

 -- C Variable: PyTypeObject PyFrozenSet_Type
     This is an instance of *Note PyTypeObject: 2aa0. representing the
     Python *Note frozenset: 383. type.

The following type check macros work on pointers to any Python object.
Likewise, the constructor functions work with any iterable Python
object.

 -- C Function: int PySet_Check (PyObject *p)
     Return true if `p' is a *Note set: 382. object or an instance of a
     subtype.

     New in version 2.6.


 -- C Function: int PyFrozenSet_Check (PyObject *p)
     Return true if `p' is a *Note frozenset: 383. object or an
     instance of a subtype.

     New in version 2.6.


 -- C Function: int PyAnySet_Check (PyObject *p)
     Return true if `p' is a *Note set: 382. object, a *Note frozenset:
     383. object, or an instance of a subtype.

 -- C Function: int PyAnySet_CheckExact (PyObject *p)
     Return true if `p' is a *Note set: 382. object or a *Note
     frozenset: 383. object but not an instance of a subtype.

 -- C Function: int PyFrozenSet_CheckExact (PyObject *p)
     Return true if `p' is a *Note frozenset: 383. object but not an
     instance of a subtype.

 -- C Function: PyObject* PySet_New (PyObject *iterable)
     `Return value: New reference.'  Return a new *Note set: 382.
     containing objects returned by the `iterable'.  The `iterable' may
     be `NULL' to create a new empty set.  Return the new set on
     success or `NULL' on failure.  Raise *Note TypeError: 218. if
     `iterable' is not actually iterable.  The constructor is also
     useful for copying a set (`c=set(s)').

 -- C Function: PyObject* PyFrozenSet_New (PyObject *iterable)
     `Return value: New reference.'  Return a new *Note frozenset: 383.
     containing objects returned by the `iterable'.  The `iterable' may
     be `NULL' to create a new empty frozenset.  Return the new set on
     success or `NULL' on failure.  Raise *Note TypeError: 218. if
     `iterable' is not actually iterable.

     Changed in version 2.6: Now guaranteed to return a brand-new *Note
     frozenset: 383.  Formerly, frozensets of zero-length were a
     singleton.  This got in the way of building-up new frozensets with
     `PySet_Add()'.


The following functions and macros are available for instances of *Note
set: 382.  or *Note frozenset: 383. or instances of their subtypes.

 -- C Function: Py_ssize_t PySet_Size (PyObject *anyset)
     Return the length of a *Note set: 382. or *Note frozenset: 383.
     object. Equivalent to `len(anyset)'.  Raises a `PyExc_SystemError'
     if `anyset' is not a *Note set: 382, *Note frozenset: 383, or an
     instance of a subtype.

     Changed in version 2.5: This function returned an `int'. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Function: Py_ssize_t PySet_GET_SIZE (PyObject *anyset)
     Macro form of *Note PySet_Size(): 3fe. without error checking.

 -- C Function: int PySet_Contains (PyObject *anyset, PyObject *key)
     Return `1' if found, `0' if not found, and `-1' if an error is
     encountered.  Unlike the Python *Note __contains__(): 336. method,
     this function does not automatically convert unhashable sets into
     temporary frozensets.  Raise a *Note TypeError: 218. if the `key'
     is unhashable. Raise `PyExc_SystemError' if `anyset' is not a
     *Note set: 382, *Note frozenset: 383, or an instance of a subtype.

 -- C Function: int PySet_Add (PyObject *set, PyObject *key)
     Add `key' to a *Note set: 382. instance.  Does not apply to *Note
     frozenset: 383.  instances.  Return `0' on success or `-1' on
     failure. Raise a *Note TypeError: 218. if the `key' is unhashable.
     Raise a *Note MemoryError: 977. if there is no room to grow.
     Raise a *Note SystemError: 97a. if `set' is not an instance of
     *Note set: 382. or its subtype.

     Changed in version 2.6: Now works with instances of *Note
     frozenset: 383. or its subtypes.  Like *Note PyTuple_SetItem():
     2a8c. in that it can be used to fill-in the values of brand new
     frozensets before they are exposed to other code.


The following functions are available for instances of *Note set: 382.
or its subtypes but not for instances of *Note frozenset: 383. or its
subtypes.

 -- C Function: int PySet_Discard (PyObject *set, PyObject *key)
     Return `1' if found and removed, `0' if not found (no action
     taken), and `-1' if an error is encountered.  Does not raise *Note
     KeyError: 205. for missing keys.  Raise a *Note TypeError: 218. if
     the `key' is unhashable.  Unlike the Python `discard()' method,
     this function does not automatically convert unhashable sets into
     temporary frozensets. Raise `PyExc_SystemError' if `set' is not an
     instance of *Note set: 382. or its subtype.

 -- C Function: PyObject* PySet_Pop (PyObject *set)
     `Return value: New reference.'  Return a new reference to an
     arbitrary object in the `set', and removes the object from the
     `set'.  Return `NULL' on failure.  Raise *Note KeyError: 205. if
     the set is empty. Raise a *Note SystemError: 97a. if `set' is not
     an instance of *Note set: 382. or its subtype.

 -- C Function: int PySet_Clear (PyObject *set)
     Empty an existing set of all elements.


File: python.info,  Node: Code Objects<2>,  Prev: Set Objects<2>,  Up: Other Objects

7.7.5.16 Code Objects
.....................

Code objects are a low-level detail of the CPython implementation.
Each one represents a chunk of executable code that hasn’t yet been
bound into a function.

 -- C Type: PyCodeObject
     The C structure of the objects used to describe code objects.  The
     fields of this type are subject to change at any time.

 -- C Variable: PyTypeObject PyCode_Type
     This is an instance of *Note PyTypeObject: 2aa0. representing the
     Python *Note code: 62. type.

 -- C Function: int PyCode_Check (PyObject *co)
     Return true if `co' is a *Note code: 62. object.

 -- C Function: int PyCode_GetNumFree (PyObject *co)
     Return the number of free variables in `co'.

 -- C Function: PyCodeObject *PyCode_New (int argcount, int nlocals,
          int stacksize, int flags, PyObject *code, PyObject *consts,
          PyObject *names, PyObject *varnames, PyObject *freevars,
          PyObject *cellvars, PyObject *filename, PyObject *name,
          int firstlineno, PyObject *lnotab)
     Return a new code object.  If you need a dummy code object to
     create a frame, use *Note PyCode_NewEmpty(): 2ba. instead.  Calling
     *Note PyCode_New(): 2bb. directly can bind you to a precise Python
     version since the definition of the bytecode changes often.

 -- C Function: int PyCode_NewEmpty (const char *filename, const
          char *funcname, int firstlineno)
     Return a new empty code object with the specified filename,
     function name, and first line number.  It is illegal to *Note
     exec: 41d. or *Note eval(): 378. the resulting code object.


File: python.info,  Node: Initialization Finalization and Threads,  Next: Memory Management,  Prev: Concrete Objects Layer,  Up: Python/C API Reference Manual

7.8 Initialization, Finalization, and Threads
=============================================

* Menu:

* Initializing and finalizing the interpreter::
* Process-wide parameters::
* Thread State and the Global Interpreter Lock::
* Sub-interpreter support::
* Asynchronous Notifications::
* Profiling and Tracing::
* Advanced Debugger Support::


File: python.info,  Node: Initializing and finalizing the interpreter,  Next: Process-wide parameters,  Up: Initialization Finalization and Threads

7.8.1 Initializing and finalizing the interpreter
-------------------------------------------------

 -- C Function: void Py_Initialize ()
     Initialize the Python interpreter.  In an application embedding
     Python, this should be called before using any other Python/C API
     functions; with the exception of *Note Py_SetProgramName(): 2aec,
     *Note Py_SetPythonHome(): 2e92, *Note PyEval_InitThreads(): 2e93,
     *Note PyEval_ReleaseLock(): 2e94, and *Note PyEval_AcquireLock():
     2e95. This initializes the table of loaded modules
     (`sys.modules'), and creates the fundamental modules *Note
     __builtin__: 0, *Note __main__: 2. and *Note sys: 16d.  It also
     initializes the module search path (`sys.path'). It does not set
     `sys.argv'; use *Note PySys_SetArgvEx(): 2c3. for that.  This is a
     no-op when called for a second time (without calling *Note
     Py_Finalize(): 2c6. first).  There is no return value; it is a
     fatal error if the initialization fails.

 -- C Function: void Py_InitializeEx (int initsigs)
     This function works like *Note Py_Initialize(): 2a70. if
     `initsigs' is `1'. If `initsigs' is `0', it skips initialization
     registration of signal handlers, which might be useful when Python
     is embedded.

     New in version 2.4.


 -- C Function: int Py_IsInitialized ()
     Return true (nonzero) when the Python interpreter has been
     initialized, false (zero) if not.  After *Note Py_Finalize(): 2c6.
     is called, this returns false until *Note Py_Initialize(): 2a70.
     is called again.

 -- C Function: void Py_Finalize ()
     Undo all initializations made by *Note Py_Initialize(): 2a70. and
     subsequent use of Python/C API functions, and destroy all
     sub-interpreters (see *Note Py_NewInterpreter(): 2e97. below) that
     were created and not yet destroyed since the last call to *Note
     Py_Initialize(): 2a70.  Ideally, this frees all memory allocated
     by the Python interpreter.  This is a no-op when called for a
     second time (without calling *Note Py_Initialize(): 2a70. again
     first).  There is no return value; errors during finalization are
     ignored.

     This function is provided for a number of reasons.  An embedding
     application might want to restart Python without having to restart
     the application itself.  An application that has loaded the Python
     interpreter from a dynamically loadable library (or DLL) might
     want to free all memory allocated by Python before unloading the
     DLL. During a hunt for memory leaks in an application a developer
     might want to free all memory allocated by Python before exiting
     from the application.

     `Bugs and caveats:' The destruction of modules and objects in
     modules is done in random order; this may cause destructors (*Note
     __del__(): 731. methods) to fail when they depend on other objects
     (even functions) or modules.  Dynamically loaded extension modules
     loaded by Python are not unloaded.  Small amounts of memory
     allocated by the Python interpreter may not be freed (if you find
     a leak, please report it).  Memory tied up in circular references
     between objects is not freed.  Some memory allocated by extension
     modules may not be freed.  Some extensions may not work properly
     if their initialization routine is called more than once; this can
     happen if an application calls *Note Py_Initialize(): 2a70. and
     *Note Py_Finalize(): 2c6. more than once.


File: python.info,  Node: Process-wide parameters,  Next: Thread State and the Global Interpreter Lock,  Prev: Initializing and finalizing the interpreter,  Up: Initialization Finalization and Threads

7.8.2 Process-wide parameters
-----------------------------

 -- C Function: void Py_SetProgramName (char *name)
     This function should be called before *Note Py_Initialize(): 2a70.
     is called for the first time, if it is called at all.  It tells
     the interpreter the value of the `argv[0]' argument to the
     `main()' function of the program.  This is used by *Note
     Py_GetPath(): 2b12. and some other functions below to find the
     Python run-time libraries relative to the interpreter executable.
     The default value is `'python''.  The argument should point to a
     zero-terminated character string in static storage whose contents
     will not change for the duration of the program’s execution.  No
     code in the Python interpreter will change the contents of this
     storage.

 -- C Function: char* Py_GetProgramName ()
     Return the program name set with *Note Py_SetProgramName(): 2aec,
     or the default.  The returned string points into static storage;
     the caller should not modify its value.

 -- C Function: char* Py_GetPrefix ()
     Return the `prefix' for installed platform-independent files. This
     is derived through a number of complicated rules from the program
     name set with *Note Py_SetProgramName(): 2aec. and some
     environment variables; for example, if the program name is
     `'/usr/local/bin/python'', the prefix is `'/usr/local''. The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the `prefix' variable in
     the top-level `Makefile' and the `--prefix' argument to the
     `configure' script at build time.  The value is available to
     Python code as `sys.prefix'.  It is only useful on Unix.  See also
     the next function.

 -- C Function: char* Py_GetExecPrefix ()
     Return the `exec-prefix' for installed platform-`dependent' files.
     This is derived through a number of complicated rules from the
     program name set with *Note Py_SetProgramName(): 2aec. and some
     environment variables; for example, if the program name is
     `'/usr/local/bin/python'', the exec-prefix is `'/usr/local''.  The
     returned string points into static storage; the caller should not
     modify its value.  This corresponds to the `exec_prefix' variable
     in the top-level `Makefile' and the `--exec-prefix' argument to
     the `configure' script at build  time.  The value is available to
     Python code as `sys.exec_prefix'.  It is only useful on Unix.

     Background: The exec-prefix differs from the prefix when platform
     dependent files (such as executables and shared libraries) are
     installed in a different directory tree.  In a typical
     installation, platform dependent files may be installed in the
     `/usr/local/plat' subtree while platform independent may be
     installed in `/usr/local'.

     Generally speaking, a platform is a combination of hardware and
     software families, e.g.  Sparc machines running the Solaris 2.x
     operating system are considered the same platform, but Intel
     machines running Solaris 2.x are another platform, and Intel
     machines running Linux are yet another platform.  Different major
     revisions of the same operating system generally also form
     different platforms.  Non-Unix operating systems are a different
     story; the installation strategies on those systems are so
     different that the prefix and exec-prefix are meaningless, and set
     to the empty string. Note that compiled Python bytecode files are
     platform independent (but not independent from the Python version
     by which they were compiled!).

     System administrators will know how to configure the `mount' or
     `automount' programs to share `/usr/local' between platforms while
     having `/usr/local/plat' be a different filesystem for each
     platform.

 -- C Function: char* Py_GetProgramFullPath ()
     Return the full program name of the Python executable; this is
     computed as a side-effect of deriving the default module search
     path  from the program name (set by *Note Py_SetProgramName():
     2aec. above). The returned string points into static storage; the
     caller should not modify its value.  The value is available to
     Python code as `sys.executable'.

 -- C Function: char* Py_GetPath ()
     Return the default module search path; this is computed from the
     program name (set by *Note Py_SetProgramName(): 2aec. above) and
     some environment variables.  The returned string consists of a
     series of directory names separated by a platform dependent
     delimiter character.  The delimiter character is `':'' on Unix and
     Mac OS X, `';'' on Windows.  The returned string points into
     static storage; the caller should not modify its value.  The list
     *Note sys.path: 59a. is initialized with this value on interpreter
     startup; it can be (and usually is) modified later to change the
     search path for loading modules.


 -- C Function: const char* Py_GetVersion ()
     Return the version of this Python interpreter.  This is a string
     that looks something like

         "1.5 (#67, Dec 31 1997, 22:34:28) [GCC 2.7.2.2]"

     The first word (up to the first space character) is the current
     Python version; the first three characters are the major and minor
     version separated by a period.  The returned string points into
     static storage; the caller should not modify its value.  The value
     is available to Python code as `sys.version'.

 -- C Function: const char* Py_GetPlatform ()
     Return the platform identifier for the current platform.  On Unix,
     this is formed from the “official” name of the operating
     system, converted to lower case, followed by the major revision
     number; e.g., for Solaris 2.x, which is also known as SunOS 5.x,
     the value is `'sunos5''.  On Mac OS X, it is `'darwin''.  On
     Windows, it is `'win''.  The returned string points into static
     storage; the caller should not modify its value.  The value is
     available to Python code as `sys.platform'.

 -- C Function: const char* Py_GetCopyright ()
     Return the official copyright string for the current Python
     version, for example

     `'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam''

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     `sys.copyright'.

 -- C Function: const char* Py_GetCompiler ()
     Return an indication of the compiler used to build the current
     Python version, in square brackets, for example:

         "[GCC 2.7.2.2]"

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable `sys.version'.

 -- C Function: const char* Py_GetBuildInfo ()
     Return information about the sequence number and build date and
     time  of the current Python interpreter instance, for example

         "#67, Aug  1 1997, 22:34:28"

     The returned string points into static storage; the caller should
     not modify its value.  The value is available to Python code as
     part of the variable `sys.version'.

 -- C Function: void PySys_SetArgvEx (int argc, char **argv,
          int updatepath)
     Set *Note sys.argv: 65a. based on `argc' and `argv'.  These
     parameters are similar to those passed to the program’s `main()'
     function with the difference that the first entry should refer to
     the script file to be executed rather than the executable hosting
     the Python interpreter.  If there isn’t a script that will be
     run, the first entry in `argv' can be an empty string.  If this
     function fails to initialize *Note sys.argv: 65a, a fatal
     condition is signalled using *Note Py_FatalError(): 2b93.

     If `updatepath' is zero, this is all the function does.  If
     `updatepath' is non-zero, the function also modifies *Note
     sys.path: 59a. according to the following algorithm:

        - If the name of an existing script is passed in `argv[0]', the
          absolute path of the directory where the script is located is
          prepended to *Note sys.path: 59a.

        - Otherwise (that is, if `argc' is 0 or `argv[0]' doesn’t
          point to an existing file name), an empty string is prepended
          to *Note sys.path: 59a, which is the same as prepending the
          current working directory (`"."').

          Note: It is recommended that applications embedding the
          Python interpreter for purposes other than executing a single
          script pass `0' as `updatepath', and update *Note sys.path:
          59a. themselves if desired.  See CVE-2008-5983(1).

          On versions before 2.6.6, you can achieve the same effect by
          manually popping the first *Note sys.path: 59a. element after
          having called *Note PySys_SetArgv(): 2c4, for example using:

              PyRun_SimpleString("import sys; sys.path.pop(0)\n");

     New in version 2.6.6.


 -- C Function: void PySys_SetArgv (int argc, char **argv)
     This function works like *Note PySys_SetArgvEx(): 2c3. with
     `updatepath' set to `1'.

 -- C Function: void Py_SetPythonHome (char *home)
     Set the default “home” directory, that is, the location of the
     standard Python libraries.  See *Note PYTHONHOME: 664. for the
     meaning of the argument string.

     The argument should point to a zero-terminated character string in
     static storage whose contents will not change for the duration of
     the program’s execution.  No code in the Python interpreter will
     change the contents of this storage.

 -- C Function: char* Py_GetPythonHome ()
     Return the default “home”, that is, the value set by a
     previous call to *Note Py_SetPythonHome(): 2e92, or the value of
     the *Note PYTHONHOME: 664.  environment variable if it is set.

---------- Footnotes ----------

(1) https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-5983


File: python.info,  Node: Thread State and the Global Interpreter Lock,  Next: Sub-interpreter support,  Prev: Process-wide parameters,  Up: Initialization Finalization and Threads

7.8.3 Thread State and the Global Interpreter Lock
--------------------------------------------------

The Python interpreter is not fully thread-safe.  In order to support
multi-threaded Python programs, there’s a global lock, called the
*Note global interpreter lock: 1584. or *Note GIL: 2df7, that must be
held by the current thread before it can safely access Python objects.
Without the lock, even the simplest operations could cause problems in
a multi-threaded program: for example, when two threads simultaneously
increment the reference count of the same object, the reference count
could end up being incremented only once instead of twice.

Therefore, the rule exists that only the thread that has acquired the
*Note GIL: 2df7. may operate on Python objects or call Python/C API
functions.  In order to emulate concurrency of execution, the
interpreter regularly tries to switch threads (see *Note
sys.setcheckinterval(): 2484.).  The lock is also released around
potentially blocking I/O operations like reading or writing a file, so
that other Python threads can run in the meantime.

The Python interpreter keeps some thread-specific bookkeeping
information inside a data structure called *Note PyThreadState: 2ea1.
There’s also one global variable pointing to the current *Note
PyThreadState: 2ea1.: it can be retrieved using *Note
PyThreadState_Get(): 2ea2.

* Menu:

* Releasing the GIL from extension code::
* Non-Python created threads::
* High-level API::
* Low-level API::


File: python.info,  Node: Releasing the GIL from extension code,  Next: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

7.8.3.1 Releasing the GIL from extension code
.............................................

Most extension code manipulating the *Note GIL: 2df7. has the following
simple structure:

    Save the thread state in a local variable.
    Release the global interpreter lock.
    ... Do some blocking I/O operation ...
    Reacquire the global interpreter lock.
    Restore the thread state from the local variable.

This is so common that a pair of macros exists to simplify it:

    Py_BEGIN_ALLOW_THREADS
    ... Do some blocking I/O operation ...
    Py_END_ALLOW_THREADS

The *Note Py_BEGIN_ALLOW_THREADS: 2a91. macro opens a new block and
declares a hidden local variable; the *Note Py_END_ALLOW_THREADS: 2a92.
macro closes the block.  These two macros are still available when
Python is compiled without thread support (they simply have an empty
expansion).

When thread support is enabled, the block above expands to the
following code:

    PyThreadState *_save;

    _save = PyEval_SaveThread();
    ...Do some blocking I/O operation...
    PyEval_RestoreThread(_save);

Here is how these functions work: the global interpreter lock is used
to protect the pointer to the current thread state.  When releasing the
lock and saving the thread state, the current thread state pointer must
be retrieved before the lock is released (since another thread could
immediately acquire the lock and store its own thread state in the
global variable). Conversely, when acquiring the lock and restoring the
thread state, the lock must be acquired before storing the thread state
pointer.

     Note: Calling system I/O functions is the most common use case for
     releasing the GIL, but it can also be useful before calling
     long-running computations which don’t need access to Python
     objects, such as compression or cryptographic functions operating
     over memory buffers.  For example, the standard *Note zlib: 1ad.
     and *Note hashlib: e7. modules release the GIL when compressing or
     hashing data.


File: python.info,  Node: Non-Python created threads,  Next: High-level API,  Prev: Releasing the GIL from extension code,  Up: Thread State and the Global Interpreter Lock

7.8.3.2 Non-Python created threads
..................................

When threads are created using the dedicated Python APIs (such as the
*Note threading: 179. module), a thread state is automatically
associated to them and the code showed above is therefore correct.
However, when threads are created from C (for example by a third-party
library with its own thread management), they don’t hold the GIL, nor
is there a thread state structure for them.

If you need to call Python code from these threads (often this will be
part of a callback API provided by the aforementioned third-party
library), you must first register these threads with the interpreter by
creating a thread state data structure, then acquiring the GIL, and
finally storing their thread state pointer, before you can start using
the Python/C API.  When you are done, you should reset the thread state
pointer, release the GIL, and finally free the thread state data
structure.

The *Note PyGILState_Ensure(): 2ea6. and *Note PyGILState_Release():
2ea7. functions do all of the above automatically.  The typical idiom
for calling into Python from a C thread is:

    PyGILState_STATE gstate;
    gstate = PyGILState_Ensure();

    /* Perform Python actions here. */
    result = CallSomeFunction();
    /* evaluate result or handle exception */

    /* Release the thread. No Python API allowed beyond this point. */
    PyGILState_Release(gstate);

Note that the `PyGILState_*()' functions assume there is only one global
interpreter (created automatically by *Note Py_Initialize(): 2a70.).
Python supports the creation of additional interpreters (using *Note
Py_NewInterpreter(): 2e97.), but mixing multiple interpreters and the
`PyGILState_*()' API is unsupported.

Another important thing to note about threads is their behaviour in the
face of the C `fork()' call. On most systems with `fork()', after a
process forks only the thread that issued the fork will exist. That also
means any locks held by other threads will never be released. Python
solves this for *Note os.fork(): 244. by acquiring the locks it uses
internally before the fork, and releasing them afterwards. In addition,
it resets any *Note Lock Objects: 1605. in the child. When extending or
embedding Python, there is no way to inform Python of additional
(non-Python) locks that need to be acquired before or reset after a
fork. OS facilities such as `pthread_atfork()' would need to be used to
accomplish the same thing.  Additionally, when extending or embedding
Python, calling `fork()' directly rather than through *Note os.fork():
244. (and returning to or calling into Python) may result in a deadlock
by one of Python’s internal locks being held by a thread that is
defunct after the fork.  *Note PyOS_AfterFork(): 2b84. tries to reset
the necessary locks, but is not always able to.


File: python.info,  Node: High-level API,  Next: Low-level API,  Prev: Non-Python created threads,  Up: Thread State and the Global Interpreter Lock

7.8.3.3 High-level API
......................

These are the most commonly used types and functions when writing C
extension code, or when embedding the Python interpreter:

 -- C Type: PyInterpreterState
     This data structure represents the state shared by a number of
     cooperating threads.  Threads belonging to the same interpreter
     share their module administration and a few other internal items.
     There are no public members in this structure.

     Threads belonging to different interpreters initially share
     nothing, except process state like available memory, open file
     descriptors and such.  The global interpreter lock is also shared
     by all threads, regardless of to which interpreter they belong.

 -- C Type: PyThreadState
     This data structure represents the state of a single thread.  The
     only public data member is *Note PyInterpreterState *:
     2ea9.`interp', which points to this thread’s interpreter state.

 -- C Function: void PyEval_InitThreads ()
     Initialize and acquire the global interpreter lock.  It should be
     called in the main thread before creating a second thread or
     engaging in any other thread operations such as *Note
     PyEval_ReleaseLock(): 2e94. or `PyEval_ReleaseThread(tstate)'. It
     is not needed before calling *Note PyEval_SaveThread(): 2eaa. or
     *Note PyEval_RestoreThread(): 2eab.

     This is a no-op when called for a second time.  It is safe to call
     this function before calling *Note Py_Initialize(): 2a70.

          Note: When only the main thread exists, no GIL operations are
          needed. This is a common situation (most Python programs do
          not use threads), and the lock operations slow the
          interpreter down a bit. Therefore, the lock is not created
          initially.  This situation is equivalent to having acquired
          the lock: when there is only a single thread, all object
          accesses are safe.  Therefore, when this function initializes
          the global interpreter lock, it also acquires it.  Before the
          Python `_thread' module creates a new thread, knowing that
          either it has the lock or the lock hasn’t been created yet,
          it calls *Note PyEval_InitThreads(): 2e93.  When this call
          returns, it is guaranteed that the lock has been created and
          that the calling thread has acquired it.

          It is `not' safe to call this function when it is unknown
          which thread (if any) currently has the global interpreter
          lock.

          This function is not available when thread support is
          disabled at compile time.

 -- C Function: int PyEval_ThreadsInitialized ()
     Returns a non-zero value if *Note PyEval_InitThreads(): 2e93. has
     been called.  This function can be called without holding the GIL,
     and therefore can be used to avoid calls to the locking API when
     running single-threaded.  This function is not available when
     thread support is disabled at compile time.

     New in version 2.4.


 -- C Function: PyThreadState* PyEval_SaveThread ()
     Release the global interpreter lock (if it has been created and
     thread support is enabled) and reset the thread state to `NULL',
     returning the previous thread state (which is not `NULL').  If the
     lock has been created, the current thread must have acquired it.
     (This function is available even when thread support is disabled
     at compile time.)

 -- C Function: void PyEval_RestoreThread (PyThreadState *tstate)
     Acquire the global interpreter lock (if it has been created and
     thread support is enabled) and set the thread state to `tstate',
     which must not be `NULL'.  If the lock has been created, the
     current thread must not have acquired it, otherwise deadlock
     ensues.  (This function is available even when thread support is
     disabled at compile time.)

 -- C Function: PyThreadState* PyThreadState_Get ()
     Return the current thread state.  The global interpreter lock must
     be held.  When the current thread state is `NULL', this issues a
     fatal error (so that the caller needn’t check for `NULL').

 -- C Function: PyThreadState* PyThreadState_Swap
          (PyThreadState *tstate)
     Swap the current thread state with the thread state given by the
     argument `tstate', which may be `NULL'.  The global interpreter
     lock must be held and is not released.

 -- C Function: void PyEval_ReInitThreads ()
     This function is called from *Note PyOS_AfterFork(): 2b84. to
     ensure that newly created child processes don’t hold locks
     referring to threads which are not running in the child process.

The following functions use thread-local storage, and are not compatible
with sub-interpreters:

 -- C Function: PyGILState_STATE PyGILState_Ensure ()
     Ensure that the current thread is ready to call the Python C API
     regardless of the current state of Python, or of the global
     interpreter lock. This may be called as many times as desired by a
     thread as long as each call is matched with a call to *Note
     PyGILState_Release(): 2ea7. In general, other thread-related APIs
     may be used between *Note PyGILState_Ensure(): 2ea6. and *Note
     PyGILState_Release(): 2ea7. calls as long as the thread state is
     restored to its previous state before the Release().  For example,
     normal usage of the *Note Py_BEGIN_ALLOW_THREADS: 2a91. and *Note
     Py_END_ALLOW_THREADS: 2a92. macros is acceptable.

     The return value is an opaque “handle” to the thread state when
     *Note PyGILState_Ensure(): 2ea6. was called, and must be passed to
     *Note PyGILState_Release(): 2ea7. to ensure Python is left in the
     same state. Even though recursive calls are allowed, these handles
     `cannot' be shared - each unique call to *Note
     PyGILState_Ensure(): 2ea6. must save the handle for its call to
     *Note PyGILState_Release(): 2ea7.

     When the function returns, the current thread will hold the GIL
     and be able to call arbitrary Python code.  Failure is a fatal
     error.

     New in version 2.3.


 -- C Function: void PyGILState_Release (PyGILState_STATE)
     Release any resources previously acquired.  After this call,
     Python’s state will be the same as it was prior to the
     corresponding *Note PyGILState_Ensure(): 2ea6. call (but generally
     this state will be unknown to the caller, hence the use of the
     GILState API).

     Every call to *Note PyGILState_Ensure(): 2ea6. must be matched by
     a call to *Note PyGILState_Release(): 2ea7. on the same thread.

     New in version 2.3.


 -- C Function: PyThreadState* PyGILState_GetThisThreadState ()
     Get the current thread state for this thread.  May return `NULL'
     if no GILState API has been used on the current thread.  Note that
     the main thread always has such a thread-state, even if no
     auto-thread-state call has been made on the main thread.  This is
     mainly a helper/diagnostic function.

     New in version 2.3.


The following macros are normally used without a trailing semicolon;
look for example usage in the Python source distribution.

 -- C Macro: Py_BEGIN_ALLOW_THREADS
     This macro expands to `{ PyThreadState *_save; _save =
     PyEval_SaveThread();'.  Note that it contains an opening brace; it
     must be matched with a following *Note Py_END_ALLOW_THREADS: 2a92.
     macro.  See above for further discussion of this macro.  It is a
     no-op when thread support is disabled at compile time.

 -- C Macro: Py_END_ALLOW_THREADS
     This macro expands to `PyEval_RestoreThread(_save); }'. Note that
     it contains a closing brace; it must be matched with an earlier
     *Note Py_BEGIN_ALLOW_THREADS: 2a91. macro.  See above for further
     discussion of this macro.  It is a no-op when thread support is
     disabled at compile time.

 -- C Macro: Py_BLOCK_THREADS
     This macro expands to `PyEval_RestoreThread(_save);': it is
     equivalent to *Note Py_END_ALLOW_THREADS: 2a92. without the
     closing brace.  It is a no-op when thread support is disabled at
     compile time.

 -- C Macro: Py_UNBLOCK_THREADS
     This macro expands to `_save = PyEval_SaveThread();': it is
     equivalent to *Note Py_BEGIN_ALLOW_THREADS: 2a91. without the
     opening brace and variable declaration.  It is a no-op when thread
     support is disabled at compile time.


File: python.info,  Node: Low-level API,  Prev: High-level API,  Up: Thread State and the Global Interpreter Lock

7.8.3.4 Low-level API
.....................

All of the following functions are only available when thread support
is enabled at compile time, and must be called only when the global
interpreter lock has been created.

 -- C Function: PyInterpreterState* PyInterpreterState_New ()
     Create a new interpreter state object.  The global interpreter
     lock need not be held, but may be held if it is necessary to
     serialize calls to this function.

 -- C Function: void PyInterpreterState_Clear
          (PyInterpreterState *interp)
     Reset all information in an interpreter state object.  The global
     interpreter lock must be held.

 -- C Function: void PyInterpreterState_Delete
          (PyInterpreterState *interp)
     Destroy an interpreter state object.  The global interpreter lock
     need not be held.  The interpreter state must have been reset with
     a previous call to *Note PyInterpreterState_Clear(): 2eb3.

 -- C Function: PyThreadState* PyThreadState_New
          (PyInterpreterState *interp)
     Create a new thread state object belonging to the given
     interpreter object.  The global interpreter lock need not be held,
     but may be held if it is necessary to serialize calls to this
     function.

 -- C Function: void PyThreadState_Clear (PyThreadState *tstate)
     Reset all information in a thread state object.  The global
     interpreter lock must be held.

 -- C Function: void PyThreadState_Delete (PyThreadState *tstate)
     Destroy a thread state object.  The global interpreter lock need
     not be held.  The thread state must have been reset with a
     previous call to *Note PyThreadState_Clear(): 2eb6.

 -- C Function: PyObject* PyThreadState_GetDict ()
     `Return value: Borrowed reference.'  Return a dictionary in which
     extensions can store thread-specific state information.  Each
     extension should use a unique key to use to store state in the
     dictionary.  It is okay to call this function when no current
     thread state is available. If this function returns `NULL', no
     exception has been raised and the caller should assume no current
     thread state is available.

     Changed in version 2.3: Previously this could only be called when
     a current thread is active, and `NULL' meant that an exception was
     raised.


 -- C Function: int PyThreadState_SetAsyncExc (long id, PyObject *exc)
     Asynchronously raise an exception in a thread. The `id' argument
     is the thread id of the target thread; `exc' is the exception
     object to be raised. This function does not steal any references
     to `exc'. To prevent naive misuse, you must write your own C
     extension to call this.  Must be called with the GIL held.
     Returns the number of thread states modified; this is normally
     one, but will be zero if the thread id isn’t found.  If `exc' is
     `NULL', the pending exception (if any) for the thread is cleared.
     This raises no exceptions.

     New in version 2.3.


 -- C Function: void PyEval_AcquireThread (PyThreadState *tstate)
     Acquire the global interpreter lock and set the current thread
     state to `tstate', which should not be `NULL'.  The lock must have
     been created earlier.  If this thread already has the lock,
     deadlock ensues.

     *Note PyEval_RestoreThread(): 2eab. is a higher-level function
     which is always available (even when thread support isn’t
     enabled or when threads have not been initialized).

 -- C Function: void PyEval_ReleaseThread (PyThreadState *tstate)
     Reset the current thread state to `NULL' and release the global
     interpreter lock.  The lock must have been created earlier and
     must be held by the current thread.  The `tstate' argument, which
     must not be `NULL', is only used to check that it represents the
     current thread state — if it isn’t, a fatal error is reported.

     *Note PyEval_SaveThread(): 2eaa. is a higher-level function which
     is always available (even when thread support isn’t enabled or
     when threads have not been initialized).

 -- C Function: void PyEval_AcquireLock ()
     Acquire the global interpreter lock.  The lock must have been
     created earlier.  If this thread already has the lock, a deadlock
     ensues.

          Warning: This function does not change the current thread
          state.  Please use *Note PyEval_RestoreThread(): 2eab. or
          *Note PyEval_AcquireThread(): 2eba.  instead.

 -- C Function: void PyEval_ReleaseLock ()
     Release the global interpreter lock.  The lock must have been
     created earlier.

          Warning: This function does not change the current thread
          state.  Please use *Note PyEval_SaveThread(): 2eaa. or *Note
          PyEval_ReleaseThread(): 2ebb.  instead.


File: python.info,  Node: Sub-interpreter support,  Next: Asynchronous Notifications,  Prev: Thread State and the Global Interpreter Lock,  Up: Initialization Finalization and Threads

7.8.4 Sub-interpreter support
-----------------------------

While in most uses, you will only embed a single Python interpreter,
there are cases where you need to create several independent
interpreters in the same process and perhaps even in the same thread.
Sub-interpreters allow you to do that.  You can switch between
sub-interpreters using the *Note PyThreadState_Swap(): 2eac. function.
You can create and destroy them using the following functions:

 -- C Function: PyThreadState* Py_NewInterpreter ()
     Create a new sub-interpreter.  This is an (almost) totally
     separate environment for the execution of Python code.  In
     particular, the new interpreter has separate, independent versions
     of all imported modules, including the fundamental modules
     `builtins', *Note __main__: 2. and *Note sys: 16d.  The table of
     loaded modules (`sys.modules') and the module search path
     (`sys.path') are also separate.  The new environment has no
     `sys.argv' variable.  It has new standard I/O stream file objects
     `sys.stdin', `sys.stdout' and `sys.stderr' (however these refer to
     the same underlying file descriptors).

     The return value points to the first thread state created in the
     new sub-interpreter.  This thread state is made in the current
     thread state.  Note that no actual thread is created; see the
     discussion of thread states below.  If creation of the new
     interpreter is unsuccessful, `NULL' is returned; no exception is
     set since the exception state is stored in the current thread
     state and there may not be a current thread state.  (Like all
     other Python/C API functions, the global interpreter lock must be
     held before calling this function and is still held when it
     returns; however, unlike most other Python/C API functions, there
     needn’t be a current thread state on entry.)

     Extension modules are shared between (sub-)interpreters as
     follows: the first time a particular extension is imported, it is
     initialized normally, and a (shallow) copy of its module’s
     dictionary is squirreled away.  When the same extension is
     imported by another (sub-)interpreter, a new module is initialized
     and filled with the contents of this copy; the extension’s
     `init' function is not called.  Note that this is different from
     what happens when an extension is imported after the interpreter
     has been completely re-initialized by calling *Note Py_Finalize():
     2c6. and *Note Py_Initialize(): 2a70.; in that case, the
     extension’s `initmodule' function `is' called again.


 -- C Function: void Py_EndInterpreter (PyThreadState *tstate)
     Destroy the (sub-)interpreter represented by the given thread
     state. The given thread state must be the current thread state.
     See the discussion of thread states below.  When the call returns,
     the current thread state is `NULL'.  All thread states associated
     with this interpreter are destroyed.  (The global interpreter lock
     must be held before calling this function and is still held when
     it returns.)  *Note Py_Finalize(): 2c6. will destroy all
     sub-interpreters that haven’t been explicitly destroyed at that
     point.

* Menu:

* Bugs and caveats::


File: python.info,  Node: Bugs and caveats,  Up: Sub-interpreter support

7.8.4.1 Bugs and caveats
........................

Because sub-interpreters (and the main interpreter) are part of the same
process, the insulation between them isn’t perfect — for example,
using low-level file operations like  *Note os.close(): 113e. they can
(accidentally or maliciously) affect each other’s open files.
Because of the way extensions are shared between (sub-)interpreters,
some extensions may not work properly; this is especially likely when
the extension makes use of (static) global variables, or when the
extension manipulates its module’s dictionary after its
initialization.  It is possible to insert objects created in one
sub-interpreter into a namespace of another sub-interpreter; this should
be done with great care to avoid sharing user-defined functions,
methods, instances or classes between sub-interpreters, since import
operations executed by such objects may affect the wrong
(sub-)interpreter’s dictionary of loaded modules.

Also note that combining this functionality with `PyGILState_*()' APIs
is delicate, because these APIs assume a bijection between Python
thread states and OS-level threads, an assumption broken by the
presence of sub-interpreters.  It is highly recommended that you
don’t switch sub-interpreters between a pair of matching *Note
PyGILState_Ensure(): 2ea6. and *Note PyGILState_Release(): 2ea7. calls.
Furthermore, extensions (such as *Note ctypes: 78.) using these APIs to
allow calling of Python code from non-Python created threads will
probably be broken when using sub-interpreters.


File: python.info,  Node: Asynchronous Notifications,  Next: Profiling and Tracing,  Prev: Sub-interpreter support,  Up: Initialization Finalization and Threads

7.8.5 Asynchronous Notifications
--------------------------------

A mechanism is provided to make asynchronous notifications to the main
interpreter thread.  These notifications take the form of a function
pointer and a void pointer argument.

 -- C Function: int Py_AddPendingCall (int (*func)(void *), void *arg)
     Schedule a function to be called from the main interpreter thread.
     On success, `0' is returned and `func' is queued for being called
     in the main thread.  On failure, `-1' is returned without setting
     any exception.

     When successfully queued, `func' will be `eventually' called from
     the main interpreter thread with the argument `arg'.  It will be
     called asynchronously with respect to normally running Python
     code, but with both these conditions met:

        * on a *Note bytecode: 59e. boundary;

        * with the main thread holding the *Note global interpreter
          lock: 1584.  (`func' can therefore use the full C API).

     `func' must return `0' on success, or `-1' on failure with an
     exception set.  `func' won’t be interrupted to perform another
     asynchronous notification recursively, but it can still be
     interrupted to switch threads if the global interpreter lock is
     released.

     This function doesn’t need a current thread state to run, and it
     doesn’t need the global interpreter lock.

          Warning: This is a low-level function, only useful for very
          special cases.  There is no guarantee that `func' will be
          called as quick as possible.  If the main thread is busy
          executing a system call, `func' won’t be called before the
          system call returns.  This function is generally `not'
          suitable for calling Python code from arbitrary C threads.
          Instead, use the *Note PyGILState API: 2ea5.

     New in version 2.7.



File: python.info,  Node: Profiling and Tracing,  Next: Advanced Debugger Support,  Prev: Asynchronous Notifications,  Up: Initialization Finalization and Threads

7.8.6 Profiling and Tracing
---------------------------

The Python interpreter provides some low-level support for attaching
profiling and execution tracing facilities.  These are used for
profiling, debugging, and coverage analysis tools.

Starting with Python 2.2, the implementation of this facility was
substantially revised, and an interface from C was added.  This C
interface allows the profiling or tracing code to avoid the overhead of
calling through Python-level callable objects, making a direct C
function call instead.  The essential attributes of the facility have
not changed; the interface allows trace functions to be installed
per-thread, and the basic events reported to the trace function are the
same as had been reported to the Python-level trace functions in
previous versions.

 -- C Type: int (*Py_tracefunc) (PyObject *obj, PyFrameObject *frame,
          int what, PyObject *arg)
     The type of the trace function registered using *Note
     PyEval_SetProfile(): 4b9. and *Note PyEval_SetTrace(): 4ba. The
     first parameter is the object passed to the registration function
     as `obj', `frame' is the frame object to which the event pertains,
     `what' is one of the constants `PyTrace_CALL',
     `PyTrace_EXCEPTION', `PyTrace_LINE', `PyTrace_RETURN',
     `PyTrace_C_CALL', `PyTrace_C_EXCEPTION', or `PyTrace_C_RETURN',
     and `arg' depends on the value of `what':

     Value of `what'                    Meaning of `arg'
     ------------------------------------------------------------------------------ 
     `PyTrace_CALL'                     Always `NULL'.
     `PyTrace_EXCEPTION'                Exception information as returned by
                                        *Note sys.exc_info(): 306.
     `PyTrace_LINE'                     Always `NULL'.
     `PyTrace_RETURN'                   Value being returned to the caller, or
                                        `NULL' if caused by an exception.
     `PyTrace_C_CALL'                   Function object being called.
     `PyTrace_C_EXCEPTION'              Function object being called.
     `PyTrace_C_RETURN'                 Function object being called.


 -- C Variable: int PyTrace_CALL
     The value of the `what' parameter to a *Note Py_tracefunc: 2ec2.
     function when a new call to a function or method is being
     reported, or a new entry into a generator.  Note that the creation
     of the iterator for a generator function is not reported as there
     is no control transfer to the Python bytecode in the corresponding
     frame.

 -- C Variable: int PyTrace_EXCEPTION
     The value of the `what' parameter to a *Note Py_tracefunc: 2ec2.
     function when an exception has been raised.  The callback function
     is called with this value for `what' when after any bytecode is
     processed after which the exception becomes set within the frame
     being executed.  The effect of this is that as exception
     propagation causes the Python stack to unwind, the callback is
     called upon return to each frame as the exception propagates.
     Only trace functions receives these events; they are not needed by
     the profiler.

 -- C Variable: int PyTrace_LINE
     The value passed as the `what' parameter to a trace function (but
     not a profiling function) when a line-number event is being
     reported.

 -- C Variable: int PyTrace_RETURN
     The value for the `what' parameter to *Note Py_tracefunc: 2ec2.
     functions when a call is returning without propagating an
     exception.

 -- C Variable: int PyTrace_C_CALL
     The value for the `what' parameter to *Note Py_tracefunc: 2ec2.
     functions when a C function is about to be called.

 -- C Variable: int PyTrace_C_EXCEPTION
     The value for the `what' parameter to *Note Py_tracefunc: 2ec2.
     functions when a C function has raised an exception.

 -- C Variable: int PyTrace_C_RETURN
     The value for the `what' parameter to *Note Py_tracefunc: 2ec2.
     functions when a C function has returned.

 -- C Function: void PyEval_SetProfile (Py_tracefunc func,
          PyObject *obj)
     Set the profiler function to `func'.  The `obj' parameter is
     passed to the function as its first parameter, and may be any
     Python object, or `NULL'.  If the profile function needs to
     maintain state, using a different value for `obj' for each thread
     provides a convenient and thread-safe place to store it.  The
     profile function is called for all monitored events except the
     line-number events.

 -- C Function: void PyEval_SetTrace (Py_tracefunc func, PyObject *obj)
     Set the tracing function to `func'.  This is similar to *Note
     PyEval_SetProfile(): 4b9, except the tracing function does receive
     line-number events.

 -- C Function: PyObject* PyEval_GetCallStats (PyObject *self)
     Return a tuple of function call counts.  There are constants
     defined for the positions within the tuple:

     Name                                Value
     ------------------------------------------------ 
     `PCALL_ALL'                         0
     `PCALL_FUNCTION'                    1
     `PCALL_FAST_FUNCTION'               2
     `PCALL_FASTER_FUNCTION'             3
     `PCALL_METHOD'                      4
     `PCALL_BOUND_METHOD'                5
     `PCALL_CFUNCTION'                   6
     `PCALL_TYPE'                        7
     `PCALL_GENERATOR'                   8
     `PCALL_OTHER'                       9
     `PCALL_POP'                         10

     `PCALL_FAST_FUNCTION' means no argument tuple needs to be created.
     `PCALL_FASTER_FUNCTION' means that the fast-path frame setup code
     is used.

     If there is a method call where the call can be optimized by
     changing the argument tuple and calling the function directly, it
     gets recorded twice.

     This function is only present if Python is compiled with
     `CALL_PROFILE' defined.


File: python.info,  Node: Advanced Debugger Support,  Prev: Profiling and Tracing,  Up: Initialization Finalization and Threads

7.8.7 Advanced Debugger Support
-------------------------------

These functions are only intended to be used by advanced debugging
tools.

 -- C Function: PyInterpreterState* PyInterpreterState_Head ()
     Return the interpreter state object at the head of the list of all
     such objects.

     New in version 2.2.


 -- C Function: PyInterpreterState* PyInterpreterState_Next
          (PyInterpreterState *interp)
     Return the next interpreter state object after `interp' from the
     list of all such objects.

     New in version 2.2.


 -- C Function: PyThreadState * PyInterpreterState_ThreadHead
          (PyInterpreterState *interp)
     Return the pointer to the first *Note PyThreadState: 2ea1. object
     in the list of threads associated with the interpreter `interp'.

     New in version 2.2.


 -- C Function: PyThreadState* PyThreadState_Next
          (PyThreadState *tstate)
     Return the next thread state object after `tstate' from the list
     of all such objects belonging to the same *Note
     PyInterpreterState: 2ea9. object.

     New in version 2.2.



File: python.info,  Node: Memory Management,  Next: Object Implementation Support,  Prev: Initialization Finalization and Threads,  Up: Python/C API Reference Manual

7.9 Memory Management
=====================

* Menu:

* Overview::
* Memory Interface::
* Examples: Examples<23>.


File: python.info,  Node: Overview,  Next: Memory Interface,  Up: Memory Management

7.9.1 Overview
--------------

Memory management in Python involves a private heap containing all
Python objects and data structures. The management of this private heap
is ensured internally by the `Python memory manager'.  The Python
memory manager has different components which deal with various dynamic
storage management aspects, like sharing, segmentation, preallocation
or caching.

At the lowest level, a raw memory allocator ensures that there is
enough room in the private heap for storing all Python-related data by
interacting with the memory manager of the operating system. On top of
the raw memory allocator, several object-specific allocators operate on
the same heap and implement distinct memory management policies adapted
to the peculiarities of every object type. For example, integer objects
are managed differently within the heap than strings, tuples or
dictionaries because integers imply different storage requirements and
speed/space tradeoffs. The Python memory manager thus delegates some of
the work to the object-specific allocators, but ensures that the latter
operate within the bounds of the private heap.

It is important to understand that the management of the Python heap is
performed by the interpreter itself and that the user has no control
over it, even if she regularly manipulates object pointers to memory
blocks inside that heap.  The allocation of heap space for Python
objects and other internal buffers is performed on demand by the Python
memory manager through the Python/C API functions listed in this
document.

To avoid memory corruption, extension writers should never try to
operate on Python objects with the functions exported by the C library:
`malloc()', `calloc()', `realloc()' and `free()'.  This will result in
mixed calls between the C allocator and the Python memory manager with
fatal consequences, because they implement different algorithms and
operate on different heaps.  However, one may safely allocate and
release memory blocks with the C library allocator for individual
purposes, as shown in the following example:

    PyObject *res;
    char *buf = (char *) malloc(BUFSIZ); /* for I/O */

    if (buf == NULL)
        return PyErr_NoMemory();
    ...Do some I/O operation involving buf...
    res = PyString_FromString(buf);
    free(buf); /* malloc'ed */
    return res;

In this example, the memory request for the I/O buffer is handled by
the C library allocator. The Python memory manager is involved only in
the allocation of the string object returned as a result.

In most situations, however, it is recommended to allocate memory from
the Python heap specifically because the latter is under control of the
Python memory manager. For example, this is required when the
interpreter is extended with new object types written in C. Another
reason for using the Python heap is the desire to `inform' the Python
memory manager about the memory needs of the extension module. Even
when the requested memory is used exclusively for internal,
highly-specific purposes, delegating all memory requests to the Python
memory manager causes the interpreter to have a more accurate image of
its memory footprint as a whole. Consequently, under certain
circumstances, the Python memory manager may or may not trigger
appropriate actions, like garbage collection, memory compaction or
other preventive procedures. Note that by using the C library allocator
as shown in the previous example, the allocated memory for the I/O
buffer escapes completely the Python memory manager.


File: python.info,  Node: Memory Interface,  Next: Examples<23>,  Prev: Overview,  Up: Memory Management

7.9.2 Memory Interface
----------------------

The following function sets, modeled after the ANSI C standard, but
specifying behavior when requesting zero bytes, are available for
allocating and releasing memory from the Python heap:

 -- C Function: void* PyMem_Malloc (size_t n)
     Allocates `n' bytes and returns a pointer of type `void*' to the
     allocated memory, or `NULL' if the request fails. Requesting zero
     bytes returns a distinct non-`NULL' pointer if possible, as if
     `PyMem_Malloc(1)' had been called instead. The memory will not
     have been initialized in any way.

 -- C Function: void* PyMem_Realloc (void *p, size_t n)
     Resizes the memory block pointed to by `p' to `n' bytes. The
     contents will be unchanged to the minimum of the old and the new
     sizes. If `p' is `NULL', the call is equivalent to
     `PyMem_Malloc(n)'; else if `n' is equal to zero, the memory block
     is resized but is not freed, and the returned pointer is
     non-`NULL'.  Unless `p' is `NULL', it must have been returned by a
     previous call to *Note PyMem_Malloc(): 3f6. or *Note
     PyMem_Realloc(): 3f7. If the request fails, *Note PyMem_Realloc():
     3f7. returns `NULL' and `p' remains a valid pointer to the
     previous memory area.

 -- C Function: void PyMem_Free (void *p)
     Frees the memory block pointed to by `p', which must have been
     returned by a previous call to *Note PyMem_Malloc(): 3f6. or *Note
     PyMem_Realloc(): 3f7.  Otherwise, or if `PyMem_Free(p)' has been
     called before, undefined behavior occurs. If `p' is `NULL', no
     operation is performed.

The following type-oriented macros are provided for convenience.  Note
that `TYPE' refers to any C type.

 -- C Function: TYPE* PyMem_New (TYPE, size_t n)
     Same as *Note PyMem_Malloc(): 3f6, but allocates `(n *
     sizeof(TYPE))' bytes of memory.  Returns a pointer cast to
     `TYPE*'.  The memory will not have been initialized in any way.

 -- C Function: TYPE* PyMem_Resize (void *p, TYPE, size_t n)
     Same as *Note PyMem_Realloc(): 3f7, but the memory block is
     resized to `(n * sizeof(TYPE))' bytes.  Returns a pointer cast to
     `TYPE*'. On return, `p' will be a pointer to the new memory area,
     or `NULL' in the event of failure.  This is a C preprocessor
     macro; p is always reassigned.  Save the original value of p to
     avoid losing memory when handling errors.

 -- C Function: void PyMem_Del (void *p)
     Same as *Note PyMem_Free(): 3f8.

In addition, the following macro sets are provided for calling the
Python memory allocator directly, without involving the C API functions
listed above. However, note that their use does not preserve binary
compatibility across Python versions and is therefore deprecated in
extension modules.

`PyMem_MALLOC()', `PyMem_REALLOC()', `PyMem_FREE()'.

`PyMem_NEW()', `PyMem_RESIZE()', `PyMem_DEL()'.


File: python.info,  Node: Examples<23>,  Prev: Memory Interface,  Up: Memory Management

7.9.3 Examples
--------------

Here is the example from section *Note Overview: 2ed1, rewritten so
that the I/O buffer is allocated from the Python heap by using the
first function set:

    PyObject *res;
    char *buf = (char *) PyMem_Malloc(BUFSIZ); /* for I/O */

    if (buf == NULL)
        return PyErr_NoMemory();
    /* ...Do some I/O operation involving buf... */
    res = PyString_FromString(buf);
    PyMem_Free(buf); /* allocated with PyMem_Malloc */
    return res;

The same code using the type-oriented function set:

    PyObject *res;
    char *buf = PyMem_New(char, BUFSIZ); /* for I/O */

    if (buf == NULL)
        return PyErr_NoMemory();
    /* ...Do some I/O operation involving buf... */
    res = PyString_FromString(buf);
    PyMem_Del(buf); /* allocated with PyMem_New */
    return res;

Note that in the two examples above, the buffer is always manipulated
via functions belonging to the same set. Indeed, it is required to use
the same memory API family for a given memory block, so that the risk
of mixing different allocators is reduced to a minimum. The following
code sequence contains two errors, one of which is labeled as `fatal'
because it mixes two different allocators operating on different heaps.

    char *buf1 = PyMem_New(char, BUFSIZ);
    char *buf2 = (char *) malloc(BUFSIZ);
    char *buf3 = (char *) PyMem_Malloc(BUFSIZ);
    ...
    PyMem_Del(buf3);  /* Wrong -- should be PyMem_Free() */
    free(buf2);       /* Right -- allocated via malloc() */
    free(buf1);       /* Fatal -- should be PyMem_Del()  */

In addition to the functions aimed at handling raw memory blocks from
the Python heap, objects in Python are allocated and released with
*Note PyObject_New(): 487, *Note PyObject_NewVar(): 488. and *Note
PyObject_Del(): 489.

These will be explained in the next chapter on defining and
implementing new object types in C.


File: python.info,  Node: Object Implementation Support,  Prev: Memory Management,  Up: Python/C API Reference Manual

7.10 Object Implementation Support
==================================

This chapter describes the functions, types, and macros used when
defining new object types.

* Menu:

* Allocating Objects on the Heap::
* Common Object Structures::
* Type Objects: Type Objects<3>.
* Number Object Structures::
* Mapping Object Structures::
* Sequence Object Structures::
* Buffer Object Structures::
* Supporting Cyclic Garbage Collection::


File: python.info,  Node: Allocating Objects on the Heap,  Next: Common Object Structures,  Up: Object Implementation Support

7.10.1 Allocating Objects on the Heap
-------------------------------------

 -- C Function: PyObject* _PyObject_New (PyTypeObject *type)
     `Return value: New reference.'

 -- C Function: PyVarObject* _PyObject_NewVar (PyTypeObject *type,
          Py_ssize_t size)
     `Return value: New reference.'

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: void _PyObject_Del (PyObject *op)

 -- C Function: PyObject* PyObject_Init (PyObject *op,
          PyTypeObject *type)
     `Return value: Borrowed reference.'  Initialize a newly-allocated
     object `op' with its type and initial reference.  Returns the
     initialized object.  If `type' indicates that the object
     participates in the cyclic garbage detector, it is added to the
     detector’s set of observed objects. Other fields of the object
     are not affected.

 -- C Function: PyVarObject* PyObject_InitVar (PyVarObject *op,
          PyTypeObject *type, Py_ssize_t size)
     `Return value: Borrowed reference.'  This does everything *Note
     PyObject_Init(): 2ee2. does, and also initializes the length
     information for a variable-size object.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: TYPE* PyObject_New (TYPE, PyTypeObject *type)
     `Return value: New reference.'  Allocate a new Python object using
     the C structure type `TYPE' and the Python type object `type'.
     Fields not defined by the Python object header are not
     initialized; the object’s reference count will be one.  The size
     of the memory allocation is determined from the *Note
     tp_basicsize: 2aa2. field of the type object.

 -- C Function: TYPE* PyObject_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)
     `Return value: New reference.'  Allocate a new Python object using
     the C structure type `TYPE' and the Python type object `type'.
     Fields not defined by the Python object header are not
     initialized.  The allocated memory allows for the `TYPE' structure
     plus `size' fields of the size given by the *Note tp_itemsize:
     2abd. field of `type'.  This is useful for implementing objects
     like tuples, which are able to determine their size at
     construction time.  Embedding the array of fields into the same
     allocation decreases the number of allocations, improving the
     memory management efficiency.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: void PyObject_Del (PyObject *op)
     Releases memory allocated to an object using *Note PyObject_New():
     487. or *Note PyObject_NewVar(): 488.  This is normally called
     from the *Note tp_dealloc: 2aa8. handler specified in the
     object’s type.  The fields of the object should not be accessed
     after this call as the memory is no longer a valid Python object.

 -- C Function: PyObject* Py_InitModule (char *name,
          PyMethodDef *methods)
     `Return value: Borrowed reference.'  Create a new module object
     based on a name and table of functions, returning the new module
     object.

     Changed in version 2.3: Older versions of Python did not support
     `NULL' as the value for the `methods' argument.


 -- C Function: PyObject* Py_InitModule3 (char *name,
          PyMethodDef *methods, char *doc)
     `Return value: Borrowed reference.'  Create a new module object
     based on a name and table of functions, returning the new module
     object.  If `doc' is non-`NULL', it will be used to define the
     docstring for the module.

     Changed in version 2.3: Older versions of Python did not support
     `NULL' as the value for the `methods' argument.


 -- C Function: PyObject* Py_InitModule4 (char *name,
          PyMethodDef *methods, char *doc, PyObject *self, int apiver)
     `Return value: Borrowed reference.'  Create a new module object
     based on a name and table of functions, returning the new module
     object.  If `doc' is non-`NULL', it will be used to define the
     docstring for the module.  If `self' is non-`NULL', it will be
     passed to the functions of the module as their (otherwise `NULL')
     first parameter.  (This was added as an experimental feature, and
     there are no known uses in the current version of Python.)  For
     `apiver', the only value which should be passed is defined by the
     constant `PYTHON_API_VERSION'.

          Note: Most uses of this function should probably be using the
          *Note Py_InitModule3(): 2ab0. instead; only use this if you
          are sure you need it.

     Changed in version 2.3: Older versions of Python did not support
     `NULL' as the value for the `methods' argument.


 -- C Variable: PyObject _Py_NoneStruct
     Object which is visible in Python as `None'.  This should only be
     accessed using the `Py_None' macro, which evaluates to a pointer
     to this object.


File: python.info,  Node: Common Object Structures,  Next: Type Objects<3>,  Prev: Allocating Objects on the Heap,  Up: Object Implementation Support

7.10.2 Common Object Structures
-------------------------------

There are a large number of structures which are used in the definition
of object types for Python.  This section describes these structures
and how they are used.

All Python objects ultimately share a small number of fields at the
beginning of the object’s representation in memory.  These are
represented by the *Note PyObject: 3be. and *Note PyVarObject: 2ee8.
types, which are defined, in turn, by the expansions of some macros
also used, whether directly or indirectly, in the definition of all
other Python objects.

 -- C Type: PyObject
     All object types are extensions of this type.  This is a type which
     contains the information Python needs to treat a pointer to an
     object as an object.  In a normal “release” build, it contains
     only the object’s reference count and a pointer to the
     corresponding type object.  It corresponds to the fields defined
     by the expansion of the `PyObject_HEAD' macro.

 -- C Type: PyVarObject
     This is an extension of *Note PyObject: 3be. that adds the
     `ob_size' field.  This is only used for objects that have some
     notion of `length'.  This type does not often appear in the
     Python/C API.  It corresponds to the fields defined by the
     expansion of the `PyObject_VAR_HEAD' macro.

These macros are used in the definition of *Note PyObject: 3be. and
*Note PyVarObject: 2ee8.:

 -- C Macro: PyObject_HEAD
     This is a macro which expands to the declarations of the fields of
     the *Note PyObject: 3be. type; it is used when declaring new types
     which represent objects without a varying length.  The specific
     fields it expands to depend on the definition of `Py_TRACE_REFS'.
     By default, that macro is not defined, and *Note PyObject_HEAD:
     2ab8. expands to:

         Py_ssize_t ob_refcnt;
         PyTypeObject *ob_type;

     When `Py_TRACE_REFS' is defined, it expands to:

         PyObject *_ob_next, *_ob_prev;
         Py_ssize_t ob_refcnt;
         PyTypeObject *ob_type;

 -- C Macro: PyObject_VAR_HEAD
     This is a macro which expands to the declarations of the fields of
     the *Note PyVarObject: 2ee8. type; it is used when declaring new
     types which represent objects with a length that varies from
     instance to instance.  This macro always expands to:

         PyObject_HEAD
         Py_ssize_t ob_size;

     Note that *Note PyObject_HEAD: 2ab8. is part of the expansion, and
     that its own expansion varies depending on the definition of
     `Py_TRACE_REFS'.

 -- C Macro: Py_TYPE (o)
     This macro is used to access the `ob_type' member of a Python
     object.  It expands to:

         (((PyObject*)(o))->ob_type)

     New in version 2.6.


 -- C Macro: Py_REFCNT (o)
     This macro is used to access the `ob_refcnt' member of a Python
     object.  It expands to:

         (((PyObject*)(o))->ob_refcnt)

     New in version 2.6.


 -- C Macro: Py_SIZE (o)
     This macro is used to access the `ob_size' member of a Python
     object.  It expands to:

         (((PyVarObject*)(o))->ob_size)

     New in version 2.6.


 -- C Macro: PyObject_HEAD_INIT (type)
     This is a macro which expands to initialization values for a new
     *Note PyObject: 3be. type.  This macro expands to:

         _PyObject_EXTRA_INIT
         1, type,

 -- C Macro: PyVarObject_HEAD_INIT (type, size)
     This is a macro which expands to initialization values for a new
     *Note PyVarObject: 2ee8. type, including the `ob_size' field.
     This macro expands to:

         _PyObject_EXTRA_INIT
         1, type, size,

 -- C Type: PyCFunction
     Type of the functions used to implement most Python callables in C.
     Functions of this type take two *Note PyObject*: 3be. parameters
     and return one such value.  If the return value is `NULL', an
     exception shall have been set.  If not `NULL', the return value is
     interpreted as the return value of the function as exposed in
     Python.  The function must return a new reference.

 -- C Type: PyMethodDef
     Structure used to describe a method of an extension type.  This
     structure has four fields:

     Field                  C Type            Meaning
     ----------------------------------------------------------------------------- 
     `ml_name'              char *            name of the method
     `ml_meth'              PyCFunction       pointer to the C implementation
     `ml_flags'             int               flag bits indicating how the call
                                              should be constructed
     `ml_doc'               char *            points to the contents of the
                                              docstring


The `ml_meth' is a C function pointer.  The functions may be of
different types, but they always return *Note PyObject*: 3be.  If the
function is not of the *Note PyCFunction: 436, the compiler will
require a cast in the method table.  Even though *Note PyCFunction:
436. defines the first parameter as *Note PyObject*: 3be, it is common
that the method implementation uses the specific C type of the `self'
object.

The `ml_flags' field is a bitfield which can include the following
flags.  The individual flags indicate either a calling convention or a
binding convention.  Of the calling convention flags, only *Note
METH_VARARGS: 4c8. and *Note METH_KEYWORDS: 2a6e. can be combined. Any
of the calling convention flags can be combined with a binding flag.

 -- Data: METH_VARARGS
     This is the typical calling convention, where the methods have the
     type *Note PyCFunction: 436. The function expects two *Note
     PyObject*: 3be. values.  The first one is the `self' object for
     methods; for module functions, it is the module object.  The
     second parameter (often called `args') is a tuple object
     representing all arguments.  This parameter is typically processed
     using *Note PyArg_ParseTuple(): 32f. or *Note PyArg_UnpackTuple():
     4c6.

 -- Data: METH_KEYWORDS
     Methods with these flags must be of type `PyCFunctionWithKeywords'.
     The function expects three parameters: `self', `args', and a
     dictionary of all the keyword arguments.  The flag is typically
     combined with *Note METH_VARARGS: 4c8, and the parameters are
     typically processed using *Note PyArg_ParseTupleAndKeywords(): 435.

 -- Data: METH_NOARGS
     Methods without parameters don’t need to check whether arguments
     are given if they are listed with the *Note METH_NOARGS: 48b.
     flag.  They need to be of type *Note PyCFunction: 436.  The first
     parameter is typically named `self' and will hold a reference to
     the module or object instance.  In all cases the second parameter
     will be `NULL'.

 -- Data: METH_O
     Methods with a single object argument can be listed with the *Note
     METH_O: 4c7.  flag, instead of invoking *Note PyArg_ParseTuple():
     32f. with a `"O"' argument.  They have the type *Note PyCFunction:
     436, with the `self' parameter, and a *Note PyObject*: 3be.
     parameter representing the single argument.

 -- Data: METH_OLDARGS
     This calling convention is deprecated.  The method must be of type
     *Note PyCFunction: 436.  The second argument is `NULL' if no
     arguments are given, a single object if exactly one argument is
     given, and a tuple of objects if more than one argument is given.
     There is no way for a function using this convention to
     distinguish between a call with multiple arguments and a call with
     a tuple as the only argument.

These two constants are not used to indicate the calling convention but
the binding when use with methods of classes.  These may not be used
for functions defined for modules.  At most one of these flags may be
set for any given method.

 -- Data: METH_CLASS
     The method will be passed the type object as the first parameter
     rather than an instance of the type.  This is used to create
     `class methods', similar to what is created when using the *Note
     classmethod(): 40f. built-in function.

     New in version 2.3.


 -- Data: METH_STATIC
     The method will be passed `NULL' as the first parameter rather
     than an instance of the type.  This is used to create `static
     methods', similar to what is created when using the *Note
     staticmethod(): 40e. built-in function.

     New in version 2.3.


One other constant controls whether a method is loaded in place of
another definition with the same method name.

 -- Data: METH_COEXIST
     The method will be loaded in place of existing definitions.
     Without `METH_COEXIST', the default is to skip repeated
     definitions.  Since slot wrappers are loaded before the method
     table, the existence of a `sq_contains' slot, for example, would
     generate a wrapped method named *Note __contains__(): 336. and
     preclude the loading of a corresponding PyCFunction with the same
     name.  With the flag defined, the PyCFunction will be loaded in
     place of the wrapper object and will co-exist with the slot.  This
     is helpful because calls to PyCFunctions are optimized more than
     wrapper object calls.

     New in version 2.4.


 -- C Type: PyMemberDef
     Structure which describes an attribute of a type which corresponds
     to a C struct member.  Its fields are:

     Field                  C Type            Meaning
     ----------------------------------------------------------------------------- 
     `name'                 char *            name of the member
     *Note type: 4ac.       int               the type of the member in the C
                                              struct
     `offset'               Py_ssize_t        the offset in bytes that the
                                              member is located on the type’s
                                              object struct
     `flags'                int               flag bits indicating if the field
                                              should be read-only or writable
     `doc'                  char *            points to the contents of the
                                              docstring

     *Note type: 4ac. can be one of many `T_' macros corresponding to
     various C types.  When the member is accessed in Python, it will
     be converted to the equivalent Python type.

     Macro name          C type
     ------------------------------------------- 
     T_SHORT             short
     T_INT               int
     T_LONG              long
     T_FLOAT             float
     T_DOUBLE            double
     T_STRING            char *
     T_OBJECT            PyObject *
     T_OBJECT_EX         PyObject *
     T_CHAR              char
     T_BYTE              char
     T_UBYTE             unsigned char
     T_UINT              unsigned int
     T_USHORT            unsigned short
     T_ULONG             unsigned long
     T_BOOL              char
     T_LONGLONG          long long
     T_ULONGLONG         unsigned long long
     T_PYSSIZET          Py_ssize_t

     `T_OBJECT' and `T_OBJECT_EX' differ in that `T_OBJECT' returns
     `None' if the member is `NULL' and `T_OBJECT_EX' raises an *Note
     AttributeError: 1f8.  Try to use `T_OBJECT_EX' over `T_OBJECT'
     because `T_OBJECT_EX' handles use of the *Note del: 585. statement
     on that attribute more correctly than `T_OBJECT'.

     `flags' can be `0' for write and read access or `READONLY' for
     read-only access.  Using `T_STRING' for *Note type: 4ac. implies
     `READONLY'.  Only `T_OBJECT' and `T_OBJECT_EX' members can be
     deleted.  (They are set to `NULL').

 -- C Function: PyObject* Py_FindMethod (PyMethodDef table[],
          PyObject *ob, char *name)
     `Return value: New reference.'  Return a bound method object for
     an extension type implemented in C.  This can be useful in the
     implementation of a *Note tp_getattro: 2ac7. or *Note tp_getattr:
     2aca. handler that does not use the *Note
     PyObject_GenericGetAttr(): 2bec. function.


File: python.info,  Node: Type Objects<3>,  Next: Number Object Structures,  Prev: Common Object Structures,  Up: Object Implementation Support

7.10.3 Type Objects
-------------------

Perhaps one of the most important structures of the Python object
system is the structure that defines a new type: the *Note
PyTypeObject: 2aa0. structure.  Type objects can be handled using any
of the `PyObject_*()' or `PyType_*()' functions, but do not offer much
that’s interesting to most Python applications. These objects are
fundamental to how objects behave, so they are very important to the
interpreter itself and to any extension module that implements new
types.

Type objects are fairly large compared to most of the standard types.
The reason for the size is that each type object stores a large number
of values, mostly C function pointers, each of which implements a small
part of the type’s functionality.  The fields of the type object are
examined in detail in this section.  The fields will be described in
the order in which they occur in the structure.

Typedefs: unaryfunc, binaryfunc, ternaryfunc, inquiry, coercion,
intargfunc, intintargfunc, intobjargproc, intintobjargproc,
objobjargproc, destructor, freefunc, printfunc, getattrfunc,
getattrofunc, setattrfunc, setattrofunc, cmpfunc, reprfunc, hashfunc

The structure definition for *Note PyTypeObject: 2aa0. can be found in
`Include/object.h'.  For convenience of reference, this repeats the
definition found there:

    typedef struct _typeobject {
        PyObject_VAR_HEAD
        char *tp_name; /* For printing, in format "<module>.<name>" */
        int tp_basicsize, tp_itemsize; /* For allocation */

        /* Methods to implement standard operations */

        destructor tp_dealloc;
        printfunc tp_print;
        getattrfunc tp_getattr;
        setattrfunc tp_setattr;
        cmpfunc tp_compare;
        reprfunc tp_repr;

        /* Method suites for standard classes */

        PyNumberMethods *tp_as_number;
        PySequenceMethods *tp_as_sequence;
        PyMappingMethods *tp_as_mapping;

        /* More standard operations (here for binary compatibility) */

        hashfunc tp_hash;
        ternaryfunc tp_call;
        reprfunc tp_str;
        getattrofunc tp_getattro;
        setattrofunc tp_setattro;

        /* Functions to access object as input/output buffer */
        PyBufferProcs *tp_as_buffer;

        /* Flags to define presence of optional/expanded features */
        long tp_flags;

        char *tp_doc; /* Documentation string */

        /* Assigned meaning in release 2.0 */
        /* call function for all accessible objects */
        traverseproc tp_traverse;

        /* delete references to contained objects */
        inquiry tp_clear;

        /* Assigned meaning in release 2.1 */
        /* rich comparisons */
        richcmpfunc tp_richcompare;

        /* weak reference enabler */
        long tp_weaklistoffset;

        /* Added in release 2.2 */
        /* Iterators */
        getiterfunc tp_iter;
        iternextfunc tp_iternext;

        /* Attribute descriptor and subclassing stuff */
        struct PyMethodDef *tp_methods;
        struct PyMemberDef *tp_members;
        struct PyGetSetDef *tp_getset;
        struct _typeobject *tp_base;
        PyObject *tp_dict;
        descrgetfunc tp_descr_get;
        descrsetfunc tp_descr_set;
        long tp_dictoffset;
        initproc tp_init;
        allocfunc tp_alloc;
        newfunc tp_new;
        freefunc tp_free; /* Low-level free-memory routine */
        inquiry tp_is_gc; /* For PyObject_IS_GC */
        PyObject *tp_bases;
        PyObject *tp_mro; /* method resolution order */
        PyObject *tp_cache;
        PyObject *tp_subclasses;
        PyObject *tp_weaklist;

    } PyTypeObject;

The type object structure extends the *Note PyVarObject: 2ee8.
structure. The `ob_size' field is used for dynamic types (created by
`type_new()', usually called from a class statement). Note that *Note
PyType_Type: 2c71. (the metatype) initializes *Note tp_itemsize: 2abd,
which means that its instances (i.e.  type objects) `must' have the
`ob_size' field.

 -- C Member: PyObject* PyObject._ob_next
 -- C Member: PyObject* PyObject._ob_prev
     These fields are only present when the macro `Py_TRACE_REFS' is
     defined.  Their initialization to `NULL' is taken care of by the
     `PyObject_HEAD_INIT' macro.  For statically allocated objects,
     these fields always remain `NULL'.  For dynamically allocated
     objects, these two fields are used to link the object into a
     doubly-linked list of `all' live objects on the heap.  This could
     be used for various debugging purposes; currently the only use is
     to print the objects that are still alive at the end of a run when
     the environment variable *Note PYTHONDUMPREFS: 684. is set.

     These fields are not inherited by subtypes.

 -- C Member: Py_ssize_t PyObject.ob_refcnt
     This is the type object’s reference count, initialized to `1' by
     the `PyObject_HEAD_INIT' macro.  Note that for statically
     allocated type objects, the type’s instances (objects whose
     `ob_type' points back to the type) do `not' count as references.
     But for dynamically allocated type objects, the instances `do'
     count as references.

     This field is not inherited by subtypes.

     Changed in version 2.5: This field used to be an `int' type. This
     might require changes in your code for properly supporting 64-bit
     systems.


 -- C Member: PyTypeObject* PyObject.ob_type
     This is the type’s type, in other words its metatype.  It is
     initialized by the argument to the `PyObject_HEAD_INIT' macro, and
     its value should normally be `&PyType_Type'.  However, for
     dynamically loadable extension modules that must be usable on
     Windows (at least), the compiler complains that this is not a valid
     initializer.  Therefore, the convention is to pass `NULL' to the
     `PyObject_HEAD_INIT' macro and to initialize this field explicitly
     at the start of the module’s initialization function, before
     doing anything else.  This is typically done like this:

         Foo_Type.ob_type = &PyType_Type;

     This should be done before any instances of the type are created.
     *Note PyType_Ready(): 2aa1. checks if `ob_type' is `NULL', and if
     so, initializes it: in Python 2.2, it is set to `&PyType_Type'; in
     Python 2.2.1 and later it is initialized to the `ob_type' field of
     the base class.  *Note PyType_Ready(): 2aa1. will not change this
     field if it is non-zero.

     In Python 2.2, this field is not inherited by subtypes.  In 2.2.1,
     and in 2.3 and beyond, it is inherited by subtypes.

 -- C Member: Py_ssize_t PyVarObject.ob_size
     For statically allocated type objects, this should be initialized
     to zero.  For dynamically allocated type objects, this field has a
     special internal meaning.

     This field is not inherited by subtypes.

 -- C Member: char* PyTypeObject.tp_name
     Pointer to a NUL-terminated string containing the name of the
     type. For types that are accessible as module globals, the string
     should be the full module name, followed by a dot, followed by the
     type name; for built-in types, it should be just the type name.
     If the module is a submodule of a package, the full package name
     is part of the full module name.  For example, a type named `T'
     defined in module `M' in subpackage `Q' in package `P' should have
     the *Note tp_name: 2ac4. initializer `"P.Q.M.T"'.

     For dynamically allocated type objects, this should just be the
     type name, and the module name explicitly stored in the type dict
     as the value for key `'__module__''.

     For statically allocated type objects, the tp_name field should
     contain a dot.  Everything before the last dot is made accessible
     as the `__module__' attribute, and everything after the last dot
     is made accessible as the *Note __name__: 470. attribute.

     If no dot is present, the entire *Note tp_name: 2ac4. field is
     made accessible as the *Note __name__: 470. attribute, and the
     `__module__' attribute is undefined (unless explicitly set in the
     dictionary, as explained above).  This means your type will be
     impossible to pickle.  Additionally, it will not be listed in
     module documentations created with pydoc.

     This field is not inherited by subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_basicsize
 -- C Member: Py_ssize_t PyTypeObject.tp_itemsize
     These fields allow calculating the size in bytes of instances of
     the type.

     There are two kinds of types: types with fixed-length instances
     have a zero *Note tp_itemsize: 2abd. field, types with
     variable-length instances have a non-zero *Note tp_itemsize: 2abd.
     field.  For a type with fixed-length instances, all instances have
     the same size, given in *Note tp_basicsize: 2aa2.

     For a type with variable-length instances, the instances must have
     an `ob_size' field, and the instance size is *Note tp_basicsize:
     2aa2. plus N times *Note tp_itemsize: 2abd, where N is the
     “length” of the object.  The value of N is typically stored in
     the instance’s `ob_size' field.  There are exceptions:  for
     example, long ints use a negative `ob_size' to indicate a negative
     number, and N is `abs(ob_size)' there.  Also, the presence of an
     `ob_size' field in the instance layout doesn’t mean that the
     instance structure is variable-length (for example, the structure
     for the list type has fixed-length instances, yet those instances
     have a meaningful `ob_size' field).

     The basic size includes the fields in the instance declared by the
     macro *Note PyObject_HEAD: 2ab8. or *Note PyObject_VAR_HEAD: 2ee9.
     (whichever is used to declare the instance struct) and this in
     turn includes the `_ob_prev' and `_ob_next' fields if they are
     present.  This means that the only correct way to get an
     initializer for the *Note tp_basicsize: 2aa2. is to use the
     `sizeof' operator on the struct used to declare the instance
     layout.  The basic size does not include the GC header size (this
     is new in Python 2.2; in 2.1 and 2.0, the GC header size was
     included in *Note tp_basicsize: 2aa2.).

     These fields are inherited separately by subtypes.  If the base
     type has a non-zero *Note tp_itemsize: 2abd, it is generally not
     safe to set *Note tp_itemsize: 2abd. to a different non-zero value
     in a subtype (though this depends on the implementation of the
     base type).

     A note about alignment: if the variable items require a particular
     alignment, this should be taken care of by the value of *Note
     tp_basicsize: 2aa2.  Example: suppose a type implements an array
     of `double'. *Note tp_itemsize: 2abd. is `sizeof(double)'. It is
     the programmer’s responsibility that *Note tp_basicsize: 2aa2.
     is a multiple of `sizeof(double)' (assuming this is the alignment
     requirement for `double').

 -- C Member: destructor PyTypeObject.tp_dealloc
     A pointer to the instance destructor function.  This function must
     be defined unless the type guarantees that its instances will
     never be deallocated (as is the case for the singletons `None' and
     `Ellipsis').

     The destructor function is called by the *Note Py_DECREF(): 2a68.
     and *Note Py_XDECREF(): 2a67. macros when the new reference count
     is zero.  At this point, the instance is still in existence, but
     there are no references to it.  The destructor function should
     free all references which the instance owns, free all memory
     buffers owned by the instance (using the freeing function
     corresponding to the allocation function used to allocate the
     buffer), and finally (as its last action) call the type’s *Note
     tp_free: 2aa9. function.  If the type is not subtypable (doesn’t
     have the *Note Py_TPFLAGS_BASETYPE: 2aaf. flag bit set), it is
     permissible to call the object deallocator directly instead of via
     *Note tp_free: 2aa9.  The object deallocator should be the one
     used to allocate the instance; this is normally *Note
     PyObject_Del(): 489. if the instance was allocated using *Note
     PyObject_New(): 487. or `PyObject_VarNew()', or *Note
     PyObject_GC_Del(): 4c3. if the instance was allocated using *Note
     PyObject_GC_New(): 4c1. or *Note PyObject_GC_NewVar(): 4c2.

     This field is inherited by subtypes.

 -- C Member: printfunc PyTypeObject.tp_print
     An optional pointer to the instance print function.

     The print function is only called when the instance is printed to
     a `real' file; when it is printed to a pseudo-file (like a *Note
     StringIO: 2df. instance), the instance’s *Note tp_repr: 2ac3. or
     *Note tp_str: 2ac2. function is called to convert it to a string.
     These are also called when the type’s *Note tp_print: 2ef9.
     field is `NULL'.  A type should never implement *Note tp_print:
     2ef9. in a way that produces different output than *Note tp_repr:
     2ac3. or *Note tp_str: 2ac2. would.

     The print function is called with the same signature as *Note
     PyObject_Print(): 2be8.: `int tp_print(PyObject *self, FILE *file,
     int flags)'.  The `self' argument is the instance to be printed.
     The `file' argument is the stdio file to which it is to be
     printed.  The `flags' argument is composed of flag bits. The only
     flag bit currently defined is `Py_PRINT_RAW'. When the
     `Py_PRINT_RAW' flag bit is set, the instance should be printed the
     same way as *Note tp_str: 2ac2.  would format it; when the
     `Py_PRINT_RAW' flag bit is clear, the instance should be printed
     the same was as *Note tp_repr: 2ac3. would format it. It should
     return `-1' and set an exception condition when an error occurred
     during the comparison.

     It is possible that the *Note tp_print: 2ef9. field will be
     deprecated. In any case, it is recommended not to define *Note
     tp_print: 2ef9, but instead to rely on *Note tp_repr: 2ac3. and
     *Note tp_str: 2ac2. for printing.

     This field is inherited by subtypes.

 -- C Member: getattrfunc PyTypeObject.tp_getattr
     An optional pointer to the get-attribute-string function.

     This field is deprecated.  When it is defined, it should point to
     a function that acts the same as the *Note tp_getattro: 2ac7.
     function, but taking a C string instead of a Python string object
     to give the attribute name.  The signature is

         PyObject * tp_getattr(PyObject *o, char *attr_name);

     This field is inherited by subtypes together with *Note
     tp_getattro: 2ac7.: a subtype inherits both *Note tp_getattr:
     2aca. and *Note tp_getattro: 2ac7. from its base type when the
     subtype’s *Note tp_getattr: 2aca. and *Note tp_getattro: 2ac7.
     are both `NULL'.

 -- C Member: setattrfunc PyTypeObject.tp_setattr
     An optional pointer to the function for setting and deleting
     attributes.

     This field is deprecated.  When it is defined, it should point to
     a function that acts the same as the *Note tp_setattro: 2ac8.
     function, but taking a C string instead of a Python string object
     to give the attribute name.  The signature is

         PyObject * tp_setattr(PyObject *o, char *attr_name, PyObject *v);

     The `v' argument is set to `NULL' to delete the attribute.  This
     field is inherited by subtypes together with *Note tp_setattro:
     2ac8.: a subtype inherits both *Note tp_setattr: 2acb. and *Note
     tp_setattro: 2ac8. from its base type when the subtype’s *Note
     tp_setattr: 2acb. and *Note tp_setattro: 2ac8. are both `NULL'.

 -- C Member: cmpfunc PyTypeObject.tp_compare
     An optional pointer to the three-way comparison function.

     The signature is the same as for *Note PyObject_Compare(): 2ace.
     The function should return `1' if `self' greater than `other', `0'
     if `self' is equal to `other', and `-1' if `self' less than
     `other'.  It should return `-1' and set an exception condition
     when an error occurred during the comparison.

     This field is inherited by subtypes together with *Note
     tp_richcompare: 2efa. and *Note tp_hash: 2efb.: a subtypes
     inherits all three of *Note tp_compare: 2acd, *Note
     tp_richcompare: 2efa, and *Note tp_hash: 2efb. when the subtype’s
     *Note tp_compare: 2acd, *Note tp_richcompare: 2efa, and *Note
     tp_hash: 2efb. are all `NULL'.

 -- C Member: reprfunc PyTypeObject.tp_repr
     An optional pointer to a function that implements the built-in
     function *Note repr(): 1c6.

     The signature is the same as for *Note PyObject_Repr(): 2bf4.; it
     must return a string or a Unicode object.  Ideally, this function
     should return a string that, when passed to *Note eval(): 378,
     given a suitable environment, returns an object with the same
     value.  If this is not feasible, it should return a string
     starting with `'<'' and ending with `'>'' from which both the type
     and the value of the object can be deduced.

     When this field is not set, a string of the form `<%s object at
     %p>' is returned, where `%s' is replaced by the type name, and
     `%p' by the object’s memory address.

     This field is inherited by subtypes.

 -- C Member: PyNumberMethods* tp_as_number
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the number protocol.  These fields
     are documented in *Note Number Object Structures: 2efd.

     The `tp_as_number' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: PySequenceMethods* tp_as_sequence
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the sequence protocol.  These
     fields are documented in *Note Sequence Object Structures: 2eff.

     The `tp_as_sequence' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: PyMappingMethods* tp_as_mapping
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the mapping protocol.  These
     fields are documented in *Note Mapping Object Structures: 2f01.

     The `tp_as_mapping' field is not inherited, but the contained
     fields are inherited individually.

 -- C Member: hashfunc PyTypeObject.tp_hash
     An optional pointer to a function that implements the built-in
     function *Note hash(): 733.

     The signature is the same as for *Note PyObject_Hash(): 2bff.; it
     must return a C long.  The value `-1' should not be returned as a
     normal return value; when an error occurs during the computation
     of the hash value, the function should set an exception and return
     `-1'.

     This field can be set explicitly to *Note
     PyObject_HashNotImplemented(): 34a. to block inheritance of the
     hash method from a parent type. This is interpreted as the
     equivalent of `__hash__ = None' at the Python level, causing
     `isinstance(o, collections.Hashable)' to correctly return `False'.
     Note that the converse is also true - setting `__hash__ = None' on
     a class at the Python level will result in the `tp_hash' slot
     being set to *Note PyObject_HashNotImplemented(): 34a.

     When this field is not set, two possibilities exist: if the *Note
     tp_compare: 2acd.  and *Note tp_richcompare: 2efa. fields are both
     `NULL', a default hash value based on the object’s address is
     returned; otherwise, a *Note TypeError: 218. is raised.

     This field is inherited by subtypes together with *Note
     tp_richcompare: 2efa. and *Note tp_compare: 2acd.: a subtypes
     inherits all three of *Note tp_compare: 2acd, *Note
     tp_richcompare: 2efa, and *Note tp_hash: 2efb, when the subtype’s
     *Note tp_compare: 2acd, *Note tp_richcompare: 2efa. and *Note
     tp_hash: 2efb. are all `NULL'.

 -- C Member: ternaryfunc PyTypeObject.tp_call
     An optional pointer to a function that implements calling the
     object.  This should be `NULL' if the object is not callable.  The
     signature is the same as for *Note PyObject_Call(): 2a7a.

     This field is inherited by subtypes.

 -- C Member: reprfunc PyTypeObject.tp_str
     An optional pointer to a function that implements the built-in
     operation *Note str(): 1ea.  (Note that *Note str: 1ea. is a type
     now, and *Note str(): 1ea. calls the constructor for that type.
     This constructor calls *Note PyObject_Str(): 2bf5. to do the
     actual work, and *Note PyObject_Str(): 2bf5. will call this
     handler.)

     The signature is the same as for *Note PyObject_Str(): 2bf5.; it
     must return a string or a Unicode object.  This function should
     return a “friendly” string representation of the object, as
     this is the representation that will be used by the print
     statement.

     When this field is not set, *Note PyObject_Repr(): 2bf4. is called
     to return a string representation.

     This field is inherited by subtypes.

 -- C Member: getattrofunc PyTypeObject.tp_getattro
     An optional pointer to the get-attribute function.

     The signature is the same as for *Note PyObject_GetAttr(): 2beb.
     It is usually convenient to set this field to *Note
     PyObject_GenericGetAttr(): 2bec, which implements the normal way
     of looking for object attributes.

     This field is inherited by subtypes together with *Note
     tp_getattr: 2aca.: a subtype inherits both *Note tp_getattr: 2aca.
     and *Note tp_getattro: 2ac7. from its base type when the
     subtype’s *Note tp_getattr: 2aca. and *Note tp_getattro: 2ac7.
     are both `NULL'.

 -- C Member: setattrofunc PyTypeObject.tp_setattro
     An optional pointer to the function for setting and deleting
     attributes.

     The signature is the same as for *Note PyObject_SetAttr(): 2bed,
     but setting `v' to `NULL' to delete an attribute must be
     supported.  It is usually convenient to set this field to *Note
     PyObject_GenericSetAttr(): 2bf1, which implements the normal way
     of setting object attributes.

     This field is inherited by subtypes together with *Note
     tp_setattr: 2acb.: a subtype inherits both *Note tp_setattr: 2acb.
     and *Note tp_setattro: 2ac8. from its base type when the
     subtype’s *Note tp_setattr: 2acb. and *Note tp_setattro: 2ac8.
     are both `NULL'.

 -- C Member: PyBufferProcs* PyTypeObject.tp_as_buffer
     Pointer to an additional structure that contains fields relevant
     only to objects which implement the buffer interface.  These
     fields are documented in *Note Buffer Object Structures: 2d83.

     The *Note tp_as_buffer: 2f02. field is not inherited, but the
     contained fields are inherited individually.

 -- C Member: long PyTypeObject.tp_flags
     This field is a bit mask of various flags.  Some flags indicate
     variant semantics for certain situations; others are used to
     indicate that certain fields in the type object (or in the
     extension structures referenced via `tp_as_number',
     `tp_as_sequence', `tp_as_mapping', and *Note tp_as_buffer: 2f02.)
     that were historically not always present are valid; if such a
     flag bit is clear, the type fields it guards must not be accessed
     and must be considered to have a zero or `NULL' value instead.

     Inheritance of this field is complicated.  Most flag bits are
     inherited individually, i.e. if the base type has a flag bit set,
     the subtype inherits this flag bit.  The flag bits that pertain to
     extension structures are strictly inherited if the extension
     structure is inherited, i.e. the base type’s value of the flag
     bit is copied into the subtype together with a pointer to the
     extension structure.  The *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag bit
     is inherited together with the *Note tp_traverse: 24f2. and *Note
     tp_clear: 2f04. fields, i.e. if the *Note Py_TPFLAGS_HAVE_GC:
     2ab6. flag bit is clear in the subtype and the *Note tp_traverse:
     24f2. and *Note tp_clear: 2f04. fields in the subtype exist (as
     indicated by the *Note Py_TPFLAGS_HAVE_RICHCOMPARE: 2f05. flag
     bit) and have `NULL' values.

     The following bit masks are currently defined; these can be ORed
     together using the `|' operator to form the value of the *Note
     tp_flags: 2f03. field.  The macro *Note PyType_HasFeature(): 2c76.
     takes a type and a flags value, `tp' and `f', and checks whether
     `tp->tp_flags & f' is non-zero.

      -- Data: Py_TPFLAGS_HAVE_GETCHARBUFFER
          If this bit is set, the *Note PyBufferProcs: 2d84. struct
          referenced by *Note tp_as_buffer: 2f02. has the
          `bf_getcharbuffer' field.

      -- Data: Py_TPFLAGS_HAVE_SEQUENCE_IN
          If this bit is set, the *Note PySequenceMethods: 2ad2. struct
          referenced by `tp_as_sequence' has the `sq_contains' field.

      -- Data: Py_TPFLAGS_GC
          This bit is obsolete.  The bit it used to name is no longer
          in use.  The symbol is now defined as zero.

      -- Data: Py_TPFLAGS_HAVE_INPLACEOPS
          If this bit is set, the *Note PySequenceMethods: 2ad2. struct
          referenced by `tp_as_sequence' and the *Note PyNumberMethods:
          3c3. structure referenced by `tp_as_number' contain the
          fields for in-place operators. In particular, this means that
          the *Note PyNumberMethods: 3c3. structure has the fields
          `nb_inplace_add', `nb_inplace_subtract',
          `nb_inplace_multiply', `nb_inplace_divide',
          `nb_inplace_remainder', `nb_inplace_power',
          `nb_inplace_lshift', `nb_inplace_rshift', `nb_inplace_and',
          `nb_inplace_xor', and `nb_inplace_or'; and the *Note
          PySequenceMethods: 2ad2. struct has the fields
          `sq_inplace_concat' and `sq_inplace_repeat'.

      -- Data: Py_TPFLAGS_CHECKTYPES
          If this bit is set, the binary and ternary operations in the
          *Note PyNumberMethods: 3c3. structure referenced by
          `tp_as_number' accept arguments of arbitrary object types,
          and do their own type conversions if needed.  If this bit is
          clear, those operations require that all arguments have the
          current type as their type, and the caller is supposed to
          perform a coercion operation first.  This applies to
          `nb_add', `nb_subtract', `nb_multiply', `nb_divide',
          `nb_remainder', `nb_divmod', `nb_power', `nb_lshift',
          `nb_rshift', `nb_and', `nb_xor', and `nb_or'.

      -- Data: Py_TPFLAGS_HAVE_RICHCOMPARE
          If this bit is set, the type object has the *Note
          tp_richcompare: 2efa. field, as well as the *Note
          tp_traverse: 24f2. and the *Note tp_clear: 2f04. fields.

      -- Data: Py_TPFLAGS_HAVE_WEAKREFS
          If this bit is set, the *Note tp_weaklistoffset: 2ad6. field
          is defined.  Instances of a type are weakly referenceable if
          the type’s *Note tp_weaklistoffset: 2ad6. field has a value
          greater than zero.

      -- Data: Py_TPFLAGS_HAVE_ITER
          If this bit is set, the type object has the *Note tp_iter:
          4a8. and *Note tp_iternext: 4a9. fields.

      -- Data: Py_TPFLAGS_HAVE_CLASS
          If this bit is set, the type object has several new fields
          defined starting in Python 2.2: *Note tp_methods: 2aae, *Note
          tp_members: 2aac, *Note tp_getset: 2ab2, *Note tp_base: 2aba,
          *Note tp_dict: 2f0e, *Note tp_descr_get: 2f0f, *Note
          tp_descr_set: 2f10, *Note tp_dictoffset: 2f11, *Note tp_init:
          2aab, *Note tp_alloc: 2aaa, *Note tp_new: 2aa5, *Note
          tp_free: 2aa9, *Note tp_is_gc: 2f12, *Note tp_bases: 2f13,
          *Note tp_mro: 2f14, *Note tp_cache: 2f15, *Note
          tp_subclasses: 2f16, and *Note tp_weaklist: 2f17.

      -- Data: Py_TPFLAGS_HEAPTYPE
          This bit is set when the type object itself is allocated on
          the heap.  In this case, the `ob_type' field of its instances
          is considered a reference to the type, and the type object is
          INCREF’ed when a new instance is created, and DECREF’ed
          when an instance is destroyed (this does not apply to
          instances of subtypes; only the type referenced by the
          instance’s ob_type gets INCREF’ed or DECREF’ed).

      -- Data: Py_TPFLAGS_BASETYPE
          This bit is set when the type can be used as the base type of
          another type.  If this bit is clear, the type cannot be
          subtyped (similar to a “final” class in Java).

      -- Data: Py_TPFLAGS_READY
          This bit is set when the type object has been fully
          initialized by *Note PyType_Ready(): 2aa1.

      -- Data: Py_TPFLAGS_READYING
          This bit is set while *Note PyType_Ready(): 2aa1. is in the
          process of initializing the type object.

      -- Data: Py_TPFLAGS_HAVE_GC
          This bit is set when the object supports garbage collection.
          If this bit is set, instances must be created using *Note
          PyObject_GC_New(): 4c1. and destroyed using *Note
          PyObject_GC_Del(): 4c3.  More information in section *Note
          Supporting Cyclic Garbage Collection: 2f1b.  This bit also
          implies that the GC-related fields *Note tp_traverse: 24f2.
          and *Note tp_clear: 2f04. are present in the type object; but
          those fields also exist when *Note Py_TPFLAGS_HAVE_GC: 2ab6.
          is clear but *Note Py_TPFLAGS_HAVE_RICHCOMPARE: 2f05. is set.

      -- Data: Py_TPFLAGS_DEFAULT
          This is a bitmask of all the bits that pertain to the
          existence of certain fields in the type object and its
          extension structures. Currently, it includes the following
          bits: *Note Py_TPFLAGS_HAVE_GETCHARBUFFER: 2f06, *Note
          Py_TPFLAGS_HAVE_SEQUENCE_IN: 2f07, *Note
          Py_TPFLAGS_HAVE_INPLACEOPS: 2f09, *Note
          Py_TPFLAGS_HAVE_RICHCOMPARE: 2f05, *Note
          Py_TPFLAGS_HAVE_WEAKREFS: 2f0b, *Note Py_TPFLAGS_HAVE_ITER:
          2f0c, and *Note Py_TPFLAGS_HAVE_CLASS: 2f0d.

 -- C Member: char* PyTypeObject.tp_doc
     An optional pointer to a NUL-terminated C string giving the
     docstring for this type object.  This is exposed as the `__doc__'
     attribute on the type and instances of the type.

     This field is `not' inherited by subtypes.

The following three fields only exist if the *Note
Py_TPFLAGS_HAVE_RICHCOMPARE: 2f05. flag bit is set.

 -- C Member: traverseproc PyTypeObject.tp_traverse
     An optional pointer to a traversal function for the garbage
     collector.  This is only used if the *Note Py_TPFLAGS_HAVE_GC:
     2ab6. flag bit is set.  More information about Python’s garbage
     collection scheme can be found in section *Note Supporting Cyclic
     Garbage Collection: 2f1b.

     The *Note tp_traverse: 24f2. pointer is used by the garbage
     collector to detect reference cycles. A typical implementation of
     a *Note tp_traverse: 24f2. function simply calls *Note Py_VISIT():
     2ab4. on each of the instance’s members that are Python objects.
     For example, this is function `local_traverse()' from the *Note
     thread: 178. extension module:

         static int
         local_traverse(localobject *self, visitproc visit, void *arg)
         {
             Py_VISIT(self->args);
             Py_VISIT(self->kw);
             Py_VISIT(self->dict);
             return 0;
         }

     Note that *Note Py_VISIT(): 2ab4. is called only on those members
     that can participate in reference cycles.  Although there is also
     a `self->key' member, it can only be `NULL' or a Python string and
     therefore cannot be part of a reference cycle.

     On the other hand, even if you know a member can never be part of
     a cycle, as a debugging aid you may want to visit it anyway just
     so the *Note gc: dc. module’s *Note get_referents(): 24f1.
     function will include it.

     Note that *Note Py_VISIT(): 2ab4. requires the `visit' and `arg'
     parameters to `local_traverse()' to have these specific names;
     don’t name them just anything.

     This field is inherited by subtypes together with *Note tp_clear:
     2f04. and the *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag bit: the flag
     bit, *Note tp_traverse: 24f2, and *Note tp_clear: 2f04. are all
     inherited from the base type if they are all zero in the subtype
     `and' the subtype has the *Note Py_TPFLAGS_HAVE_RICHCOMPARE: 2f05.
     flag bit set.

 -- C Member: inquiry PyTypeObject.tp_clear
     An optional pointer to a clear function for the garbage collector.
     This is only used if the *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag bit
     is set.

     The *Note tp_clear: 2f04. member function is used to break
     reference cycles in cyclic garbage detected by the garbage
     collector.  Taken together, all *Note tp_clear: 2f04.  functions
     in the system must combine to break all reference cycles.  This is
     subtle, and if in any doubt supply a *Note tp_clear: 2f04.
     function.  For example, the tuple type does not implement a *Note
     tp_clear: 2f04. function, because it’s possible to prove that no
     reference cycle can be composed entirely of tuples.  Therefore the
     *Note tp_clear: 2f04. functions of other types must be sufficient
     to break any cycle containing a tuple.  This isn’t immediately
     obvious, and there’s rarely a good reason to avoid implementing
     *Note tp_clear: 2f04.

     Implementations of *Note tp_clear: 2f04. should drop the
     instance’s references to those of its members that may be Python
     objects, and set its pointers to those members to `NULL', as in
     the following example:

         static int
         local_clear(localobject *self)
         {
             Py_CLEAR(self->key);
             Py_CLEAR(self->args);
             Py_CLEAR(self->kw);
             Py_CLEAR(self->dict);
             return 0;
         }

     The *Note Py_CLEAR(): 2ab5. macro should be used, because clearing
     references is delicate:  the reference to the contained object
     must not be decremented until after the pointer to the contained
     object is set to `NULL'.  This is because decrementing the
     reference count may cause the contained object to become trash,
     triggering a chain of reclamation activity that may include
     invoking arbitrary Python code (due to finalizers, or weakref
     callbacks, associated with the contained object). If it’s
     possible for such code to reference `self' again, it’s important
     that the pointer to the contained object be `NULL' at that time,
     so that `self' knows the contained object can no longer be used.
     The *Note Py_CLEAR(): 2ab5. macro performs the operations in a
     safe order.

     Because the goal of *Note tp_clear: 2f04. functions is to break
     reference cycles, it’s not necessary to clear contained objects
     like Python strings or Python integers, which can’t participate
     in reference cycles. On the other hand, it may be convenient to
     clear all contained Python objects, and write the type’s *Note
     tp_dealloc: 2aa8. function to invoke *Note tp_clear: 2f04.

     More information about Python’s garbage collection scheme can be
     found in section *Note Supporting Cyclic Garbage Collection: 2f1b.

     This field is inherited by subtypes together with *Note
     tp_traverse: 24f2. and the *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag
     bit: the flag bit, *Note tp_traverse: 24f2, and *Note tp_clear:
     2f04. are all inherited from the base type if they are all zero in
     the subtype `and' the subtype has the *Note
     Py_TPFLAGS_HAVE_RICHCOMPARE: 2f05. flag bit set.

 -- C Member: richcmpfunc PyTypeObject.tp_richcompare
     An optional pointer to the rich comparison function, whose
     signature is `PyObject *tp_richcompare(PyObject *a, PyObject *b,
     int op)'.

     The function should return the result of the comparison (usually
     `Py_True' or `Py_False').  If the comparison is undefined, it must
     return `Py_NotImplemented', if another error occurred it must
     return `NULL' and set an exception condition.

          Note: If you want to implement a type for which only a
          limited set of comparisons makes sense (e.g. `==' and `!=',
          but not `<' and friends), directly raise *Note TypeError:
          218. in the rich comparison function.

     This field is inherited by subtypes together with *Note
     tp_compare: 2acd. and *Note tp_hash: 2efb.: a subtype inherits all
     three of *Note tp_compare: 2acd, *Note tp_richcompare: 2efa, and
     *Note tp_hash: 2efb, when the subtype’s *Note tp_compare: 2acd,
     *Note tp_richcompare: 2efa, and *Note tp_hash: 2efb. are all
     `NULL'.

     The following constants are defined to be used as the third
     argument for *Note tp_richcompare: 2efa. and for *Note
     PyObject_RichCompare(): 2bf2.:

     Constant             Comparison
     -------------------------------------- 
     `Py_LT'              `<'
     `Py_LE'              `<='
     `Py_EQ'              `=='
     `Py_NE'              `!='
     `Py_GT'              `>'
     `Py_GE'              `>='


The next field only exists if the *Note Py_TPFLAGS_HAVE_WEAKREFS: 2f0b.
flag bit is set.

 -- C Member: long PyTypeObject.tp_weaklistoffset
     If the instances of this type are weakly referenceable, this field
     is greater than zero and contains the offset in the instance
     structure of the weak reference list head (ignoring the GC header,
     if present); this offset is used by `PyObject_ClearWeakRefs()' and
     the `PyWeakref_*()' functions.  The instance structure needs to
     include a field of type *Note PyObject*: 3be. which is initialized
     to `NULL'.

     Do not confuse this field with *Note tp_weaklist: 2f17.; that is
     the list head for weak references to the type object itself.

     This field is inherited by subtypes, but see the rules listed
     below. A subtype may override this offset; this means that the
     subtype uses a different weak reference list head than the base
     type.  Since the list head is always found via *Note
     tp_weaklistoffset: 2ad6, this should not be a problem.

     When a type defined by a class statement has no `__slots__'
     declaration, and none of its base types are weakly referenceable,
     the type is made weakly referenceable by adding a weak reference
     list head slot to the instance layout and setting the *Note
     tp_weaklistoffset: 2ad6. of that slot’s offset.

     When a type’s *Note __slots__: 742. declaration contains a slot
     named `__weakref__', that slot becomes the weak reference list
     head for instances of the type, and the slot’s offset is stored
     in the type’s *Note tp_weaklistoffset: 2ad6.

     When a type’s *Note __slots__: 742. declaration does not contain
     a slot named `__weakref__', the type inherits its *Note
     tp_weaklistoffset: 2ad6. from its base type.

The next two fields only exist if the *Note Py_TPFLAGS_HAVE_ITER: 2f0c.
flag bit is set.

 -- C Member: getiterfunc PyTypeObject.tp_iter
     An optional pointer to a function that returns an iterator for the
     object.  Its presence normally signals that the instances of this
     type are iterable (although sequences may be iterable without this
     function, and classic instances always have this function, even if
     they don’t define an *Note __iter__(): 335. method).

     This function has the same signature as *Note PyObject_GetIter():
     2c08.

     This field is inherited by subtypes.

 -- C Member: iternextfunc PyTypeObject.tp_iternext
     An optional pointer to a function that returns the next item in an
     iterator.  When the iterator is exhausted, it must return `NULL';
     a *Note StopIteration: 347.  exception may or may not be set.
     When another error occurs, it must return `NULL' too.  Its
     presence normally signals that the instances of this type are
     iterators (although classic instances always have this function,
     even if they don’t define a *Note next(): 5f4. method).

     Iterator types should also define the *Note tp_iter: 4a8.
     function, and that function should return the iterator instance
     itself (not a new iterator instance).

     This function has the same signature as *Note PyIter_Next(): 2c60.

     This field is inherited by subtypes.

The next fields, up to and including *Note tp_weaklist: 2f17, only
exist if the *Note Py_TPFLAGS_HAVE_CLASS: 2f0d. flag bit is set.

 -- C Member: struct PyMethodDef* PyTypeObject.tp_methods
     An optional pointer to a static `NULL'-terminated array of *Note
     PyMethodDef: 48e.  structures, declaring regular methods of this
     type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *Note tp_dict: 2f0e. below) containing a method
     descriptor.

     This field is not inherited by subtypes (methods are inherited
     through a different mechanism).

 -- C Member: struct PyMemberDef* PyTypeObject.tp_members
     An optional pointer to a static `NULL'-terminated array of *Note
     PyMemberDef: 2c7.  structures, declaring regular data members
     (fields or slots) of instances of this type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *Note tp_dict: 2f0e. below) containing a member
     descriptor.

     This field is not inherited by subtypes (members are inherited
     through a different mechanism).

 -- C Member: struct PyGetSetDef* PyTypeObject.tp_getset
     An optional pointer to a static `NULL'-terminated array of
     `PyGetSetDef' structures, declaring computed attributes of
     instances of this type.

     For each entry in the array, an entry is added to the type’s
     dictionary (see *Note tp_dict: 2f0e. below) containing a getset
     descriptor.

     This field is not inherited by subtypes (computed attributes are
     inherited through a different mechanism).

     Docs for PyGetSetDef:

         typedef PyObject *(*getter)(PyObject *, void *);
         typedef int (*setter)(PyObject *, PyObject *, void *);

         typedef struct PyGetSetDef {
             char *name;    /* attribute name */
             getter get;    /* C function to get the attribute */
             setter set;    /* C function to set or delete the attribute */
             char *doc;     /* optional doc string */
             void *closure; /* optional additional data for getter and setter */
         } PyGetSetDef;

 -- C Member: PyTypeObject* PyTypeObject.tp_base
     An optional pointer to a base type from which type properties are
     inherited.  At this level, only single inheritance is supported;
     multiple inheritance require dynamically creating a type object by
     calling the metatype.

     This field is not inherited by subtypes (obviously), but it
     defaults to `&PyBaseObject_Type' (which to Python programmers is
     known as the type *Note object: 1f1.).

 -- C Member: PyObject* PyTypeObject.tp_dict
     The type’s dictionary is stored here by *Note PyType_Ready():
     2aa1.

     This field should normally be initialized to `NULL' before
     PyType_Ready is called; it may also be initialized to a dictionary
     containing initial attributes for the type.  Once *Note
     PyType_Ready(): 2aa1. has initialized the type, extra attributes
     for the type may be added to this dictionary only if they don’t
     correspond to overloaded operations (like *Note __add__(): 74e.).

     This field is not inherited by subtypes (though the attributes
     defined in here are inherited through a different mechanism).

 -- C Member: descrgetfunc PyTypeObject.tp_descr_get
     An optional pointer to a “descriptor get” function.

     The function signature is

         PyObject * tp_descr_get(PyObject *self, PyObject *obj, PyObject *type);

     This field is inherited by subtypes.

 -- C Member: descrsetfunc PyTypeObject.tp_descr_set
     An optional pointer to a function for setting and deleting a
     descriptor’s value.

     The function signature is

         int tp_descr_set(PyObject *self, PyObject *obj, PyObject *value);

     The `value' argument is set to `NULL' to delete the value.  This
     field is inherited by subtypes.


 -- C Member: long PyTypeObject.tp_dictoffset
     If the instances of this type have a dictionary containing
     instance variables, this field is non-zero and contains the offset
     in the instances of the type of the instance variable dictionary;
     this offset is used by *Note PyObject_GenericGetAttr(): 2bec.

     Do not confuse this field with *Note tp_dict: 2f0e.; that is the
     dictionary for attributes of the type object itself.

     If the value of this field is greater than zero, it specifies the
     offset from the start of the instance structure.  If the value is
     less than zero, it specifies the offset from the `end' of the
     instance structure.  A negative offset is more expensive to use,
     and should only be used when the instance structure contains a
     variable-length part.  This is used for example to add an instance
     variable dictionary to subtypes of *Note str: 1ea. or *Note tuple:
     421. Note that the *Note tp_basicsize: 2aa2. field should account
     for the dictionary added to the end in that case, even though the
     dictionary is not included in the basic object layout.  On a
     system with a pointer size of 4 bytes, *Note tp_dictoffset: 2f11.
     should be set to `-4' to indicate that the dictionary is at the
     very end of the structure.

     The real dictionary offset in an instance can be computed from a
     negative *Note tp_dictoffset: 2f11. as follows:

         dictoffset = tp_basicsize + abs(ob_size)*tp_itemsize + tp_dictoffset
         if dictoffset is not aligned on sizeof(void*):
             round up to sizeof(void*)

     where *Note tp_basicsize: 2aa2, *Note tp_itemsize: 2abd. and *Note
     tp_dictoffset: 2f11. are taken from the type object, and `ob_size'
     is taken from the instance.  The absolute value is taken because
     long ints use the sign of `ob_size' to store the sign of the
     number.  (There’s never a need to do this calculation yourself;
     it is done for you by `_PyObject_GetDictPtr()'.)

     This field is inherited by subtypes, but see the rules listed
     below. A subtype may override this offset; this means that the
     subtype instances store the dictionary at a difference offset than
     the base type.  Since the dictionary is always found via *Note
     tp_dictoffset: 2f11, this should not be a problem.

     When a type defined by a class statement has no `__slots__'
     declaration, and none of its base types has an instance variable
     dictionary, a dictionary slot is added to the instance layout and
     the *Note tp_dictoffset: 2f11. is set to that slot’s offset.

     When a type defined by a class statement has a *Note __slots__:
     742. declaration, the type inherits its *Note tp_dictoffset: 2f11.
     from its base type.

     (Adding a slot named *Note __dict__: 4a0. to the *Note __slots__:
     742. declaration does not have the expected effect, it just causes
     confusion.  Maybe this should be added as a feature just like
     `__weakref__' though.)

 -- C Member: initproc PyTypeObject.tp_init
     An optional pointer to an instance initialization function.

     This function corresponds to the *Note __init__(): 394. method of
     classes.  Like *Note __init__(): 394, it is possible to create an
     instance without calling *Note __init__(): 394, and it is possible
     to reinitialize an instance by calling its *Note __init__(): 394.
     method again.

     The function signature is

         int tp_init(PyObject *self, PyObject *args, PyObject *kwds)

     The self argument is the instance to be initialized; the `args'
     and `kwds' arguments represent positional and keyword arguments of
     the call to *Note __init__(): 394.

     The *Note tp_init: 2aab. function, if not `NULL', is called when
     an instance is created normally by calling its type, after the
     type’s *Note tp_new: 2aa5. function has returned an instance of
     the type.  If the *Note tp_new: 2aa5. function returns an instance
     of some other type that is not a subtype of the original type, no
     *Note tp_init: 2aab. function is called; if *Note tp_new: 2aa5.
     returns an instance of a subtype of the original type, the
     subtype’s *Note tp_init: 2aab. is called.  (VERSION NOTE:
     described here is what is implemented in Python 2.2.1 and later.
     In Python 2.2, the *Note tp_init: 2aab. of the type of the object
     returned by *Note tp_new: 2aa5. was always called, if not `NULL'.)

     This field is inherited by subtypes.

 -- C Member: allocfunc PyTypeObject.tp_alloc
     An optional pointer to an instance allocation function.

     The function signature is

         PyObject *tp_alloc(PyTypeObject *self, Py_ssize_t nitems)

     The purpose of this function is to separate memory allocation from
     memory initialization.  It should return a pointer to a block of
     memory of adequate length for the instance, suitably aligned, and
     initialized to zeros, but with `ob_refcnt' set to `1' and
     `ob_type' set to the type argument.  If the type’s *Note
     tp_itemsize: 2abd. is non-zero, the object’s `ob_size' field
     should be initialized to `nitems' and the length of the allocated
     memory block should be `tp_basicsize + nitems*tp_itemsize',
     rounded up to a multiple of `sizeof(void*)'; otherwise, `nitems'
     is not used and the length of the block should be *Note
     tp_basicsize: 2aa2.

     Do not use this function to do any other instance initialization,
     not even to allocate additional memory; that should be done by
     *Note tp_new: 2aa5.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is always set to *Note PyType_GenericAlloc(): 2c79, to
     force a standard heap allocation strategy.  That is also the
     recommended value for statically defined types.

 -- C Member: newfunc PyTypeObject.tp_new
     An optional pointer to an instance creation function.

     If this function is `NULL' for a particular type, that type cannot
     be called to create new instances; presumably there is some other
     way to create instances, like a factory function.

     The function signature is

         PyObject *tp_new(PyTypeObject *subtype, PyObject *args, PyObject *kwds)

     The subtype argument is the type of the object being created; the
     `args' and `kwds' arguments represent positional and keyword
     arguments of the call to the type.  Note that subtype doesn’t
     have to equal the type whose *Note tp_new: 2aa5.  function is
     called; it may be a subtype of that type (but not an unrelated
     type).

     The *Note tp_new: 2aa5. function should call
     `subtype->tp_alloc(subtype, nitems)' to allocate space for the
     object, and then do only as much further initialization as is
     absolutely necessary.  Initialization that can safely be ignored
     or repeated should be placed in the *Note tp_init: 2aab. handler.
     A good rule of thumb is that for immutable types, all
     initialization should take place in *Note tp_new: 2aa5, while for
     mutable types, most initialization should be deferred to *Note
     tp_init: 2aab.

     This field is inherited by subtypes, except it is not inherited by
     static types whose *Note tp_base: 2aba. is `NULL' or
     `&PyBaseObject_Type'.  The latter exception is a precaution so
     that old extension types don’t become callable simply by being
     linked with Python 2.2.

 -- C Member: destructor PyTypeObject.tp_free
     An optional pointer to an instance deallocation function.

     The signature of this function has changed slightly: in Python 2.2
     and 2.2.1, its signature is `destructor':

         void tp_free(PyObject *)

     In Python 2.3 and beyond, its signature is `freefunc':

         void tp_free(void *)

     The only initializer that is compatible with both versions is
     `_PyObject_Del', whose definition has suitably adapted in Python
     2.3.

     This field is inherited by static subtypes, but not by dynamic
     subtypes (subtypes created by a class statement); in the latter,
     this field is set to a deallocator suitable to match *Note
     PyType_GenericAlloc(): 2c79. and the value of the *Note
     Py_TPFLAGS_HAVE_GC: 2ab6. flag bit.

 -- C Member: inquiry PyTypeObject.tp_is_gc
     An optional pointer to a function called by the garbage collector.

     The garbage collector needs to know whether a particular object is
     collectible or not.  Normally, it is sufficient to look at the
     object’s type’s *Note tp_flags: 2f03. field, and check the
     *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag bit.  But some types have a
     mixture of statically and dynamically allocated instances, and the
     statically allocated instances are not collectible.  Such types
     should define this function; it should return `1' for a
     collectible instance, and `0' for a non-collectible instance. The
     signature is

         int tp_is_gc(PyObject *self)

     (The only example of this are types themselves.  The metatype,
     *Note PyType_Type: 2c71, defines this function to distinguish
     between statically and dynamically allocated types.)

     This field is inherited by subtypes.  (VERSION NOTE: in Python
     2.2, it was not inherited.  It is inherited in 2.2.1 and later
     versions.)

 -- C Member: PyObject* PyTypeObject.tp_bases
     Tuple of base types.

     This is set for types created by a class statement.  It should be
     `NULL' for statically defined types.

     This field is not inherited.

 -- C Member: PyObject* PyTypeObject.tp_mro
     Tuple containing the expanded set of base types, starting with the
     type itself and ending with *Note object: 1f1, in Method
     Resolution Order.

     This field is not inherited; it is calculated fresh by *Note
     PyType_Ready(): 2aa1.

 -- C Member: PyObject* PyTypeObject.tp_cache
     Unused.  Not inherited.  Internal use only.

 -- C Member: PyObject* PyTypeObject.tp_subclasses
     List of weak references to subclasses.  Not inherited.  Internal
     use only.

 -- C Member: PyObject* PyTypeObject.tp_weaklist
     Weak reference list head, for weak references to this type object.
     Not inherited.  Internal use only.

The remaining fields are only defined if the feature test macro
`COUNT_ALLOCS' is defined, and are for internal use only. They are
documented here for completeness.  None of these fields are inherited by
subtypes.

 -- C Member: Py_ssize_t PyTypeObject.tp_allocs
     Number of allocations.

 -- C Member: Py_ssize_t PyTypeObject.tp_frees
     Number of frees.

 -- C Member: Py_ssize_t PyTypeObject.tp_maxalloc
     Maximum simultaneously allocated objects.

 -- C Member: PyTypeObject* PyTypeObject.tp_next
     Pointer to the next type object with a non-zero *Note tp_allocs:
     2f1c. field.

Also, note that, in a garbage collected Python, tp_dealloc may be
called from any Python thread, not just the thread which created the
object (if the object becomes part of a refcount cycle, that cycle
might be collected by a garbage collection on any thread).  This is not
a problem for Python API calls, since the thread on which tp_dealloc is
called will own the Global Interpreter Lock (GIL). However, if the
object being destroyed in turn destroys objects from some other C or
C++ library, care should be taken to ensure that destroying those
objects on the thread which called tp_dealloc will not violate any
assumptions of the library.


File: python.info,  Node: Number Object Structures,  Next: Mapping Object Structures,  Prev: Type Objects<3>,  Up: Object Implementation Support

7.10.4 Number Object Structures
-------------------------------

 -- C Type: PyNumberMethods
     This structure holds pointers to the functions which an object
     uses to implement the number protocol.  Almost every function
     below is used by the function of similar name documented in the
     *Note Number Protocol: 2c0a. section.

     Here is the structure definition:

         typedef struct {
              binaryfunc nb_add;
              binaryfunc nb_subtract;
              binaryfunc nb_multiply;
              binaryfunc nb_divide;
              binaryfunc nb_remainder;
              binaryfunc nb_divmod;
              ternaryfunc nb_power;
              unaryfunc nb_negative;
              unaryfunc nb_positive;
              unaryfunc nb_absolute;
              inquiry nb_nonzero;       /* Used by PyObject_IsTrue */
              unaryfunc nb_invert;
              binaryfunc nb_lshift;
              binaryfunc nb_rshift;
              binaryfunc nb_and;
              binaryfunc nb_xor;
              binaryfunc nb_or;
              coercion nb_coerce;       /* Used by the coerce() function */
              unaryfunc nb_int;
              unaryfunc nb_long;
              unaryfunc nb_float;
              unaryfunc nb_oct;
              unaryfunc nb_hex;

              /* Added in release 2.0 */
              binaryfunc nb_inplace_add;
              binaryfunc nb_inplace_subtract;
              binaryfunc nb_inplace_multiply;
              binaryfunc nb_inplace_divide;
              binaryfunc nb_inplace_remainder;
              ternaryfunc nb_inplace_power;
              binaryfunc nb_inplace_lshift;
              binaryfunc nb_inplace_rshift;
              binaryfunc nb_inplace_and;
              binaryfunc nb_inplace_xor;
              binaryfunc nb_inplace_or;

              /* Added in release 2.2 */
              binaryfunc nb_floor_divide;
              binaryfunc nb_true_divide;
              binaryfunc nb_inplace_floor_divide;
              binaryfunc nb_inplace_true_divide;

              /* Added in release 2.5 */
              unaryfunc nb_index;
         } PyNumberMethods;

Binary and ternary functions may receive different kinds of arguments,
depending on the flag bit *Note Py_TPFLAGS_CHECKTYPES: 2f0a.:

   - If *Note Py_TPFLAGS_CHECKTYPES: 2f0a. is not set, the function
     arguments are guaranteed to be of the object’s type; the caller
     is responsible for calling the coercion method specified by the
     `nb_coerce' member to convert the arguments:

      -- C Member: coercion PyNumberMethods.nb_coerce
          This function is used by *Note PyNumber_CoerceEx(): 2c2d. and
          has the same signature.  The first argument is always a
          pointer to an object of the defined type.  If the conversion
          to a common “larger” type is possible, the function
          replaces the pointers with new references to the converted
          objects and returns `0'.  If the conversion is not possible,
          the function returns `1'.  If an error condition is set, it
          will return `-1'.

   - If the *Note Py_TPFLAGS_CHECKTYPES: 2f0a. flag is set, binary and
     ternary functions must check the type of all their operands, and
     implement the necessary conversions (at least one of the operands
     is an instance of the defined type).  This is the recommended way;
     with Python 3 coercion will disappear completely.

If the operation is not defined for the given operands, binary and
ternary functions must return `Py_NotImplemented', if another error
occurred they must return `NULL' and set an exception.


File: python.info,  Node: Mapping Object Structures,  Next: Sequence Object Structures,  Prev: Number Object Structures,  Up: Object Implementation Support

7.10.5 Mapping Object Structures
--------------------------------

 -- C Type: PyMappingMethods
     This structure holds pointers to the functions which an object
     uses to implement the mapping protocol.  It has three members:

 -- C Member: lenfunc PyMappingMethods.mp_length
     This function is used by *Note PyMapping_Length(): 2c52. and *Note
     PyObject_Size(): 2c04, and has the same signature.  This slot may
     be set to `NULL' if the object has no defined length.

 -- C Member: binaryfunc PyMappingMethods.mp_subscript
     This function is used by *Note PyObject_GetItem(): 2b09. and has
     the same signature.  This slot must be filled for the *Note
     PyMapping_Check(): 2c50.  function to return `1', it can be `NULL'
     otherwise.

 -- C Member: objobjargproc PyMappingMethods.mp_ass_subscript
     This function is used by *Note PyObject_SetItem(): 2b07. and *Note
     PyObject_DelItem(): 2c05.  It has the same signature as *Note
     PyObject_SetItem(): 2b07, but `v' can also be set to `NULL' to
     delete an item.  If this slot is `NULL', the object does not
     support item assignment and deletion.


File: python.info,  Node: Sequence Object Structures,  Next: Buffer Object Structures,  Prev: Mapping Object Structures,  Up: Object Implementation Support

7.10.6 Sequence Object Structures
---------------------------------

 -- C Type: PySequenceMethods
     This structure holds pointers to the functions which an object
     uses to implement the sequence protocol.

 -- C Member: lenfunc PySequenceMethods.sq_length
     This function is used by *Note PySequence_Size(): 2c39. and *Note
     PyObject_Size(): 2c04, and has the same signature.

 -- C Member: binaryfunc PySequenceMethods.sq_concat
     This function is used by *Note PySequence_Concat(): 2c3b. and has
     the same signature.  It is also used by the `+' operator, after
     trying the numeric addition via the `nb_add' slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_repeat
     This function is used by *Note PySequence_Repeat(): 2c3c. and has
     the same signature.  It is also used by the `*' operator, after
     trying numeric multiplication via the `nb_multiply' slot.

 -- C Member: ssizeargfunc PySequenceMethods.sq_item
     This function is used by *Note PySequence_GetItem(): 2b0a. and has
     the same signature.  This slot must be filled for the *Note
     PySequence_Check(): 2c38.  function to return `1', it can be
     `NULL' otherwise.

     Negative indexes are handled as follows: if the `sq_length' slot is
     filled, it is called and the sequence length is used to compute a
     positive index which is passed to `sq_item'.  If `sq_length' is
     `NULL', the index is passed as is to the function.

 -- C Member: ssizeobjargproc PySequenceMethods.sq_ass_item
     This function is used by *Note PySequence_SetItem(): 2b06. and has
     the same signature.  This slot may be left to `NULL' if the object
     does not support item assignment and deletion.

 -- C Member: objobjproc PySequenceMethods.sq_contains
     This function may be used by *Note PySequence_Contains(): 2c44.
     and has the same signature.  This slot may be left to `NULL', in
     this case *Note PySequence_Contains(): 2c44. simply traverses the
     sequence until it finds a match.

 -- C Member: binaryfunc PySequenceMethods.sq_inplace_concat
     This function is used by *Note PySequence_InPlaceConcat(): 2c3d.
     and has the same signature.  It should modify its first operand,
     and return it.

 -- C Member: ssizeargfunc PySequenceMethods.sq_inplace_repeat
     This function is used by *Note PySequence_InPlaceRepeat(): 2c3e.
     and has the same signature.  It should modify its first operand,
     and return it.


File: python.info,  Node: Buffer Object Structures,  Next: Supporting Cyclic Garbage Collection,  Prev: Sequence Object Structures,  Up: Object Implementation Support

7.10.7 Buffer Object Structures
-------------------------------

The buffer interface exports a model where an object can expose its
internal data as a set of chunks of data, where each chunk is specified
as a pointer/length pair.  These chunks are called `segments' and are
presumed to be non-contiguous in memory.

If an object does not export the buffer interface, then its *Note
tp_as_buffer: 2f02.  member in the *Note PyTypeObject: 2aa0. structure
should be `NULL'.  Otherwise, the *Note tp_as_buffer: 2f02. will point
to a *Note PyBufferProcs: 2d84. structure.

     Note: It is very important that your *Note PyTypeObject: 2aa0.
     structure uses *Note Py_TPFLAGS_DEFAULT: 2aa3. for the value of
     the *Note tp_flags: 2f03. member rather than `0'.  This tells the
     Python runtime that your *Note PyBufferProcs: 2d84.  structure
     contains the `bf_getcharbuffer' slot. Older versions of Python did
     not have this member, so a new Python interpreter using an old
     extension needs to be able to test for its presence before using
     it.

 -- C Type: PyBufferProcs
     Structure used to hold the function pointers which define an
     implementation of the buffer protocol.

     The first slot is `bf_getreadbuffer', of type `getreadbufferproc'.
     If this slot is `NULL', then the object does not support reading
     from the internal data.  This is non-sensical, so implementors
     should fill this in, but callers should test that the slot
     contains a non-`NULL' value.

     The next slot is `bf_getwritebuffer' having type
     `getwritebufferproc'.  This slot may be `NULL' if the object does
     not allow writing into its returned buffers.

     The third slot is `bf_getsegcount', with type `getsegcountproc'.
     This slot must not be `NULL' and is used to inform the caller how
     many segments the object contains.  Simple objects such as *Note
     PyString_Type: 2ce7. and *Note PyBuffer_Type: 2d86. objects
     contain a single segment.

     The last slot is `bf_getcharbuffer', of type `getcharbufferproc'.
     This slot will only be present if the *Note
     Py_TPFLAGS_HAVE_GETCHARBUFFER: 2f06.  flag is present in the *Note
     tp_flags: 2f03. field of the object’s *Note PyTypeObject: 2aa0.
     Before using this slot, the caller should test whether it is
     present by using the *Note PyType_HasFeature(): 2c76. function.
     If the flag is present, `bf_getcharbuffer' may be `NULL',
     indicating that the object’s contents cannot be used as `8-bit
     characters'. The slot function may also raise an error if the
     object’s contents cannot be interpreted as 8-bit characters.
     For example, if the object is an array which is configured to hold
     floating point values, an exception may be raised if a caller
     attempts to use `bf_getcharbuffer' to fetch a sequence of 8-bit
     characters. This notion of exporting the internal buffers as
     “text” is used to distinguish between objects that are binary
     in nature, and those which have character-based content.

          Note: The current policy seems to state that these characters
          may be multi-byte characters. This implies that a buffer size
          of `N' does not mean there are `N' characters present.

 -- Data: Py_TPFLAGS_HAVE_GETCHARBUFFER
     Flag bit set in the type structure to indicate that the
     `bf_getcharbuffer' slot is known.  This being set does not
     indicate that the object supports the buffer interface or that the
     `bf_getcharbuffer' slot is non-`NULL'.

 -- C Type: Py_ssize_t (*readbufferproc) (PyObject *self,
          Py_ssize_t segment, void **ptrptr)
     Return a pointer to a readable segment of the buffer in `*ptrptr'.
     This function is allowed to raise an exception, in which case it
     must return `-1'.  The `segment' which is specified must be zero
     or positive, and strictly less than the number of segments
     returned by the `bf_getsegcount' slot function.  On success, it
     returns the length of the segment, and sets `*ptrptr' to a pointer
     to that memory.

 -- C Type: Py_ssize_t (*writebufferproc) (PyObject *self,
          Py_ssize_t segment, void **ptrptr)
     Return a pointer to a writable memory buffer in `*ptrptr', and the
     length of that segment as the function return value.  The memory
     buffer must correspond to buffer segment `segment'.  Must return
     `-1' and set an exception on error.  *Note TypeError: 218. should
     be raised if the object only supports read-only buffers, and *Note
     SystemError: 97a. should be raised when `segment' specifies a
     segment that doesn’t exist.


 -- C Type: Py_ssize_t (*segcountproc) (PyObject *self,
          Py_ssize_t *lenp)
     Return the number of memory segments which comprise the buffer.
     If `lenp' is not `NULL', the implementation must report the sum of
     the sizes (in bytes) of all segments in `*lenp'. The function
     cannot fail.

 -- C Type: Py_ssize_t (*charbufferproc) (PyObject *self,
          Py_ssize_t segment, char **ptrptr)
     Return the size of the segment `segment' that `ptrptr'  is set to.
     `*ptrptr' is set to the memory buffer. Returns `-1' on error.


File: python.info,  Node: Supporting Cyclic Garbage Collection,  Prev: Buffer Object Structures,  Up: Object Implementation Support

7.10.8 Supporting Cyclic Garbage Collection
-------------------------------------------

Python’s support for detecting and collecting garbage which involves
circular references requires support from object types which are
“containers” for other objects which may also be containers.  Types
which do not store references to other objects, or which only store
references to atomic types (such as numbers or strings), do not need to
provide any explicit support for garbage collection.

To create a container type, the *Note tp_flags: 2f03. field of the type
object must include the *Note Py_TPFLAGS_HAVE_GC: 2ab6. and provide an
implementation of the *Note tp_traverse: 24f2. handler.  If instances
of the type are mutable, a *Note tp_clear: 2f04. implementation must
also be provided.

 -- Data: Py_TPFLAGS_HAVE_GC
     Objects with a type with this flag set must conform with the rules
     documented here.  For convenience these objects will be referred
     to as container objects.

Constructors for container types must conform to two rules:

  1. The memory for the object must be allocated using *Note
     PyObject_GC_New(): 4c1.  or *Note PyObject_GC_NewVar(): 4c2.

  2. Once all the fields which may contain references to other
     containers are initialized, it must call *Note
     PyObject_GC_Track(): 4c4.

 -- C Function: TYPE* PyObject_GC_New (TYPE, PyTypeObject *type)
     Analogous to *Note PyObject_New(): 487. but for container objects
     with the *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag set.

 -- C Function: TYPE* PyObject_GC_NewVar (TYPE, PyTypeObject *type,
          Py_ssize_t size)
     Analogous to *Note PyObject_NewVar(): 488. but for container
     objects with the *Note Py_TPFLAGS_HAVE_GC: 2ab6. flag set.

     Changed in version 2.5: This function used an `int' type for
     `size'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: TYPE* PyObject_GC_Resize (TYPE, PyVarObject *op,
          Py_ssize_t newsize)
     Resize an object allocated by *Note PyObject_NewVar(): 488.
     Returns the resized object or `NULL' on failure.

     Changed in version 2.5: This function used an `int' type for
     `newsize'. This might require changes in your code for properly
     supporting 64-bit systems.


 -- C Function: void PyObject_GC_Track (PyObject *op)
     Adds the object `op' to the set of container objects tracked by the
     collector.  The collector can run at unexpected times so objects
     must be valid while being tracked.  This should be called once all
     the fields followed by the *Note tp_traverse: 24f2. handler become
     valid, usually near the end of the constructor.

 -- C Function: void _PyObject_GC_TRACK (PyObject *op)
     A macro version of *Note PyObject_GC_Track(): 4c4.  It should not
     be used for extension modules.

Similarly, the deallocator for the object must conform to a similar
pair of rules:

  1. Before fields which refer to other containers are invalidated,
     *Note PyObject_GC_UnTrack(): 4c5. must be called.

  2. The object’s memory must be deallocated using *Note
     PyObject_GC_Del(): 4c3.

 -- C Function: void PyObject_GC_Del (void *op)
     Releases memory allocated to an object using *Note
     PyObject_GC_New(): 4c1. or *Note PyObject_GC_NewVar(): 4c2.

 -- C Function: void PyObject_GC_UnTrack (void *op)
     Remove the object `op' from the set of container objects tracked
     by the collector.  Note that *Note PyObject_GC_Track(): 4c4. can
     be called again on this object to add it back to the set of
     tracked objects.  The deallocator (*Note tp_dealloc: 2aa8.
     handler) should call this for the object before any of the fields
     used by the *Note tp_traverse: 24f2. handler become invalid.

 -- C Function: void _PyObject_GC_UNTRACK (PyObject *op)
     A macro version of *Note PyObject_GC_UnTrack(): 4c5.  It should
     not be used for extension modules.

The *Note tp_traverse: 24f2. handler accepts a function parameter of
this type:

 -- C Type: int (*visitproc) (PyObject *object, void *arg)
     Type of the visitor function passed to the *Note tp_traverse:
     24f2. handler.  The function should be called with an object to
     traverse as `object' and the third parameter to the *Note
     tp_traverse: 24f2. handler as `arg'.  The Python core uses several
     visitor functions to implement cyclic garbage detection; it’s
     not expected that users will need to write their own visitor
     functions.

The *Note tp_traverse: 24f2. handler must have the following type:

 -- C Type: int (*traverseproc) (PyObject *self, visitproc visit,
          void *arg)
     Traversal function for a container object.  Implementations must
     call the `visit' function for each object directly contained by
     `self', with the parameters to `visit' being the contained object
     and the `arg' value passed to the handler.  The `visit' function
     must not be called with a `NULL' object argument.  If `visit'
     returns a non-zero value that value should be returned immediately.

To simplify writing *Note tp_traverse: 24f2. handlers, a *Note
Py_VISIT(): 2ab4. macro is provided.  In order to use this macro, the
*Note tp_traverse: 24f2. implementation must name its arguments exactly
`visit' and `arg':

 -- C Function: void Py_VISIT (PyObject *o)
     If `o' is not `NULL', call the `visit' callback, with arguments `o'
     and `arg'.  If `visit' returns a non-zero value, then return it.
     Using this macro, *Note tp_traverse: 24f2. handlers look like:

         static int
         my_traverse(Noddy *self, visitproc visit, void *arg)
         {
             Py_VISIT(self->foo);
             Py_VISIT(self->bar);
             return 0;
         }

     New in version 2.4.


The *Note tp_clear: 2f04. handler must be of the *Note inquiry: 2f3b.
type, or `NULL' if the object is immutable.

 -- C Type: int (*inquiry) (PyObject *self)
     Drop references that may have created reference cycles.  Immutable
     objects do not have to define this method since they can never
     directly create reference cycles.  Note that the object must still
     be valid after calling this method (don’t just call *Note
     Py_DECREF(): 2a68. on a reference).  The collector will call this
     method if it detects that this object is involved in a reference
     cycle.


File: python.info,  Node: Distributing Python Modules,  Next: Installing Python Modules,  Prev: Python/C API Reference Manual,  Up: Top

8 Distributing Python Modules
*****************************

Email: <distutils-sig@python.org>

As a popular open source development project, Python has an active
supporting community of contributors and users that also make their
software available for other Python developers to use under open source
license terms.

This allows Python users to share and collaborate effectively,
benefiting from the solutions others have already created to common
(and sometimes even rare!) problems, as well as potentially
contributing their own solutions to the common pool.

This guide covers the distribution part of the process. For a guide to
installing other Python projects, refer to the *Note installation
guide: 2ee.

     Note: For corporate and other institutional users, be aware that
     many organisations have their own policies around using and
     contributing to open source software. Please take such policies
     into account when making use of the distribution and installation
     tools provided with Python.

* Menu:

* Key terms::
* Open source licensing and collaboration::
* Installing the tools::
* Reading the guide::
* How do I…?::


File: python.info,  Node: Key terms,  Next: Open source licensing and collaboration,  Up: Distributing Python Modules

8.1 Key terms
=============

   * the Python Packaging Index(1) is a public repository of open
     source licensed packages made available for use by other Python
     users

   * the Python Packaging Authority(2) are the group of developers and
     documentation authors responsible for the maintenance and
     evolution of the standard packaging tools and the associated
     metadata and file format standards. They maintain a variety of
     tools, documentation and issue trackers on both GitHub(3) and
     BitBucket(4).

   * *Note distutils: 85. is the original build and distribution system
     first added to the Python standard library in 1998. While direct
     use of *Note distutils: 85.  is being phased out, it still laid
     the foundation for the current packaging and distribution
     infrastructure, and it not only remains part of the standard
     library, but its name lives on in other ways (such as the name of
     the mailing list used to coordinate Python packaging standards
     development).

   * setuptools(5) is a (largely) drop-in replacement for *Note
     distutils: 85. first published in 2004. Its most notable addition
     over the unmodified *Note distutils: 85. tools was the ability to
     declare dependencies on other packages. It is currently
     recommended as a more regularly updated alternative to *Note
     distutils: 85. that offers consistent support for more recent
     packaging standards across a wide range of Python versions.

   * wheel(6) (in this context) is a project that adds the `bdist_wheel'
     command to *Note distutils: 85./setuptools(7). This produces a
     cross platform binary packaging format (called “wheels” or
     “wheel files” and defined in PEP 427(8)) that allows Python
     libraries, even those including binary extensions, to be installed
     on a system without needing to be built locally.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi

(2) https://www.pypa.io/

(3) https://github.com/pypa

(4) https://bitbucket.org/pypa/

(5) https://setuptools.readthedocs.io/en/latest/

(6) https://wheel.readthedocs.org

(7) https://setuptools.readthedocs.io/en/latest/

(8) https://www.python.org/dev/peps/pep-0427


File: python.info,  Node: Open source licensing and collaboration,  Next: Installing the tools,  Prev: Key terms,  Up: Distributing Python Modules

8.2 Open source licensing and collaboration
===========================================

In most parts of the world, software is automatically covered by
copyright.  This means that other developers require explicit
permission to copy, use, modify and redistribute the software.

Open source licensing is a way of explicitly granting such permission
in a relatively consistent way, allowing developers to share and
collaborate efficiently by making common solutions to various problems
freely available.  This leaves many developers free to spend more time
focusing on the problems that are relatively unique to their specific
situation.

The distribution tools provided with Python are designed to make it
reasonably straightforward for developers to make their own
contributions back to that common pool of software if they choose to do
so.

The same distribution tools can also be used to distribute software
within an organisation, regardless of whether that software is
published as open source software or not.


File: python.info,  Node: Installing the tools,  Next: Reading the guide,  Prev: Open source licensing and collaboration,  Up: Distributing Python Modules

8.3 Installing the tools
========================

The standard library does not include build tools that support modern
Python packaging standards, as the core development team has found that
it is important to have standard tools that work consistently, even on
older versions of Python.

The currently recommended build and distribution tools can be installed
by invoking the `pip' module at the command line:

    python -m pip install setuptools wheel twine

     Note: For POSIX users (including Mac OS X and Linux users), these
     instructions assume the use of a *Note virtual environment: 2f42.

     For Windows users, these instructions assume that the option to
     adjust the system PATH environment variable was selected when
     installing Python.

The Python Packaging User Guide includes more details on the currently
recommended tools(1).

---------- Footnotes ----------

(1)
https://packaging.python.org/en/latest/current/#packaging-tool-recommendations


File: python.info,  Node: Reading the guide,  Next: How do I…?,  Prev: Installing the tools,  Up: Distributing Python Modules

8.4 Reading the guide
=====================

The Python Packaging User Guide covers the various key steps and
elements involved in creating a project:

   * Project structure(1)

   * Building and packaging the project(2)

   * Uploading the project to the Python Packaging Index(3)

---------- Footnotes ----------

(1) https://packaging.python.org/en/latest/distributing/

(2)
https://packaging.python.org/en/latest/distributing/#packaging-your-project

(3)
https://packaging.python.org/en/latest/distributing/#uploading-your-project-to-pypi


File: python.info,  Node: How do I…?,  Prev: Reading the guide,  Up: Distributing Python Modules

8.5 How do I…?
================

These are quick answers or links for some common tasks.

* Menu:

* … choose a name for my project?::
* … create and distribute binary extensions?::


File: python.info,  Node: … choose a name for my project?,  Next: … create and distribute binary extensions?,  Up: How do I…?

8.5.1 … choose a name for my project?
---------------------------------------

This isn’t an easy topic, but here are a few tips:

   * check the Python Packaging Index to see if the name is already in
     use

   * check popular hosting sites like GitHub, BitBucket, etc to see if
     there is already a project with that name

   * check what comes up in a web search for the name you’re
     considering

   * avoid particularly common words, especially ones with multiple
     meanings, as they can make it difficult for users to find your
     software when searching for it


File: python.info,  Node: … create and distribute binary extensions?,  Prev: … choose a name for my project?,  Up: How do I…?

8.5.2 … create and distribute binary extensions?
--------------------------------------------------

This is actually quite a complex topic, with a variety of alternatives
available depending on exactly what you’re aiming to achieve. See the
Python Packaging User Guide for more information and recommendations.

See also
........

Python Packaging User Guide: Binary Extensions(1)

---------- Footnotes ----------

(1) https://packaging.python.org/en/latest/extensions


File: python.info,  Node: Installing Python Modules,  Next: Python HOWTOs,  Prev: Distributing Python Modules,  Up: Top

9 Installing Python Modules
***************************

Email: <distutils-sig@python.org>

As a popular open source development project, Python has an active
supporting community of contributors and users that also make their
software available for other Python developers to use under open source
license terms.

This allows Python users to share and collaborate effectively,
benefiting from the solutions others have already created to common
(and sometimes even rare!) problems, as well as potentially
contributing their own solutions to the common pool.

This guide covers the installation part of the process. For a guide to
creating and sharing your own Python projects, refer to the *Note
distribution guide: 2ef.

     Note: For corporate and other institutional users, be aware that
     many organisations have their own policies around using and
     contributing to open source software. Please take such policies
     into account when making use of the distribution and installation
     tools provided with Python.

* Menu:

* Key terms: Key terms<2>.
* Basic usage::
* How do I …?::
* Common installation issues::


File: python.info,  Node: Key terms<2>,  Next: Basic usage,  Up: Installing Python Modules

9.1 Key terms
=============

   * `pip' is the preferred installer program. Starting with Python
     2.7.9, it is included by default with the Python binary installers.

   * a virtual environment is a semi-isolated Python environment that
     allows packages to be installed for use by a particular
     application, rather than being installed system wide

   * `virtualenv' is a third party tools for creating virtual
     environments, it is defaults to installing `pip' into all created
     virtual environments.

   * the Python Packaging Index(1) is a public repository of open
     source licensed packages made available for use by other Python
     users

   * the Python Packaging Authority(2) are the group of developers and
     documentation authors responsible for the maintenance and
     evolution of the standard packaging tools and the associated
     metadata and file format standards. They maintain a variety of
     tools, documentation and issue trackers on both GitHub(3) and
     BitBucket(4).

   * `distutils' is the original build and distribution system first
     added to the Python standard library in 1998. While direct use of
     `distutils' is being phased out, it still laid the foundation for
     the current packaging and distribution infrastructure, and it not
     only remains part of the standard library, but its name lives on
     in other ways (such as the name of the mailing list used to
     coordinate Python packaging standards development).

---------- Footnotes ----------

(1) https://pypi.python.org/pypi

(2) https://www.pypa.io/en/latest/

(3) https://github.com/pypa

(4) https://bitbucket.org/pypa/


File: python.info,  Node: Basic usage,  Next: How do I …?,  Prev: Key terms<2>,  Up: Installing Python Modules

9.2 Basic usage
===============

The standard packaging tools are all designed to be used from the
command line.

The following command will install the latest version of a module and
its dependencies from the Python Packaging Index:

    python -m pip install SomePackage

     Note: For POSIX users (including Mac OS X and Linux users), the
     examples in this guide assume the use of a *Note virtual
     environment: 2f42. You may install `virtualenv' to provide such
     environments using either pip (`pip install virtualenv') or
     through your system package manager (commonly called `virtualenv'
     or `python-virtualenv').

     For Windows users, the examples in this guide assume that the
     option to adjust the system PATH environment variable was selected
     when installing Python.

It’s also possible to specify an exact or minimum version directly on
the command line. When using comparator operators such as `>', `<' or
some other special character which get interpreted by shell, the
package name and the version should be enclosed within double quotes:

    python -m pip install SomePackage==1.0.4    # specific version
    python -m pip install "SomePackage>=1.0.4"  # minimum version

Normally, if a suitable module is already installed, attempting to
install it again will have no effect. Upgrading existing modules must
be requested explicitly:

    python -m pip install --upgrade SomePackage

More information and resources regarding `pip' and its capabilities can
be found in the Python Packaging User Guide(1).

See also
........

Python Packaging User Guide: Installing Python Distribution Packages(2)

---------- Footnotes ----------

(1) https://packaging.python.org

(2) https://packaging.python.org/en/latest/installing/


File: python.info,  Node: How do I …?,  Next: Common installation issues,  Prev: Basic usage,  Up: Installing Python Modules

9.3 How do I …?
=================

These are quick answers or links for some common tasks.

* Menu:

* … install pip in versions of Python prior to Python 2.7.9?: … install pip in versions of Python prior to Python 2 7 9?.
* … install packages just for the current user?::
* … install scientific Python packages?::
* … work with multiple versions of Python installed in parallel?::


File: python.info,  Node: … install pip in versions of Python prior to Python 2 7 9?,  Next: … install packages just for the current user?,  Up: How do I …?

9.3.1 … install `pip' in versions of Python prior to Python 2.7.9?
--------------------------------------------------------------------

Python only started bundling `pip' with Python 2.7.9. For earlier
versions, `pip' needs to be “bootstrapped” as described in the
Python Packaging User Guide.

See also
........

Python Packaging User Guide: Requirements for Installing Packages(1)

---------- Footnotes ----------

(1)
https://packaging.python.org/en/latest/installing/#requirements-for-installing-packages


File: python.info,  Node: … install packages just for the current user?,  Next: … install scientific Python packages?,  Prev: … install pip in versions of Python prior to Python 2 7 9?,  Up: How do I …?

9.3.2 … install packages just for the current user?
-----------------------------------------------------

Passing the `--user' option to `python -m pip install' will install a
package just for the current user, rather than for all users of the
system.


File: python.info,  Node: … install scientific Python packages?,  Next: … work with multiple versions of Python installed in parallel?,  Prev: … install packages just for the current user?,  Up: How do I …?

9.3.3 … install scientific Python packages?
---------------------------------------------

A number of scientific Python packages have complex binary
dependencies, and aren’t currently easy to install using `pip'
directly. At this point in time, it will often be easier for users to
install these packages by other means(1) rather than attempting to
install them with `pip'.

See also
........

Python Packaging User Guide: Installing Scientific Packages(2)

---------- Footnotes ----------

(1) https://packaging.python.org/en/latest/science/

(2) https://packaging.python.org/en/latest/science/


File: python.info,  Node: … work with multiple versions of Python installed in parallel?,  Prev: … install scientific Python packages?,  Up: How do I …?

9.3.4 … work with multiple versions of Python installed in parallel?
----------------------------------------------------------------------

On Linux, Mac OS X and other POSIX systems, use the versioned Python
commands in combination with the `-m' switch to run the appropriate
copy of `pip':

    python2   -m pip install SomePackage  # default Python 2
    python2.7 -m pip install SomePackage  # specifically Python 2.7
    python3   -m pip install SomePackage  # default Python 3
    python3.4 -m pip install SomePackage  # specifically Python 3.4

(appropriately versioned `pip' commands may also be available)

On Windows, use the `py' Python launcher in combination with the `-m'
switch:

    py -2   -m pip install SomePackage  # default Python 2
    py -2.7 -m pip install SomePackage  # specifically Python 2.7
    py -3   -m pip install SomePackage  # default Python 3
    py -3.4 -m pip install SomePackage  # specifically Python 3.4


File: python.info,  Node: Common installation issues,  Prev: How do I …?,  Up: Installing Python Modules

9.4 Common installation issues
==============================

* Menu:

* Installing into the system Python on Linux::
* Installing binary extensions::


File: python.info,  Node: Installing into the system Python on Linux,  Next: Installing binary extensions,  Up: Common installation issues

9.4.1 Installing into the system Python on Linux
------------------------------------------------

On Linux systems, a Python installation will typically be included as
part of the distribution. Installing into this Python installation
requires root access to the system, and may interfere with the
operation of the system package manager and other components of the
system if a component is unexpectedly upgraded using `pip'.

On such systems, it is often better to use a virtual environment or a
per-user installation when installing packages with `pip'.


File: python.info,  Node: Installing binary extensions,  Prev: Installing into the system Python on Linux,  Up: Common installation issues

9.4.2 Installing binary extensions
----------------------------------

Python has typically relied heavily on source based distribution, with
end users being expected to compile extension modules from source as
part of the installation process.

With the introduction of support for the binary `wheel' format, and the
ability to publish wheels for at least Windows and Mac OS X through the
Python Packaging Index, this problem is expected to diminish over time,
as users are more regularly able to install pre-built extensions rather
than needing to build them themselves.

Some of the solutions for installing scientific software(1) that is not
yet available as pre-built `wheel' files may also help with obtaining
other binary extensions without needing to build them locally.

See also
........

Python Packaging User Guide: Binary Extensions(2)

---------- Footnotes ----------

(1) https://packaging.python.org/en/latest/science/

(2) https://packaging.python.org/en/latest/extensions/


File: python.info,  Node: Python HOWTOs,  Next: Python Frequently Asked Questions,  Prev: Installing Python Modules,  Up: Top

10 Python HOWTOs
****************

Python HOWTOs are documents that cover a single, specific topic, and
attempt to cover it fairly completely. Modelled on the Linux
Documentation Project’s HOWTO collection, this collection is an
effort to foster documentation that’s more detailed than the Python
Library Reference.

Currently, the HOWTOs are:

* Menu:

* Porting Python 2 Code to Python 3::
* Porting Extension Modules to Python 3::
* Curses Programming with Python::
* Descriptor HowTo Guide::
* Idioms and Anti-Idioms in Python::
* Functional Programming HOWTO::
* Logging HOWTO::
* Logging Cookbook::
* Regular Expression HOWTO::
* Socket Programming HOWTO::
* Sorting HOW TO::
* Unicode HOWTO::
* HOWTO Fetch Internet Resources Using urllib2::
* HOWTO Use Python in the web::
* Argparse Tutorial::


File: python.info,  Node: Porting Python 2 Code to Python 3,  Next: Porting Extension Modules to Python 3,  Up: Python HOWTOs

10.1 Porting Python 2 Code to Python 3
======================================

author: Brett Cannon

Abstract
........

With Python 3 being the future of Python while Python 2 is still in
active use, it is good to have your project available for both major
releases of Python. This guide is meant to help you figure out how best
to support both Python 2 & 3 simultaneously.

If you are looking to port an extension module instead of pure Python
code, please see *Note Porting Extension Modules to Python 3: 2f59.

If you would like to read one core Python developer’s take on why
Python 3 came into existence, you can read Nick Coghlan’s Python 3 Q
& A(1).

For help with porting, you can email the python-porting(2) mailing list
with questions.

* Menu:

* The Short Explanation::
* Details::
* Dropping Python 2 support completely::

---------- Footnotes ----------

(1)
https://ncoghlan-devs-python-notes.readthedocs.org/en/latest/python3/questions_and_answers.html

(2) https://mail.python.org/mailman/listinfo/python-porting


File: python.info,  Node: The Short Explanation,  Next: Details,  Up: Porting Python 2 Code to Python 3

10.1.1 The Short Explanation
----------------------------

To make your project be single-source Python 2/3 compatible, the basic
steps are:

  1. Update your code to drop support for Python 2.5 or older
     (supporting only Python 2.7 is ideal)

  2. Make sure you have good test coverage (coverage.py(1) can help;
     `pip install coverage')

  3. Learn the differences between Python 2 & 3

  4. Use Modernize(2) or Futurize(3) to update your code (`pip install
     modernize' or `pip install future', respectively)

  5. Use Pylint(4) to help make sure you don’t regress on your Python
     3 support (if only supporting Python 2.7/3.4 or newer; `pip
     install pylint')

  6. Use caniusepython3(5) to find out which of your dependencies are
     blocking your use of Python 3 (`pip install caniusepython3')

  7. Once your dependencies are no longer blocking you, use continuous
     integration to make sure you stay compatible with Python 2 & 3
     (tox(6) can help test against multiple versions of Python; `pip
     install tox')

If you are dropping support for Python 2 entirely, then after you learn
the differences between Python 2 & 3 you can run 2to3(7) over your code
and skip the rest of the steps outlined above.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/coverage

(2) https://python-modernize.readthedocs.org/en/latest/

(3) http://python-future.org/automatic_conversion.html

(4) https://pypi.python.org/pypi/pylint

(5) https://pypi.python.org/pypi/caniusepython3

(6) https://pypi.python.org/pypi/tox

(7) https://docs.python.org/3/library/2to3.html


File: python.info,  Node: Details,  Next: Dropping Python 2 support completely,  Prev: The Short Explanation,  Up: Porting Python 2 Code to Python 3

10.1.2 Details
--------------

A key point about supporting Python 2 & 3 simultaneously is that you
can start `today'! Even if your dependencies are not supporting Python
3 yet that does not mean you can’t modernize your code `now' to
support Python 3. Most changes required to support Python 3 lead to
cleaner code using newer practices even in Python 2.

Another key point is that modernizing your Python 2 code to also support
Python 3 is largely automated for you. While you might have to make
some API decisions thanks to Python 3 clarifying text data versus
binary data, the lower-level work is now mostly done for you and thus
can at least benefit from the automated changes immediately.

Keep those key points in mind while you read on about the details of
porting your code to support Python 2 & 3 simultaneously.

* Menu:

* Drop support for Python 2.5 and older (at least): Drop support for Python 2 5 and older at least.
* Make sure you specify the proper version support in your setup.py file: Make sure you specify the proper version support in your setup py file.
* Have good test coverage::
* Learn the differences between Python 2 & 3::
* Update your code::
* Prevent compatibility regressions::
* Check which dependencies block your transition::
* Update your setup.py file to denote Python 3 compatibility: Update your setup py file to denote Python 3 compatibility.
* Use continuous integration to stay compatible::


File: python.info,  Node: Drop support for Python 2 5 and older at least,  Next: Make sure you specify the proper version support in your setup py file,  Up: Details

10.1.2.1 Drop support for Python 2.5 and older (at least)
.........................................................

While you can make Python 2.5 work with Python 3, it is `much' easier
if you only have to work with Python 2.6 or newer (and easier still if
you only have to work with Python 2.7). If dropping Python 2.5 is not
an option then the six(1) project can help you support Python 2.5 & 3
simultaneously (`pip install six'). Do realize, though, that nearly all
the projects listed in this HOWTO will not be available to you.

If you are able to only support Python 2.6 or newer, then the required
changes to your code should continue to look and feel like idiomatic
Python code. At worst you will have to use a function instead of a
method in some instances or have to import a function instead of using
a built-in one, but otherwise the overall transformation should not
feel foreign to you.

But please aim for Python 2.7. Bugfixes for that version of Python will
continue until 2020 while Python 2.6 is no longer supported. There are
also some tools mentioned in this HOWTO which do not support Python 2.6
(e.g., Pylint(2)), and this will become more commonplace as time goes
on.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/six

(2) https://pypi.python.org/pypi/pylint


File: python.info,  Node: Make sure you specify the proper version support in your setup py file,  Next: Have good test coverage,  Prev: Drop support for Python 2 5 and older at least,  Up: Details

10.1.2.2 Make sure you specify the proper version support in your `setup.py' file
.................................................................................

In your `setup.py' file you should have the proper trove classifier(1)
specifying what versions of Python you support. As your project does
not support Python 3 yet you should at least have `Programming Language
:: Python :: 2 :: Only' specified. Ideally you should also specify each
major/minor version of Python that you do support, e.g.  `Programming
Language :: Python :: 2.7'.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi?%3Aaction=list_classifiers


File: python.info,  Node: Have good test coverage,  Next: Learn the differences between Python 2 & 3,  Prev: Make sure you specify the proper version support in your setup py file,  Up: Details

10.1.2.3 Have good test coverage
................................

Once you have your code supporting the oldest version of Python 2 you
want it to, you will want to make sure your test suite has good
coverage. A good rule of thumb is that if you want to be confident
enough in your test suite that any failures that appear after having
tools rewrite your code are actual bugs in the tools and not in your
code. If you want a number to aim for, try to get over 80% coverage
(and don’t feel bad if you can’t easily get past 90%). If you
don’t already have a tool to measure test coverage then
coverage.py(1) is recommended.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/coverage


File: python.info,  Node: Learn the differences between Python 2 & 3,  Next: Update your code,  Prev: Have good test coverage,  Up: Details

10.1.2.4 Learn the differences between Python 2 & 3
...................................................

Once you have your code well-tested you are ready to begin porting your
code to Python 3! But to fully understand how your code is going to
change and what you want to look out for while you code, you will want
to learn what changes Python 3 makes in terms of Python 2. Typically
the two best ways of doing that is reading the "What's New"(1) doc for
each release of Python 3 and the Porting to Python 3(2) book (which is
free online). There is also a handy cheat sheet(3) from the
Python-Future project.

---------- Footnotes ----------

(1) https://docs.python.org/3/whatsnew/index.html

(2) http://python3porting.com/

(3) http://python-future.org/compatible_idioms.html


File: python.info,  Node: Update your code,  Next: Prevent compatibility regressions,  Prev: Learn the differences between Python 2 & 3,  Up: Details

10.1.2.5 Update your code
.........................

Once you feel like you know what is different in Python 3 compared to
Python 2, it’s time to update your code! You have a choice between
two tools in porting your code automatically: Modernize(1) and
Futurize(2). Which tool you choose will depend on how much like Python
3 you want your code to be. Futurize(3) does its best to make Python 3
idioms and practices exist in Python 2, e.g. backporting the `bytes'
type from Python 3 so that you have semantic parity between the major
versions of Python. Modernize(4), on the other hand, is more
conservative and targets a Python 2/3 subset of Python, relying on
six(5) to help provide compatibility.

Regardless of which tool you choose, they will update your code to run
under Python 3 while staying compatible with the version of Python 2
you started with.  Depending on how conservative you want to be, you
may want to run the tool over your test suite first and visually
inspect the diff to make sure the transformation is accurate. After you
have transformed your test suite and verified that all the tests still
pass as expected, then you can transform your application code knowing
that any tests which fail is a translation failure.

Unfortunately the tools can’t automate everything to make your code
work under Python 3 and so there are a handful of things you will need
to update manually to get full Python 3 support (which of these steps
are necessary vary between the tools). Read the documentation for the
tool you choose to use to see what it fixes by default and what it can
do optionally to know what will (not) be fixed for you and what you may
have to fix on your own (e.g. using `io.open()' over the built-in
`open()' function is off by default in Modernize). Luckily, though,
there are only a couple of things to watch out for which can be
considered large issues that may be hard to debug if not watched for.

* Menu:

* Division::
* Text versus binary data::

---------- Footnotes ----------

(1) https://python-modernize.readthedocs.org/en/latest/

(2) http://python-future.org/automatic_conversion.html

(3) http://python-future.org/automatic_conversion.html

(4) https://python-modernize.readthedocs.org/en/latest/

(5) https://pypi.python.org/pypi/six


File: python.info,  Node: Division,  Next: Text versus binary data,  Up: Update your code

10.1.2.6 Division
.................

In Python 3, `5 / 2 == 2.5' and not `2'; all division between `int'
values result in a `float'. This change has actually been planned since
Python 2.2 which was released in 2002. Since then users have been
encouraged to add `from __future__ import division' to any and all
files which use the `/' and `//' operators or to be running the
interpreter with the `-Q' flag. If you have not been doing this then
you will need to go through your code and do two things:

  1. Add `from __future__ import division' to your files

  2. Update any division operator as necessary to either use `//' to
     use floor division or continue using `/' and expect a float

The reason that `/' isn’t simply translated to `//' automatically is
that if an object defines its own `__div__' method but not
`__floordiv__' then your code would begin to fail.


File: python.info,  Node: Text versus binary data,  Prev: Division,  Up: Update your code

10.1.2.7 Text versus binary data
................................

In Python 2 you could use the `str' type for both text and binary data.
Unfortunately this confluence of two different concepts could lead to
brittle code which sometimes worked for either kind of data, sometimes
not. It also could lead to confusing APIs if people didn’t explicitly
state that something that accepted `str' accepted either text or binary
data instead of one specific type. This complicated the situation
especially for anyone supporting multiple languages as APIs wouldn’t
bother explicitly supporting `unicode' when they claimed text data
support.

To make the distinction between text and binary data clearer and more
pronounced, Python 3 did what most languages created in the age of the
internet have done and made text and binary data distinct types that
cannot blindly be mixed together (Python predates widespread access to
the internet). For any code that only deals with text or only binary
data, this separation doesn’t pose an issue. But for code that has to
deal with both, it does mean you might have to now care about when you
are using text compared to binary data, which is why this cannot be
entirely automated.

To start, you will need to decide which APIs take text and which take
binary (it is `highly' recommended you don’t design APIs that can
take both due to the difficulty of keeping the code working; as stated
earlier it is difficult to do well). In Python 2 this means making sure
the APIs that take text can work with `unicode' in Python 2 and those
that work with binary data work with the `bytes' type from Python 3 and
thus a subset of `str' in Python 2 (which the `bytes' type in Python 2
is an alias for). Usually the biggest issue is realizing which methods
exist for which types in Python 2 & 3 simultaneously (for text that’s
`unicode' in Python 2 and `str' in Python 3, for binary that’s
`str'/`bytes' in Python 2 and `bytes' in Python 3). The following table
lists the `unique' methods of each data type across Python 2 & 3 (e.g.,
the `decode()' method is usable on the equivalent binary data type in
either Python 2 or 3, but it can’t be used by the text data type
consistently between Python 2 and 3 because `str' in Python 3 doesn’t
have the method).

`Text data'                  `Binary data'
__mod__ (`%' operator)       
                             decode
encode                       
format                       
isdecimal                    
isnumeric                    

Making the distinction easier to handle can be accomplished by encoding
and decoding between binary data and text at the edge of your code.
This means that when you receive text in binary data, you should
immediately decode it. And if your code needs to send text as binary
data then encode it as late as possible.  This allows your code to work
with only text internally and thus eliminates having to keep track of
what type of data you are working with.

The next issue is making sure you know whether the string literals in
your code represent text or binary data. At minimum you should add a
`b' prefix to any literal that presents binary data. For text you
should either use the `from __future__ import unicode_literals'
statement or add a `u' prefix to the text literal.

As part of this dichotomy you also need to be careful about opening
files.  Unless you have been working on Windows, there is a chance you
have not always bothered to add the `b' mode when opening a binary file
(e.g., `rb' for binary reading).  Under Python 3, binary files and text
files are clearly distinct and mutually incompatible; see the *Note io:
fa. module for details.  Therefore, you `must' make a decision of
whether a file will be used for binary access (allowing binary data to
be read and/or written) or text access (allowing text data to be read
and/or written). You should also use *Note io.open(): e4c.  for opening
files instead of the built-in *Note open(): 2d9. function as the *Note
io: fa.  module is consistent from Python 2 to 3 while the built-in
*Note open(): 2d9. function is not (in Python 3 it’s actually *Note
io.open(): e4c.).

The constructors of both `str' and `bytes' have different semantics for
the same arguments between Python 2 & 3. Passing an integer to `bytes'
in Python 2 will give you the string representation of the integer:
`bytes(3) == '3''.  But in Python 3, an integer argument to `bytes'
will give you a bytes object as long as the integer specified, filled
with null bytes: `bytes(3) == b'\x00\x00\x00''. A similar worry is
necessary when passing a bytes object to `str'. In Python 2 you just
get the bytes object back: `str(b'3') == b'3''. But in Python 3 you get
the string representation of the bytes object: `str(b'3') == "b'3'"'.

Finally, the indexing of binary data requires careful handling (slicing
does `not' require any special handling). In Python 2, `b'123'[1] ==
b'2'' while in Python 3 `b'123'[1] == 50'. Because binary data is
simply a collection of binary numbers, Python 3 returns the integer
value for the byte you index on. But in Python 2 because `bytes ==
str', indexing returns a one-item slice of bytes. The six(1) project
has a function named `six.indexbytes()' which will return an integer
like in Python 3: `six.indexbytes(b'123', 1)'.

To summarize:

  1. Decide which of your APIs take text and which take binary data

  2. Make sure that your code that works with text also works with
     `unicode' and code for binary data works with `bytes' in Python 2
     (see the table above for what methods you cannot use for each type)

  3. Mark all binary literals with a `b' prefix, use a `u' prefix or
     *Note __future__: 1. import statement for text literals

  4. Decode binary data to text as soon as possible, encode text as
     binary data as late as possible

  5. Open files using *Note io.open(): e4c. and make sure to specify
     the `b' mode when appropriate

  6. Be careful when indexing binary data

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/six


File: python.info,  Node: Prevent compatibility regressions,  Next: Check which dependencies block your transition,  Prev: Update your code,  Up: Details

10.1.2.8 Prevent compatibility regressions
..........................................

Once you have fully translated your code to be compatible with Python
3, you will want to make sure your code doesn’t regress and stop
working under Python 3. This is especially true if you have a
dependency which is blocking you from actually running under Python 3
at the moment.

To help with staying compatible, any new modules you create should have
at least the following block of code at the top of it:

    from __future__ import absolute_import
    from __future__ import division
    from __future__ import print_function
    from __future__ import unicode_literals

You can also run Python 2 with the `-3' flag to be warned about various
compatibility issues your code triggers during execution. If you turn
warnings into errors with `-Werror' then you can make sure that you
don’t accidentally miss a warning.

You can also use the Pylint(1) project and its `--py3k' flag to lint
your code to receive warnings when your code begins to deviate from
Python 3 compatibility. This also prevents you from having to run
Modernize(2) or Futurize(3) over your code regularly to catch
compatibility regressions. This does require you only support Python
2.7 and Python 3.4 or newer as that is Pylint’s minimum Python
version support.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/pylint

(2) https://python-modernize.readthedocs.org/en/latest/

(3) http://python-future.org/automatic_conversion.html


File: python.info,  Node: Check which dependencies block your transition,  Next: Update your setup py file to denote Python 3 compatibility,  Prev: Prevent compatibility regressions,  Up: Details

10.1.2.9 Check which dependencies block your transition
.......................................................

`After' you have made your code compatible with Python 3 you should
begin to care about whether your dependencies have also been ported.
The caniusepython3(1) project was created to help you determine which
projects – directly or indirectly – are blocking you from
supporting Python 3. There is both a command-line tool as well as a web
interface at <https://caniusepython3.com> .

The project also provides code which you can integrate into your test
suite so that you will have a failing test when you no longer have
dependencies blocking you from using Python 3. This allows you to avoid
having to manually check your dependencies and to be notified quickly
when you can start running on Python 3.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/caniusepython3


File: python.info,  Node: Update your setup py file to denote Python 3 compatibility,  Next: Use continuous integration to stay compatible,  Prev: Check which dependencies block your transition,  Up: Details

10.1.2.10 Update your `setup.py' file to denote Python 3 compatibility
......................................................................

Once your code works under Python 3, you should update the classifiers
in your `setup.py' to contain `Programming Language :: Python :: 3' and
to not specify sole Python 2 support. This will tell anyone using your
code that you support Python 2 `and' 3. Ideally you will also want to
add classifiers for each major/minor version of Python you now support.


File: python.info,  Node: Use continuous integration to stay compatible,  Prev: Update your setup py file to denote Python 3 compatibility,  Up: Details

10.1.2.11 Use continuous integration to stay compatible
.......................................................

Once you are able to fully run under Python 3 you will want to make
sure your code always works under both Python 2 & 3. Probably the best
tool for running your tests under multiple Python interpreters is
tox(1). You can then integrate tox with your continuous integration
system so that you never accidentally break Python 2 or 3 support.

You may also want to use the `-bb' flag with the Python 3 interpreter to
trigger an exception when you are comparing bytes to strings. Usually
it’s simply `False', but if you made a mistake in your separation of
text/binary data handling you may be accidentally comparing text and
binary data. This flag will raise an exception when that occurs to help
track down such cases.

And that’s mostly it! At this point your code base is compatible with
both Python 2 and 3 simultaneously. Your testing will also be set up so
that you don’t accidentally break Python 2 or 3 compatibility
regardless of which version you typically run your tests under while
developing.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/tox


File: python.info,  Node: Dropping Python 2 support completely,  Prev: Details,  Up: Porting Python 2 Code to Python 3

10.1.3 Dropping Python 2 support completely
-------------------------------------------

If you are able to fully drop support for Python 2, then the steps
required to transition to Python 3 simplify greatly.

  1. Update your code to only support Python 2.7

  2. Make sure you have good test coverage (coverage.py(1) can help)

  3. Learn the differences between Python 2 & 3

  4. Use 2to3(2) to rewrite your code to run only under Python 3

After this your code will be fully Python 3 compliant but in a way that
is not supported by Python 2. You should also update the classifiers in
your `setup.py' to contain `Programming Language :: Python :: 3 ::
Only'.

---------- Footnotes ----------

(1) https://pypi.python.org/pypi/coverage

(2) https://docs.python.org/3/library/2to3.html

